<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  <subtitle>wshunli`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-09-23T03:13:59.279Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录2018年秋季校园招聘超图集团面试</title>
    <link href="https://www.wshunli.com/posts/32fe73ed.html"/>
    <id>https://www.wshunli.com/posts/32fe73ed.html</id>
    <published>2018-09-22T10:02:29.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘超图集团面试（Java开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘欧珀移动面试</title>
    <link href="https://www.wshunli.com/posts/f61bf791.html"/>
    <id>https://www.wshunli.com/posts/f61bf791.html</id>
    <published>2018-09-22T10:02:07.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘欧珀移动面试（Java工程师（ColorOS））。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘猿辅导面试</title>
    <link href="https://www.wshunli.com/posts/c00883be.html"/>
    <id>https://www.wshunli.com/posts/c00883be.html</id>
    <published>2018-09-21T14:26:48.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘猿辅导面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘极验验证面试</title>
    <link href="https://www.wshunli.com/posts/d3039901.html"/>
    <id>https://www.wshunli.com/posts/d3039901.html</id>
    <published>2018-09-20T14:02:46.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘极验验证面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘合众思壮面试</title>
    <link href="https://www.wshunli.com/posts/d5b4b71d.html"/>
    <id>https://www.wshunli.com/posts/d5b4b71d.html</id>
    <published>2018-09-20T14:02:42.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘合众思壮面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘四维图新面试</title>
    <link href="https://www.wshunli.com/posts/48b7610a.html"/>
    <id>https://www.wshunli.com/posts/48b7610a.html</id>
    <published>2018-09-19T12:09:23.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘四维图新面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘网易杭州面试</title>
    <link href="https://www.wshunli.com/posts/2fbed755.html"/>
    <id>https://www.wshunli.com/posts/2fbed755.html</id>
    <published>2018-09-19T12:09:17.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘网易杭州面试（测试开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘金山办公面试</title>
    <link href="https://www.wshunli.com/posts/ec86f75.html"/>
    <id>https://www.wshunli.com/posts/ec86f75.html</id>
    <published>2018-09-19T12:09:13.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘金山办公面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘中兴通讯面试</title>
    <link href="https://www.wshunli.com/posts/7189e0ee.html"/>
    <id>https://www.wshunli.com/posts/7189e0ee.html</id>
    <published>2018-09-18T13:55:52.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘中兴通讯面试（软件开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘顺丰科技面试</title>
    <link href="https://www.wshunli.com/posts/b8083d29.html"/>
    <id>https://www.wshunli.com/posts/b8083d29.html</id>
    <published>2018-09-18T10:05:15.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘顺丰科技面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘视源股份面试</title>
    <link href="https://www.wshunli.com/posts/1f4b1509.html"/>
    <id>https://www.wshunli.com/posts/1f4b1509.html</id>
    <published>2018-09-18T09:46:07.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘视源股份面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Glide 图片加载框架源码解析</title>
    <link href="https://www.wshunli.com/posts/c47606cc.html"/>
    <id>https://www.wshunli.com/posts/c47606cc.html</id>
    <published>2018-09-17T05:18:23.000Z</published>
    <updated>2018-09-23T03:13:59.267Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Glide 图片加载框架，包含简单的使用和源码解析。<strong>本文内容基于 Glide 4.7.1 版本</strong>。</p><p>Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。Glide 提供了易用的 API，高性能、可扩展的图片解码管道，以及自动的资源池技术。<a href="https://muyangmin.github.io/glide-docs-cn/" rel="external nofollow noopener noreferrer" target="_blank">https://muyangmin.github.io/glide-docs-cn/</a></p><p>Glide 支持拉取，解码和展示视频快照，图片，和 GIF 动画。Glide 的 API 是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide 使用的是一个定制化的基于 HttpUrlConnection 的栈，但同时也提供了与 Google Volley 和 Square OkHttp 快速集成的工具库。</p><h1 id="Glide-的简单使用"><a href="#Glide-的简单使用" class="headerlink" title="Glide 的简单使用"></a>Glide 的简单使用</h1><p>前面有比较详细的介绍，这里不再赘述。</p><p>Android 图片加载框架 Glide 简单使用 | CirGIS</p><p><a href="https://www.wshunli.com/posts/d82d8606.html">https://www.wshunli.com/posts/d82d8606.html</a></p><h1 id="Glide-的源码解析"><a href="#Glide-的源码解析" class="headerlink" title="Glide 的源码解析"></a>Glide 的源码解析</h1><p>1、我们先看 Glide 的 with() 方法</p><pre><code class="lang-Java">  @NonNull  public static RequestManager with(@NonNull Context context) {    return getRetriever(context).get(context);  }  @NonNull  public static RequestManager with(@NonNull Activity activity) {    return getRetriever(activity).get(activity);  }  @NonNull  public static RequestManager with(@NonNull FragmentActivity activity) {    return getRetriever(activity).get(activity);  }  @NonNull  public static RequestManager with(@NonNull Fragment fragment) {    return getRetriever(fragment.getActivity()).get(fragment);  }  @NonNull  public static RequestManager with(@NonNull View view) {    return getRetriever(view.getContext()).get(view);  }</code></pre><p>未完待续。。</p><blockquote><p>参考资料<br>1、Glide源码分析 | lightSky’Blog<br><a href="http://www.lightskystreet.com/2015/10/12/glide_source_analysis/" rel="external nofollow noopener noreferrer" target="_blank">http://www.lightskystreet.com/2015/10/12/glide_source_analysis/</a><br>2、Android Glide源码解析 - 简书<br><a href="https://www.jianshu.com/p/0c383eaa5675" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0c383eaa5675</a><br>3、Android Glide源码解析 | Frodo’s Blog<br><a href="http://frodoking.github.io/2015/10/10/android-glide/" rel="external nofollow noopener noreferrer" target="_blank">http://frodoking.github.io/2015/10/10/android-glide/</a><br>4、Android源码分析：手把手带你分析 Glide的缓存功能 - CSDN博客<br><a href="https://blog.csdn.net/carson_ho/article/details/79256892" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/carson_ho/article/details/79256892</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Glide 图片加载框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 Glide 4.7.1 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。Glide 提供了易用的 API，高性能、可
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Glide" scheme="https://www.wshunli.com/tags/Glide/"/>
    
      <category term="图片加载" scheme="https://www.wshunli.com/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 网络框架源码解析</title>
    <link href="https://www.wshunli.com/posts/2bda06ba.html"/>
    <id>https://www.wshunli.com/posts/2bda06ba.html</id>
    <published>2018-09-16T01:38:40.000Z</published>
    <updated>2018-09-23T03:13:59.271Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Retrofit 网络框架，包含简单的使用和源码解析。<strong>本文内容基于 Retrofit 2.4.0 版本</strong>。</p><p>Type-safe HTTP client for Android and Java by Square, Inc. <a href="http://square.github.io/retrofit/" rel="external nofollow noopener noreferrer" target="_blank">http://square.github.io/retrofit/</a></p><p>前面介绍过 OkHttp ，Retrofit 是对 OkHttp 网络请求框架的封装，前者专注于接口的封装，后者专注于真正的网络请求。</p><p><img src="https://img.wshunli.com/Android/Retrofit/Retrofit_OkHttp.png" alt="封装流程图"></p><p>应用程序通过 Retrofit 请求网络，实际上是由 Retrofit 接口层封装请求参数、Header、Url 等信息，由 OkHttp 完成实际的请求操作；在服务端返回数据后，OkHttp 将原始的结果交给 Retrofit，Retrofit 根据用户的需求对结果进行解析。</p><h1 id="Retrofit-的简单使用"><a href="#Retrofit-的简单使用" class="headerlink" title="Retrofit 的简单使用"></a>Retrofit 的简单使用</h1><p>参考官网的介绍：</p><p>1、创建 HTTP API 接口</p><pre><code class="lang-Java">public interface GitHubService {  @GET(&quot;users/{user}/repos&quot;)  Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path(&quot;user&quot;) String user);}</code></pre><p>2、创建 Retrofit 实例，并实现接口实例</p><pre><code class="lang-Java">Retrofit retrofit = new Retrofit.Builder()    .baseUrl(&quot;https://api.github.com/&quot;)    .build();GitHubService service = retrofit.create(GitHubService.class);</code></pre><p>3、创建请求实例</p><pre><code class="lang-Java">Call&lt;List&lt;Repo&gt;&gt; call = service.listRepos(&quot;wshunli&quot;);</code></pre><p>4、发送网络请求</p><pre><code class="lang-Java">// 同步请求call.execute();// 异步请求call.enqueue(new Callback&lt;List&lt;Repo&gt;&gt;() {    @Override    public void onResponse(Call&lt;List&lt;Repo&gt;&gt; call, Response&lt;List&lt;Repo&gt;&gt; response) {    }    @Override    public void onFailure(Call&lt;List&lt;Repo&gt;&gt; call, Throwable t) {        Log.d(TAG, &quot;onFailure: &quot;);    }});</code></pre><p>和 OkHttp 流程差不多，特别是发送请求方法名字都没有变。</p><h1 id="Retrofit-的源码分析"><a href="#Retrofit-的源码分析" class="headerlink" title="Retrofit 的源码分析"></a>Retrofit 的源码分析</h1><p>Retrofit 网络请求完整的流程图如下：</p><p><img src="https://img.wshunli.com/Android/Retrofit/retrofit_full_process.min.png" alt="Retrofit 流程图"></p><p>下面详细介绍。</p><h2 id="创建-Retrofit-实例"><a href="#创建-Retrofit-实例" class="headerlink" title="创建 Retrofit 实例"></a>创建 Retrofit 实例</h2><p>Retrofit 实例化，也是使用的建造者模式。</p><p><img src="https://img.wshunli.com/Android/Retrofit/retrofit_builder.png" alt="retrofit_builder"></p><p>我们先看 Builder 成员变量的含义：</p><pre><code class="lang-Java">// Retrofit#Builderpublic static final class Builder {// 当前系统环境private final Platform platform;// 网络请求器的工厂private @Nullable okhttp3.Call.Factory callFactory;// 网络请求地址private HttpUrl baseUrl;// 数据转换器工厂集合private final List&lt;Converter.Factory&gt; converterFactories = new ArrayList&lt;&gt;();// 网络请求适配器工厂集合private final List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;();// 回调方法执行器private @Nullable Executor callbackExecutor;// 标志位private boolean validateEagerly;</code></pre><p>1、首先构造函数中通过 <code>Platform.get()</code> 初始化了平台参数</p><pre><code class="lang-Java">Builder(Platform platform) {    this.platform = platform;}public Builder() {    this(Platform.get());}Builder(Retrofit retrofit) {    platform = Platform.get();    callFactory = retrofit.callFactory;    baseUrl = retrofit.baseUrl;    converterFactories.addAll(retrofit.converterFactories);    // Remove the default BuiltInConverters instance added by build().    converterFactories.remove(0);    callAdapterFactories.addAll(retrofit.callAdapterFactories);    // Remove the default, platform-aware call adapter added by build().    callAdapterFactories.remove(callAdapterFactories.size() - 1);    callbackExecutor = retrofit.callbackExecutor;    validateEagerly = retrofit.validateEagerly;}</code></pre><p>我们可以看下判断方法：</p><pre><code class="lang-Java">// Platformclass Platform {  private static final Platform PLATFORM = findPlatform();  static Platform get() {    return PLATFORM;  }  private static Platform findPlatform() {    try {      Class.forName(&quot;android.os.Build&quot;);      if (Build.VERSION.SDK_INT != 0) {        return new Android();      }    } catch (ClassNotFoundException ignored) {    }    try {      Class.forName(&quot;java.util.Optional&quot;);      return new Java8();    } catch (ClassNotFoundException ignored) {    }    return new Platform();  }  /* 省略部分无关代码 */}</code></pre><p>后面如果有需要，我们也可以直接拷贝。</p><p>2、然后设置 Retrofit 所需的参数即可</p><pre><code class="lang-Java">public Builder baseUrl(String baseUrl) {    checkNotNull(baseUrl, &quot;baseUrl == null&quot;);    HttpUrl httpUrl = HttpUrl.parse(baseUrl);    if (httpUrl == null) {    throw new IllegalArgumentException(&quot;Illegal URL: &quot; + baseUrl);    }    return baseUrl(httpUrl);}public Builder baseUrl(HttpUrl baseUrl) {    checkNotNull(baseUrl, &quot;baseUrl == null&quot;);    List&lt;String&gt; pathSegments = baseUrl.pathSegments();    if (!&quot;&quot;.equals(pathSegments.get(pathSegments.size() - 1))) {    throw new IllegalArgumentException(&quot;baseUrl must end in /: &quot; + baseUrl);    }    this.baseUrl = baseUrl;    return this;}/** Add converter factory for serialization and deserialization of objects. */public Builder addConverterFactory(Converter.Factory factory) {    converterFactories.add(checkNotNull(factory, &quot;factory == null&quot;));    return this;}public Builder addCallAdapterFactory(CallAdapter.Factory factory) {    callAdapterFactories.add(checkNotNull(factory, &quot;factory == null&quot;));    return this;}</code></pre><p>3、最后是 build() 方法</p><pre><code class="lang-Java">public Retrofit build() {    if (baseUrl == null) {    throw new IllegalStateException(&quot;Base URL required.&quot;);    }    okhttp3.Call.Factory callFactory = this.callFactory;    if (callFactory == null) {    callFactory = new OkHttpClient();    }    Executor callbackExecutor = this.callbackExecutor;    if (callbackExecutor == null) {    callbackExecutor = platform.defaultCallbackExecutor();    }    // Make a defensive copy of the adapters and add the default Call adapter.    List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;(this.callAdapterFactories);    callAdapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));    // Make a defensive copy of the converters.    List&lt;Converter.Factory&gt; converterFactories =        new ArrayList&lt;&gt;(1 + this.converterFactories.size());    // Add the built-in converter factory first. This prevents overriding its behavior but also    // ensures correct behavior when using converters that consume all types.    converterFactories.add(new BuiltInConverters());    converterFactories.addAll(this.converterFactories);    return new Retrofit(callFactory, baseUrl, unmodifiableList(converterFactories),        unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);}</code></pre><h2 id="创建-API-实例"><a href="#创建-API-实例" class="headerlink" title="创建 API 实例"></a>创建 API 实例</h2><p>获取 API 实例使用 Retrofit 的 <code>create()</code> 方法</p><pre><code class="lang-Java">// Retrofit#create()public &lt;T&gt; T create(final Class&lt;T&gt; service) {    Utils.validateServiceInterface(service);    if (validateEagerly) {        eagerlyValidateMethods(service);    }    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] { service },        new InvocationHandler() {            private final Platform platform = Platform.get();            @Override public Object invoke(Object proxy, Method method, @Nullable Object[] args)                throws Throwable {            // If the method is a method from Object then defer to normal invocation.            if (method.getDeclaringClass() == Object.class) {                return method.invoke(this, args);            }            if (platform.isDefaultMethod(method)) {                return platform.invokeDefaultMethod(method, service, proxy, args);            }            ServiceMethod&lt;Object, Object&gt; serviceMethod =                (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);            OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);            return serviceMethod.adapt(okHttpCall);            }        });}</code></pre><p>创建 API 实例使用的是 <strong>动态代理</strong> 设计模式。</p><h2 id="创建请求实例"><a href="#创建请求实例" class="headerlink" title="创建请求实例"></a>创建请求实例</h2><p>创建请求实例，跟钱买你的动态代理有关。</p><pre><code class="lang-Java">// Retrofit#create()ServiceMethod&lt;Object, Object&gt; serviceMethod =    (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);return serviceMethod.adapt(okHttpCall);</code></pre><p>1、<code>loadServiceMethod()</code> 方法</p><p>一个 <code>ServiceMethod</code> 对应于一个 API 接口的一个方法，<code>loadServiceMethod()</code> 方法负责加载 <code>ServiceMethod</code></p><pre><code class="lang-Java">// Retrofit#loadServiceMethod()ServiceMethod&lt;?, ?&gt; loadServiceMethod(Method method) {    ServiceMethod&lt;?, ?&gt; result = serviceMethodCache.get(method);    if (result != null) return result;    synchronized (serviceMethodCache) {        result = serviceMethodCache.get(method);        if (result == null) {        result = new ServiceMethod.Builder&lt;&gt;(this, method).build();        serviceMethodCache.put(method, result);        }    }    return result;}</code></pre><p>2、<code>OkHttpCall</code> 类</p><p><code>OkHttpCall</code> 实现了 <code>retrofit2.Call</code> ，我们通常会使用它的 <code>execute()</code> 和 <code>enqueue()</code> 接口。</p><pre><code class="lang-Java">OkHttpCall(ServiceMethod&lt;T, ?&gt; serviceMethod, @Nullable Object[] args) {    this.serviceMethod = serviceMethod;    this.args = args;}</code></pre><p>构造方法也没有什么好看的。</p><h2 id="发送网络请求"><a href="#发送网络请求" class="headerlink" title="发送网络请求"></a>发送网络请求</h2><p>发送网络请求其实也就是 <code>OkHttpCall</code> 类中的方法。</p><p>1、<strong>同步请求</strong> 使用 <code>execute()</code> 方法</p><pre><code class="lang-Java">// OkHttpCall#execute()@Override public Response&lt;T&gt; execute() throws IOException {    okhttp3.Call call;    synchronized (this) {        if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);        executed = true;        if (creationFailure != null) {            if (creationFailure instanceof IOException) {                throw (IOException) creationFailure;            } else if (creationFailure instanceof RuntimeException) {                throw (RuntimeException) creationFailure;            } else {                throw (Error) creationFailure;            }        }        call = rawCall;        if (call == null) {            try {                call = rawCall = createRawCall();            } catch (IOException | RuntimeException | Error e) {                throwIfFatal(e); //  Do not assign a fatal error to creationFailure.                creationFailure = e;                throw e;            }        }    }    if (canceled) {        call.cancel();    }    return parseResponse(call.execute());}</code></pre><p>这里就是 Retrofit 和 OkHttp 交互的核心了，分为三步：</p><p>（1）创建 <code>okhttp3.Call</code> ，包括构造参数</p><pre><code class="lang-Java">private okhttp3.Call createRawCall() throws IOException {    okhttp3.Call call = serviceMethod.toCall(args);    if (call == null) {        throw new NullPointerException(&quot;Call.Factory returned null.&quot;);    }    return call;}</code></pre><p>（2）执行网络请求，也就是 OkHttp 的同步网络请求</p><pre><code class="lang-Java">call.execute()</code></pre><p>（3）解析返回的结果</p><pre><code class="lang-Java">Response&lt;T&gt; parseResponse(okhttp3.Response rawResponse) throws IOException {    ResponseBody rawBody = rawResponse.body();    // Remove the body&#39;s source (the only stateful object) so we can pass the response along.    rawResponse = rawResponse.newBuilder()        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))        .build();    int code = rawResponse.code();    if (code &lt; 200 || code &gt;= 300) {        try {        // Buffer the entire body to avoid future I/O.        ResponseBody bufferedBody = Utils.buffer(rawBody);        return Response.error(bufferedBody, rawResponse);        } finally {        rawBody.close();        }    }    if (code == 204 || code == 205) {        rawBody.close();        return Response.success(null, rawResponse);    }    ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);    try {        T body = serviceMethod.toResponse(catchingBody);        return Response.success(body, rawResponse);    } catch (RuntimeException e) {        // If the underlying source threw an exception, propagate that rather than indicating it was        // a runtime exception.        catchingBody.throwIfCaught();        throw e;    }}</code></pre><p>2、<strong>异步请求</strong> 使用 <code>enqueue()</code> 方法</p><pre><code class="lang-Java">@Override public void enqueue(final Callback&lt;T&gt; callback) {    checkNotNull(callback, &quot;callback == null&quot;);    okhttp3.Call call;    Throwable failure;    synchronized (this) {        if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);        executed = true;        call = rawCall;        failure = creationFailure;        if (call == null &amp;&amp; failure == null) {        try {            call = rawCall = createRawCall();        } catch (Throwable t) {            throwIfFatal(t);            failure = creationFailure = t;        }        }    }    if (failure != null) {        callback.onFailure(this, failure);        return;    }    if (canceled) {        call.cancel();    }    call.enqueue(new okhttp3.Callback() {        @Override public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse) {        Response&lt;T&gt; response;        try {            response = parseResponse(rawResponse);        } catch (Throwable e) {            callFailure(e);            return;        }        try {            callback.onResponse(OkHttpCall.this, response);        } catch (Throwable t) {            t.printStackTrace();        }        }        @Override public void onFailure(okhttp3.Call call, IOException e) {        callFailure(e);        }        private void callFailure(Throwable e) {        try {            callback.onFailure(OkHttpCall.this, e);        } catch (Throwable t) {            t.printStackTrace();        }        }    });}</code></pre><p>我们可以看到和同步请求是一致的，实际请求交给了 <code>okhttp3.Call#enqueue(Callback responseCallback)</code> 来实现，并在它的 <code>callback</code> 中调用 <code>parseResponse()</code> 解析响应数据，并转发给传入的 <code>callback</code> 。</p><p>Retrofit 源码就先介绍到这里了，后面有机会再详细介绍。</p><blockquote><p>参考资料<br>1、Retrofit分析-漂亮的解耦套路 - 简书<br><a href="https://www.jianshu.com/p/45cb536be2f4" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/45cb536be2f4</a><br>2、Android：手把手带你 深入读懂 Retrofit 2.0 源码 - 简书<br><a href="https://www.jianshu.com/p/0c055ad46b6c" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0c055ad46b6c</a><br>3、Retrofit源码分析（超详细） - 简书<br><a href="https://www.jianshu.com/p/097947afddaf" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/097947afddaf</a><br>4、拆轮子系列：拆 Retrofit - Piasy的博客 | Piasy Blog<br><a href="https://blog.piasy.com/2016/06/25/Understand-Retrofit/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.piasy.com/2016/06/25/Understand-Retrofit/</a><br>5、Retrofit源码解析 | mundane的幻想空间<br><a href="https://mundane799699.github.io/2018/03/13/retrofit-analysis/" rel="external nofollow noopener noreferrer" target="_blank">https://mundane799699.github.io/2018/03/13/retrofit-analysis/</a><br>6、Retrofit源码解析 - 掘金<br><a href="https://juejin.im/post/5acee62c6fb9a028df22ffee" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/post/5acee62c6fb9a028df22ffee</a><br>7、Retrofit源码解析 | 俞其荣的博客 | Qirong Yu’s Blog<br><a href="https://yuqirong.me/2017/08/03/Retrofit源码解析/" rel="external nofollow noopener noreferrer" target="_blank">https://yuqirong.me/2017/08/03/Retrofit源码解析/</a><br>8、android-cn/android-open-project-analysis<br><a href="https://github.com/android-cn/android-open-project-analysis/tree/master/tool-lib/network/retrofit" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/android-cn/android-open-project-analysis/tree/master/tool-lib/network/retrofit</a><br>9、【Android】Retrofit源码分析 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/79933220" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/79933220</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Retrofit 网络框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 Retrofit 2.4.0 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Type-safe HTTP client for Android and Java by Square, In
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
      <category term="Retrofit" scheme="https://www.wshunli.com/tags/Retrofit/"/>
    
      <category term="网络框架" scheme="https://www.wshunli.com/tags/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp 网络框架源码解析</title>
    <link href="https://www.wshunli.com/posts/5bd2f229.html"/>
    <id>https://www.wshunli.com/posts/5bd2f229.html</id>
    <published>2018-09-13T08:28:11.000Z</published>
    <updated>2018-09-23T03:13:59.271Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 OkHttp 网络框架，包含简单的使用和源码解析。<strong>本文内容基于 OkHttp 3.11.0 版本</strong>。</p><p>网上关于 OkHttp 源码解析的文章有很多，我在这里参考他们的资料，形成自己的知识体系。</p><p>只是停留在应用层面，会使用一些框架是不行的，还需要深入源码、剖析结构。</p><p>An HTTP+HTTP/2 client for Android and Java applications. <a href="http://square.github.io/okhttp/" rel="external nofollow noopener noreferrer" target="_blank">http://square.github.io/okhttp/</a></p><blockquote><p>支持 HTTP/2 协议，允许连接到同一个主机地址的所有请求共享 Socket 。<br>在 HTTP/2 协议不可用的情况下，通过连接池减少请求的延迟。<br>支持 GZip 透明压缩，减少传输的数据包大小。<br>支持响应缓存，避免同一个重复的网络请求。</p></blockquote><h1 id="OkHttp-的简单使用"><a href="#OkHttp-的简单使用" class="headerlink" title="OkHttp 的简单使用"></a>OkHttp 的简单使用</h1><p>一般情况下，对于网络框架有两种常见的使用场景，同步请求和异步请求。</p><p><strong>同步请求</strong>：</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);Response response = call.execute();Log.d(TAG, &quot;onCreate: &quot; + response.body().string());</code></pre><p><strong>异步请求</strong>：</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);call.enqueue(new Callback() {    @Override    public void onFailure(Call call, IOException e) {    }    @Override    public void onResponse(Call call, Response response) throws IOException {        Log.d(TAG, &quot;onCreate: &quot; + response.body().string());    }});</code></pre><p>同步请求和异步请求类似，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，只不过最后执行 enqueue() 方法，整体和网络请求的思路相似。</p><h1 id="OkHttp-的源码分析"><a href="#OkHttp-的源码分析" class="headerlink" title="OkHttp 的源码分析"></a>OkHttp 的源码分析</h1><p>OkHttp 网络请求完整的流程图如下：</p><div align="center"><img src="https://img.wshunli.com/Android/OkHttp/okhttp_full_process.min.png" title="OkHttp 流程图" alt="OkHttp 流程图"></div><p>下面详细介绍。</p><h2 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h2><p>同步请求，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，最后执行 execute() 方法，整体和网络请求的思路相似。</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);Response response = call.execute();</code></pre><h3 id="创建-OkHttpClient-对象"><a href="#创建-OkHttpClient-对象" class="headerlink" title="创建 OkHttpClient 对象"></a>创建 OkHttpClient 对象</h3><p>我们先看 OkHttp 的构造函数：</p><pre><code class="lang-Java">public OkHttpClient() {  this(new Builder());}</code></pre><p>这里是直接实例化，实质上是使用 <strong>建造者模式</strong> 构建 OkHttpClient 实例。</p><p>下面是 OkHttpClient 内部类 Builder 的构造方法：</p><pre><code class="lang-Java">public Builder() {  dispatcher = new Dispatcher();  protocols = DEFAULT_PROTOCOLS;  connectionSpecs = DEFAULT_CONNECTION_SPECS;  eventListenerFactory = EventListener.factory(EventListener.NONE);  proxySelector = ProxySelector.getDefault();  cookieJar = CookieJar.NO_COOKIES;  socketFactory = SocketFactory.getDefault();  hostnameVerifier = OkHostnameVerifier.INSTANCE;  certificatePinner = CertificatePinner.DEFAULT;  proxyAuthenticator = Authenticator.NONE;  authenticator = Authenticator.NONE;  connectionPool = new ConnectionPool();  dns = Dns.SYSTEM;  followSslRedirects = true;  followRedirects = true;  retryOnConnectionFailure = true;  connectTimeout = 10_000;  readTimeout = 10_000;  writeTimeout = 10_000;  pingInterval = 0;}public OkHttpClient build() {  return new OkHttpClient(this);}</code></pre><p>这里 <code>OkHttpClient.Builder</code> 有很多参数，后面再介绍。</p><h3 id="创建-Request-对象"><a href="#创建-Request-对象" class="headerlink" title="创建 Request 对象"></a>创建 Request 对象</h3><p>和 OkHttpClient 类似，Request 也是是使用 <strong>建造者模式</strong> 创建实例。</p><pre><code class="lang-Java">public Builder() {  this.method = &quot;GET&quot;;  this.headers = new Headers.Builder();}public Request build() {  if (url == null) throw new IllegalStateException(&quot;url == null&quot;);  return new Request(this);}</code></pre><p>其中配置默认请求方法为 <code>GET</code> ，还有一些头部的默认参数。</p><h3 id="创建-Call-对象"><a href="#创建-Call-对象" class="headerlink" title="创建 Call 对象"></a>创建 Call 对象</h3><p>OkHttpClient 实现了 <code>Call.Factory</code> ，负责根据请求创建新的 Call 对象。</p><pre><code class="lang-Java">@Override public Call newCall(Request request) {  return RealCall.newRealCall(this, request, false /* for web socket */);}</code></pre><p>Call 只是个接口，实际是实例化的 RealCall 对象。</p><pre><code class="lang-Java">private RealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {  this.client = client;  this.originalRequest = originalRequest;  this.forWebSocket = forWebSocket;  this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client, forWebSocket);}static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {  // Safely publish the Call instance to the EventListener.  RealCall call = new RealCall(client, originalRequest, forWebSocket);  call.eventListener = client.eventListenerFactory().create(call);  return call;}</code></pre><h3 id="发送同步网络请求"><a href="#发送同步网络请求" class="headerlink" title="发送同步网络请求"></a>发送同步网络请求</h3><p>发送请求也是在 <code>RealCall</code> 的 <code>execute()</code> 方法中执行的。</p><pre><code class="lang-Java">// RealCall#execute()@Override public Response execute() throws IOException {  synchronized (this) {    if (executed) throw new IllegalStateException(&quot;Already Executed&quot;);    executed = true;  }  captureCallStackTrace();  eventListener.callStart(this);  try {    client.dispatcher().executed(this);    Response result = getResponseWithInterceptorChain();    if (result == null) throw new IOException(&quot;Canceled&quot;);    return result;  } catch (IOException e) {    eventListener.callFailed(this, e);    throw e;  } finally {    client.dispatcher().finished(this);  }}</code></pre><p>在这里主要做了四件事：</p><p>1、检查 Call 是否执行过，没有执行将 <code>executed</code> 赋值为 true ，保证每个请求只执行一次；<br>2、使用 <code>client.dispatcher().executed(this)</code> 来进行实际的请求；<br>3、调用 <code>getResponseWithInterceptorChain()</code> 方法，获取请求响应的结果；<br>4、最后 <code>dispatcher</code> 结束自己。</p><pre><code class="lang-Java">// Dispatcher#executed()/** Used by {@code Call#execute} to signal it is in-flight. */synchronized void executed(RealCall call) {  runningSyncCalls.add(call);}</code></pre><p>在同步请求中 <code>dispatcher</code> 只是负责判断请求执行的状态，在异步请求中参与内容过多。</p><p>下面我们来看 <code>getResponseWithInterceptorChain()</code> 方法：</p><pre><code class="lang-Java">Response getResponseWithInterceptorChain() throws IOException {  // Build a full stack of interceptors.  List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();  interceptors.addAll(client.interceptors()); // 加入用户自定义的拦截器  interceptors.add(retryAndFollowUpInterceptor); // 重试和重定向拦截器  interceptors.add(new BridgeInterceptor(client.cookieJar())); // 加入转化请求响应的拦截器  interceptors.add(new CacheInterceptor(client.internalCache())); // 加入缓存拦截器  interceptors.add(new ConnectInterceptor(client)); // 加入连接拦截器  if (!forWebSocket) {      interceptors.addAll(client.networkInterceptors()); // 加入用户自定义的网络拦截器  }  interceptors.add(new CallServerInterceptor(forWebSocket)); // 加入请求响应的拦截器  Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,          originalRequest, this, eventListener, client.readTimeoutMillis());  // 利用 chain 来链式调用拦截器，最后的返回结果就是 Response 对象  return chain.proceed(originalRequest);}</code></pre><p>我们都知道，拦截器是 OkHttp 的精髓。</p><p>1、<code>client.interceptors()</code> ，首先加入 <code>interceptors</code> 的是用户自定义的拦截器，比如修改请求头的拦截器等；<br>2、<code>RetryAndFollowUpInterceptor</code> 是用来重试和重定向的拦截器，在下面我们会讲到；<br>3、<code>BridgeInterceptor</code> 是用来将用户友好的请求转化为向服务器的请求，之后又把服务器的响应转化为对用户友好的响应；<br>4、<code>CacheInterceptor</code> 是缓存拦截器，若存在缓存并且可用就直接返回该缓存，否则会向服务器请求；<br>5、<code>ConnectInterceptor</code> 用来建立连接的拦截器；<br>6、<code>client.networkInterceptors()</code> 加入用户自定义的 <code>networkInterceptors</code> ；<br>7、<code>CallServerInterceptor</code>是真正向服务器发出请求且得到响应的拦截器；</p><p>最后在聚合了这些拦截器后，利用 <code>RealInterceptorChain</code> 来链式调用这些拦截器，利用的就是 <strong>责任链模式</strong> 。</p><font font="" size="3" color="#FF0000">下面介绍 OkHttp 中的 拦截器</font><p>拦截器 <code>Interceptor</code> 是 OkHttp 的核心，<strong>实际上它把实际的网络请求、缓存、透明压缩等功能都统一了起来</strong>，每一个功能都只是一个 <code>Interceptor</code>，它们再连接成一个 <code>Interceptor.Chain</code>，环环相扣，最终圆满完成一次网络请求。</p><div align="center"><img src="https://img.wshunli.com/Android/OkHttp/okhttp_interceptors.jpg" title="OkHttp 拦截器" alt="OkHttp 拦截器"></div><p>1、<code>RealInterceptorChain</code> 拦截器链</p><p>拦截器链 <code>RealInterceptorChain</code> 是真正把这些拦截器串起来的一个角色，调用 <code>proceed()</code> 方法</p><pre><code class="lang-Java">public Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,    RealConnection connection) throws IOException {  if (index &gt;= interceptors.size()) throw new AssertionError();  calls++;  // If we already have a stream, confirm that the incoming request will use it.  if (this.httpCodec != null &amp;&amp; !this.connection.supportsUrl(request.url())) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptors.get(index - 1)        + &quot; must retain the same host and port&quot;);  }  // If we already have a stream, confirm that this is the only call to chain.proceed().  if (this.httpCodec != null &amp;&amp; calls &gt; 1) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptors.get(index - 1)        + &quot; must call proceed() exactly once&quot;);  }  // Call the next interceptor in the chain.  // 得到下一次对应的 RealInterceptorChain  RealInterceptorChain next = new RealInterceptorChain(interceptors, streamAllocation, httpCodec,      connection, index + 1, request, call, eventListener, connectTimeout, readTimeout,      writeTimeout);  // 当前次数的 interceptor  Interceptor interceptor = interceptors.get(index);  // 进行拦截处理，并且在 interceptor 链式调用 next 的 proceed 方法  Response response = interceptor.intercept(next);  // Confirm that the next interceptor made its required call to chain.proceed().  // 确认下一次的 interceptor 调用过 chain.proceed()  if (httpCodec != null &amp;&amp; index + 1 &lt; interceptors.size() &amp;&amp; next.calls != 1) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptor        + &quot; must call proceed() exactly once&quot;);  }  // Confirm that the intercepted response isn&#39;t null.  if (response == null) {    throw new NullPointerException(&quot;interceptor &quot; + interceptor + &quot; returned null&quot;);  }  if (response.body() == null) {    throw new IllegalStateException(        &quot;interceptor &quot; + interceptor + &quot; returned a response with no body&quot;);  }  return response;}</code></pre><p>在代码中是一次次链式调用拦截器。</p><p>2、<code>RetryAndFollowUpInterceptor</code> 重试和重定向的拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  Request request = chain.request();  RealInterceptorChain realChain = (RealInterceptorChain) chain;  Call call = realChain.call();  EventListener eventListener = realChain.eventListener();  StreamAllocation streamAllocation = new StreamAllocation(client.connectionPool(),      createAddress(request.url()), call, eventListener, callStackTrace);  this.streamAllocation = streamAllocation;  int followUpCount = 0;  Response priorResponse = null;  while (true) {    // 如果取消，就释放资源    if (canceled) {      streamAllocation.release();      throw new IOException(&quot;Canceled&quot;);    }    Response response;    boolean releaseConnection = true;    try {      // 调用下一个拦截器      response = realChain.proceed(request, streamAllocation, null, null);      releaseConnection = false;    } catch (RouteException e) {      // The attempt to connect via a route failed. The request will not have been sent.      // 路由连接失败，请求将不会被发送      if (!recover(e.getLastConnectException(), streamAllocation, false, request)) {        throw e.getFirstConnectException();      }      releaseConnection = false;      continue;    } catch (IOException e) {      // An attempt to communicate with a server failed. The request may have been sent.      // 服务器连接失败，请求可能已被发送      boolean requestSendStarted = !(e instanceof ConnectionShutdownException);      if (!recover(e, streamAllocation, requestSendStarted, request)) throw e;      releaseConnection = false;      continue;    } finally {      // We&#39;re throwing an unchecked exception. Release any resources.      // 抛出未检查的异常，释放资源      if (releaseConnection) {        streamAllocation.streamFailed(null);        streamAllocation.release();      }    }    // Attach the prior response if it exists. Such responses never have a body.    if (priorResponse != null) {      response = response.newBuilder()          .priorResponse(priorResponse.newBuilder()                  .body(null)                  .build())          .build();    }    // 如果不需要重定向，那么 followUp 为空，会根据响应码判断    Request followUp;    try {      followUp = followUpRequest(response, streamAllocation.route());    } catch (IOException e) {      streamAllocation.release();      throw e;    }    // 释放资源，返回 response    if (followUp == null) {      if (!forWebSocket) {        streamAllocation.release();      }      return response;    }    // 关闭 response 的 body    closeQuietly(response.body());    if (++followUpCount &gt; MAX_FOLLOW_UPS) {      streamAllocation.release();      throw new ProtocolException(&quot;Too many follow-up requests: &quot; + followUpCount);    }    if (followUp.body() instanceof UnrepeatableRequestBody) {      streamAllocation.release();      throw new HttpRetryException(&quot;Cannot retry streamed HTTP body&quot;, response.code());    }    // response 和 followUp 比较是否为同一个连接    // 若为重定向就销毁旧连接，创建新连接    if (!sameConnection(response, followUp.url())) {      streamAllocation.release();      streamAllocation = new StreamAllocation(client.connectionPool(),          createAddress(followUp.url()), call, eventListener, callStackTrace);      this.streamAllocation = streamAllocation;    } else if (streamAllocation.codec() != null) {      throw new IllegalStateException(&quot;Closing the body of &quot; + response          + &quot; didn&#39;t close its backing stream. Bad interceptor?&quot;);    }    // 将重定向操作得到的新请求设置给 request    request = followUp;    priorResponse = response;  }}</code></pre><p>总体来说，<code>RetryAndFollowUpInterceptor</code> 是用来失败重试以及重定向的拦截器。</p><p>3、<code>BridgeInterceptor</code> 桥街和适配拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  Request userRequest = chain.request();  Request.Builder requestBuilder = userRequest.newBuilder();  // 将用户友好的 request 构造为发送给服务器的 request  RequestBody body = userRequest.body();  // 若有请求体，则构造  if (body != null) {    MediaType contentType = body.contentType();    if (contentType != null) {      requestBuilder.header(&quot;Content-Type&quot;, contentType.toString());    }    long contentLength = body.contentLength();    if (contentLength != -1) {      requestBuilder.header(&quot;Content-Length&quot;, Long.toString(contentLength));      requestBuilder.removeHeader(&quot;Transfer-Encoding&quot;);    } else {      requestBuilder.header(&quot;Transfer-Encoding&quot;, &quot;chunked&quot;);      requestBuilder.removeHeader(&quot;Content-Length&quot;);    }  }  if (userRequest.header(&quot;Host&quot;) == null) {    requestBuilder.header(&quot;Host&quot;, hostHeader(userRequest.url(), false));  }  if (userRequest.header(&quot;Connection&quot;) == null) {    requestBuilder.header(&quot;Connection&quot;, &quot;Keep-Alive&quot;);  }  // If we add an &quot;Accept-Encoding: gzip&quot; header field we&#39;re responsible for also decompressing  // the transfer stream.  // 使用 gzip 压缩  boolean transparentGzip = false;  if (userRequest.header(&quot;Accept-Encoding&quot;) == null &amp;&amp; userRequest.header(&quot;Range&quot;) == null) {    transparentGzip = true;    requestBuilder.header(&quot;Accept-Encoding&quot;, &quot;gzip&quot;);  }  // 设置 cookie  List&lt;Cookie&gt; cookies = cookieJar.loadForRequest(userRequest.url());  if (!cookies.isEmpty()) {    requestBuilder.header(&quot;Cookie&quot;, cookieHeader(cookies));  }  // 设置 UA  if (userRequest.header(&quot;User-Agent&quot;) == null) {    requestBuilder.header(&quot;User-Agent&quot;, Version.userAgent());  }  // 构造完后，将 request 交给下一个拦截器去处理。最后又得到服务端响应 networkResponse  Response networkResponse = chain.proceed(requestBuilder.build());  // 保存 networkResponse 的 cookie  HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());  // 将 networkResponse 构造为对用户友好的 response  Response.Builder responseBuilder = networkResponse.newBuilder()      .request(userRequest);  // 如果 networkResponse 使用 gzip 并且有响应体的话，给用户友好的 response 设置响应体  if (transparentGzip      &amp;&amp; &quot;gzip&quot;.equalsIgnoreCase(networkResponse.header(&quot;Content-Encoding&quot;))      &amp;&amp; HttpHeaders.hasBody(networkResponse)) {    GzipSource responseBody = new GzipSource(networkResponse.body().source());    Headers strippedHeaders = networkResponse.headers().newBuilder()        .removeAll(&quot;Content-Encoding&quot;)        .removeAll(&quot;Content-Length&quot;)        .build();    responseBuilder.headers(strippedHeaders);    String contentType = networkResponse.header(&quot;Content-Type&quot;);    responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));  }  return responseBuilder.build();}</code></pre><p>在 <code>BridgeInterceptor</code> 这一步，先把用户友好的请求进行重新构造，变成了向服务器发送的请求。</p><p>之后调用 <code>chain.proceed(requestBuilder.build())</code> 进行下一个拦截器的处理。</p><p>等到后面的拦截器都处理完毕，得到响应。再把 <code>networkResponse</code> 转化成对用户友好的 <code>response</code> 。</p><p>4、<code>CacheInterceptor</code> 缓存拦截器</p><p>分析 <code>CacheInterceptor</code> 拦截器 <code>intercept()</code> 方法的源代码</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {    // 得到 request 对应缓存中的 response    Response cacheCandidate = cache != null            ? cache.get(chain.request())            : null;    // 获取当前时间，会和之前缓存的时间进行比较    long now = System.currentTimeMillis();    // 得到缓存策略    CacheStrategy strategy = new CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();    Request networkRequest = strategy.networkRequest;    Response cacheResponse = strategy.cacheResponse;    // 追踪缓存，其实就是计数    if (cache != null) {        cache.trackResponse(strategy);    }    // 缓存不适用，关闭    if (cacheCandidate != null &amp;&amp; cacheResponse == null) {        closeQuietly(cacheCandidate.body()); // The cache candidate wasn&#39;t applicable. Close it.    }    // If we&#39;re forbidden from using the network and the cache is insufficient, fail.    // 禁止网络并且没有缓存的话，返回失败    if (networkRequest == null &amp;&amp; cacheResponse == null) {        return new Response.Builder()                .request(chain.request())                .protocol(Protocol.HTTP_1_1)                .code(504)                .message(&quot;Unsatisfiable Request (only-if-cached)&quot;)                .body(Util.EMPTY_RESPONSE)                .sentRequestAtMillis(-1L)                .receivedResponseAtMillis(System.currentTimeMillis())                .build();    }    // If we don&#39;t need the network, we&#39;re done.    // 不用网络请求，返回缓存    if (networkRequest == null) {        return cacheResponse.newBuilder()                .cacheResponse(stripBody(cacheResponse))                .build();    }    Response networkResponse = null;    try {        // 交给下一个拦截器，返回 networkResponse        networkResponse = chain.proceed(networkRequest);    } finally {        // If we&#39;re crashing on I/O or otherwise, don&#39;t leak the cache body.        if (networkResponse == null &amp;&amp; cacheCandidate != null) {            closeQuietly(cacheCandidate.body());        }    }    // 如果我们同时有缓存和 networkResponse ，根据情况使用    if (cacheResponse != null) {        if (networkResponse.code() == HTTP_NOT_MODIFIED) {            Response response = cacheResponse.newBuilder()                    .headers(combine(cacheResponse.headers(), networkResponse.headers()))                    .sentRequestAtMillis(networkResponse.sentRequestAtMillis())                    .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())                    .cacheResponse(stripBody(cacheResponse))                    .networkResponse(stripBody(networkResponse))                    .build();            networkResponse.body().close();            // 更新原来的缓存至最新            // Update the cache after combining headers but before stripping the            // Content-Encoding header (as performed by initContentStream()).            cache.trackConditionalCacheHit();            cache.update(cacheResponse, response);            return response;        } else {            closeQuietly(cacheResponse.body());        }    }    Response response = networkResponse.newBuilder()            .cacheResponse(stripBody(cacheResponse))            .networkResponse(stripBody(networkResponse))            .build();    // 保存之前未缓存的缓存    if (cache != null) {        if (HttpHeaders.hasBody(response) &amp;&amp; CacheStrategy.isCacheable(response, networkRequest)) {            // Offer this request to the cache.            CacheRequest cacheRequest = cache.put(response);            return cacheWritingResponse(cacheRequest, response);        }        if (HttpMethod.invalidatesCache(networkRequest.method())) {            try {                cache.remove(networkRequest);            } catch (IOException ignored) {                // The cache cannot be written.            }        }    }    return response;}</code></pre><p><code>CacheInterceptor</code> 做的事情就是根据请求拿到缓存，若没有缓存或者缓存失效，就进入网络请求阶段，否则会返回缓存。</p><p>5、<code>ConnectInterceptor</code> 拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  RealInterceptorChain realChain = (RealInterceptorChain) chain;  Request request = realChain.request();  StreamAllocation streamAllocation = realChain.streamAllocation();  // We need the network to satisfy this request. Possibly for validating a conditional GET.  boolean doExtensiveHealthChecks = !request.method().equals(&quot;GET&quot;);  HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);  RealConnection connection = streamAllocation.connection();  return realChain.proceed(request, streamAllocation, httpCodec, connection);}</code></pre><p>实际上建立连接就是创建了一个 <code>HttpCodec</code> 对象，它是对 <code>HTTP</code> 协议操作的抽象，有两个实现：<code>Http1Codec</code> 和 <code>Http2Codec</code>，顾名思义，它们分别对应 HTTP/1.1 和 HTTP/2 版本的实现。</p><p>6、<code>CallServerInterceptor</code> 拦截器，发送和接收数据</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  RealInterceptorChain realChain = (RealInterceptorChain) chain;  HttpCodec httpCodec = realChain.httpStream();  StreamAllocation streamAllocation = realChain.streamAllocation();  RealConnection connection = (RealConnection) realChain.connection();  Request request = realChain.request();      long sentRequestMillis = System.currentTimeMillis();  // 整理请求头并写入  httpCodec.writeRequestHeaders(request);  Response.Builder responseBuilder = null;  // 检查是否为有 body 的请求方法  if (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != null) {      // If there&#39;s a &quot;Expect: 100-continue&quot; header on the request, wait for a &quot;HTTP/1.1 100      // Continue&quot; response before transmitting the request body. If we don&#39;t get that, return what      // we did get (such as a 4xx response) without ever transmitting the request body.      // 如果有 Expect: 100-continue 在请求头中，那么要等服务器的响应      if (&quot;100-continue&quot;.equalsIgnoreCase(request.header(&quot;Expect&quot;))) {          httpCodec.flushRequest();          responseBuilder = httpCodec.readResponseHeaders(true);      }      if (responseBuilder == null) {          // Write the request body if the &quot;Expect: 100-continue&quot; expectation was met.          // 写入请求体          Sink requestBodyOut = httpCodec.createRequestBody(request, request.body().contentLength());          BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);          request.body().writeTo(bufferedRequestBody);          bufferedRequestBody.close();      } else if (!connection.isMultiplexed()) {          // If the &quot;Expect: 100-continue&quot; expectation wasn&#39;t met, prevent the HTTP/1 connection from          // being reused. Otherwise we&#39;re still obligated to transmit the request body to leave the          // connection in a consistent state.          streamAllocation.noNewStreams();      }  }  httpCodec.finishRequest();  // 得到响应头  if (responseBuilder == null) {      responseBuilder = httpCodec.readResponseHeaders(false);  }  // 构造 response  Response response = responseBuilder          .request(request)          .handshake(streamAllocation.connection().handshake())          .sentRequestAtMillis(sentRequestMillis)          .receivedResponseAtMillis(System.currentTimeMillis())          .build();  int code = response.code();  // 如果为 web socket 且状态码是 101 ，那么 body 为空  if (forWebSocket &amp;&amp; code == 101) {      // Connection is upgrading, but we need to ensure interceptors see a non-null response body.      response = response.newBuilder()              .body(Util.EMPTY_RESPONSE)              .build();  } else {      // 读取 body      response = response.newBuilder()              .body(httpCodec.openResponseBody(response))              .build();  }  // 如果请求头中有 close 那么断开连接  if (&quot;close&quot;.equalsIgnoreCase(response.request().header(&quot;Connection&quot;))          || &quot;close&quot;.equalsIgnoreCase(response.header(&quot;Connection&quot;))) {      streamAllocation.noNewStreams();  }  // 抛出协议异常  if ((code == 204 || code == 205) &amp;&amp; response.body().contentLength() &gt; 0) {      throw new ProtocolException(              &quot;HTTP &quot; + code + &quot; had non-zero Content-Length: &quot; + response.body().contentLength());  }  return response;}</code></pre><p>在 <code>CallServerInterceptor</code> 中可见，关于请求和响应部分都是通过 <code>HttpCodec</code> 来实现的。而在 <code>HttpCodec</code> 内部又是通过 <code>sink</code> 和 <code>source</code> 来实现的。所以说到底还是 IO 流在起作用。</p><h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><p>和同步请求类似，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，只不过最后执行 enqueue() 方法，整体和网络请求的思路相似。</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);call.enqueue(new Callback() {    @Override    public void onFailure(Call call, IOException e) {    }    @Override    public void onResponse(Call call, Response response) throws IOException {    }});</code></pre><p>异步请求在 <code>Callback</code> 回调中获取响应，有 <code>onResponse()</code> 、 <code>onFailure()</code> 两个方法。</p><h3 id="发送异步网络请求"><a href="#发送异步网络请求" class="headerlink" title="发送异步网络请求"></a>发送异步网络请求</h3><p>前面三个步骤完全一致，我们从发送异步网络请求开始，异步请求是调用 <code>RealCall</code> 实例的 <code>enqueue()</code> 方法。。</p><pre><code class="lang-Java">// RealCall#enqueue()@Override public void enqueue(Callback responseCallback) {  synchronized (this) {    if (executed) throw new IllegalStateException(&quot;Already Executed&quot;);    executed = true;  }  captureCallStackTrace();  eventListener.callStart(this);  client.dispatcher().enqueue(new AsyncCall(responseCallback));}</code></pre><p>这里使用 <code>Dispatcher</code> 分发器我来处理请求。</p><pre><code class="lang-Java">// Dispatcher#enqueue()synchronized void enqueue(AsyncCall call) {  if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) {    runningAsyncCalls.add(call);    executorService().execute(call);  } else {    readyAsyncCalls.add(call);  }}</code></pre><p>实质上异步网络请求是在 <code>Dispatcher</code> 中做到任务调度。</p><font font="" size="3" color="#FF0000">下面介绍 OkHttp 中的 任务调度</font><p>我们来看 <code>Dispatcher</code> 类的源代码。</p><pre><code class="lang-Java">public final class Dispatcher {  private int maxRequests = 64;  private int maxRequestsPerHost = 5;  private @Nullable Runnable idleCallback;  /** Executes calls. Created lazily. */  // 线程池的实现  private @Nullable ExecutorService executorService;  /** Ready async calls in the order they&#39;ll be run. */  // 就绪等待网络请求的异步队列  private final Deque&lt;AsyncCall&gt; readyAsyncCalls = new ArrayDeque&lt;&gt;();  /** Running asynchronous calls. Includes canceled calls that haven&#39;t finished yet. */  // 正在执行网络请求的异步队列  private final Deque&lt;AsyncCall&gt; runningAsyncCalls = new ArrayDeque&lt;&gt;();  /** Running synchronous calls. Includes canceled calls that haven&#39;t finished yet. */  // 正在执行网络请求的同步队列  private final Deque&lt;RealCall&gt; runningSyncCalls = new ArrayDeque&lt;&gt;();  public Dispatcher(ExecutorService executorService) {    this.executorService = executorService;  }  public Dispatcher() {  }  // 创建线程池  public synchronized ExecutorService executorService() {    if (executorService == null) {      executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,          new SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(&quot;OkHttp Dispatcher&quot;, false));    }    return executorService;  }  /* 省略部分无关代码*/  synchronized void enqueue(AsyncCall call) {    if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) {      runningAsyncCalls.add(call);      executorService().execute(call);    } else {      readyAsyncCalls.add(call);    }  }  /* 省略部分无关代码*/}</code></pre><p>异步请求是放在线程池中执行的，如果最大异步请求数小于 64 并且 单个 HOST 的异步请求数小于 5 ，将请求添加到 <code>runningAsyncCalls</code> 中，否则添加到 <code>readyAsyncCalls</code> 中。</p><p>我们来看添加进线程池的 <code>AsyncCall</code> 类，实际上 <code>AsyncCall</code> 是继承自 <code>NamedRunnable</code> 的 <code>RealCall</code> 内部类。<code>NamedRunnable</code> 是实现了 <code>Runnable</code> 接口的抽象类。</p><pre><code class="lang-Java">final class AsyncCall extends NamedRunnable {  private final Callback responseCallback;  AsyncCall(Callback responseCallback) {    super(&quot;OkHttp %s&quot;, redactedUrl());    this.responseCallback = responseCallback;  }  String host() {    return originalRequest.url().host();  }  Request request() {    return originalRequest;  }  RealCall get() {    return RealCall.this;  }  @Override protected void execute() {    boolean signalledCallback = false;    try {      // 和同步请求相同，调用拦截器，得到响应      Response response = getResponseWithInterceptorChain();      if (retryAndFollowUpInterceptor.isCanceled()) {        signalledCallback = true;        responseCallback.onFailure(RealCall.this, new IOException(&quot;Canceled&quot;));      } else {        signalledCallback = true;        responseCallback.onResponse(RealCall.this, response);      }    } catch (IOException e) {      if (signalledCallback) {        // Do not signal the callback twice!        Platform.get().log(INFO, &quot;Callback failure for &quot; + toLoggableString(), e);      } else {        eventListener.callFailed(RealCall.this, e);        responseCallback.onFailure(RealCall.this, e);      }    } finally {      // 在 runningAsyncCalls 中移除      client.dispatcher().finished(this);    }  }}</code></pre><p>在 <code>AsyncCall</code> 的 <code>execute()</code> 方法中，也是调用了 <code>getResponseWithInterceptorChain()</code> 方法来得到 <code>Response</code> 对象。从这里开始，就和同步请求的流程是一样的，就没必要讲了。</p><p>不同的是在得到 <code>Response</code> 后，进行结果的回调。</p><p>在 <code>AsyncCall</code> 的最后调用了 <code>Dispatcher</code> 的 <code>finished()</code> 方法。</p><pre><code class="lang-Java">// Dispatcher#finished()/** Used by {@code AsyncCall#run} to signal completion. */void finished(AsyncCall call) {  finished(runningAsyncCalls, call, true);}/** Used by {@code Call#execute} to signal completion. */void finished(RealCall call) {  finished(runningSyncCalls, call, false);}private &lt;T&gt; void finished(Deque&lt;T&gt; calls, T call, boolean promoteCalls) {  int runningCallsCount;  Runnable idleCallback;  synchronized (this) {    if (!calls.remove(call)) throw new AssertionError(&quot;Call wasn&#39;t in-flight!&quot;);    // 将 readyAsyncCalls 中的 call 移动到 runningAsyncCalls 中，并加入到线程池中    if (promoteCalls) promoteCalls();    runningCallsCount = runningCallsCount();    idleCallback = this.idleCallback;  }  if (runningCallsCount == 0 &amp;&amp; idleCallback != null) {    idleCallback.run();  }}</code></pre><p>这里所做的工作就是把执行过的 Call 移除，然后将 <code>readyAsyncCalls</code> 中的 Call 移动到 <code>runningAsyncCalls</code> 中并加入线程池中。</p><blockquote><p>基本上 OkHttp 的请求响应的流程就介绍完了，主要是关于 OkHttp 的 <strong>拦截器链</strong> 和 <strong>任务调度</strong> 原理。</p></blockquote><p>还有很多细节没有涉及，需要花费很大的精力，才能理解分析透彻，后面有机会再介绍。</p><blockquote><p>参考资料：<br>1、拆轮子系列：拆 OkHttp - Piasy的博客 | Piasy Blog<br><a href="https://blog.piasy.com/2016/07/11/Understand-OkHttp/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.piasy.com/2016/07/11/Understand-OkHttp/</a><br>2、OkHttp源码解析 | 俞其荣的博客 | Qirong Yu’s Blog<br><a href="http://yuqirong.me/2017/07/25/OkHttp源码解析/" rel="external nofollow noopener noreferrer" target="_blank">http://yuqirong.me/2017/07/25/OkHttp源码解析/</a><br>3、OkHttp源码分析 - 掘金<br><a href="https://juejin.im/post/5af4482951882567286064e6" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/post/5af4482951882567286064e6</a><br>4、okhttp源码分析（一）——基本流程（超详细） - 简书<br><a href="https://www.jianshu.com/p/37e26f4ea57b" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/37e26f4ea57b</a><br>5、OKHttp源码解析 | Frodo’s Blog<br><a href="http://frodoking.github.io/2015/03/12/android-okhttp/" rel="external nofollow noopener noreferrer" target="_blank">http://frodoking.github.io/2015/03/12/android-okhttp/</a><br>6、OkHttp 源码解析（一）：基本流程 - Coding - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000012656606" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000012656606</a><br>7、【Android】OkHttp源码分析 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/79175824" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/79175824</a><br>8、深入浅出 OkHttp 源码 - DiyCode<br><a href="https://www.diycode.cc/topics/640" rel="external nofollow noopener noreferrer" target="_blank">https://www.diycode.cc/topics/640</a><br>9、Okhttp框架源码分析 - 简书<br><a href="https://www.jianshu.com/p/18a4861600d1" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/18a4861600d1</a><br>10、OkHttp 3.7源码分析（一）——整体架构 - CSDN博客<br><a href="https://blog.csdn.net/asiaLIYAZHOU/article/details/72598320" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/asiaLIYAZHOU/article/details/72598320</a><br>11、okhttp网络框架源码解析 - CSDN博客<br><a href="https://blog.csdn.net/fanguangjun123/article/details/78621585" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/fanguangjun123/article/details/78621585</a><br>12、OKHttp网络框架源码解析（一）okHttp框架同步异步请求流程和源码分析 - CSDN博客<br><a href="https://blog.csdn.net/qq_24675479/article/details/79483193" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_24675479/article/details/79483193</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 OkHttp 网络框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 OkHttp 3.11.0 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;网上关于 OkHttp 源码解析的文章有很多，我在这里参考他们的资料，形成自己的知识体系。&lt;/p&gt;&lt;p&gt;只是停留在应用
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
      <category term="网络框架" scheme="https://www.wshunli.com/tags/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/"/>
    
      <category term="OkHttp" scheme="https://www.wshunli.com/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘超图软件面试</title>
    <link href="https://www.wshunli.com/posts/9a69cc4.html"/>
    <id>https://www.wshunli.com/posts/9a69cc4.html</id>
    <published>2018-09-12T06:10:06.000Z</published>
    <updated>2018-09-23T03:13:59.279Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘超图软件面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目 Java 实现（01-10）</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-09-11T13:07:05.000Z</published>
    <updated>2018-09-23T03:13:59.275Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目 Java 实现，老是看书学习理论知识不太行，还得动手写代码啊。</p><p>笔试中的重要性不必多说，面试官还总是喜欢让手写代码。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><p>在设计模式中有详细的介绍，这里不再赘述，请移步：</p><p><a href="https://www.wshunli.com/posts/d1c4534.html">https://www.wshunli.com/posts/d1c4534.html</a></p><p>3、二维数组中查找目标值</p><blockquote><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><p>（1）直接暴力查找</p><pre><code class="lang-Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="lang-Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><blockquote><p>请实现一个函数，将一个字符串中的每个空格替换成 “%20” 。</p></blockquote><pre><code class="lang-Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="lang-Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><blockquote><p>输入一个链表，按链表值从尾到头的顺序返回一个 ArrayList 。</p></blockquote><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="lang-Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="lang-Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="lang-Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><blockquote><p>参考资料<br>1、剑指Offer<em>编程题</em>牛客网<br><a href="https://www.nowcoder.com/ta/coding-interviews" rel="external nofollow noopener noreferrer" target="_blank">https://www.nowcoder.com/ta/coding-interviews</a><br>2、【剑指offer】Java版代码（完整版） - CSDN博客<br><a href="https://blog.csdn.net/baiye_xing/article/details/78428561" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/baiye_xing/article/details/78428561</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《剑指Offer》编程题目 Java 实现，老是看书学习理论知识不太行，还得动手写代码啊。&lt;/p&gt;&lt;p&gt;笔试中的重要性不必多说，面试官还总是喜欢让手写代码。&lt;/p&gt;&lt;p&gt;1、赋值运算函数&lt;/p&gt;&lt;p&gt;2、单例设计模式&lt;/p&gt;&lt;p&gt;在设计模式中有详细的介绍，这里不再赘述，请移
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十四）观察者模式</title>
    <link href="https://www.wshunli.com/posts/58b1d741.html"/>
    <id>https://www.wshunli.com/posts/58b1d741.html</id>
    <published>2018-09-10T12:19:14.000Z</published>
    <updated>2018-09-23T03:13:59.271Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式（Observer Pattern）是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。</p><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/14.Observer.png" title="观察者模式" alt="观察者模式"></div><p>观察者模式所涉及的角色有：</p><p>(1) 抽象主题(Subject)角色：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。</p><p>(2) 具体主题(ConcreteSubject)角色：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。</p><p>(3) 抽象观察者(Observer)角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。</p><p>(4) 具体观察者(ConcreteObserver)角色：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。</p><p>1、抽象主题角色类</p><pre><code class="lang-Java">public abstract class Subject {    private List&lt;Observer&gt; list = new ArrayList&lt;&gt;();    /**     * 注册观察者对象     *     * @param observer 观察者对象     */    public void attach(Observer observer) {        list.add(observer);        System.out.println(&quot;Attached an observer&quot;);    }    /**     * 删除观察者对象     *     * @param observer 观察者对象     */    public void detach(Observer observer) {        list.remove(observer);        System.out.println(&quot;Detached an observer&quot;);    }    /**     * 通知所有注册的观察者对象     */    public void nodifyObservers(String newState) {        for (Observer observer : list) {            observer.update(newState);        }    }}</code></pre><p>2、具体主题角色类</p><pre><code class="lang-Java">public class ConcreteSubject extends Subject {    private String state;    public String getState() {        return state;    }    public void change(String newState) {        state = newState;        System.out.println(&quot;ConcreteSubject：&quot; + state);        this.nodifyObservers(state);//状态发生改变，通知各个观察者    }}</code></pre><p>3、抽象观察者角色类</p><pre><code class="lang-Java">public interface Observer {    public void update(String state);}</code></pre><p>4、具体观察者角色类</p><pre><code class="lang-Java">public class ConcreteObserver implements Observer {    private String observerState;//观察者的状态    @Override    public void update(String state) {        /**         * 更新观察者的状态，使其与目标的状态保持一致         */        observerState = state;        System.out.println(&quot;ConcreteObserver：&quot; + observerState);    }}</code></pre><p>5、观察者模式的使用</p><pre><code class="lang-Java">public class ObserverPatternMain {    public static void main(String[] args) {        ConcreteSubject subject = new ConcreteSubject();        ConcreteObserver observer = new ConcreteObserver();        subject.attach(observer);        subject.change(&quot;New State&quot;);        subject.detach(observer);        subject.change(&quot;New State&quot;);    }}</code></pre><p>当主题对象的状态改变时，将通知所有观察者，观察者接收到主题对象的通知后，将可以进行其他操作，进行响应。</p><p><strong>推模型和拉模型</strong>：</p><p>在观察者模式中，又分为推模型和拉模型两种方式。</p><p>（1）推模型：主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。</p><p>（2）拉模型：主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把 <strong>主题对象自身</strong> 通过 update() 方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。</p><p>前面就是典型的推模型，下面介绍拉模型。</p><p>1、抽象主题角色类</p><pre><code class="lang-Java">public abstract class Subject {    private List&lt;Observer&gt; list = new ArrayList&lt;&gt;();    /**     * 注册观察者对象     *     * @param observer 观察者对象     */    public void attach(Observer observer) {        list.add(observer);        System.out.println(&quot;Attached an observer&quot;);    }    /**     * 删除观察者对象     *     * @param observer 观察者对象     */    public void detach(Observer observer) {        list.remove(observer);        System.out.println(&quot;Detached an observer&quot;);    }    /**     * 通知所有注册的观察者对象     */    public void nodifyObservers() {        for (Observer observer : list) {            observer.update(this);        }    }}</code></pre><p>3、抽象观察者角色类</p><pre><code class="lang-Java">public interface Observer {    public void update(Subject subject);}</code></pre><p>4、具体观察者角色类</p><pre><code class="lang-Java">public class ConcreteObserver implements Observer {    @Override    public void update(Subject subject) {        String state = ((ConcreteSubject) subject).getState();        System.out.println(&quot;ConcreteObserver：&quot; + state);    }}</code></pre><p>5、观察者模式的使用</p><pre><code class="lang-Java">public class ObserverPatternMain {    public static void main(String[] args) {        ConcreteSubject subject = new ConcreteSubject();        ConcreteObserver observer = new ConcreteObserver();        subject.attach(observer);        subject.change(&quot;New State&quot;);        subject.detach(observer);        subject.change(&quot;New State&quot;);    }}</code></pre><p><strong>两种模式的比较</strong>：</p><p>（1）推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。</p><p>（2）推模型可能会使得观察者对象难以复用，因为观察者的 update() 方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，就可能提供新的 update() 方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update() 方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。</p><p><strong>观察者模式的优缺点</strong>：</p><p>优点：观察者和被观察者是抽象耦合的；建立一套触发机制。<br>缺点：1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch14" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch14</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之观察者模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;观察者模式（Observer Pattern）是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。&lt;/p&gt;&lt;h1 id=&quot;观
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十三）享元模式</title>
    <link href="https://www.wshunli.com/posts/180f2df5.html"/>
    <id>https://www.wshunli.com/posts/180f2df5.html</id>
    <published>2018-09-10T10:43:03.000Z</published>
    <updated>2018-09-23T03:13:59.271Z</updated>
    
    <content type="html"><![CDATA[<p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/13.Flyweight.png" title="享元模式" alt="享元模式"></div><p>享元模式所涉及到的角色如下：</p><p>(1) 抽象享元(Flyweight)角色 ：给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。</p><p>(2) 具体享元(ConcreteFlyweight)角色：实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。</p><p>(3) 享元工厂(FlyweightFactory)角色 ：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。</p><p>1、创建一个接口</p><pre><code class="lang-Java">public interface Shape {    void draw();}</code></pre><p>2、创建实现接口的实体类</p><pre><code class="lang-Java">public class Circle implements Shape {    private String color;    private int x;    private int y;    private int radius;    public Circle(String color) {        this.color = color;    }    public void setX(int x) {        this.x = x;    }    public void setY(int y) {        this.y = y;    }    public void setRadius(int radius) {        this.radius = radius;    }    @Override    public void draw() {        System.out.println(&quot;Circle: Draw() [Color : &quot; + color                + &quot;, x : &quot; + x + &quot;, y :&quot; + y + &quot;, radius :&quot; + radius);    }}</code></pre><p>3、创建一个工厂，生成基于给定信息的实体类的对象</p><pre><code class="lang-Java">public class ShapeFactory {    private static final HashMap&lt;String, Shape&gt; circleMap = new HashMap&lt;&gt;();    public static Shape getCircle(String color) {        Circle circle = (Circle) circleMap.get(color);        if (circle == null) {            circle = new Circle(color);            circleMap.put(color, circle);            System.out.println(&quot;Creating circle of color : &quot; + color);        }        return circle;    }}</code></pre><p>4、享元模式的使用</p><pre><code class="lang-Java">public class FlyweightPatternMain {    private static final String colors[] =            {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;White&quot;, &quot;Black&quot;};    public static void main(String[] args) {        for (int i = 0; i &lt; 20; ++i) {            Circle circle =                    (Circle) ShapeFactory.getCircle(getRandomColor());            circle.setX(getRandomX());            circle.setY(getRandomY());            circle.setRadius(100);            circle.draw();        }    }    private static String getRandomColor() {        return colors[(int) (Math.random() * colors.length)];    }    private static int getRandomX() {        return (int) (Math.random() * 100);    }    private static int getRandomY() {        return (int) (Math.random() * 100);    }}</code></pre><p><strong>享元模式的优缺点</strong>：</p><p>优点：系统有大量相似对象；需要缓冲池的场景。<br>缺点：注意划分外部状态和内部状态，否则可能会引起线程安全问题，这些类必须有一个工厂对象加以控制。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch13" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch13</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之享元模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/04/26/2468499.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/04/26/2468499.html</a><br>2、设计模式读书笔记——享元模式 - chenssy - 博客园<br><a href="https://www.cnblogs.com/chenssy/p/3330555.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/chenssy/p/3330555.html</a><br>3、享元模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/flyweight-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/flyweight-pattern.html</a><br>4、JAVA设计模式-享元模式（Flyweight） - 简书<br><a href="https://www.jianshu.com/p/f88b903a166a" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f88b903a166a</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。&lt;/p&gt;&lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;he
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十二）桥接模式</title>
    <link href="https://www.wshunli.com/posts/f75ecf9a.html"/>
    <id>https://www.wshunli.com/posts/f75ecf9a.html</id>
    <published>2018-09-10T09:09:30.000Z</published>
    <updated>2018-09-23T03:13:59.271Z</updated>
    
    <content type="html"><![CDATA[<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p><h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p>桥接模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/12.Bridge.png" title="桥接模式" alt="桥接模式"></div><p>桥接模式包含如下角色：</p><p>(1) Abstraction：抽象类，抽象部分的接口。通常在这个对象里面，要维护一个实现部分的对象引用，在抽象对象里面的方法，需要调用实现部分的对象来完成。这个对象里面的方法，通常都是跟具体的业务相关的方法。Shape<br>(2) RefinedAbstraction：扩充抽象类，扩展抽象部分的接口，通常在这些对象里面，定义跟实际业务相关的方法，这些方法的实现通常会使用Abstraction中定义的方法，也可能需要调用实现部分的对象来完成。Circle<br>(3) Implementor：实现类接口，定义实现部分的接口，这个接口不用和 Abstraction 里面的方法一致，通常是由 Implementor 接口提供基本的操作，而 Abstraction 里面定义的是基于这些基本操作的业务方法，也就是说 Abstraction 定义了基于这些基本操作的较高层次的操作。DrawAPI<br>(4) ConcreteImplementor：具体实现类，真正实现 Implementor 接口的对象。GreenCircle、RedCircle</p><p>1、创建桥接实现接口</p><pre><code class="lang-Java">public interface DrawAPI {    void drawCircle(int radius, int x, int y);}</code></pre><p>2、创建实现了 DrawAPI 接口的实体桥接实现类</p><pre><code class="lang-Java">public class GreenCircle implements DrawAPI {    @Override    public void drawCircle(int radius, int x, int y) {        System.out.println(&quot;Drawing Circle[ color: green, radius: &quot;                + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);    }}public class RedCircle implements DrawAPI {    @Override    public void drawCircle(int radius, int x, int y) {        System.out.println(&quot;Drawing Circle[ color: red, radius: &quot;                + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);    }}</code></pre><p>3、使用 DrawAPI 接口创建抽象类 Shape</p><pre><code class="lang-Java">public abstract class Shape {    protected DrawAPI drawAPI;    protected Shape(DrawAPI drawAPI) {        this.drawAPI = drawAPI;    }    public abstract void draw();}</code></pre><p>4、创建实现了 Shape 接口的实体类</p><pre><code class="lang-Java">public class Circle extends Shape {    private int x, y, radius;    public Circle(DrawAPI drawAPI, int x, int y, int radius) {        super(drawAPI);        this.x = x;        this.y = y;        this.radius = radius;    }    @Override    public void draw() {        drawAPI.drawCircle(radius, x, y);    }}</code></pre><p>5、使用 Shape 和 DrawAPI 类画出不同颜色的圆</p><pre><code class="lang-Java">public class BridgePatternMain {    public static void main(String[] args) {        Shape redCircle = new Circle(new RedCircle(), 100, 100, 10);        Shape greenCircle = new Circle(new GreenCircle(), 100, 100, 10);        redCircle.draw();        greenCircle.draw();    }}</code></pre><p><strong>桥接模式的优缺点</strong>：</p><p>优点：抽象和实现的分离；优秀的扩展能力；实现细节对客户透明。<br>缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch12" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch12</a></p><blockquote><p>参考资料<br>1、Java设计模式之十五（桥接模式） - CSDN博客<br><a href="https://blog.csdn.net/shaopeng5211/article/details/8827507" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/shaopeng5211/article/details/8827507</a><br>2、JAVA设计模式之 桥接模式【Bridge Pattern】 - CSDN博客<br><a href="https://blog.csdn.net/janice0529/article/details/44102637" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/janice0529/article/details/44102637</a><br>3、java中的桥接模式 - 简书<br><a href="https://www.jianshu.com/p/c71562c98258" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c71562c98258</a><br>4、讲故事，学（Java）设计模式—桥接模式 - ImportNew<br><a href="http://www.importnew.com/6857.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/6857.html</a><br>5、桥接模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/bridge-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/bridge-pattern.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。&lt;/p&gt;&lt;h1 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十一）组合模式</title>
    <link href="https://www.wshunli.com/posts/fb6e1df3.html"/>
    <id>https://www.wshunli.com/posts/fb6e1df3.html</id>
    <published>2018-09-10T08:40:17.000Z</published>
    <updated>2018-09-23T03:13:59.267Z</updated>
    
    <content type="html"><![CDATA[<p>组合模式(Composite Pattern)有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/11.Composite.png" title="组合模式" alt="组合模式"></div><p>组合模式的包含角色：</p><p>(1) Component 抽象构件角色，定义参加组合对象的共有方法和属性，可以定义一些默认的行为或属性。<br>(2) Leaf 叶子构件，叶子对象，其下再也没有其他的分支，也就是遍历的最小单位。<br>(3) Composite 树枝构件，树枝对象，它的作用是组合树枝节点和叶子节点形成一个树形结构。</p><p>1、抽象构件角色</p><pre><code class="lang-Java">public abstract class Component {    public void operation() {        System.out.println(&quot;Component.operation()&quot;);    }}</code></pre><p>2、树枝构件</p><pre><code class="lang-Java">public class Composite extends Component {    private ArrayList&lt;Component&gt; componentArrayList = new ArrayList&lt;&gt;();    public void add(Component component) {        componentArrayList.add(component);    }    public void remove(Component component) {        componentArrayList.remove(component);    }    public ArrayList&lt;Component&gt; getChildren() {        return this.componentArrayList;    }}</code></pre><p>3、树叶构件</p><pre><code class="lang-Java">public class Leaf extends Component {    @Override    public void operation() {        System.out.println(&quot;Leaf.operation()&quot;);    }}</code></pre><p>4、组合模式的使用</p><pre><code class="lang-Java">public class CompositeMain {    public static void main(String[] args) {        Composite root = new Composite();        root.operation();        Composite branch = new Composite();        root.add(branch);        Leaf leaf1 = new Leaf();        Leaf leaf2 = new Leaf();        branch.add(leaf1);        branch.add(leaf2);        display(root);    }    public static void display(Composite root) {        for (Component component : root.getChildren()) {            if (component instanceof Leaf) {                component.operation();            } else {                display((Composite) component);            }        }    }}</code></pre><p><strong>组合模式的优缺点</strong>：</p><p>优点：高层模块调用简单；节点自由增加。<br>缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch11" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch11</a></p><blockquote><p>参考资料<br>1、JAVA设计模式十七—Composite(组合模式) - CSDN博客<br><a href="https://blog.csdn.net/hfmbook/article/details/7693069" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hfmbook/article/details/7693069</a><br>2、Java设计模式—组合模式 - CSDN博客<br><a href="https://blog.csdn.net/qq_25827845/article/details/52496522" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_25827845/article/details/52496522</a><br>3、组合模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/composite-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/composite-pattern.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;组合模式(Composite Pattern)有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。&lt;/p&gt;&lt;h1 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
</feed>
