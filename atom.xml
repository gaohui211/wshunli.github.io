<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  <subtitle>wshunli`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-09-21T15:14:18.225Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录2018年秋季校园招聘猿辅导面试</title>
    <link href="https://www.wshunli.com/posts/c00883be.html"/>
    <id>https://www.wshunli.com/posts/c00883be.html</id>
    <published>2018-09-21T14:26:48.000Z</published>
    <updated>2018-09-21T15:14:18.225Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘猿辅导面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘极验验证面试</title>
    <link href="https://www.wshunli.com/posts/d3039901.html"/>
    <id>https://www.wshunli.com/posts/d3039901.html</id>
    <published>2018-09-20T14:02:46.000Z</published>
    <updated>2018-09-21T15:14:18.225Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘极验验证面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘合众思壮面试</title>
    <link href="https://www.wshunli.com/posts/d5b4b71d.html"/>
    <id>https://www.wshunli.com/posts/d5b4b71d.html</id>
    <published>2018-09-20T14:02:42.000Z</published>
    <updated>2018-09-21T15:14:18.225Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘合众思壮面试。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘四维图新面试</title>
    <link href="https://www.wshunli.com/posts/48b7610a.html"/>
    <id>https://www.wshunli.com/posts/48b7610a.html</id>
    <published>2018-09-19T12:09:23.000Z</published>
    <updated>2018-09-21T15:14:18.225Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1/OzWTLqeibitzSQZUYfzY1mgwLVungt8YIADz90oe9PGbOvUpSDd1TFT21Egngqo6yddEBqvSEBfFqLiTrWpjfgPEB9w+txYID8eNtAZ0mSNAtrjON/QpnzaHJEtZkjzJaN3lOEw4LzHzRy1l+Q0tzIxadXVjhTXL9PEp7uWwjBGbJAwBtk4jJhXrthWFf98kWbnMuKZHDE/OMnuB4oJtbdTuJwvc/oBT9Opf+Qwp2L4SunUDDqtSeEMILUpWHgvQly2n/JfYKVWHjrAfCTsAGz9EMcK/YR4hfulKN4kfr8TiS8BQWJQmZ </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘四维图新面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘网易杭州面试</title>
    <link href="https://www.wshunli.com/posts/2fbed755.html"/>
    <id>https://www.wshunli.com/posts/2fbed755.html</id>
    <published>2018-09-19T12:09:17.000Z</published>
    <updated>2018-09-21T15:14:18.225Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1++e7Ysm2mq+u9QmZ5HekC/SZ8y6J7vHDpv24K22Of0XT/UFKC58tbMKE1X0pA9w+aISVLRN1z8LdAtMfhElD6rpXen6pAiCZBKsBEcZ2HyLObRZI9hMvZIy8qWoyYLHL6JqJaeOQmYcBG3GwZdYkh62fN8pIVlZsBCnzeeIIsk/Qivzm2W3StphOV7pXLNHaOOoPvS3WrC/PASIasBdZGt2Qag1Lj8lWPjMBCLdfzH+3BbGes4ECcP </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘网易杭州面试。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘金山办公面试</title>
    <link href="https://www.wshunli.com/posts/ec86f75.html"/>
    <id>https://www.wshunli.com/posts/ec86f75.html</id>
    <published>2018-09-19T12:09:13.000Z</published>
    <updated>2018-09-21T15:14:18.225Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19bTIM1wvrV45ObrT8lJ7k/zl037Jjl1jyEYqjZDQoFu8PBgR6Y9UPgC31VQVz0egTlspmqnccuAg1wgUFzBRpz/cI3FIsPo121OjbCw7yC8th6AurQ6fAuLdlPkABZznc4Q60oZzUo4S3HZlEqUIxYkmSM7l5JLsM5Beo8dVxB+EnITibB3FHohVDjwKElDl9uvI6Ph3aIp5Zx1pnFjV123+Nae8vcpFgiJ6ZFGBDKa8TIX+vVYGm4klCQDKZJikTKpdTi+i7SEzPARLjp7R/VwCYxX7lNwDbifNs2VZQxQ0kEMX4ix5RY3QY4DIc76FPS/G+R/qoEmw== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘金山办公面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘中兴通讯面试</title>
    <link href="https://www.wshunli.com/posts/7189e0ee.html"/>
    <id>https://www.wshunli.com/posts/7189e0ee.html</id>
    <published>2018-09-18T13:55:52.000Z</published>
    <updated>2018-09-21T15:14:18.225Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+Scb1HNDj9HJJvDDtg46g6CxEl7PBDBr5yBtWDFJ4P2jNflbJgNtOhs0VkJuKjYYhNdzFaaELWDBaq6X3xBDmMnQk6gXWPVjZ6MXreTUBoHuWU2IsVL+KzCg8kSvwNWXVukx47iRMc3tISjOoGCe5n6olgU1fKaQknLr1+yK6Z0BDcO7vhvg7NbVU9A2eU1x4C0Qwi62oH60KMHvkkJ6e6xOSw9GF0lCZ2Yk7RuiUf+jGqg4IwaRJdLJMpEkYWJsuG+YZaBeeHYByMB08GFSlA78V1/YuYV3lj7MbJAuE1klCcoaEfhRQPs8NYhDiX6eP2owdjPqkXvp+DlQjLTUbvZZglmo1FdvK126eMdyK6mGOSiOBKVU+/4EBsANIzkr+AehgVOpijE1REeoE1ori6sjbTs3cV3JAr/BXr1lRSgMb3AKfqycCmYjn+gmznyauA/CNwxM6OStWgO5MtZG9Pw16A1OHw1ne/89hZiYbDyhZi5ibscTPyekHb3k3iNd4GvHbZgFjAkFeJg0vkQcNPXx2EKb+ALnb9SkXzkwAVwA+WBMUHAbcPYOC/BtdIHhGnmikh+f7Hgedh4s1l13INCyWuQW+7eUzo9XEmRGCybdd9XcSyJ+2HdNtUjy7zTf0lgzTUBaJN2vzZrgdjxgIVrWOlurAQk24Uh5L4oV+PZEO0GSnzw+FYYwDdHPFL7ZqWV6Aoaewb9vpPhgc1aVuCR+D2i6KD8MWNriFVdTbp11FjRqPwL6eW45MY+coADxT1DvXAKvpx5Qfe0NVsp1UEYb0PHQtoKcOXiYM4pBYtqfOBFpK27fE2Bl323/nIy87Nu649NygML1ayquIx+Dtw/Ub6IrLm4CHAjgFOmBR1JwaRf0fW+E5qrKBdXGngTPGE2eju35zfYfGqA1+Ktvg+zqaHeZ8DWJlpO0IQ4/nls5CX4Y2M8l8uPZ5NiuwOEkM8OlBlm/m4qfPFZ/DQSZfD/jTUI9BQuhIEb3z8IG/7VaGXO3RdMxfLdsIDCz1j8mgdOW4JmdF22JA0sgXnNxsEo8b1aTPQVNokyesD3eGz7RBezGfMxOBI9AFKuwfCz/Ox+BSq8uF9xjhAu/wyMciwt6IL1iBvEvBG9C2n0dMbbrOhofb6kq0ZZZJiiRV0nKvDxdMrsdloS6x549vd1Xu6DHPJy/uPUQIfljMuRU0qwmoDBdRUsN0Jc/1/sPv4usTpqhdBXR0MYuCeEjEBDgl0bOOQVcohwgbpnOKD6/qKv5HzI2GZmhWiuT433m7SzyiPSnjDd8TjD1sQaIOt7gOPgLFynwORW6zPuuh1s/AfBtjPDf00zHXWYidgEAuv92TeSb2c7Ee2smeXi6AWySrlLzXVSZLu4l+lQk+EQz5Bv/ldvpnqSj+EdrbgDCdqQaPYS8bZuJ46pDRTTH6Yi9mwfHKmFh6Tf8jE6itRUYXztLzgbX9BWLN1F6CV1xyx7ZUQnSCYiNo7ute2Y3cpuoWFAUKmX6dzaKJiTXNS/kgP4uhY6Q1gszKj3kt5+gKxu/z6zyQqiSXm7jgpmasR93wUa3+G8K+U55WHsvVq+lZIJRxAt79ZmV8IRfS3Xc4tMe0uwqaUb9NQJCbf4OtN5zuIJXcy/VyDSWq4+uApceGRPJNt0XgZ9KBPqHlhtJniS27Ok1aRweb1oPTukn4k5UkHcgvCOsjp+A96KUcjuXmrTG0AOupHQkXdEm4SqD7kkMtu0q7g8cesngtfSl9VtjHUuIxyARCd94WmsEf3j+/l28kRiSL0fKNA5sB0eIfshCozm8o81V44nf6fWpRbd5ztl6+KbrzyiCE90ggsxmko7nEXrLJbFl0lJ5My78+7SkrLYbkAF57wbSefrrA9LNSfe3vNx8/0czb0xnGCW/6TeboVBpjR0lPZq2DqBYNu/tOVKv834Ad56dfUCoBw7MLAJq8bRBW7DeyfIDRF7WNwJol0tTPjo/yFz9oNZTPzv452F7hK9KRqO/1ItLaWcigJT1ECtZ5NIvLP0HOYNiGaHwPp/dNicWhrs59wjMSmDeaf/lIpi88AG4agmoGv3b7O+4/dhDboUyID5wggxBlzzkNB/+qDjXVnFlemoNj24TgSQjFNL4aqpANa7obzGfsuw2/tS5euJZSdoP4USK7CzFVPldG1X99/CJReL4XWErkxwVCoOzm701AJOeiUSKzm7PcbGk57Ealgm+OASsPU5I7OvkYIl+cWH2IoMV+vasYD2KNjIKLfOjhUhjdGR0mwsB66At3orkPTy15VfgaoQmcyWj81Djt8sYCRbGizMZtoHXeiJiJF5xbO6qnGniqoo3tiW+ZXfL8+e7vmtK/7dZ8uNPfmrb5VJj3Q1+zHK1PuEj3uMv0bXPnKrv/lD3VQ/3gwhn0QOaLvDUKcGLxC20JjuevJzbIyWNdm3SFmUjvh+sP/3O5gNE/OnE8Ok9PhAE+frFttxgyTG9CrWLToYwv8WiB7aJgtH3DAFnfMz07g68mJ/idm8pERTRjJjvVAv/k2IjUZhN5sRliJjJWEB8ZCj8qUYvB7bnpQzT1BzHobcTX2S0vbWd+15FDXCFa4SO+8E1LJP16T0Is/mWumRZjoYvtyO5sI0GnMy4+4opkGk+L5+hL/eijN9pVv7Bau+WOEnMJxWcbjEfWFlYjdixUpmAg/sgM6HhS4HBcUQWOUi7fa8bnjFWC3dxqv/ClisJhasEVz23wNFyXS1BWhwSFOL1e51fdmC2C3TDIueD9vC95RmhcJnQ== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘中兴通讯面试（软件开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘顺丰科技面试</title>
    <link href="https://www.wshunli.com/posts/b8083d29.html"/>
    <id>https://www.wshunli.com/posts/b8083d29.html</id>
    <published>2018-09-18T10:05:15.000Z</published>
    <updated>2018-09-21T15:14:18.225Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘顺丰科技面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘视源股份面试</title>
    <link href="https://www.wshunli.com/posts/1f4b1509.html"/>
    <id>https://www.wshunli.com/posts/1f4b1509.html</id>
    <published>2018-09-18T09:46:07.000Z</published>
    <updated>2018-09-21T15:14:18.225Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘视源股份面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Glide 图片加载框架源码解析</title>
    <link href="https://www.wshunli.com/posts/c47606cc.html"/>
    <id>https://www.wshunli.com/posts/c47606cc.html</id>
    <published>2018-09-17T05:18:23.000Z</published>
    <updated>2018-09-21T15:14:18.213Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Glide 图片加载框架，包含简单的使用和源码解析。<strong>本文内容基于 Glide 4.7.1 版本</strong>。</p><p>Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。Glide 提供了易用的 API，高性能、可扩展的图片解码管道，以及自动的资源池技术。<a href="https://muyangmin.github.io/glide-docs-cn/" rel="external nofollow noopener noreferrer" target="_blank">https://muyangmin.github.io/glide-docs-cn/</a></p><p>Glide 支持拉取，解码和展示视频快照，图片，和 GIF 动画。Glide 的 API 是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide 使用的是一个定制化的基于 HttpUrlConnection 的栈，但同时也提供了与 Google Volley 和 Square OkHttp 快速集成的工具库。</p><h1 id="Glide-的简单使用"><a href="#Glide-的简单使用" class="headerlink" title="Glide 的简单使用"></a>Glide 的简单使用</h1><p>前面有比较详细的介绍，这里不再赘述。</p><p>Android 图片加载框架 Glide 简单使用 | CirGIS</p><p><a href="https://www.wshunli.com/posts/d82d8606.html">https://www.wshunli.com/posts/d82d8606.html</a></p><h1 id="Glide-的源码解析"><a href="#Glide-的源码解析" class="headerlink" title="Glide 的源码解析"></a>Glide 的源码解析</h1><p>1、我们先看 Glide 的 with() 方法</p><pre><code class="lang-Java">  @NonNull  public static RequestManager with(@NonNull Context context) {    return getRetriever(context).get(context);  }  @NonNull  public static RequestManager with(@NonNull Activity activity) {    return getRetriever(activity).get(activity);  }  @NonNull  public static RequestManager with(@NonNull FragmentActivity activity) {    return getRetriever(activity).get(activity);  }  @NonNull  public static RequestManager with(@NonNull Fragment fragment) {    return getRetriever(fragment.getActivity()).get(fragment);  }  @NonNull  public static RequestManager with(@NonNull View view) {    return getRetriever(view.getContext()).get(view);  }</code></pre><p>未完待续。。</p><blockquote><p>参考资料<br>1、Glide源码分析 | lightSky’Blog<br><a href="http://www.lightskystreet.com/2015/10/12/glide_source_analysis/" rel="external nofollow noopener noreferrer" target="_blank">http://www.lightskystreet.com/2015/10/12/glide_source_analysis/</a><br>2、Android Glide源码解析 - 简书<br><a href="https://www.jianshu.com/p/0c383eaa5675" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0c383eaa5675</a><br>3、Android Glide源码解析 | Frodo’s Blog<br><a href="http://frodoking.github.io/2015/10/10/android-glide/" rel="external nofollow noopener noreferrer" target="_blank">http://frodoking.github.io/2015/10/10/android-glide/</a><br>4、Android源码分析：手把手带你分析 Glide的缓存功能 - CSDN博客<br><a href="https://blog.csdn.net/carson_ho/article/details/79256892" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/carson_ho/article/details/79256892</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Glide 图片加载框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 Glide 4.7.1 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。Glide 提供了易用的 API，高性能、可
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Glide" scheme="https://www.wshunli.com/tags/Glide/"/>
    
      <category term="图片加载" scheme="https://www.wshunli.com/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 网络框架源码解析</title>
    <link href="https://www.wshunli.com/posts/2bda06ba.html"/>
    <id>https://www.wshunli.com/posts/2bda06ba.html</id>
    <published>2018-09-16T01:38:40.000Z</published>
    <updated>2018-09-21T15:14:18.217Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Retrofit 网络框架，包含简单的使用和源码解析。<strong>本文内容基于 Retrofit 2.4.0 版本</strong>。</p><p>Type-safe HTTP client for Android and Java by Square, Inc. <a href="http://square.github.io/retrofit/" rel="external nofollow noopener noreferrer" target="_blank">http://square.github.io/retrofit/</a></p><p>前面介绍过 OkHttp ，Retrofit 是对 OkHttp 网络请求框架的封装，前者专注于接口的封装，后者专注于真正的网络请求。</p><p><img src="https://img.wshunli.com/Android/Retrofit/Retrofit_OkHttp.png" alt="封装流程图"></p><p>应用程序通过 Retrofit 请求网络，实际上是由 Retrofit 接口层封装请求参数、Header、Url 等信息，由 OkHttp 完成实际的请求操作；在服务端返回数据后，OkHttp 将原始的结果交给 Retrofit，Retrofit 根据用户的需求对结果进行解析。</p><h1 id="Retrofit-的简单使用"><a href="#Retrofit-的简单使用" class="headerlink" title="Retrofit 的简单使用"></a>Retrofit 的简单使用</h1><p>参考官网的介绍：</p><p>1、创建 HTTP API 接口</p><pre><code class="lang-Java">public interface GitHubService {  @GET(&quot;users/{user}/repos&quot;)  Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path(&quot;user&quot;) String user);}</code></pre><p>2、创建 Retrofit 实例，并实现接口实例</p><pre><code class="lang-Java">Retrofit retrofit = new Retrofit.Builder()    .baseUrl(&quot;https://api.github.com/&quot;)    .build();GitHubService service = retrofit.create(GitHubService.class);</code></pre><p>3、创建请求实例</p><pre><code class="lang-Java">Call&lt;List&lt;Repo&gt;&gt; call = service.listRepos(&quot;wshunli&quot;);</code></pre><p>4、发送网络请求</p><pre><code class="lang-Java">// 同步请求call.execute();// 异步请求call.enqueue(new Callback&lt;List&lt;Repo&gt;&gt;() {    @Override    public void onResponse(Call&lt;List&lt;Repo&gt;&gt; call, Response&lt;List&lt;Repo&gt;&gt; response) {    }    @Override    public void onFailure(Call&lt;List&lt;Repo&gt;&gt; call, Throwable t) {        Log.d(TAG, &quot;onFailure: &quot;);    }});</code></pre><p>和 OkHttp 流程差不多，特别是发送请求方法名字都没有变。</p><h1 id="Retrofit-的源码分析"><a href="#Retrofit-的源码分析" class="headerlink" title="Retrofit 的源码分析"></a>Retrofit 的源码分析</h1><p>Retrofit 网络请求完整的流程图如下：</p><p><img src="https://img.wshunli.com/Android/Retrofit/retrofit_full_process.min.png" alt="Retrofit 流程图"></p><p>下面详细介绍。</p><h2 id="创建-Retrofit-实例"><a href="#创建-Retrofit-实例" class="headerlink" title="创建 Retrofit 实例"></a>创建 Retrofit 实例</h2><p>Retrofit 实例化，也是使用的建造者模式。</p><p><img src="https://img.wshunli.com/Android/Retrofit/retrofit_builder.png" alt="retrofit_builder"></p><p>我们先看 Builder 成员变量的含义：</p><pre><code class="lang-Java">// Retrofit#Builderpublic static final class Builder {// 当前系统环境private final Platform platform;// 网络请求器的工厂private @Nullable okhttp3.Call.Factory callFactory;// 网络请求地址private HttpUrl baseUrl;// 数据转换器工厂集合private final List&lt;Converter.Factory&gt; converterFactories = new ArrayList&lt;&gt;();// 网络请求适配器工厂集合private final List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;();// 回调方法执行器private @Nullable Executor callbackExecutor;// 标志位private boolean validateEagerly;</code></pre><p>1、首先构造函数中通过 <code>Platform.get()</code> 初始化了平台参数</p><pre><code class="lang-Java">Builder(Platform platform) {    this.platform = platform;}public Builder() {    this(Platform.get());}Builder(Retrofit retrofit) {    platform = Platform.get();    callFactory = retrofit.callFactory;    baseUrl = retrofit.baseUrl;    converterFactories.addAll(retrofit.converterFactories);    // Remove the default BuiltInConverters instance added by build().    converterFactories.remove(0);    callAdapterFactories.addAll(retrofit.callAdapterFactories);    // Remove the default, platform-aware call adapter added by build().    callAdapterFactories.remove(callAdapterFactories.size() - 1);    callbackExecutor = retrofit.callbackExecutor;    validateEagerly = retrofit.validateEagerly;}</code></pre><p>我们可以看下判断方法：</p><pre><code class="lang-Java">// Platformclass Platform {  private static final Platform PLATFORM = findPlatform();  static Platform get() {    return PLATFORM;  }  private static Platform findPlatform() {    try {      Class.forName(&quot;android.os.Build&quot;);      if (Build.VERSION.SDK_INT != 0) {        return new Android();      }    } catch (ClassNotFoundException ignored) {    }    try {      Class.forName(&quot;java.util.Optional&quot;);      return new Java8();    } catch (ClassNotFoundException ignored) {    }    return new Platform();  }  /* 省略部分无关代码 */}</code></pre><p>后面如果有需要，我们也可以直接拷贝。</p><p>2、然后设置 Retrofit 所需的参数即可</p><pre><code class="lang-Java">public Builder baseUrl(String baseUrl) {    checkNotNull(baseUrl, &quot;baseUrl == null&quot;);    HttpUrl httpUrl = HttpUrl.parse(baseUrl);    if (httpUrl == null) {    throw new IllegalArgumentException(&quot;Illegal URL: &quot; + baseUrl);    }    return baseUrl(httpUrl);}public Builder baseUrl(HttpUrl baseUrl) {    checkNotNull(baseUrl, &quot;baseUrl == null&quot;);    List&lt;String&gt; pathSegments = baseUrl.pathSegments();    if (!&quot;&quot;.equals(pathSegments.get(pathSegments.size() - 1))) {    throw new IllegalArgumentException(&quot;baseUrl must end in /: &quot; + baseUrl);    }    this.baseUrl = baseUrl;    return this;}/** Add converter factory for serialization and deserialization of objects. */public Builder addConverterFactory(Converter.Factory factory) {    converterFactories.add(checkNotNull(factory, &quot;factory == null&quot;));    return this;}public Builder addCallAdapterFactory(CallAdapter.Factory factory) {    callAdapterFactories.add(checkNotNull(factory, &quot;factory == null&quot;));    return this;}</code></pre><p>3、最后是 build() 方法</p><pre><code class="lang-Java">public Retrofit build() {    if (baseUrl == null) {    throw new IllegalStateException(&quot;Base URL required.&quot;);    }    okhttp3.Call.Factory callFactory = this.callFactory;    if (callFactory == null) {    callFactory = new OkHttpClient();    }    Executor callbackExecutor = this.callbackExecutor;    if (callbackExecutor == null) {    callbackExecutor = platform.defaultCallbackExecutor();    }    // Make a defensive copy of the adapters and add the default Call adapter.    List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;(this.callAdapterFactories);    callAdapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));    // Make a defensive copy of the converters.    List&lt;Converter.Factory&gt; converterFactories =        new ArrayList&lt;&gt;(1 + this.converterFactories.size());    // Add the built-in converter factory first. This prevents overriding its behavior but also    // ensures correct behavior when using converters that consume all types.    converterFactories.add(new BuiltInConverters());    converterFactories.addAll(this.converterFactories);    return new Retrofit(callFactory, baseUrl, unmodifiableList(converterFactories),        unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);}</code></pre><h2 id="创建-API-实例"><a href="#创建-API-实例" class="headerlink" title="创建 API 实例"></a>创建 API 实例</h2><p>获取 API 实例使用 Retrofit 的 <code>create()</code> 方法</p><pre><code class="lang-Java">// Retrofit#create()public &lt;T&gt; T create(final Class&lt;T&gt; service) {    Utils.validateServiceInterface(service);    if (validateEagerly) {        eagerlyValidateMethods(service);    }    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] { service },        new InvocationHandler() {            private final Platform platform = Platform.get();            @Override public Object invoke(Object proxy, Method method, @Nullable Object[] args)                throws Throwable {            // If the method is a method from Object then defer to normal invocation.            if (method.getDeclaringClass() == Object.class) {                return method.invoke(this, args);            }            if (platform.isDefaultMethod(method)) {                return platform.invokeDefaultMethod(method, service, proxy, args);            }            ServiceMethod&lt;Object, Object&gt; serviceMethod =                (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);            OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);            return serviceMethod.adapt(okHttpCall);            }        });}</code></pre><p>创建 API 实例使用的是 <strong>动态代理</strong> 设计模式。</p><h2 id="创建请求实例"><a href="#创建请求实例" class="headerlink" title="创建请求实例"></a>创建请求实例</h2><p>创建请求实例，跟钱买你的动态代理有关。</p><pre><code class="lang-Java">// Retrofit#create()ServiceMethod&lt;Object, Object&gt; serviceMethod =    (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);return serviceMethod.adapt(okHttpCall);</code></pre><p>1、<code>loadServiceMethod()</code> 方法</p><p>一个 <code>ServiceMethod</code> 对应于一个 API 接口的一个方法，<code>loadServiceMethod()</code> 方法负责加载 <code>ServiceMethod</code></p><pre><code class="lang-Java">// Retrofit#loadServiceMethod()ServiceMethod&lt;?, ?&gt; loadServiceMethod(Method method) {    ServiceMethod&lt;?, ?&gt; result = serviceMethodCache.get(method);    if (result != null) return result;    synchronized (serviceMethodCache) {        result = serviceMethodCache.get(method);        if (result == null) {        result = new ServiceMethod.Builder&lt;&gt;(this, method).build();        serviceMethodCache.put(method, result);        }    }    return result;}</code></pre><p>2、<code>OkHttpCall</code> 类</p><p><code>OkHttpCall</code> 实现了 <code>retrofit2.Call</code> ，我们通常会使用它的 <code>execute()</code> 和 <code>enqueue()</code> 接口。</p><pre><code class="lang-Java">OkHttpCall(ServiceMethod&lt;T, ?&gt; serviceMethod, @Nullable Object[] args) {    this.serviceMethod = serviceMethod;    this.args = args;}</code></pre><p>构造方法也没有什么好看的。</p><h2 id="发送网络请求"><a href="#发送网络请求" class="headerlink" title="发送网络请求"></a>发送网络请求</h2><p>发送网络请求其实也就是 <code>OkHttpCall</code> 类中的方法。</p><p>1、<strong>同步请求</strong> 使用 <code>execute()</code> 方法</p><pre><code class="lang-Java">// OkHttpCall#execute()@Override public Response&lt;T&gt; execute() throws IOException {    okhttp3.Call call;    synchronized (this) {        if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);        executed = true;        if (creationFailure != null) {            if (creationFailure instanceof IOException) {                throw (IOException) creationFailure;            } else if (creationFailure instanceof RuntimeException) {                throw (RuntimeException) creationFailure;            } else {                throw (Error) creationFailure;            }        }        call = rawCall;        if (call == null) {            try {                call = rawCall = createRawCall();            } catch (IOException | RuntimeException | Error e) {                throwIfFatal(e); //  Do not assign a fatal error to creationFailure.                creationFailure = e;                throw e;            }        }    }    if (canceled) {        call.cancel();    }    return parseResponse(call.execute());}</code></pre><p>这里就是 Retrofit 和 OkHttp 交互的核心了，分为三步：</p><p>（1）创建 <code>okhttp3.Call</code> ，包括构造参数</p><pre><code class="lang-Java">private okhttp3.Call createRawCall() throws IOException {    okhttp3.Call call = serviceMethod.toCall(args);    if (call == null) {        throw new NullPointerException(&quot;Call.Factory returned null.&quot;);    }    return call;}</code></pre><p>（2）执行网络请求，也就是 OkHttp 的同步网络请求</p><pre><code class="lang-Java">call.execute()</code></pre><p>（3）解析返回的结果</p><pre><code class="lang-Java">Response&lt;T&gt; parseResponse(okhttp3.Response rawResponse) throws IOException {    ResponseBody rawBody = rawResponse.body();    // Remove the body&#39;s source (the only stateful object) so we can pass the response along.    rawResponse = rawResponse.newBuilder()        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))        .build();    int code = rawResponse.code();    if (code &lt; 200 || code &gt;= 300) {        try {        // Buffer the entire body to avoid future I/O.        ResponseBody bufferedBody = Utils.buffer(rawBody);        return Response.error(bufferedBody, rawResponse);        } finally {        rawBody.close();        }    }    if (code == 204 || code == 205) {        rawBody.close();        return Response.success(null, rawResponse);    }    ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);    try {        T body = serviceMethod.toResponse(catchingBody);        return Response.success(body, rawResponse);    } catch (RuntimeException e) {        // If the underlying source threw an exception, propagate that rather than indicating it was        // a runtime exception.        catchingBody.throwIfCaught();        throw e;    }}</code></pre><p>2、<strong>异步请求</strong> 使用 <code>enqueue()</code> 方法</p><pre><code class="lang-Java">@Override public void enqueue(final Callback&lt;T&gt; callback) {    checkNotNull(callback, &quot;callback == null&quot;);    okhttp3.Call call;    Throwable failure;    synchronized (this) {        if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);        executed = true;        call = rawCall;        failure = creationFailure;        if (call == null &amp;&amp; failure == null) {        try {            call = rawCall = createRawCall();        } catch (Throwable t) {            throwIfFatal(t);            failure = creationFailure = t;        }        }    }    if (failure != null) {        callback.onFailure(this, failure);        return;    }    if (canceled) {        call.cancel();    }    call.enqueue(new okhttp3.Callback() {        @Override public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse) {        Response&lt;T&gt; response;        try {            response = parseResponse(rawResponse);        } catch (Throwable e) {            callFailure(e);            return;        }        try {            callback.onResponse(OkHttpCall.this, response);        } catch (Throwable t) {            t.printStackTrace();        }        }        @Override public void onFailure(okhttp3.Call call, IOException e) {        callFailure(e);        }        private void callFailure(Throwable e) {        try {            callback.onFailure(OkHttpCall.this, e);        } catch (Throwable t) {            t.printStackTrace();        }        }    });}</code></pre><p>我们可以看到和同步请求是一致的，实际请求交给了 <code>okhttp3.Call#enqueue(Callback responseCallback)</code> 来实现，并在它的 <code>callback</code> 中调用 <code>parseResponse()</code> 解析响应数据，并转发给传入的 <code>callback</code> 。</p><p>Retrofit 源码就先介绍到这里了，后面有机会再详细介绍。</p><blockquote><p>参考资料<br>1、Retrofit分析-漂亮的解耦套路 - 简书<br><a href="https://www.jianshu.com/p/45cb536be2f4" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/45cb536be2f4</a><br>2、Android：手把手带你 深入读懂 Retrofit 2.0 源码 - 简书<br><a href="https://www.jianshu.com/p/0c055ad46b6c" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0c055ad46b6c</a><br>3、Retrofit源码分析（超详细） - 简书<br><a href="https://www.jianshu.com/p/097947afddaf" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/097947afddaf</a><br>4、拆轮子系列：拆 Retrofit - Piasy的博客 | Piasy Blog<br><a href="https://blog.piasy.com/2016/06/25/Understand-Retrofit/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.piasy.com/2016/06/25/Understand-Retrofit/</a><br>5、Retrofit源码解析 | mundane的幻想空间<br><a href="https://mundane799699.github.io/2018/03/13/retrofit-analysis/" rel="external nofollow noopener noreferrer" target="_blank">https://mundane799699.github.io/2018/03/13/retrofit-analysis/</a><br>6、Retrofit源码解析 - 掘金<br><a href="https://juejin.im/post/5acee62c6fb9a028df22ffee" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/post/5acee62c6fb9a028df22ffee</a><br>7、Retrofit源码解析 | 俞其荣的博客 | Qirong Yu’s Blog<br><a href="https://yuqirong.me/2017/08/03/Retrofit源码解析/" rel="external nofollow noopener noreferrer" target="_blank">https://yuqirong.me/2017/08/03/Retrofit源码解析/</a><br>8、android-cn/android-open-project-analysis<br><a href="https://github.com/android-cn/android-open-project-analysis/tree/master/tool-lib/network/retrofit" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/android-cn/android-open-project-analysis/tree/master/tool-lib/network/retrofit</a><br>9、【Android】Retrofit源码分析 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/79933220" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/79933220</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Retrofit 网络框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 Retrofit 2.4.0 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Type-safe HTTP client for Android and Java by Square, In
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
      <category term="Retrofit" scheme="https://www.wshunli.com/tags/Retrofit/"/>
    
      <category term="网络框架" scheme="https://www.wshunli.com/tags/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp 网络框架源码解析</title>
    <link href="https://www.wshunli.com/posts/5bd2f229.html"/>
    <id>https://www.wshunli.com/posts/5bd2f229.html</id>
    <published>2018-09-13T08:28:11.000Z</published>
    <updated>2018-09-21T15:14:18.217Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 OkHttp 网络框架，包含简单的使用和源码解析。<strong>本文内容基于 OkHttp 3.11.0 版本</strong>。</p><p>网上关于 OkHttp 源码解析的文章有很多，我在这里参考他们的资料，形成自己的知识体系。</p><p>只是停留在应用层面，会使用一些框架是不行的，还需要深入源码、剖析结构。</p><p>An HTTP+HTTP/2 client for Android and Java applications. <a href="http://square.github.io/okhttp/" rel="external nofollow noopener noreferrer" target="_blank">http://square.github.io/okhttp/</a></p><blockquote><p>支持 HTTP/2 协议，允许连接到同一个主机地址的所有请求共享 Socket 。<br>在 HTTP/2 协议不可用的情况下，通过连接池减少请求的延迟。<br>支持 GZip 透明压缩，减少传输的数据包大小。<br>支持响应缓存，避免同一个重复的网络请求。</p></blockquote><h1 id="OkHttp-的简单使用"><a href="#OkHttp-的简单使用" class="headerlink" title="OkHttp 的简单使用"></a>OkHttp 的简单使用</h1><p>一般情况下，对于网络框架有两种常见的使用场景，同步请求和异步请求。</p><p><strong>同步请求</strong>：</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);Response response = call.execute();Log.d(TAG, &quot;onCreate: &quot; + response.body().string());</code></pre><p><strong>异步请求</strong>：</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);call.enqueue(new Callback() {    @Override    public void onFailure(Call call, IOException e) {    }    @Override    public void onResponse(Call call, Response response) throws IOException {        Log.d(TAG, &quot;onCreate: &quot; + response.body().string());    }});</code></pre><p>同步请求和异步请求类似，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，只不过最后执行 enqueue() 方法，整体和网络请求的思路相似。</p><h1 id="OkHttp-的源码分析"><a href="#OkHttp-的源码分析" class="headerlink" title="OkHttp 的源码分析"></a>OkHttp 的源码分析</h1><p>OkHttp 网络请求完整的流程图如下：</p><div align="center"><img src="https://img.wshunli.com/Android/OkHttp/okhttp_full_process.min.png" title="OkHttp 流程图" alt="OkHttp 流程图"></div><p>下面详细介绍。</p><h2 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h2><p>同步请求，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，最后执行 execute() 方法，整体和网络请求的思路相似。</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);Response response = call.execute();</code></pre><h3 id="创建-OkHttpClient-对象"><a href="#创建-OkHttpClient-对象" class="headerlink" title="创建 OkHttpClient 对象"></a>创建 OkHttpClient 对象</h3><p>我们先看 OkHttp 的构造函数：</p><pre><code class="lang-Java">public OkHttpClient() {  this(new Builder());}</code></pre><p>这里是直接实例化，实质上是使用 <strong>建造者模式</strong> 构建 OkHttpClient 实例。</p><p>下面是 OkHttpClient 内部类 Builder 的构造方法：</p><pre><code class="lang-Java">public Builder() {  dispatcher = new Dispatcher();  protocols = DEFAULT_PROTOCOLS;  connectionSpecs = DEFAULT_CONNECTION_SPECS;  eventListenerFactory = EventListener.factory(EventListener.NONE);  proxySelector = ProxySelector.getDefault();  cookieJar = CookieJar.NO_COOKIES;  socketFactory = SocketFactory.getDefault();  hostnameVerifier = OkHostnameVerifier.INSTANCE;  certificatePinner = CertificatePinner.DEFAULT;  proxyAuthenticator = Authenticator.NONE;  authenticator = Authenticator.NONE;  connectionPool = new ConnectionPool();  dns = Dns.SYSTEM;  followSslRedirects = true;  followRedirects = true;  retryOnConnectionFailure = true;  connectTimeout = 10_000;  readTimeout = 10_000;  writeTimeout = 10_000;  pingInterval = 0;}public OkHttpClient build() {  return new OkHttpClient(this);}</code></pre><p>这里 <code>OkHttpClient.Builder</code> 有很多参数，后面再介绍。</p><h3 id="创建-Request-对象"><a href="#创建-Request-对象" class="headerlink" title="创建 Request 对象"></a>创建 Request 对象</h3><p>和 OkHttpClient 类似，Request 也是是使用 <strong>建造者模式</strong> 创建实例。</p><pre><code class="lang-Java">public Builder() {  this.method = &quot;GET&quot;;  this.headers = new Headers.Builder();}public Request build() {  if (url == null) throw new IllegalStateException(&quot;url == null&quot;);  return new Request(this);}</code></pre><p>其中配置默认请求方法为 <code>GET</code> ，还有一些头部的默认参数。</p><h3 id="创建-Call-对象"><a href="#创建-Call-对象" class="headerlink" title="创建 Call 对象"></a>创建 Call 对象</h3><p>OkHttpClient 实现了 <code>Call.Factory</code> ，负责根据请求创建新的 Call 对象。</p><pre><code class="lang-Java">@Override public Call newCall(Request request) {  return RealCall.newRealCall(this, request, false /* for web socket */);}</code></pre><p>Call 只是个接口，实际是实例化的 RealCall 对象。</p><pre><code class="lang-Java">private RealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {  this.client = client;  this.originalRequest = originalRequest;  this.forWebSocket = forWebSocket;  this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client, forWebSocket);}static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {  // Safely publish the Call instance to the EventListener.  RealCall call = new RealCall(client, originalRequest, forWebSocket);  call.eventListener = client.eventListenerFactory().create(call);  return call;}</code></pre><h3 id="发送同步网络请求"><a href="#发送同步网络请求" class="headerlink" title="发送同步网络请求"></a>发送同步网络请求</h3><p>发送请求也是在 <code>RealCall</code> 的 <code>execute()</code> 方法中执行的。</p><pre><code class="lang-Java">// RealCall#execute()@Override public Response execute() throws IOException {  synchronized (this) {    if (executed) throw new IllegalStateException(&quot;Already Executed&quot;);    executed = true;  }  captureCallStackTrace();  eventListener.callStart(this);  try {    client.dispatcher().executed(this);    Response result = getResponseWithInterceptorChain();    if (result == null) throw new IOException(&quot;Canceled&quot;);    return result;  } catch (IOException e) {    eventListener.callFailed(this, e);    throw e;  } finally {    client.dispatcher().finished(this);  }}</code></pre><p>在这里主要做了四件事：</p><p>1、检查 Call 是否执行过，没有执行将 <code>executed</code> 赋值为 true ，保证每个请求只执行一次；<br>2、使用 <code>client.dispatcher().executed(this)</code> 来进行实际的请求；<br>3、调用 <code>getResponseWithInterceptorChain()</code> 方法，获取请求响应的结果；<br>4、最后 <code>dispatcher</code> 结束自己。</p><pre><code class="lang-Java">// Dispatcher#executed()/** Used by {@code Call#execute} to signal it is in-flight. */synchronized void executed(RealCall call) {  runningSyncCalls.add(call);}</code></pre><p>在同步请求中 <code>dispatcher</code> 只是负责判断请求执行的状态，在异步请求中参与内容过多。</p><p>下面我们来看 <code>getResponseWithInterceptorChain()</code> 方法：</p><pre><code class="lang-Java">Response getResponseWithInterceptorChain() throws IOException {  // Build a full stack of interceptors.  List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();  interceptors.addAll(client.interceptors()); // 加入用户自定义的拦截器  interceptors.add(retryAndFollowUpInterceptor); // 重试和重定向拦截器  interceptors.add(new BridgeInterceptor(client.cookieJar())); // 加入转化请求响应的拦截器  interceptors.add(new CacheInterceptor(client.internalCache())); // 加入缓存拦截器  interceptors.add(new ConnectInterceptor(client)); // 加入连接拦截器  if (!forWebSocket) {      interceptors.addAll(client.networkInterceptors()); // 加入用户自定义的网络拦截器  }  interceptors.add(new CallServerInterceptor(forWebSocket)); // 加入请求响应的拦截器  Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,          originalRequest, this, eventListener, client.readTimeoutMillis());  // 利用 chain 来链式调用拦截器，最后的返回结果就是 Response 对象  return chain.proceed(originalRequest);}</code></pre><p>我们都知道，拦截器是 OkHttp 的精髓。</p><p>1、<code>client.interceptors()</code> ，首先加入 <code>interceptors</code> 的是用户自定义的拦截器，比如修改请求头的拦截器等；<br>2、<code>RetryAndFollowUpInterceptor</code> 是用来重试和重定向的拦截器，在下面我们会讲到；<br>3、<code>BridgeInterceptor</code> 是用来将用户友好的请求转化为向服务器的请求，之后又把服务器的响应转化为对用户友好的响应；<br>4、<code>CacheInterceptor</code> 是缓存拦截器，若存在缓存并且可用就直接返回该缓存，否则会向服务器请求；<br>5、<code>ConnectInterceptor</code> 用来建立连接的拦截器；<br>6、<code>client.networkInterceptors()</code> 加入用户自定义的 <code>networkInterceptors</code> ；<br>7、<code>CallServerInterceptor</code>是真正向服务器发出请求且得到响应的拦截器；</p><p>最后在聚合了这些拦截器后，利用 <code>RealInterceptorChain</code> 来链式调用这些拦截器，利用的就是 <strong>责任链模式</strong> 。</p><font font="" size="3" color="#FF0000">下面介绍 OkHttp 中的 拦截器</font><p>拦截器 <code>Interceptor</code> 是 OkHttp 的核心，<strong>实际上它把实际的网络请求、缓存、透明压缩等功能都统一了起来</strong>，每一个功能都只是一个 <code>Interceptor</code>，它们再连接成一个 <code>Interceptor.Chain</code>，环环相扣，最终圆满完成一次网络请求。</p><div align="center"><img src="https://img.wshunli.com/Android/OkHttp/okhttp_interceptors.jpg" title="OkHttp 拦截器" alt="OkHttp 拦截器"></div><p>1、<code>RealInterceptorChain</code> 拦截器链</p><p>拦截器链 <code>RealInterceptorChain</code> 是真正把这些拦截器串起来的一个角色，调用 <code>proceed()</code> 方法</p><pre><code class="lang-Java">public Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,    RealConnection connection) throws IOException {  if (index &gt;= interceptors.size()) throw new AssertionError();  calls++;  // If we already have a stream, confirm that the incoming request will use it.  if (this.httpCodec != null &amp;&amp; !this.connection.supportsUrl(request.url())) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptors.get(index - 1)        + &quot; must retain the same host and port&quot;);  }  // If we already have a stream, confirm that this is the only call to chain.proceed().  if (this.httpCodec != null &amp;&amp; calls &gt; 1) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptors.get(index - 1)        + &quot; must call proceed() exactly once&quot;);  }  // Call the next interceptor in the chain.  // 得到下一次对应的 RealInterceptorChain  RealInterceptorChain next = new RealInterceptorChain(interceptors, streamAllocation, httpCodec,      connection, index + 1, request, call, eventListener, connectTimeout, readTimeout,      writeTimeout);  // 当前次数的 interceptor  Interceptor interceptor = interceptors.get(index);  // 进行拦截处理，并且在 interceptor 链式调用 next 的 proceed 方法  Response response = interceptor.intercept(next);  // Confirm that the next interceptor made its required call to chain.proceed().  // 确认下一次的 interceptor 调用过 chain.proceed()  if (httpCodec != null &amp;&amp; index + 1 &lt; interceptors.size() &amp;&amp; next.calls != 1) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptor        + &quot; must call proceed() exactly once&quot;);  }  // Confirm that the intercepted response isn&#39;t null.  if (response == null) {    throw new NullPointerException(&quot;interceptor &quot; + interceptor + &quot; returned null&quot;);  }  if (response.body() == null) {    throw new IllegalStateException(        &quot;interceptor &quot; + interceptor + &quot; returned a response with no body&quot;);  }  return response;}</code></pre><p>在代码中是一次次链式调用拦截器。</p><p>2、<code>RetryAndFollowUpInterceptor</code> 重试和重定向的拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  Request request = chain.request();  RealInterceptorChain realChain = (RealInterceptorChain) chain;  Call call = realChain.call();  EventListener eventListener = realChain.eventListener();  StreamAllocation streamAllocation = new StreamAllocation(client.connectionPool(),      createAddress(request.url()), call, eventListener, callStackTrace);  this.streamAllocation = streamAllocation;  int followUpCount = 0;  Response priorResponse = null;  while (true) {    // 如果取消，就释放资源    if (canceled) {      streamAllocation.release();      throw new IOException(&quot;Canceled&quot;);    }    Response response;    boolean releaseConnection = true;    try {      // 调用下一个拦截器      response = realChain.proceed(request, streamAllocation, null, null);      releaseConnection = false;    } catch (RouteException e) {      // The attempt to connect via a route failed. The request will not have been sent.      // 路由连接失败，请求将不会被发送      if (!recover(e.getLastConnectException(), streamAllocation, false, request)) {        throw e.getFirstConnectException();      }      releaseConnection = false;      continue;    } catch (IOException e) {      // An attempt to communicate with a server failed. The request may have been sent.      // 服务器连接失败，请求可能已被发送      boolean requestSendStarted = !(e instanceof ConnectionShutdownException);      if (!recover(e, streamAllocation, requestSendStarted, request)) throw e;      releaseConnection = false;      continue;    } finally {      // We&#39;re throwing an unchecked exception. Release any resources.      // 抛出未检查的异常，释放资源      if (releaseConnection) {        streamAllocation.streamFailed(null);        streamAllocation.release();      }    }    // Attach the prior response if it exists. Such responses never have a body.    if (priorResponse != null) {      response = response.newBuilder()          .priorResponse(priorResponse.newBuilder()                  .body(null)                  .build())          .build();    }    // 如果不需要重定向，那么 followUp 为空，会根据响应码判断    Request followUp;    try {      followUp = followUpRequest(response, streamAllocation.route());    } catch (IOException e) {      streamAllocation.release();      throw e;    }    // 释放资源，返回 response    if (followUp == null) {      if (!forWebSocket) {        streamAllocation.release();      }      return response;    }    // 关闭 response 的 body    closeQuietly(response.body());    if (++followUpCount &gt; MAX_FOLLOW_UPS) {      streamAllocation.release();      throw new ProtocolException(&quot;Too many follow-up requests: &quot; + followUpCount);    }    if (followUp.body() instanceof UnrepeatableRequestBody) {      streamAllocation.release();      throw new HttpRetryException(&quot;Cannot retry streamed HTTP body&quot;, response.code());    }    // response 和 followUp 比较是否为同一个连接    // 若为重定向就销毁旧连接，创建新连接    if (!sameConnection(response, followUp.url())) {      streamAllocation.release();      streamAllocation = new StreamAllocation(client.connectionPool(),          createAddress(followUp.url()), call, eventListener, callStackTrace);      this.streamAllocation = streamAllocation;    } else if (streamAllocation.codec() != null) {      throw new IllegalStateException(&quot;Closing the body of &quot; + response          + &quot; didn&#39;t close its backing stream. Bad interceptor?&quot;);    }    // 将重定向操作得到的新请求设置给 request    request = followUp;    priorResponse = response;  }}</code></pre><p>总体来说，<code>RetryAndFollowUpInterceptor</code> 是用来失败重试以及重定向的拦截器。</p><p>3、<code>BridgeInterceptor</code> 桥街和适配拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  Request userRequest = chain.request();  Request.Builder requestBuilder = userRequest.newBuilder();  // 将用户友好的 request 构造为发送给服务器的 request  RequestBody body = userRequest.body();  // 若有请求体，则构造  if (body != null) {    MediaType contentType = body.contentType();    if (contentType != null) {      requestBuilder.header(&quot;Content-Type&quot;, contentType.toString());    }    long contentLength = body.contentLength();    if (contentLength != -1) {      requestBuilder.header(&quot;Content-Length&quot;, Long.toString(contentLength));      requestBuilder.removeHeader(&quot;Transfer-Encoding&quot;);    } else {      requestBuilder.header(&quot;Transfer-Encoding&quot;, &quot;chunked&quot;);      requestBuilder.removeHeader(&quot;Content-Length&quot;);    }  }  if (userRequest.header(&quot;Host&quot;) == null) {    requestBuilder.header(&quot;Host&quot;, hostHeader(userRequest.url(), false));  }  if (userRequest.header(&quot;Connection&quot;) == null) {    requestBuilder.header(&quot;Connection&quot;, &quot;Keep-Alive&quot;);  }  // If we add an &quot;Accept-Encoding: gzip&quot; header field we&#39;re responsible for also decompressing  // the transfer stream.  // 使用 gzip 压缩  boolean transparentGzip = false;  if (userRequest.header(&quot;Accept-Encoding&quot;) == null &amp;&amp; userRequest.header(&quot;Range&quot;) == null) {    transparentGzip = true;    requestBuilder.header(&quot;Accept-Encoding&quot;, &quot;gzip&quot;);  }  // 设置 cookie  List&lt;Cookie&gt; cookies = cookieJar.loadForRequest(userRequest.url());  if (!cookies.isEmpty()) {    requestBuilder.header(&quot;Cookie&quot;, cookieHeader(cookies));  }  // 设置 UA  if (userRequest.header(&quot;User-Agent&quot;) == null) {    requestBuilder.header(&quot;User-Agent&quot;, Version.userAgent());  }  // 构造完后，将 request 交给下一个拦截器去处理。最后又得到服务端响应 networkResponse  Response networkResponse = chain.proceed(requestBuilder.build());  // 保存 networkResponse 的 cookie  HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());  // 将 networkResponse 构造为对用户友好的 response  Response.Builder responseBuilder = networkResponse.newBuilder()      .request(userRequest);  // 如果 networkResponse 使用 gzip 并且有响应体的话，给用户友好的 response 设置响应体  if (transparentGzip      &amp;&amp; &quot;gzip&quot;.equalsIgnoreCase(networkResponse.header(&quot;Content-Encoding&quot;))      &amp;&amp; HttpHeaders.hasBody(networkResponse)) {    GzipSource responseBody = new GzipSource(networkResponse.body().source());    Headers strippedHeaders = networkResponse.headers().newBuilder()        .removeAll(&quot;Content-Encoding&quot;)        .removeAll(&quot;Content-Length&quot;)        .build();    responseBuilder.headers(strippedHeaders);    String contentType = networkResponse.header(&quot;Content-Type&quot;);    responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));  }  return responseBuilder.build();}</code></pre><p>在 <code>BridgeInterceptor</code> 这一步，先把用户友好的请求进行重新构造，变成了向服务器发送的请求。</p><p>之后调用 <code>chain.proceed(requestBuilder.build())</code> 进行下一个拦截器的处理。</p><p>等到后面的拦截器都处理完毕，得到响应。再把 <code>networkResponse</code> 转化成对用户友好的 <code>response</code> 。</p><p>4、<code>CacheInterceptor</code> 缓存拦截器</p><p>分析 <code>CacheInterceptor</code> 拦截器 <code>intercept()</code> 方法的源代码</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {    // 得到 request 对应缓存中的 response    Response cacheCandidate = cache != null            ? cache.get(chain.request())            : null;    // 获取当前时间，会和之前缓存的时间进行比较    long now = System.currentTimeMillis();    // 得到缓存策略    CacheStrategy strategy = new CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();    Request networkRequest = strategy.networkRequest;    Response cacheResponse = strategy.cacheResponse;    // 追踪缓存，其实就是计数    if (cache != null) {        cache.trackResponse(strategy);    }    // 缓存不适用，关闭    if (cacheCandidate != null &amp;&amp; cacheResponse == null) {        closeQuietly(cacheCandidate.body()); // The cache candidate wasn&#39;t applicable. Close it.    }    // If we&#39;re forbidden from using the network and the cache is insufficient, fail.    // 禁止网络并且没有缓存的话，返回失败    if (networkRequest == null &amp;&amp; cacheResponse == null) {        return new Response.Builder()                .request(chain.request())                .protocol(Protocol.HTTP_1_1)                .code(504)                .message(&quot;Unsatisfiable Request (only-if-cached)&quot;)                .body(Util.EMPTY_RESPONSE)                .sentRequestAtMillis(-1L)                .receivedResponseAtMillis(System.currentTimeMillis())                .build();    }    // If we don&#39;t need the network, we&#39;re done.    // 不用网络请求，返回缓存    if (networkRequest == null) {        return cacheResponse.newBuilder()                .cacheResponse(stripBody(cacheResponse))                .build();    }    Response networkResponse = null;    try {        // 交给下一个拦截器，返回 networkResponse        networkResponse = chain.proceed(networkRequest);    } finally {        // If we&#39;re crashing on I/O or otherwise, don&#39;t leak the cache body.        if (networkResponse == null &amp;&amp; cacheCandidate != null) {            closeQuietly(cacheCandidate.body());        }    }    // 如果我们同时有缓存和 networkResponse ，根据情况使用    if (cacheResponse != null) {        if (networkResponse.code() == HTTP_NOT_MODIFIED) {            Response response = cacheResponse.newBuilder()                    .headers(combine(cacheResponse.headers(), networkResponse.headers()))                    .sentRequestAtMillis(networkResponse.sentRequestAtMillis())                    .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())                    .cacheResponse(stripBody(cacheResponse))                    .networkResponse(stripBody(networkResponse))                    .build();            networkResponse.body().close();            // 更新原来的缓存至最新            // Update the cache after combining headers but before stripping the            // Content-Encoding header (as performed by initContentStream()).            cache.trackConditionalCacheHit();            cache.update(cacheResponse, response);            return response;        } else {            closeQuietly(cacheResponse.body());        }    }    Response response = networkResponse.newBuilder()            .cacheResponse(stripBody(cacheResponse))            .networkResponse(stripBody(networkResponse))            .build();    // 保存之前未缓存的缓存    if (cache != null) {        if (HttpHeaders.hasBody(response) &amp;&amp; CacheStrategy.isCacheable(response, networkRequest)) {            // Offer this request to the cache.            CacheRequest cacheRequest = cache.put(response);            return cacheWritingResponse(cacheRequest, response);        }        if (HttpMethod.invalidatesCache(networkRequest.method())) {            try {                cache.remove(networkRequest);            } catch (IOException ignored) {                // The cache cannot be written.            }        }    }    return response;}</code></pre><p><code>CacheInterceptor</code> 做的事情就是根据请求拿到缓存，若没有缓存或者缓存失效，就进入网络请求阶段，否则会返回缓存。</p><p>5、<code>ConnectInterceptor</code> 拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  RealInterceptorChain realChain = (RealInterceptorChain) chain;  Request request = realChain.request();  StreamAllocation streamAllocation = realChain.streamAllocation();  // We need the network to satisfy this request. Possibly for validating a conditional GET.  boolean doExtensiveHealthChecks = !request.method().equals(&quot;GET&quot;);  HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);  RealConnection connection = streamAllocation.connection();  return realChain.proceed(request, streamAllocation, httpCodec, connection);}</code></pre><p>实际上建立连接就是创建了一个 <code>HttpCodec</code> 对象，它是对 <code>HTTP</code> 协议操作的抽象，有两个实现：<code>Http1Codec</code> 和 <code>Http2Codec</code>，顾名思义，它们分别对应 HTTP/1.1 和 HTTP/2 版本的实现。</p><p>6、<code>CallServerInterceptor</code> 拦截器，发送和接收数据</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  RealInterceptorChain realChain = (RealInterceptorChain) chain;  HttpCodec httpCodec = realChain.httpStream();  StreamAllocation streamAllocation = realChain.streamAllocation();  RealConnection connection = (RealConnection) realChain.connection();  Request request = realChain.request();      long sentRequestMillis = System.currentTimeMillis();  // 整理请求头并写入  httpCodec.writeRequestHeaders(request);  Response.Builder responseBuilder = null;  // 检查是否为有 body 的请求方法  if (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != null) {      // If there&#39;s a &quot;Expect: 100-continue&quot; header on the request, wait for a &quot;HTTP/1.1 100      // Continue&quot; response before transmitting the request body. If we don&#39;t get that, return what      // we did get (such as a 4xx response) without ever transmitting the request body.      // 如果有 Expect: 100-continue 在请求头中，那么要等服务器的响应      if (&quot;100-continue&quot;.equalsIgnoreCase(request.header(&quot;Expect&quot;))) {          httpCodec.flushRequest();          responseBuilder = httpCodec.readResponseHeaders(true);      }      if (responseBuilder == null) {          // Write the request body if the &quot;Expect: 100-continue&quot; expectation was met.          // 写入请求体          Sink requestBodyOut = httpCodec.createRequestBody(request, request.body().contentLength());          BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);          request.body().writeTo(bufferedRequestBody);          bufferedRequestBody.close();      } else if (!connection.isMultiplexed()) {          // If the &quot;Expect: 100-continue&quot; expectation wasn&#39;t met, prevent the HTTP/1 connection from          // being reused. Otherwise we&#39;re still obligated to transmit the request body to leave the          // connection in a consistent state.          streamAllocation.noNewStreams();      }  }  httpCodec.finishRequest();  // 得到响应头  if (responseBuilder == null) {      responseBuilder = httpCodec.readResponseHeaders(false);  }  // 构造 response  Response response = responseBuilder          .request(request)          .handshake(streamAllocation.connection().handshake())          .sentRequestAtMillis(sentRequestMillis)          .receivedResponseAtMillis(System.currentTimeMillis())          .build();  int code = response.code();  // 如果为 web socket 且状态码是 101 ，那么 body 为空  if (forWebSocket &amp;&amp; code == 101) {      // Connection is upgrading, but we need to ensure interceptors see a non-null response body.      response = response.newBuilder()              .body(Util.EMPTY_RESPONSE)              .build();  } else {      // 读取 body      response = response.newBuilder()              .body(httpCodec.openResponseBody(response))              .build();  }  // 如果请求头中有 close 那么断开连接  if (&quot;close&quot;.equalsIgnoreCase(response.request().header(&quot;Connection&quot;))          || &quot;close&quot;.equalsIgnoreCase(response.header(&quot;Connection&quot;))) {      streamAllocation.noNewStreams();  }  // 抛出协议异常  if ((code == 204 || code == 205) &amp;&amp; response.body().contentLength() &gt; 0) {      throw new ProtocolException(              &quot;HTTP &quot; + code + &quot; had non-zero Content-Length: &quot; + response.body().contentLength());  }  return response;}</code></pre><p>在 <code>CallServerInterceptor</code> 中可见，关于请求和响应部分都是通过 <code>HttpCodec</code> 来实现的。而在 <code>HttpCodec</code> 内部又是通过 <code>sink</code> 和 <code>source</code> 来实现的。所以说到底还是 IO 流在起作用。</p><h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><p>和同步请求类似，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，只不过最后执行 enqueue() 方法，整体和网络请求的思路相似。</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);call.enqueue(new Callback() {    @Override    public void onFailure(Call call, IOException e) {    }    @Override    public void onResponse(Call call, Response response) throws IOException {    }});</code></pre><p>异步请求在 <code>Callback</code> 回调中获取响应，有 <code>onResponse()</code> 、 <code>onFailure()</code> 两个方法。</p><h3 id="发送异步网络请求"><a href="#发送异步网络请求" class="headerlink" title="发送异步网络请求"></a>发送异步网络请求</h3><p>前面三个步骤完全一致，我们从发送异步网络请求开始，异步请求是调用 <code>RealCall</code> 实例的 <code>enqueue()</code> 方法。。</p><pre><code class="lang-Java">// RealCall#enqueue()@Override public void enqueue(Callback responseCallback) {  synchronized (this) {    if (executed) throw new IllegalStateException(&quot;Already Executed&quot;);    executed = true;  }  captureCallStackTrace();  eventListener.callStart(this);  client.dispatcher().enqueue(new AsyncCall(responseCallback));}</code></pre><p>这里使用 <code>Dispatcher</code> 分发器我来处理请求。</p><pre><code class="lang-Java">// Dispatcher#enqueue()synchronized void enqueue(AsyncCall call) {  if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) {    runningAsyncCalls.add(call);    executorService().execute(call);  } else {    readyAsyncCalls.add(call);  }}</code></pre><p>实质上异步网络请求是在 <code>Dispatcher</code> 中做到任务调度。</p><font font="" size="3" color="#FF0000">下面介绍 OkHttp 中的 任务调度</font><p>我们来看 <code>Dispatcher</code> 类的源代码。</p><pre><code class="lang-Java">public final class Dispatcher {  private int maxRequests = 64;  private int maxRequestsPerHost = 5;  private @Nullable Runnable idleCallback;  /** Executes calls. Created lazily. */  // 线程池的实现  private @Nullable ExecutorService executorService;  /** Ready async calls in the order they&#39;ll be run. */  // 就绪等待网络请求的异步队列  private final Deque&lt;AsyncCall&gt; readyAsyncCalls = new ArrayDeque&lt;&gt;();  /** Running asynchronous calls. Includes canceled calls that haven&#39;t finished yet. */  // 正在执行网络请求的异步队列  private final Deque&lt;AsyncCall&gt; runningAsyncCalls = new ArrayDeque&lt;&gt;();  /** Running synchronous calls. Includes canceled calls that haven&#39;t finished yet. */  // 正在执行网络请求的同步队列  private final Deque&lt;RealCall&gt; runningSyncCalls = new ArrayDeque&lt;&gt;();  public Dispatcher(ExecutorService executorService) {    this.executorService = executorService;  }  public Dispatcher() {  }  // 创建线程池  public synchronized ExecutorService executorService() {    if (executorService == null) {      executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,          new SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(&quot;OkHttp Dispatcher&quot;, false));    }    return executorService;  }  /* 省略部分无关代码*/  synchronized void enqueue(AsyncCall call) {    if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) {      runningAsyncCalls.add(call);      executorService().execute(call);    } else {      readyAsyncCalls.add(call);    }  }  /* 省略部分无关代码*/}</code></pre><p>异步请求是放在线程池中执行的，如果最大异步请求数小于 64 并且 单个 HOST 的异步请求数小于 5 ，将请求添加到 <code>runningAsyncCalls</code> 中，否则添加到 <code>readyAsyncCalls</code> 中。</p><p>我们来看添加进线程池的 <code>AsyncCall</code> 类，实际上 <code>AsyncCall</code> 是继承自 <code>NamedRunnable</code> 的 <code>RealCall</code> 内部类。<code>NamedRunnable</code> 是实现了 <code>Runnable</code> 接口的抽象类。</p><pre><code class="lang-Java">final class AsyncCall extends NamedRunnable {  private final Callback responseCallback;  AsyncCall(Callback responseCallback) {    super(&quot;OkHttp %s&quot;, redactedUrl());    this.responseCallback = responseCallback;  }  String host() {    return originalRequest.url().host();  }  Request request() {    return originalRequest;  }  RealCall get() {    return RealCall.this;  }  @Override protected void execute() {    boolean signalledCallback = false;    try {      // 和同步请求相同，调用拦截器，得到响应      Response response = getResponseWithInterceptorChain();      if (retryAndFollowUpInterceptor.isCanceled()) {        signalledCallback = true;        responseCallback.onFailure(RealCall.this, new IOException(&quot;Canceled&quot;));      } else {        signalledCallback = true;        responseCallback.onResponse(RealCall.this, response);      }    } catch (IOException e) {      if (signalledCallback) {        // Do not signal the callback twice!        Platform.get().log(INFO, &quot;Callback failure for &quot; + toLoggableString(), e);      } else {        eventListener.callFailed(RealCall.this, e);        responseCallback.onFailure(RealCall.this, e);      }    } finally {      // 在 runningAsyncCalls 中移除      client.dispatcher().finished(this);    }  }}</code></pre><p>在 <code>AsyncCall</code> 的 <code>execute()</code> 方法中，也是调用了 <code>getResponseWithInterceptorChain()</code> 方法来得到 <code>Response</code> 对象。从这里开始，就和同步请求的流程是一样的，就没必要讲了。</p><p>不同的是在得到 <code>Response</code> 后，进行结果的回调。</p><p>在 <code>AsyncCall</code> 的最后调用了 <code>Dispatcher</code> 的 <code>finished()</code> 方法。</p><pre><code class="lang-Java">// Dispatcher#finished()/** Used by {@code AsyncCall#run} to signal completion. */void finished(AsyncCall call) {  finished(runningAsyncCalls, call, true);}/** Used by {@code Call#execute} to signal completion. */void finished(RealCall call) {  finished(runningSyncCalls, call, false);}private &lt;T&gt; void finished(Deque&lt;T&gt; calls, T call, boolean promoteCalls) {  int runningCallsCount;  Runnable idleCallback;  synchronized (this) {    if (!calls.remove(call)) throw new AssertionError(&quot;Call wasn&#39;t in-flight!&quot;);    // 将 readyAsyncCalls 中的 call 移动到 runningAsyncCalls 中，并加入到线程池中    if (promoteCalls) promoteCalls();    runningCallsCount = runningCallsCount();    idleCallback = this.idleCallback;  }  if (runningCallsCount == 0 &amp;&amp; idleCallback != null) {    idleCallback.run();  }}</code></pre><p>这里所做的工作就是把执行过的 Call 移除，然后将 <code>readyAsyncCalls</code> 中的 Call 移动到 <code>runningAsyncCalls</code> 中并加入线程池中。</p><blockquote><p>基本上 OkHttp 的请求响应的流程就介绍完了，主要是关于 OkHttp 的 <strong>拦截器链</strong> 和 <strong>任务调度</strong> 原理。</p></blockquote><p>还有很多细节没有涉及，需要花费很大的精力，才能理解分析透彻，后面有机会再介绍。</p><blockquote><p>参考资料：<br>1、拆轮子系列：拆 OkHttp - Piasy的博客 | Piasy Blog<br><a href="https://blog.piasy.com/2016/07/11/Understand-OkHttp/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.piasy.com/2016/07/11/Understand-OkHttp/</a><br>2、OkHttp源码解析 | 俞其荣的博客 | Qirong Yu’s Blog<br><a href="http://yuqirong.me/2017/07/25/OkHttp源码解析/" rel="external nofollow noopener noreferrer" target="_blank">http://yuqirong.me/2017/07/25/OkHttp源码解析/</a><br>3、OkHttp源码分析 - 掘金<br><a href="https://juejin.im/post/5af4482951882567286064e6" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/post/5af4482951882567286064e6</a><br>4、okhttp源码分析（一）——基本流程（超详细） - 简书<br><a href="https://www.jianshu.com/p/37e26f4ea57b" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/37e26f4ea57b</a><br>5、OKHttp源码解析 | Frodo’s Blog<br><a href="http://frodoking.github.io/2015/03/12/android-okhttp/" rel="external nofollow noopener noreferrer" target="_blank">http://frodoking.github.io/2015/03/12/android-okhttp/</a><br>6、OkHttp 源码解析（一）：基本流程 - Coding - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000012656606" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000012656606</a><br>7、【Android】OkHttp源码分析 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/79175824" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/79175824</a><br>8、深入浅出 OkHttp 源码 - DiyCode<br><a href="https://www.diycode.cc/topics/640" rel="external nofollow noopener noreferrer" target="_blank">https://www.diycode.cc/topics/640</a><br>9、Okhttp框架源码分析 - 简书<br><a href="https://www.jianshu.com/p/18a4861600d1" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/18a4861600d1</a><br>10、OkHttp 3.7源码分析（一）——整体架构 - CSDN博客<br><a href="https://blog.csdn.net/asiaLIYAZHOU/article/details/72598320" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/asiaLIYAZHOU/article/details/72598320</a><br>11、okhttp网络框架源码解析 - CSDN博客<br><a href="https://blog.csdn.net/fanguangjun123/article/details/78621585" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/fanguangjun123/article/details/78621585</a><br>12、OKHttp网络框架源码解析（一）okHttp框架同步异步请求流程和源码分析 - CSDN博客<br><a href="https://blog.csdn.net/qq_24675479/article/details/79483193" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_24675479/article/details/79483193</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 OkHttp 网络框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 OkHttp 3.11.0 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;网上关于 OkHttp 源码解析的文章有很多，我在这里参考他们的资料，形成自己的知识体系。&lt;/p&gt;&lt;p&gt;只是停留在应用
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
      <category term="网络框架" scheme="https://www.wshunli.com/tags/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/"/>
    
      <category term="OkHttp" scheme="https://www.wshunli.com/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘超图软件面试</title>
    <link href="https://www.wshunli.com/posts/9a69cc4.html"/>
    <id>https://www.wshunli.com/posts/9a69cc4.html</id>
    <published>2018-09-12T06:10:06.000Z</published>
    <updated>2018-09-21T15:14:18.225Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘超图软件面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目 Java 实现（01-10）</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-09-11T13:07:05.000Z</published>
    <updated>2018-09-21T15:14:18.221Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目 Java 实现，老是看书学习理论知识不太行，还得动手写代码啊。</p><p>笔试中的重要性不必多说，面试官还总是喜欢让手写代码。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><p>在设计模式中有详细的介绍，这里不再赘述，请移步：</p><p><a href="https://www.wshunli.com/posts/d1c4534.html">https://www.wshunli.com/posts/d1c4534.html</a></p><p>3、二维数组中查找目标值</p><blockquote><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><p>（1）直接暴力查找</p><pre><code class="lang-Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="lang-Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><blockquote><p>请实现一个函数，将一个字符串中的每个空格替换成 “%20” 。</p></blockquote><pre><code class="lang-Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="lang-Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><blockquote><p>输入一个链表，按链表值从尾到头的顺序返回一个 ArrayList 。</p></blockquote><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="lang-Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="lang-Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="lang-Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><blockquote><p>参考资料<br>1、剑指Offer<em>编程题</em>牛客网<br><a href="https://www.nowcoder.com/ta/coding-interviews" rel="external nofollow noopener noreferrer" target="_blank">https://www.nowcoder.com/ta/coding-interviews</a><br>2、【剑指offer】Java版代码（完整版） - CSDN博客<br><a href="https://blog.csdn.net/baiye_xing/article/details/78428561" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/baiye_xing/article/details/78428561</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《剑指Offer》编程题目 Java 实现，老是看书学习理论知识不太行，还得动手写代码啊。&lt;/p&gt;&lt;p&gt;笔试中的重要性不必多说，面试官还总是喜欢让手写代码。&lt;/p&gt;&lt;p&gt;1、赋值运算函数&lt;/p&gt;&lt;p&gt;2、单例设计模式&lt;/p&gt;&lt;p&gt;在设计模式中有详细的介绍，这里不再赘述，请移
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十四）观察者模式</title>
    <link href="https://www.wshunli.com/posts/58b1d741.html"/>
    <id>https://www.wshunli.com/posts/58b1d741.html</id>
    <published>2018-09-10T12:19:14.000Z</published>
    <updated>2018-09-21T15:14:18.217Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式（Observer Pattern）是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。</p><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/14.Observer.png" title="观察者模式" alt="观察者模式"></div><p>观察者模式所涉及的角色有：</p><p>(1) 抽象主题(Subject)角色：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。</p><p>(2) 具体主题(ConcreteSubject)角色：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。</p><p>(3) 抽象观察者(Observer)角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。</p><p>(4) 具体观察者(ConcreteObserver)角色：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。</p><p>1、抽象主题角色类</p><pre><code class="lang-Java">public abstract class Subject {    private List&lt;Observer&gt; list = new ArrayList&lt;&gt;();    /**     * 注册观察者对象     *     * @param observer 观察者对象     */    public void attach(Observer observer) {        list.add(observer);        System.out.println(&quot;Attached an observer&quot;);    }    /**     * 删除观察者对象     *     * @param observer 观察者对象     */    public void detach(Observer observer) {        list.remove(observer);        System.out.println(&quot;Detached an observer&quot;);    }    /**     * 通知所有注册的观察者对象     */    public void nodifyObservers(String newState) {        for (Observer observer : list) {            observer.update(newState);        }    }}</code></pre><p>2、具体主题角色类</p><pre><code class="lang-Java">public class ConcreteSubject extends Subject {    private String state;    public String getState() {        return state;    }    public void change(String newState) {        state = newState;        System.out.println(&quot;ConcreteSubject：&quot; + state);        this.nodifyObservers(state);//状态发生改变，通知各个观察者    }}</code></pre><p>3、抽象观察者角色类</p><pre><code class="lang-Java">public interface Observer {    public void update(String state);}</code></pre><p>4、具体观察者角色类</p><pre><code class="lang-Java">public class ConcreteObserver implements Observer {    private String observerState;//观察者的状态    @Override    public void update(String state) {        /**         * 更新观察者的状态，使其与目标的状态保持一致         */        observerState = state;        System.out.println(&quot;ConcreteObserver：&quot; + observerState);    }}</code></pre><p>5、观察者模式的使用</p><pre><code class="lang-Java">public class ObserverPatternMain {    public static void main(String[] args) {        ConcreteSubject subject = new ConcreteSubject();        ConcreteObserver observer = new ConcreteObserver();        subject.attach(observer);        subject.change(&quot;New State&quot;);        subject.detach(observer);        subject.change(&quot;New State&quot;);    }}</code></pre><p>当主题对象的状态改变时，将通知所有观察者，观察者接收到主题对象的通知后，将可以进行其他操作，进行响应。</p><p><strong>推模型和拉模型</strong>：</p><p>在观察者模式中，又分为推模型和拉模型两种方式。</p><p>（1）推模型：主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。</p><p>（2）拉模型：主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把 <strong>主题对象自身</strong> 通过 update() 方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。</p><p>前面就是典型的推模型，下面介绍拉模型。</p><p>1、抽象主题角色类</p><pre><code class="lang-Java">public abstract class Subject {    private List&lt;Observer&gt; list = new ArrayList&lt;&gt;();    /**     * 注册观察者对象     *     * @param observer 观察者对象     */    public void attach(Observer observer) {        list.add(observer);        System.out.println(&quot;Attached an observer&quot;);    }    /**     * 删除观察者对象     *     * @param observer 观察者对象     */    public void detach(Observer observer) {        list.remove(observer);        System.out.println(&quot;Detached an observer&quot;);    }    /**     * 通知所有注册的观察者对象     */    public void nodifyObservers() {        for (Observer observer : list) {            observer.update(this);        }    }}</code></pre><p>3、抽象观察者角色类</p><pre><code class="lang-Java">public interface Observer {    public void update(Subject subject);}</code></pre><p>4、具体观察者角色类</p><pre><code class="lang-Java">public class ConcreteObserver implements Observer {    @Override    public void update(Subject subject) {        String state = ((ConcreteSubject) subject).getState();        System.out.println(&quot;ConcreteObserver：&quot; + state);    }}</code></pre><p>5、观察者模式的使用</p><pre><code class="lang-Java">public class ObserverPatternMain {    public static void main(String[] args) {        ConcreteSubject subject = new ConcreteSubject();        ConcreteObserver observer = new ConcreteObserver();        subject.attach(observer);        subject.change(&quot;New State&quot;);        subject.detach(observer);        subject.change(&quot;New State&quot;);    }}</code></pre><p><strong>两种模式的比较</strong>：</p><p>（1）推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。</p><p>（2）推模型可能会使得观察者对象难以复用，因为观察者的 update() 方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，就可能提供新的 update() 方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update() 方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。</p><p><strong>观察者模式的优缺点</strong>：</p><p>优点：观察者和被观察者是抽象耦合的；建立一套触发机制。<br>缺点：1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch14" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch14</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之观察者模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;观察者模式（Observer Pattern）是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。&lt;/p&gt;&lt;h1 id=&quot;观
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十三）享元模式</title>
    <link href="https://www.wshunli.com/posts/180f2df5.html"/>
    <id>https://www.wshunli.com/posts/180f2df5.html</id>
    <published>2018-09-10T10:43:03.000Z</published>
    <updated>2018-09-21T15:14:18.217Z</updated>
    
    <content type="html"><![CDATA[<p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/13.Flyweight.png" title="享元模式" alt="享元模式"></div><p>享元模式所涉及到的角色如下：</p><p>(1) 抽象享元(Flyweight)角色 ：给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。</p><p>(2) 具体享元(ConcreteFlyweight)角色：实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。</p><p>(3) 享元工厂(FlyweightFactory)角色 ：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。</p><p>1、创建一个接口</p><pre><code class="lang-Java">public interface Shape {    void draw();}</code></pre><p>2、创建实现接口的实体类</p><pre><code class="lang-Java">public class Circle implements Shape {    private String color;    private int x;    private int y;    private int radius;    public Circle(String color) {        this.color = color;    }    public void setX(int x) {        this.x = x;    }    public void setY(int y) {        this.y = y;    }    public void setRadius(int radius) {        this.radius = radius;    }    @Override    public void draw() {        System.out.println(&quot;Circle: Draw() [Color : &quot; + color                + &quot;, x : &quot; + x + &quot;, y :&quot; + y + &quot;, radius :&quot; + radius);    }}</code></pre><p>3、创建一个工厂，生成基于给定信息的实体类的对象</p><pre><code class="lang-Java">public class ShapeFactory {    private static final HashMap&lt;String, Shape&gt; circleMap = new HashMap&lt;&gt;();    public static Shape getCircle(String color) {        Circle circle = (Circle) circleMap.get(color);        if (circle == null) {            circle = new Circle(color);            circleMap.put(color, circle);            System.out.println(&quot;Creating circle of color : &quot; + color);        }        return circle;    }}</code></pre><p>4、享元模式的使用</p><pre><code class="lang-Java">public class FlyweightPatternMain {    private static final String colors[] =            {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;White&quot;, &quot;Black&quot;};    public static void main(String[] args) {        for (int i = 0; i &lt; 20; ++i) {            Circle circle =                    (Circle) ShapeFactory.getCircle(getRandomColor());            circle.setX(getRandomX());            circle.setY(getRandomY());            circle.setRadius(100);            circle.draw();        }    }    private static String getRandomColor() {        return colors[(int) (Math.random() * colors.length)];    }    private static int getRandomX() {        return (int) (Math.random() * 100);    }    private static int getRandomY() {        return (int) (Math.random() * 100);    }}</code></pre><p><strong>享元模式的优缺点</strong>：</p><p>优点：系统有大量相似对象；需要缓冲池的场景。<br>缺点：注意划分外部状态和内部状态，否则可能会引起线程安全问题，这些类必须有一个工厂对象加以控制。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch13" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch13</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之享元模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/04/26/2468499.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/04/26/2468499.html</a><br>2、设计模式读书笔记——享元模式 - chenssy - 博客园<br><a href="https://www.cnblogs.com/chenssy/p/3330555.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/chenssy/p/3330555.html</a><br>3、享元模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/flyweight-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/flyweight-pattern.html</a><br>4、JAVA设计模式-享元模式（Flyweight） - 简书<br><a href="https://www.jianshu.com/p/f88b903a166a" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f88b903a166a</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。&lt;/p&gt;&lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;he
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十二）桥接模式</title>
    <link href="https://www.wshunli.com/posts/f75ecf9a.html"/>
    <id>https://www.wshunli.com/posts/f75ecf9a.html</id>
    <published>2018-09-10T09:09:30.000Z</published>
    <updated>2018-09-21T15:14:18.217Z</updated>
    
    <content type="html"><![CDATA[<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p><h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p>桥接模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/12.Bridge.png" title="桥接模式" alt="桥接模式"></div><p>桥接模式包含如下角色：</p><p>(1) Abstraction：抽象类，抽象部分的接口。通常在这个对象里面，要维护一个实现部分的对象引用，在抽象对象里面的方法，需要调用实现部分的对象来完成。这个对象里面的方法，通常都是跟具体的业务相关的方法。Shape<br>(2) RefinedAbstraction：扩充抽象类，扩展抽象部分的接口，通常在这些对象里面，定义跟实际业务相关的方法，这些方法的实现通常会使用Abstraction中定义的方法，也可能需要调用实现部分的对象来完成。Circle<br>(3) Implementor：实现类接口，定义实现部分的接口，这个接口不用和 Abstraction 里面的方法一致，通常是由 Implementor 接口提供基本的操作，而 Abstraction 里面定义的是基于这些基本操作的业务方法，也就是说 Abstraction 定义了基于这些基本操作的较高层次的操作。DrawAPI<br>(4) ConcreteImplementor：具体实现类，真正实现 Implementor 接口的对象。GreenCircle、RedCircle</p><p>1、创建桥接实现接口</p><pre><code class="lang-Java">public interface DrawAPI {    void drawCircle(int radius, int x, int y);}</code></pre><p>2、创建实现了 DrawAPI 接口的实体桥接实现类</p><pre><code class="lang-Java">public class GreenCircle implements DrawAPI {    @Override    public void drawCircle(int radius, int x, int y) {        System.out.println(&quot;Drawing Circle[ color: green, radius: &quot;                + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);    }}public class RedCircle implements DrawAPI {    @Override    public void drawCircle(int radius, int x, int y) {        System.out.println(&quot;Drawing Circle[ color: red, radius: &quot;                + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);    }}</code></pre><p>3、使用 DrawAPI 接口创建抽象类 Shape</p><pre><code class="lang-Java">public abstract class Shape {    protected DrawAPI drawAPI;    protected Shape(DrawAPI drawAPI) {        this.drawAPI = drawAPI;    }    public abstract void draw();}</code></pre><p>4、创建实现了 Shape 接口的实体类</p><pre><code class="lang-Java">public class Circle extends Shape {    private int x, y, radius;    public Circle(DrawAPI drawAPI, int x, int y, int radius) {        super(drawAPI);        this.x = x;        this.y = y;        this.radius = radius;    }    @Override    public void draw() {        drawAPI.drawCircle(radius, x, y);    }}</code></pre><p>5、使用 Shape 和 DrawAPI 类画出不同颜色的圆</p><pre><code class="lang-Java">public class BridgePatternMain {    public static void main(String[] args) {        Shape redCircle = new Circle(new RedCircle(), 100, 100, 10);        Shape greenCircle = new Circle(new GreenCircle(), 100, 100, 10);        redCircle.draw();        greenCircle.draw();    }}</code></pre><p><strong>桥接模式的优缺点</strong>：</p><p>优点：抽象和实现的分离；优秀的扩展能力；实现细节对客户透明。<br>缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch12" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch12</a></p><blockquote><p>参考资料<br>1、Java设计模式之十五（桥接模式） - CSDN博客<br><a href="https://blog.csdn.net/shaopeng5211/article/details/8827507" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/shaopeng5211/article/details/8827507</a><br>2、JAVA设计模式之 桥接模式【Bridge Pattern】 - CSDN博客<br><a href="https://blog.csdn.net/janice0529/article/details/44102637" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/janice0529/article/details/44102637</a><br>3、java中的桥接模式 - 简书<br><a href="https://www.jianshu.com/p/c71562c98258" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c71562c98258</a><br>4、讲故事，学（Java）设计模式—桥接模式 - ImportNew<br><a href="http://www.importnew.com/6857.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/6857.html</a><br>5、桥接模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/bridge-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/bridge-pattern.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。&lt;/p&gt;&lt;h1 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十一）组合模式</title>
    <link href="https://www.wshunli.com/posts/fb6e1df3.html"/>
    <id>https://www.wshunli.com/posts/fb6e1df3.html</id>
    <published>2018-09-10T08:40:17.000Z</published>
    <updated>2018-09-21T15:14:18.217Z</updated>
    
    <content type="html"><![CDATA[<p>组合模式(Composite Pattern)有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/11.Composite.png" title="组合模式" alt="组合模式"></div><p>组合模式的包含角色：</p><p>(1) Component 抽象构件角色，定义参加组合对象的共有方法和属性，可以定义一些默认的行为或属性。<br>(2) Leaf 叶子构件，叶子对象，其下再也没有其他的分支，也就是遍历的最小单位。<br>(3) Composite 树枝构件，树枝对象，它的作用是组合树枝节点和叶子节点形成一个树形结构。</p><p>1、抽象构件角色</p><pre><code class="lang-Java">public abstract class Component {    public void operation() {        System.out.println(&quot;Component.operation()&quot;);    }}</code></pre><p>2、树枝构件</p><pre><code class="lang-Java">public class Composite extends Component {    private ArrayList&lt;Component&gt; componentArrayList = new ArrayList&lt;&gt;();    public void add(Component component) {        componentArrayList.add(component);    }    public void remove(Component component) {        componentArrayList.remove(component);    }    public ArrayList&lt;Component&gt; getChildren() {        return this.componentArrayList;    }}</code></pre><p>3、树叶构件</p><pre><code class="lang-Java">public class Leaf extends Component {    @Override    public void operation() {        System.out.println(&quot;Leaf.operation()&quot;);    }}</code></pre><p>4、组合模式的使用</p><pre><code class="lang-Java">public class CompositeMain {    public static void main(String[] args) {        Composite root = new Composite();        root.operation();        Composite branch = new Composite();        root.add(branch);        Leaf leaf1 = new Leaf();        Leaf leaf2 = new Leaf();        branch.add(leaf1);        branch.add(leaf2);        display(root);    }    public static void display(Composite root) {        for (Component component : root.getChildren()) {            if (component instanceof Leaf) {                component.operation();            } else {                display((Composite) component);            }        }    }}</code></pre><p><strong>组合模式的优缺点</strong>：</p><p>优点：高层模块调用简单；节点自由增加。<br>缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch11" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch11</a></p><blockquote><p>参考资料<br>1、JAVA设计模式十七—Composite(组合模式) - CSDN博客<br><a href="https://blog.csdn.net/hfmbook/article/details/7693069" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hfmbook/article/details/7693069</a><br>2、Java设计模式—组合模式 - CSDN博客<br><a href="https://blog.csdn.net/qq_25827845/article/details/52496522" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_25827845/article/details/52496522</a><br>3、组合模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/composite-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/composite-pattern.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;组合模式(Composite Pattern)有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。&lt;/p&gt;&lt;h1 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十）代理模式</title>
    <link href="https://www.wshunli.com/posts/b4b3761.html"/>
    <id>https://www.wshunli.com/posts/b4b3761.html</id>
    <published>2018-09-10T08:12:52.000Z</published>
    <updated>2018-09-21T15:14:18.217Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式(Proxy Pattern)给某一个对象提供一个代理，并由代理对象控制对原对象的引用。</p><p>代理模式的英文叫做 Proxy 或 Surrogate ，它是一种对象结构型模式。</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/10.Proxy.png" title="代理模式" alt="代理模式"></div><p>代理模式一般涉及到的角色有：</p><p>(1) 抽象角色：声明真实对象和代理对象的共同接口；<br>(2) 代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装；<br>(3) 真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p><p>1、抽象对象角色</p><pre><code class="lang-Java">public abstract class AbstractObject {    public abstract void operation();}</code></pre><p>2、目标对象角色</p><pre><code class="lang-Java">public class RealObject extends AbstractObject {    @Override    public void operation() {        System.out.println(&quot;RealObject.operation()&quot;);    }}</code></pre><p>3、代理对象角色</p><pre><code class="lang-Java">public class ProxyObject extends AbstractObject {    RealObject realObject = new RealObject();    @Override    public void operation() {        //调用目标对象之前可以做相关操作        System.out.println(&quot;before&quot;);        realObject.operation();        //调用目标对象之后可以做相关操作        System.out.println(&quot;after&quot;);    }}</code></pre><p>4、代理模式的使用</p><pre><code class="lang-Java">public class ProxyMain {    public static void main(String[] args) {        AbstractObject object = new ProxyObject();        object.operation();    }}</code></pre><p><strong>代理模式的优缺点</strong>：</p><p>优点：给对象增加了本地化的扩展性，增加了存取操作控制。<br>缺点：会产生多余的代理类。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch10" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch10</a></p><blockquote><p>参考资料<br>1、Java设计模式之代理模式(Proxy) - CSDN博客<br><a href="https://blog.csdn.net/liangbinny/article/details/18656791" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/liangbinny/article/details/18656791</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代理模式(Proxy Pattern)给某一个对象提供一个代理，并由代理对象控制对原对象的引用。&lt;/p&gt;&lt;p&gt;代理模式的英文叫做 Proxy 或 Surrogate ，它是一种对象结构型模式。&lt;/p&gt;&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（九）装饰者模式</title>
    <link href="https://www.wshunli.com/posts/d95b685e.html"/>
    <id>https://www.wshunli.com/posts/d95b685e.html</id>
    <published>2018-09-10T06:37:20.000Z</published>
    <updated>2018-09-21T15:14:18.217Z</updated>
    
    <content type="html"><![CDATA[<p>装饰者模式 (Decorator Pattern) 在不改变原类文件以及不使用继承的情况下，动态地将责任附加到对象上，从而实现动态拓展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p><h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><p>动态的给对象添加一些额外的属性或行为。相比于使用继承，装饰者模式更加灵活。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/9.Decorator.png" title="装饰者模式" alt="装饰者模式"></div><p>一般来说装饰者模式有下面几个参与者：</p><p>(1) Component：装饰者和被装饰者共同的父类，是一个接口或者抽象类，用来定义基本行为。<br>(2) ConcreteComponent：定义具体对象，即被装饰者。<br>(3) Decorator：抽象装饰者，继承自 Component ，从外类来扩展 ConcreteComponent 。对于 ConcreteComponent 来说，不需要知道 Decorator 的存在，Decorator 是一个接口或抽象类<br>(4) ConcreteDecorator：具体装饰者，用于扩展 ConcreteComponent 。</p><p>1、抽象构件角色 Component</p><pre><code class="lang-Java">public interface Component {    public void sampleOperation();}</code></pre><p>2、具体构件角色 ConcreteComponent</p><pre><code class="lang-Java">public class ConcreteComponent implements Component {    @Override    public void sampleOperation() {        System.out.println(&quot;ConcreteComponent.sampleOperation()&quot;);    }}</code></pre><p>3、装饰角色 Decorator</p><pre><code class="lang-Java">public class Decorator implements Component {    Component component;    public Decorator(Component component) {        this.component = component;    }    @Override    public void sampleOperation() {        // 委派给构件        component.sampleOperation();    }}</code></pre><p>4、具体装饰角色 ConcreteDecorator</p><pre><code class="lang-Java">public class ConcreteDecoratorA extends Decorator {    public ConcreteDecoratorA(Component component) {        super(component);    }    @Override    public void sampleOperation() {        System.out.println(&quot;ConcreteDecoratorA.sampleOperation() start&quot;);        super.sampleOperation();        System.out.println(&quot;ConcreteDecoratorA.sampleOperation() end&quot;);    }}public class ConcreteDecoratorB extends Decorator {    public ConcreteDecoratorB(Component component) {        super(component);    }    @Override    public void sampleOperation() {        System.out.println(&quot;ConcreteDecoratorB.sampleOperation() start&quot;);        super.sampleOperation();        System.out.println(&quot;ConcreteDecoratorB.sampleOperation() end&quot;);    }}</code></pre><p>5、装饰者模式的使用</p><pre><code class="lang-Java">public class DecoratorMain {    public static void main(String[] args) {        ConcreteComponent concreteComponent = new ConcreteComponent();        ConcreteDecoratorA concreteDecoratorA = new ConcreteDecoratorA(concreteComponent);        concreteDecoratorA.sampleOperation();        ConcreteDecoratorB concreteDecoratorB = new ConcreteDecoratorB(concreteComponent);        concreteDecoratorB.sampleOperation();    }}</code></pre><p><strong>装饰者模式的优缺点</strong>：</p><p>优点：装饰模式可以提供比继承更多的灵活性；通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。<br>缺点：使用装饰模式会产生比使用继承关系更多的对象。更多的对象会使得查错变得困难。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch09" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch09</a></p><blockquote><p>参考资料<br>1、学习、探究Java设计模式——装饰者模式 - CSDN博客<br><a href="https://blog.csdn.net/a553181867/article/details/52108423" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/a553181867/article/details/52108423</a><br>2、Java设计模式之装饰者模式(Decorator pattern) - 简书<br><a href="https://www.jianshu.com/p/c26b9b4a9d9e" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c26b9b4a9d9e</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;装饰者模式 (Decorator Pattern) 在不改变原类文件以及不使用继承的情况下，动态地将责任附加到对象上，从而实现动态拓展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。&lt;/p&gt;&lt;h1 id=&quot;装饰者模式&quot;&gt;&lt;a href=&quot;#装饰者模式&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
</feed>
