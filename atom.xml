<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wshunli.com/"/>
  <updated>2018-05-03T15:02:50.589Z</updated>
  <id>http://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="http://www.wshunli.com/posts/b96eb139.html"/>
    <id>http://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-05-03T15:02:50.589Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+SGbp+rGWZD0UGbk48/OGvBuRnbIvRg6CowrAZ5zUMxB3y1IetwaN7o9HOuZKXCGvxrNaaW8IdpfIb/5zCEohByw57usDWVnTe1jvEuw7gytMhKgd3inmWYXhJanaFkNYUDcBdgX4fZ4uOnAF7iI+9yKnTLf16bm66c4DA2mNZnIa/OJys9aneCJDMaFXB02YTtM5SyrG4NqVn4YYK+tLTqeeg2zUpBZswLB20xCHCaaZ1VcdcmsaIwRKxjyosx1V87e94nsVmkNFF63mU6CbP9MkAkxMp/S/GvtswBP4nn37k9cXhyVSZY9GVIRVl3w6NU8a/fGDuXdGQqJ4zE3dQB6dAjSHTFF1rWgtlfqWa7a7luzGT3XgKql0+jhAGfW2BXNFdKBKHi58HswSuc3E7R/qBEgKEw1gfAeo0KnZROHczZgut5NBMxovnHMlQHHyGDse81Lq+IvqxYunSzMQ0LQK8n4YqzfLcW6vdiLGbuQDB1/Ip09FEKPbA4hisNRw3XQrvMWAd63OLK+m20Mgnc1/7SxcslUNzo8v9tLwhStW6ocgJgVjCpYh6CGalH+j2OJktppWvQ5vrXT/vCETqQZ6zm3YV7qi08nUY5anIRI5C9xbFy3IAMul/0oZyIvExByui7Ffa3oQSE8+aVOS51KURgyA4njjvSNiT7G3/Zt7rYbv/jxoLJX3kheQBp4TCt/ujoBwL5VCIXlXHQd2Ux6oOj44S9AYG96Inpnt3Vml6wps4ZwDGXdVYKxFabJQJPhbXc8pawDtmknmIfeKxKnylBYfVtiya6wzQhYsXxqOB2uOi9zJH7HQFy12YYM0BPn0Me43RacDOmPYlugM+nXNZHrAinfIFgG8+HAjbM0ch4ESUr3fqEMSn/rC0b0pyibqM6gs92/BbTLfCMLHTfXY8In+H20251Ff7TUeNEy2KXe77gldSHqISKDqtjKn0nmc9rDCpun9pedOM0D0qwLcElQzkglAJvQIWZGjlK5Pl1/9zSZlQrlaAG+hQ1zTPPdZDyfueoUVykgu1gNsDsCLeaO8auYqmYv2dpj1VrmZkIV8iJYAuDfmEZDfNd5z4V6C1qeKr9NSDoF4nhxziQ9MDAu87cY8UW3NE4QUnvpe5eARyRhfUzsEZtDQfX+qoW0X9saZD8zfp2Sag3JaHQ4VmwKuxGj6ukaRH26Kj7DPgiOv3YSBBdRpoyI/p9ubo2ZKbut1yuDP4SAnL4vrOs8/wdNXCtyZdgLK7TI5GTF5R1jt6Ce9ow8TBmLa79byWbWp+eQ3qAYaxwx9WJoZwqnjUUDZR31FJpxw67F5gP9X+naY/5vYAFoIrUaoyh5lzRrbs5xfP6qDBqD8zG8KjbKYZP6pywumFc2dSekZjugPUWG98zeH7nHJWaV38gY37WON15UpSXDMndJ1Tmldqiw47NDYORAx+RfHDL30aPbVKjmCKvVuNgTyGLePOqnIx4a5+PL6wGr2Qq2eRc5XsEPNLU/H05DY1HAWWnN3N0Gq1GIOthVpjibD0HPdWzdLjAWuFhhpx1Y+MwbjBRnZot/LXy4KL2H/ylTE4K93slG7qSFP1QW4U0XLmkl+ycjZyVouIfkrJ/RqdCs7GAgn397AJHTTTHsxbhjSrikmOpr4RyupgNdNHJQzwyozXfMVsESf2pnmMEMMHUtpvxOeVG73h2/oSQ/aZdL84a+NDa/7vxJx+we0yzHGHPtiIhe7+jMZgNLgayi9BOpP9TII+bUfUxH6s6WwabwO3yCdvT66zlUWQAqnqYHWhPqu/6+7ntNdhMX3KB3msA/3Q1256OtuaVXdTN9638+JwzBs/I9liOi4htH/KQcHMiyIDMb5IbUGofRRwQ/qclNftvFL9EuQo/s5yd6Df6csgQ9/bQpnQZZjsV/35+vbsOc+zY9EAgJKE9JH2vSTST8R5MhMp4taK30ZGOKt/URUWX6Bu3LEDhi/x/bN++IDt0GjJf2Ty2BaRH1Q89IisTbx/ST554i1leq8L1a7o6k9uM0AuumI8fUqm+jYbMtiD3djbBvlv3uco4kClMlkMtsCWxxJOUpEO3yipu1GE5jEnHGnVQEL7Hh6DEb4d9clZh3FfVqJvflkwESRAMOHlTaTS5Ng3mCvZqIfG7GAQLoO7Wtdci52PFglH/0KibGpDPYYnjH8p5ODJUySOkGliXm/kM/ZQ/wMjZ2pLERZTiuTENkRXU2oXGx2AiuNbMMk5qiCuHVAOIxHl0u7//ap08Jbo71/poYKH2ZI7y1FfLPmm7ZB/lbvbpLAnpPhEVh1Y5iuXN3+C3sU6RnQ41LJF8gDWiIAssndg5BGp+zUrlk4vsJfObEDra90TTjKpYawBvfxWkRsmKl/tUhcv5GQ/gVx3wrE/9eDe8/XleeGd0s4vPH80PepRj+tAMYnBoX+QO2mWdgPLmhw9FkPEOA== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="http://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>http://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-03T15:02:50.581Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><a id="more"></a><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cesium" scheme="http://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="http://www.wshunli.com/posts/4cbab315.html"/>
    <id>http://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
    
      <category term="Cesium" scheme="http://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里巴巴实习生面试</title>
    <link href="http://www.wshunli.com/posts/b3a8426.html"/>
    <id>http://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="http://www.wshunli.com/posts/689a494.html"/>
    <id>http://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="http://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>http://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="http://www.wshunli.com/posts/3cb63fb.html"/>
    <id>http://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19ZeMxKLHTHXGxz1IpEB0yX23w8luBrKc12t62AQ15UbELbVybDtHhBntJarwO8q/v/PEbPkJxT5B0edGCrkh7z0L33mGXchWtlB9w281cn0iok2D0+HTP1nVkULPFC0Bp7rmntqQ0ku9Ss29AIy1f9rfAMdRLqfwrNY93rFavEXpG7EHpvNNSPEPExnxJcLzDL13rynbshOdcSihfmpihfD9he6jY79OsypeNHXp8X9Rexta6TujIzLxPN6OTTTJHdAA2itU6lquohWKMDW/vHDcam+gGbik4cYOvUzyiKSqQ+dAxFViwGVJoNfQMMR00A3BuVdDT3iRisyuWogzl9+4T4+H4ksJEaabU7vTiITUQk/y6Lkk2OzZF2tx5d3pBXDKh0yovEk38hsJvRdtjCtXXG/GCz0feReEBEawV5uKHYxf919haXLcGREgyVgRcnajR5FveSCLhfW02/jMjjqAubWoaIpxPvjGfauouzyGF7nAfOQFY9Wc3W5r4zV7buVBrjfibSd71HAf+RkZif5krSJaSnD1J3NgWG4UdaeuaKCM4bVgrcGYsPXEJvf2VwphFwVB8O6vaXVHLg2+0m0a4amIodBSHY6bmNNwG3mOQXosjUDBXNUrch8V8VWkmDWF9L/yw9WJGEBAihRpOXXrpCMOvzG84Un8796T3L3owhJXfphFNmKDt8cWXiPex0V1271kDcRop4RgMpwoBK7bhQDs/oBGqrZS/4gU6MvmxSnXuLnJT/O64mYi5DSsBG1XsKwlCzUY9HiXRTNXNaA54JUtB8IulLdrBCfDVWWvSjyljLQHrFRxmOdVOYIXuoF6lFfBCgTerLPH6V5MSWDEhF2DDmvxIjxybNImp1gB691YkE5Nh25GE/O4pqQr+KMT146Dfx4fI4A1WK4cgNyUyoJKfxdKZ/wSQ6v07Ae73/+FWqPwtwEHRYYqroCbgy3PUWBex5CyT91CUFVlu7K3U+z9J4ps/02cmY3/3DCj68ZFKr2p2v2GUxP4kPwYiG8ymDaJ+lb2vjvu8hl62V1NC5I/xiUJGEySXxvETDF3bkwBkAlHo040ZzjGhZlLXAeY0bqymfQZC9Yn0iaktVCzjuhL5UYEoquFbxji0bN8HOysraWieA1SyZEJWVYAgvQktW4Y0SbCRfyd43smQdo+PdKhjsX8pdWyi/+3whCiIbRwS+bWsBc+5cyCNBLA8S2+NtNmC8Kpx5JntMwQIjJP+uuNNNtMcWth0ZjG8z3IPhk4EtpKbB3wu5FBOaScOAoulLBD7ldhTksx2w3sCx08XPwDHpAgAjbIap6XXQy386QR4wLdJFdJOMv0VunJOc0yxtuDRuavzGUFqmIA27ukWE28LQdnpvrogs1MD3rP2cO+NcD8qznTk+SLSb9S0vsNM8mQaEkmD6NQPrgs6/H+HGAkgzXoQK2YhxzZ49NlkyBExD7yoeAKo0hRM+Yz1020LloA6+iMENy6v400VnhSuYMy9lnEViS8Z88wtZD+/s6wNPH6CmjqNsVPNKVQahBTq9D/MBIaU7nu++MkNBQgVMZCN8FenUpBnk+g8hL6J6vuhTbh2fsvYeZxRsj77hIn27QE0COsH94PoQBWoWvL3Wayl+aqwHsvMR4xHn/LYKEZRnvmA1tON7nGaYaFs0dtym8+bW2QM1v/0aGzxV6walD6BIcYcnbSxGWNC/il6Ve90CxnUqcHGwlErVBCgQvwKY0bYX2p8HRqZzI6LaJzAXXQiBdyYWxcPaRcmMW3uBIVkBd5Q8J5EjWApGmPSJ8vyzzdkPGak8Vc97iv7EyjpHVjgrQ8nhkl5zzt764yCdEYd4DbGW7Au9JuXrz7jmiBt1rbt8HRfHB6at5BXvCzhiWEEBmIxAutbUwjmjFm+XTSda69SCzJ/uumNEotNEaGEZ349o/AMw6yRSdJeZ4UGJB/yFLRAp7vYs0joVp5ZLvcPkWpLW4aCqO2lynMtcasByy0UQ7QBj3X4SoQ2iC8+LGaa5hfPNccqvs+XQJ+0EcUvfhX4AJeF745QhbM3ciqwFtLc8hKNmPBKNE16QnRdlINh+heLvnFpeHPkQVAIjr7hXWLyzf7ObPrtYNwdAb4mHS2Xcx87Psgjag3hJFszA96xtAhfcyP00WUl6QYbuPEbUPtR761pS8VI/nJ54RQtPdpLYpuLxIYsNVX5JoFVo5oDP0dNlFjhsa04rr46Rz4PyINNphxBlDCrzarF4ecYUvfRZzw+Tc94zqw8VvTvb7AcWn7EQg+IXlzJ/jnM/BLnYNDiYIceuLiMfRsGO4T4rHxJHV51OKyQ2Fn7Sw1kMc99tGSbZFgcWy9Y88sb/yNcyqMM7wLjiGazlFzNSIaSBfrqoPX6sz4RIU5c0tLKdxhw0vc5j4AhTFe7JrakurSEFtLLnT48DNh4HLHihqpSJ2rN1wWlL02N0v9Os0YbCOdSVRhj4fULT9xbQ29Slb8gySRjtoq1OuXt7TL04Uct231UTK8OaKtPdcJnT79geOb/TqMW95ypumo4t0l0lBJcHoDvwuP2jCYmZ4AXjVaAGkcDUQFloun6l9E0B9ejZogQcz5pxjdANqQXRb0zZaGBpWaTdEbCObLyFr/j2GEyjUF0uV57PkHcGJbN2r4qRkos8Pv0OkA+Gla+XHwyPMoE0hYGnW+su4FCRi0JRtn/Ty9cS2cWEi2KEml+MeYN4WOT1twK12TQXc7iMNob3CUSGdeW+2hwZtfJ8K5b5dx+pyt0K8qt779zqZUxkZysi3mLyCSrZgwT7KsPj0vVcgObnFuKLepPWMTCEsJMZF2oJg2WCYaKOo0kj4egcVA8pK9C2gM7lHUPMymEGQYyvdAnLlrcpQMLKWqVCKiohLHHNYnkiRoiKDmihlgZOLBtRbPzmioSVAzVrgiNs+eQ8ptO1VjSfR/OGajZoJxteTXmrlVlgemMgYMArooGI8p2vLrlw1WerlvM55a0RZr4v3GYEIYju19pjxQft12Yj5XJTOxgLfqMWcudKTE1lxL5RDj46V2jU9c2/rA7+f4nsykCKV4wxa8DBmVPl3BXMCWJJwoHsr1ObkkoqVMEMcaSRJ37DbH1fJZT+vfxFiUsnRPbyv1quU+ynIkEBOGxWhlkCTX84aPs4gHQdmcS+kKYsyHpj7ScGUC/T0FE8rbZ4FMWaWKOtVObUeoGrfHxUXZpGUwnZuLTpu2sL/bxxZ9UmFrFOP2FeySyHafdSOga0+Yf+lJwKwdMR6DyD/tqAnyn6U6hySso7QruAWSw1mAChyFJSKQ/RoOpDeRauGeyG3PncpEf3y8pzBZg27l0+W7T58oIjH4bugBHy9s4r11SuO1D3pR+MqGf7H3wuz918KoCcFPTS8/eGqX5o38EUcR4LPTu7ikcYhLTvtUH+1drw3TW5f3EyE+qtoIHwV2ZYFDd6Pw5ncJANKwTArsR2kpC7RkMMBQavyDK++1RYCPZAiB86PJ4Kyfz68v3mfyqJsDcK9sIWiSAgXbX6oesMPIWINqGLBRMa7aNYXlRxjPadbTCMt8HI3e467ji7YcqfJGMZBRgfZs7ri0sk/lfUHRegfqq3P8/CdScfGiDZnMtrWQ81m+7P7sfejCaJNtpU6JEzeUodLjtt4nblnGlyapU10iKFQIR7si7kO/gkvgKm46PvBYI6NJxCM31GoCjGxbqH7uQ67Co1BDfdQ0lPFVHuY52tJ9+BPi5gOrtNbrfmwgrEzKds8M821BHvTJLuU+DDvhuQ9G8bL5ucHc/mzrxV1RXKwEU0jSVZCAxsPjTcw/5zTg3FsPxtw+eQLzKoS/tcHgpSN4MSb83imxEVItOPW5SCftttNRTOQe1kJ7I7hsMi8WQTIWT9clFPckP2U69ZKGCCCAfhb0yYjUfKFIix1f1clA== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="http://www.wshunli.com/posts/25842bb5.html"/>
    <id>http://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-03T15:02:50.585Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="http://www.wshunli.com/posts/9c87288c.html"/>
    <id>http://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-03T15:02:50.585Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><h1 id="第十四章-并发"><a href="#第十四章-并发" class="headerlink" title="第十四章 并发"></a>第十四章 并发</h1><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="http://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>http://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（amap）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（amap）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="http://www.wshunli.com/posts/4e05997a.html"/>
    <id>http://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="http://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>http://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-05-03T15:02:50.585Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="http://www.wshunli.com/posts/96840e7.html"/>
    <id>http://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-05-03T15:02:50.585Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="http://www.wshunli.com/posts/4e57ccd.html"/>
    <id>http://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-05-03T15:02:50.581Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="http://www.wshunli.com/posts/91672bd7.html"/>
    <id>http://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-05-03T15:02:50.581Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="http://www.wshunli.com/posts/84f52548.html"/>
    <id>http://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="http://www.wshunli.com/posts/b4e3c990.html"/>
    <id>http://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（六）</title>
    <link href="http://www.wshunli.com/posts/9c05eee5.html"/>
    <id>http://www.wshunli.com/posts/9c05eee5.html</id>
    <published>2018-01-22T02:44:25.000Z</published>
    <updated>2018-05-03T15:02:50.589Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】生活是一条路，走走停停，停停走走
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK 开发入门</title>
    <link href="http://www.wshunli.com/posts/3eae2406.html"/>
    <id>http://www.wshunli.com/posts/3eae2406.html</id>
    <published>2018-01-19T13:00:14.000Z</published>
    <updated>2018-05-03T15:02:50.581Z</updated>
    
    <content type="html"><![CDATA[<p>Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。<a id="more"></a>在开发某些类型应用时，这有助于您重复使用以这些语言编写的代码库。</p><p>那我们为什么要使用 NDK 呢?</p><ul><li>代码的保护。由于 apk 的 Java 层代码很容易被反编译，而 C/C++ 库反汇难度较大。</li><li>可以方便地使用现存的开源库。大部分现存的开源库都是 用C/C++ 代码编写的。</li><li>提高程序的执行效率。将要求高性能的应用逻辑使用 C 开发，从而提高应用程序的执行效率。</li><li>便于移植。用 C/C++ 写得库可以方便在其他的嵌入式平台上再次使用。</li></ul><p>上述文字致谢 <a href="http://www.cnblogs.com/devinzhang/archive/2012/02/29/2373729.html" rel="external nofollow noopener noreferrer" target="_blank">Devin Zhang</a> 提供理论支持</p><p>本文默认已配置好 Android 开发环境，<br>关于 Android 开发环境配置可参考：<a href="http://www.wshunli.com/posts/f6977dbb.html">http://www.wshunli.com/posts/f6977dbb.html</a></p><h1 id="NDK-环境配置"><a href="#NDK-环境配置" class="headerlink" title="NDK 环境配置"></a>NDK 环境配置</h1><p>1、首先应该下载 NDK</p><p>官方指定的下载地址：<a href="https://developer.android.google.cn/ndk/downloads/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.google.cn/ndk/downloads/index.html</a></p><p>可能因为网络原因打不开，而且我们也不要那么新的。</p><p>本文以 Android NDK r10e 版本为例：</p><p>下载地址：<a href="https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip" rel="external nofollow noopener noreferrer" target="_blank">https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip</a></p><p>下载好之后，解压即可，我们解压到：<code>D:\Android\android-ndk-r10e</code></p><p>2、和配置 Android 环境类似，配置 NDK 环境</p><p>新建变量：<code>ANDROID_NDK</code></p><pre><code class="TXT">D:\Android\android-ndk-r10e</code></pre><p>在 <code>Path</code> 中添加</p><pre><code class="TXT">%ANDROID_NDK%</code></pre><p>3、验证 NDK 环境</p><p>在 命令控制符 中输入 <code>ndk-build -version</code> 存在输出即可。</p><h1 id="第一个-Android-NDK-项目"><a href="#第一个-Android-NDK-项目" class="headerlink" title="第一个 Android NDK 项目"></a>第一个 Android NDK 项目</h1><p>在 Android Studio 中新建 Android NDK 项目特别简单，</p><p>只需在新建项目时，勾选 <code>include C++ support</code> 即可：</p><p><img src="https://img.wshunli.com/Android/NDK/1.新建NDK项目.png" alt="1.新建NDK项目.png"></p><p>点击运行即可看到效果：</p><p><img src="https://img.wshunli.com/Android/NDK/1.Screenshot_1516414188.png-hexo.png" alt="1.Screenshot_1516414188.png"></p><h1 id="向现有项目添加-C-C-代码"><a href="#向现有项目添加-C-C-代码" class="headerlink" title="向现有项目添加 C/C++ 代码"></a>向现有项目添加 C/C++ 代码</h1><p>如果您希望向现有项目添加原生代码，请执行以下步骤：</p><p>1、<a href="#创建新的原生源文件">创建新的原生源文件</a>并将其添加到您的 Android Studio 项目中。</p><p>如果您已经拥有原生代码或想要导入预构建的原生库，则可以跳过此步骤。</p><p>2、<a href="#创建CMake构建脚本">创建 CMake 构建脚本</a>，将您的原生源代码构建到库中。如果导入和关联预构建库或平台库，您也需要此构建脚本。</p><p>如果您的现有原生库已经拥有 <code>CMakeLists.txt</code> 构建脚本或者使用 ndk-build 并包含 Android.mk 构建脚本，则可以跳过此步骤。</p><p>3、提供一个指向您的 CMake 或 ndk-build 脚本文件的路径，<a href="#将Gradle关联到您的原生库">将 Gradle 关联到您的原生库</a>。Gradle 使用构建脚本将源代码导入您的 Android Studio 项目并将原生库（SO 文件）打包到 APK 中。</p><h2 id="创建新的原生源文件"><a href="#创建新的原生源文件" class="headerlink" title="创建新的原生源文件"></a>创建新的原生源文件</h2><p>1、选择 Project 视图，在 main 目录下，新建 cpp 文件夹；</p><p>2、在 cpp 文件夹下新建 C/C++ Source File ，本文以 <code>native-lib</code> 为例。</p><p><img src="https://img.wshunli.com/Android/NDK/1.创建新的原生源文件.png" alt="1.创建新的原生源文件.png"></p><h2 id="创建CMake构建脚本"><a href="#创建CMake构建脚本" class="headerlink" title="创建CMake构建脚本"></a>创建CMake构建脚本</h2><p>CMake 构建脚本是一个纯文本文件，您必须将其命名为 CMakeLists.txt。</p><p>在 Android 视图下，在 app 模块下右键，新建 File，文件名为 <code>CMakeLists.txt</code>。</p><p>文件内容如下：</p><pre><code class="TXT"># For more information about using CMake with Android Studio, read the# documentation: https://d.android.com/studio/projects/add-native-code.html# Sets the minimum version of CMake required to build the native library.cmake_minimum_required(VERSION 3.4.1)# 指示 CMake 从原生源代码创建一个原生库add_library( # Sets the name of the library.             native-lib             # Sets the library as a shared library.             SHARED             # Provides a relative path to your source file(s).             src/main/cpp/native-lib.cpp )# 添加引用 NDK 库find_library( # Sets the name of the path variable.              log-lib              # Specifies the name of the NDK library that              # you want CMake to locate.              log )# 关联 NDK 库target_link_libraries( # Specifies the target library.                       native-lib                       # Links the target library to the log library                       # included in the NDK.                       ${log-lib} )</code></pre><h2 id="将Gradle关联到您的原生库"><a href="#将Gradle关联到您的原生库" class="headerlink" title="将Gradle关联到您的原生库"></a>将Gradle关联到您的原生库</h2><p>在 Android 视图下，右键点击您想要关联到原生库的模块（例如 app 模块），并从菜单中选择 <code>Link C++ Project with Gradle</code>。</p><p><img src="https://img.wshunli.com/Android/NDK/1.将Gradle关联到您的原生库.png" alt="1.将Gradle关联到您的原生库.png"></p><p>或者手动配置：</p><pre><code class="Gradle">android {  ...  defaultConfig {...}  buildTypes {...}  // Encapsulates your external native build configurations.  externalNativeBuild {    // Encapsulates your CMake build configurations.    cmake {      // Provides a relative path to your CMake build script.      path &quot;CMakeLists.txt&quot;    }  }}</code></pre><p>可选配置，可以包裹一些特定的示例代码：</p><pre><code class="Gradle">android {    compileSdkVersion 26    defaultConfig {        ···        externalNativeBuild {            cmake {                cppFlags &quot;-frtti -fexceptions&quot;            }        }        ndk {            // Specifies the ABI configurations of your native            // libraries Gradle should build and package with your APK.            abiFilters &#39;x86&#39;, &#39;x86_64&#39;, &#39;armeabi&#39;, &#39;armeabi-v7a&#39;, &#39;arm64-v8a&#39;        }    }</code></pre><p>最后运行即可，效果是一样的。</p><h1 id="添加-native-方法流程"><a href="#添加-native-方法流程" class="headerlink" title="添加 native 方法流程"></a>添加 native 方法流程</h1><p>在 <code>MainActivity</code> 中添加 native 方法：</p><pre><code class="Java">    public native void printLog();</code></pre><p>在 <code>native-lib.cpp</code> 中添加头文件及宏定义</p><pre><code class="C">#include &lt;android/log.h&gt;#define TAG &quot;native-lib&quot;#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, TAG, __VA_ARGS__)</code></pre><p>实现 native 方法，我们这里打印个日志：</p><pre><code class="C">extern &quot;C&quot;JNIEXPORT void JNICALLJava_com_wshunli_android_ndk_demo_MainActivity_printLog(JNIEnv *env, jobject instance) {    LOGV(&quot;log from native&quot;);}</code></pre><p>这个方法可以自动生成，在 native 方法下 <code>Alt + Enter</code> 即可。</p><p>本文源码：<a href="https://github.com/wshunli/android-ndk-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/android-ndk-demo</a></p><blockquote><p>参考资料<br>1、Android NDK | Android Developers<br><a href="https://developer.android.com/ndk/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/ndk/index.html</a><br>2、Android-NDK入门-慕课网<br><a href="https://www.imooc.com/learn/411" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/411</a><br>3、Android-NDK进阶-慕课网<br><a href="https://www.imooc.com/learn/918" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/918</a><br>4、Android NDK开发(一) 入门 - 简书<br><a href="https://www.jianshu.com/p/0261e6cceb3e" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0261e6cceb3e</a><br>5、向您的项目添加 C 和 C++ 代码 | Android Studio<br><a href="https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="NDK" scheme="http://www.wshunli.com/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Android图片加载框架Glide简单使用</title>
    <link href="http://www.wshunli.com/posts/d82d8606.html"/>
    <id>http://www.wshunli.com/posts/d82d8606.html</id>
    <published>2018-01-19T12:14:17.000Z</published>
    <updated>2018-05-03T15:02:50.581Z</updated>
    
    <content type="html"><![CDATA[<p>Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。<a id="more"></a>Glide 提供了易用的 API，高性能、可扩展的图片解码管道（decode pipeline），以及自动的资源池技术。</p><h1 id="Glide-介绍"><a href="#Glide-介绍" class="headerlink" title="Glide 介绍"></a>Glide 介绍</h1><p>Glide 支持拉取，解码和展示视频快照，图片，和GIF动画。Glide的Api是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide使用的是一个定制化的基于HttpUrlConnection的栈，但同时也提供了与Google Volley和Square OkHttp快速集成的工具库。</p><p>虽然Glide 的主要目标是让任何形式的图片列表的滚动尽可能地变得更快、更平滑，但实际上，Glide几乎能满足你对远程图片的拉取/缩放/显示的一切需求。</p><h1 id="Glide-简单使用"><a href="#Glide-简单使用" class="headerlink" title="Glide 简单使用"></a>Glide 简单使用</h1><p>0、添加 Glide 依赖</p><pre><code class="gradle">dependencies {  implementation &#39;com.github.bumptech.glide:glide:4.5.0&#39;  annotationProcessor &#39;com.github.bumptech.glide:compiler:4.5.0&#39;}</code></pre><p>1、准备图片容器</p><p>我们在布局文件中添加 ImageView 控件：</p><pre><code class="XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;    android:background=&quot;#8f8f8f&quot;    tools:context=&quot;com.wshunli.glidedemo.MainActivity&quot;&gt;    &lt;Button        android:id=&quot;@+id/bt&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;@string/app_name&quot; /&gt;    &lt;ImageView        android:id=&quot;@+id/img&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt;</code></pre><p>2、加载图片</p><p>我们以加载 <a href="https://img.wshunli.com/Android/Glide/Glide.min.png" rel="external nofollow noopener noreferrer" target="_blank">https://img.wshunli.com/Android/Glide/Glide.min.png</a> 为例。</p><pre><code class="Java">Glide.with(MainActivity.this)        .load(&quot;https://img.wshunli.com/Android/Glide/Glide.min.png&quot;)        .into(img);</code></pre><p>真的超级简单。</p><p>MainActivity 完整代码如下：</p><pre><code class="Java">package com.wshunli.glidedemo;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.Button;import android.widget.ImageView;import com.bumptech.glide.Glide;public class MainActivity extends AppCompatActivity {    private ImageView img;    private Button bt;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        img = findViewById(R.id.img);        bt = findViewById(R.id.bt);        bt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Glide.with(MainActivity.this)                        .load(&quot;https://img.wshunli.com/Android/Glide/Glide.min.png&quot;)                        .into(img);            }        });    }}</code></pre><p>注意别忘了声明权限：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code></pre><p>3、取消加载图片</p><pre><code class="Java">Glide.with(MainActivity.this).clear(img);</code></pre><p>取消加载也超级简单。</p><p>4、最终加载效果</p><p><img src="https://img.wshunli.com/Android/Glide/Screenshot_1516366180.png-hexo.png" alt="Glide加载图图片"></p><h1 id="ProGuard-混淆规则"><a href="#ProGuard-混淆规则" class="headerlink" title="ProGuard 混淆规则"></a>ProGuard 混淆规则</h1><pre><code class="gradle">-keep public class * implements com.bumptech.glide.module.GlideModule-keep public class * extends com.bumptech.glide.module.AppGlideModule-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {  **[] $VALUES;  public *;}# for DexGuard only-keepresourcexmlelements manifest/application/meta-data@value=GlideModule</code></pre><blockquote><p>参考资料<br>1、bumptech/glide: An image loading and caching library for Android focused on smooth scrolling<br><a href="https://github.com/bumptech/glide" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/bumptech/glide</a><br>2、Android图片加载框架最全解析（一），Glide的基本用法 - 郭霖的专栏 - CSDN博客<br><a href="http://blog.csdn.net/guolin_blog/article/details/53759439" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/guolin_blog/article/details/53759439</a><br>3、Glide v4 : 快速高效的Android图片加载库<br><a href="https://muyangmin.github.io/glide-docs-cn/" rel="external nofollow noopener noreferrer" target="_blank">https://muyangmin.github.io/glide-docs-cn/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="Glide" scheme="http://www.wshunli.com/tags/Glide/"/>
    
  </entry>
  
</feed>
