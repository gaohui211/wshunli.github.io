<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-05-12T15:05:05.557Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我本将心向明月，奈何明月照沟渠</title>
    <link href="https://www.wshunli.com/posts/2739df62.html"/>
    <id>https://www.wshunli.com/posts/2739df62.html</id>
    <published>2018-05-08T06:06:23.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<p>我本将心向明月，奈何明月照沟渠，<br>落花有意随流水，流水无心恋落花。</p><a id="more"></a><p>简历初筛未通过，笔试机会都没有。</p><p>滴，好人卡。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我本将心向明月，奈何明月照沟渠，&lt;br&gt;落花有意随流水，流水无心恋落花。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《Java多线程编程核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/4e70966b.html"/>
    <id>https://www.wshunli.com/posts/4e70966b.html</id>
    <published>2018-05-05T14:47:09.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<p>前面面试什么的多线程部分问的比较多，需要加强下<a id="more"></a> ，这里记录总结 《Java多线程编程核心技术》 读书情况。</p><h1 id="第一章-Java-多线程技能"><a href="#第一章-Java-多线程技能" class="headerlink" title="第一章 Java 多线程技能"></a>第一章 Java 多线程技能</h1><p>本章主要介绍了线程概念、核心方法以及优先级。</p><p>1、进程和线程的区别</p><p><strong>进程</strong>是受操作系统管理的基本运行单元，是系统进行资源分配和调度的独立单位。<br><strong>线程</strong>是在进程中独立运行的子任务，CPU 在这些任务之间不停地切换，各子任务共享程序的内存空间。</p><p>线程和进程的区别是什么？ - 知乎：<br><a href="https://www.zhihu.com/question/25532384" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/25532384</a></p><p>2、线程的创建</p><p>（1）继承 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.html" rel="external nofollow noopener noreferrer" target="_blank">Thread</a> 类</p><p>（2）实现 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Runnable.html" rel="external nofollow noopener noreferrer" target="_blank">Runnable</a> 接口</p><p>其中 Thread 类实现了 Runable 接口，都需要重写里面 run 方法。</p><p>两种方式的区别：</p><p>实现 Runnable 的类更具有健壮性，避免了单继承的局限。<br>Runnable 更容易实现资源共享，能多个线程同时处理一个资源。</p><p>Java中 Thread和Runnable实现多线程的区别和联系 - CSDN博客:<br><a href="https://blog.csdn.net/oxuanboy1/article/details/51733279" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/oxuanboy1/article/details/51733279</a></p><p><strong>非线程安全</strong> 主要是指多个线程对同一对象中的同一变量实例进行操作时会出现值被修改、值不同步的现象。</p><p>3、线程的启动和停止</p><p>线程的启动可以使用 start() 或者 run() 方法，</p><p>调用 start() 方法，虚拟机会创建新的线程运行 run 方法；<br>调用 run() 方法后，会在调用的线程执行，不会创建新的线程。</p><p>线程的终止方法有三种：</p><p>（1）使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。<br>（2）使用 stop() 方法强行终止线程（这个方法不推荐使用，因为 stop() 和 suspend()、resume() 一样，也可能发生不可预料的结果）。<br>（3）使用 interrupt() 方法中断线程。</p><p>下面介绍了 interrupt() 方法停止线程，调用该方法知识在当前线程中打了一个停止的标记，并不是真的停止线程。</p><p>如何判断线程的状态是不是停止的：</p><p>（1）this.interrupted() 测试 <strong>当前线程</strong> 是否已经中断，会将状态标志置清为 false 。</p><pre><code class="Java">public static boolean interrupted() {}</code></pre><p>（2）this.isInterrupted() 测试线程是否已经中断，不清除状态标志。</p><pre><code class="Java">public boolean isInterrupted() {}</code></pre><p>Java并发（基础知识）—— 创建、运行以及停止一个线程 - Tim-Tom - 博客园：<br><a href="https://www.cnblogs.com/timlearn/p/4007982.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/timlearn/p/4007982.html</a></p><p>其他方法 stop()、suspend()、resume() 不推荐使用。</p><p>4、线程的主要方法</p><p>Thread.currentThread() 返回代码段正在被哪个线程调用的信息。</p><p>isAlive() 判断当前线程是否处于活动状态，即线程已经启动但尚未终止。</p><pre><code class="Java">package com.wshunli.thread;public class CountOperate extends Thread{    public CountOperate(){        System.out.println(&quot;CountOperate---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName()=&quot; + Thread.currentThread().getName());//获取线程名        System.out.println(&quot;Thread.currentThread().isAlive()=&quot; + Thread.currentThread().isAlive()); //查看线程是否存活        System.out.println(&quot;this.getName=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;CountOperate---end &quot;);        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));    }    @Override    public void run() {        System.out.println(&quot;run---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName=&quot; + Thread.currentThread().getName());        System.out.println(&quot;Thread.currentThread().isAlive()&quot; + Thread.currentThread().isAlive());        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));        System.out.println(&quot;this.getName()=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;run --- end&quot;);    }}package com.wshunli.thread;public class Main {    public static void main(String[] args) {        CountOperate c = new CountOperate();//        c.start();        Thread t1 = new Thread(c);        System.out.println(&quot;main begin t1 isAlive=&quot; + t1.isAlive());        t1.setName(&quot;A&quot;);        t1.start();        System.out.println(&quot;main end t1 isAlive=&quot; + t1.isAlive());    }}/* * CountOperate---begin * Thread.currentThread().getName()=main * Thread.currentThread().isAlive()=true * this.getName=Thread-0 * this.isAlive()=false * CountOperate---end * Thread.currentThread()==this :false * main begin t1 isAlive=false * main end t1 isAlive=true * run---begin * Thread.currentThread().getName=A * Thread.currentThread().isAlive()true * Thread.currentThread()==this :false * this.getName()=Thread-0 * this.isAlive()=false * run --- end */</code></pre><p>Thread.sleep() 方法是在指定的毫秒数内让“当前正在执行的线程”休眠（暂停执行）。</p><p>yield() 放弃当前 CPU 资源，将它让给其他任务占用 CPU 时间。</p><p>5、线程的优先级</p><p>在 Java 中线程的优先级分为 1 ~ 10 这 10 个等级，可以使用 setPriority​(int newPriority) 方法设置。</p><p>优先级较高的线程得到的 CPU 资源较多，CPU 会尽量优先执行，并不一定先执行完。</p><p>线程的优先级具有继承性。</p><p>6、守护线程</p><p>在 java 中线程有两种：用户线程、守护线程。</p><p>守护线程的作用是为其他线程提供便利服务，当进程中不存在非守护线程了，守护线程会自动销毁。</p><p>守护线程最典型的应用就是 GC （垃圾回收器）。</p><h1 id="第二章-对象及变量的并发访问"><a href="#第二章-对象及变量的并发访问" class="headerlink" title="第二章 对象及变量的并发访问"></a>第二章 对象及变量的并发访问</h1><h2 id="synchronized-同步方法"><a href="#synchronized-同步方法" class="headerlink" title="synchronized 同步方法"></a>synchronized 同步方法</h2><p>（1）方法内的变量线程安全，而 <strong>实例变量</strong> 非线程安全。</p><p>（2）多个对象多个锁</p><p>关键字 synchronized 取得的锁都是对象锁，而不是把方法或者代码段当作锁。</p><pre><code class="Java">class HasSelfPrivateNum {    public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class ThreadA extends Thread {    private HasSelfPrivateNum numRef;    public ThreadA(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;a&quot;);    }}class ThreadB extends Thread {    private HasSelfPrivateNum numRef;    public ThreadB(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;b&quot;);    }}class Main {    public static void main(String[] args) {        HasSelfPrivateNum numRef = new HasSelfPrivateNum();        ThreadA athread = new ThreadA(numRef);        athread.start();        ThreadB bthread = new ThreadB(numRef);        bthread.start();    }}/* * a set over! * b set over! * b num=200 * a num=100 */</code></pre><p>对于多个对象实例，会有多个对象锁，所以还是异步的、互不影响。</p><p>（3）synchronized 方法与对象锁</p><p>调用 synchronized 声明的方法是排队同步执行的。</p><p>把 HasSelfPrivateNum 类的 addI() 方法添加 synchronized 关键字，输出就变为：</p><pre><code class="java">class HasSelfPrivateNum {    synchronized public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * a set over! * a num=100 * b set over! * b num=200 */</code></pre><p>上面多个线程调用同一方法，下面再看调用 <strong>不同方法</strong> 的情况。</p><pre><code class="java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyObject object;    public ThreadA(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodA();    }}class ThreadB extends Thread {    private MyObject object;    public ThreadB(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodB();    }}public class Main {    public static void main(String[] args) {        MyObject object = new MyObject();        ThreadA a = new ThreadA(object);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(object);        b.setName(&quot;B&quot;);        a.start();        b.start();    }}/* * begin methodA threadName=A * end endTime=1526043906998 * begin methodB threadName=B begin time=1526043906998 * end */</code></pre><p>修改下 methodB() 方法，去除 synchronized 关键字。</p><pre><code class="Java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * begin methodA threadName=A * begin methodB threadName=B begin time=1526044084533 * end * end endTime=1526044089534 */</code></pre><p>由此可见：</p><p>A 线程先持有 object 对象锁，B 线程可以以异步方式调用 object 对象中的 <strong>非 synchronized 类型</strong> 的方法。<br>A 线程先持有 object 对象锁，B 线程如果在这时调用 object 对中的 <strong>synchronized 类型</strong> 的方法则需等待，也就是同步。</p><p>（4）脏读</p><p>脏读（dirtyRead）即赋值时进行了同步，但在取值时已经被其他线程修改过了。</p><p>跟上例类似，在方法上加 synchronized 关键字可以解决脏读问题。</p><p>（5）synchronized 锁重入</p><p>synchronized 具有锁重入功能，也就说当一个线程获得对象锁之后，再次请求此对象锁可以再次得到该对象的锁。</p><pre><code class="Java">public class Service {    synchronized public void service1() {        System.out.println(&quot;service1&quot;);        service2();    }    synchronized public void service2() {        System.out.println(&quot;service2&quot;);        service3();    }    synchronized public void service3() {        System.out.println(&quot;service3&quot;);    }}</code></pre><p>可重入锁的概念：自己可以再次获取自己的内部锁。假如说不可锁重入的话，线程一直等待释放对象锁，而对象锁自己拥有，就会造成死锁。</p><p><strong>可重入锁</strong> 也支持在父子类继承的环境中，即子类可以通过重入锁调用父类的同步方法。</p><p>（6）当线程执行的代码出现异常时，其所持有的锁会自动释放。</p><p>（7）同步不可以继承。</p><pre><code class="Java">class Super {    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int main 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int main 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class Sub extends Super {    @Override    public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class MyThreadA extends Thread {    private Sub sub;    public MyThreadA(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}class MyThreadB extends Thread {    private Sub sub;    public MyThreadB(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}public class Main {    public static void main(String[] args) {        Sub subRef = new Sub();        MyThreadA a = new MyThreadA(subRef);        a.setName(&quot;A&quot;);        a.start();        MyThreadB b = new MyThreadB(subRef);        b.setName(&quot;B&quot;);        b.start();    }}/* * int sub 下一步 sleep begin threadName=A time=1526046246540 * int sub 下一步 sleep begin threadName=B time=1526046246540 * int sub 下一步 sleep   end threadName=A time=1526046251541 * int sub 下一步 sleep   end threadName=B time=1526046251541 * int main 下一步 sleep begin threadName=A time=1526046251541 * int main 下一步 sleep   end threadName=A time=1526046256541 * int main 下一步 sleep begin threadName=B time=1526046256541 * int main 下一步 sleep   end threadName=B time=1526046261542 */</code></pre><p>子类方法添加 synchronized 关键字。</p><pre><code class="Java">class Sub extends Super {    @Override    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * int sub 下一步 sleep begin threadName=A time=1526046197787 * int sub 下一步 sleep   end threadName=A time=1526046202787 * int main 下一步 sleep begin threadName=A time=1526046202787 * int main 下一步 sleep   end threadName=A time=1526046207788 * int sub 下一步 sleep begin threadName=B time=1526046207788 * int sub 下一步 sleep   end threadName=B time=1526046212789 * int main 下一步 sleep begin threadName=B time=1526046212789 * int main 下一步 sleep   end threadName=B time=1526046217790 */</code></pre><p>由此可见：重写父类的同步方法并不能同步，还是要加 synchronized 关键字才行。</p><h2 id="synchronized-同步语句块"><a href="#synchronized-同步语句块" class="headerlink" title="synchronized 同步语句块"></a>synchronized 同步语句块</h2><p>（1）synchronized 同步语句块的使用</p><p>当两个线程同时访问同一对象 object 中的 synchronized (this) 同步代码块时，一段时间内只能有一个线程被执行，另一个线程要等这个线程执行完以后才能执行。</p><p>（2）用同步代码块解决同步方法的弊端</p><p>同步方法的弊端是有时候执行时间会比较长。</p><pre><code class="Java">// 使用同步方法public class Task {    private String getData1;    private String getData2;    public synchronized void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            getData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            getData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}// 使用同步代码块public class Task {    private String getData1;    private String getData2;    public void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            String privateGetData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            String privateGetData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            synchronized (this) {                getData1 = privateGetData1;                getData2 = privateGetData2;            }            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>其实也就是在耗时部分是异步执行的，从而缩短了代码的执行时长。</p><p>当一个线程访问 同步代码块 时，另一个线程仍然可以访问该对象的非同步代码块。即在 synchronized 块中就是同步执行，不在 synchronized 块中时异步执行。</p><p>（3）synchronized 代码块之间的同步性</p><p>在使用 synchronized (this) 代码块时，当线程访问 object 的一个 synchronized (this) 代码块时，其他线程对同一 object 中所有 synchronized (this) 同步代码块的访问将阻塞。</p><p>和 synchronized 方法一样，synchronized (this) 代码块也是锁定 <strong>当前对象</strong> 的。其他对象访问同一 object 中的 synchronized 方法也会阻塞。</p><p>（4）将任意对象作为对象监视器</p><p>多个线程调用同一个对象中的不同名称的 synchronized 同步方法或 synchronized(this) 同步代码块时，调用的效果就是按顺序执行，也就是 <strong>同步的，阻塞的</strong> 。</p><p>这说明 synchronized 同步方法或 synchronized(this) 同步代码块分别有 <strong>两种作用</strong> ：</p><ul><li>synchronized 同步 <strong>方法</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized 同步方法中的代码。</li></ul></li><li>synchronized(this) 同步 <strong>代码块</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized(this) 同步代码块中的代码。</li></ul></li></ul><p>类似，对于 synchronized(非this对象) 同步代码块：</p><p>当多个线程持有 “对象监视器” 为同一个对象的前提下，同一时间只有一个线程可以执行 synchronized(非this对象x) 同步代码块中的代码。</p><pre><code class="java">public class Service {    private String usernameParam;    private String passwordParam;    public void setUsernamePassword(String username, String password) {        try {            String anyString = new String();            synchronized (anyString) {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入同步块&quot;);                usernameParam = username;                Thread.sleep(3000);                passwordParam = password;                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开同步块&quot;);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>而多个线程持有的 “对象监视器” 不是同一对象时，还是异步执行的。</p><pre><code class="Java">public class Service {    private String anyString = new String();    public void a() {        try {            synchronized (anyString) {                System.out.println(&quot;a begin&quot;);                Thread.sleep(3000);                System.out.println(&quot;a   end&quot;);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void b() {        System.out.println(&quot;b begin&quot;);        System.out.println(&quot;b   end&quot;);    }}</code></pre><p>站在多个线程角度，多个线程调用同一方法先后顺序是随机的，只是对于单个线程而言，在同步方法/代码块内部是同步的。</p><p>（5）静态 synchronized 方法与 synchronized(class) 代码块</p><p>对于静态的 synchronized 方法，是对当前 Class 类进行封锁。<br>对于非静态 synchronized 方法，是对当前 对象 的封锁。</p><p>二者是不同的锁，但是 Class 锁可以对所有对象实例起作用。</p><pre><code class="Java">package com.wshunli.thread.sync5;class Service {    synchronized public static void printA() {        try {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);            Thread.sleep(3000);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public static void printB() {        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;进入printB&quot;);        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;离开printB&quot;);    }}class ThreadA extends Thread {    private Service service;    public ThreadA(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printA();    }}class ThreadB extends Thread {    private Service service;    public ThreadB(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printB();    }}public class Main {    public static void main(String[] args) {        Service service1 = new Service();        Service service2 = new Service();        ThreadA a = new ThreadA(service1);        a.setName(&quot;A&quot;);        a.start();        ThreadB b = new ThreadB(service2);        b.setName(&quot;B&quot;);        b.start();    }}/* * 线程名称为：A在1526136864655进入printA * 线程名称为：A在1526136867656离开printA * 线程名称为：B在1526136867656进入printB * 线程名称为：B在1526136867656离开printB */</code></pre><p>同步 synchronized(class) 代码块的作用其实和 synchronized static 方法的作用一样。</p><pre><code class="Java">class Service {    public static void printA() {        synchronized (Service.class) {            try {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);                Thread.sleep(3000);                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public static void printB() {        synchronized (Service.class) {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printB&quot;);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printB&quot;);        }    }}/* * 线程名称为：A在1526137124491进入printA * 线程名称为：A在1526137127492离开printA * 线程名称为：B在1526137127492进入printB * 线程名称为：B在1526137127492离开printB */</code></pre><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面面试什么的多线程部分问的比较多，需要加强下
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java多线程编程核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="https://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>https://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-12T15:05:05.553Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><a id="more"></a><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="https://www.wshunli.com/posts/4cbab315.html"/>
    <id>https://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="https://www.wshunli.com/posts/b96eb139.html"/>
    <id>https://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-04-28T06:47:46.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里云实习生面试</title>
    <link href="https://www.wshunli.com/posts/b3a8426.html"/>
    <id>https://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-12T15:05:05.561Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="https://www.wshunli.com/posts/689a494.html"/>
    <id>https://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-12T15:05:05.561Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="https://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>https://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-12T15:05:05.561Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="https://www.wshunli.com/posts/3cb63fb.html"/>
    <id>https://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-12T15:05:05.561Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/9c87288c.html"/>
    <id>https://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><p>第十四章 并发</p><p>这部分大概地看了下，后面再看本书仔细学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="https://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>https://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-05-12T15:05:05.561Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（amap）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（amap）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="https://www.wshunli.com/posts/4e05997a.html"/>
    <id>https://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+Zze/iwy1JasdHgbIN4vV5Qr83WRl9dVPJu49DtrRxRtKunXMuYATPng/9uXn0D7RM6HlNQwBFB4hAk4Q02Eh19BdiwY4gTGvzfwOevnXoOxmaoKfiS0Gy6FR1T7Em+ljGFBDYQm+Eq488lWYJRoeiS9+gEEj6WMq8tGSg330iWNYDUFB8ohj+XdIaSOUyG3efhL1ZEABRtM+ENyPqrxSsR15iVn/vutzu/EWfPjaFgl8KalzcGHBGCeSxJuYNGsFoOhvdRjt8YZNO6g6dDEsZinFY7cL8mhjc0ao932bdkGV2pAGXBA136Kke5jb79THH44BNuzfEwE5yOH9GmfCFryj53xI/+2V+7wIzn2lCWSRAvoMSphP8DMG394OpOCCpqwl42RjPG5XEMFM2ISx6nEE0FBYejcuaYezUJLqqAxvZokqM3f14Li3ZDJ0GKINy6SWlmulSq5E68trIDtC5YOeuCijPt8ukYggvyNKRE3iPM31r4up8RCkn6Q8dw0D+Zsv7HLMoMKY/YXREe+VzOrrJPpMHB7erv4Oskf0/oY9KIPzPOshfbGaFa9ymCH9ACW4yJMu7cS8VC5wi17H43yHrXHglWMwMMakaAHo9UiMKL1PctaTHhgUZd3vGasDuF99KAKcRUzWafiOeQI/BZTPSKkliz55dUK40fkdugGdrkgj28YRZ3+B78krpmFEgPJa8BTLmL4/6jxOlurLhKVsa7aQ/8epC/NdkPR7ZD3ovJP4Fj8q/NarIQW5L4TtHPo1tRRp2k9O2JTejZChh26dnu4jWCA/0S5tyWad5YuupY3prfUQsGCHTYZvqCd88zcFsRqZykDg+oL3Pu+nMn2pGy0A2syNVVz1v0Nnz2R3bg9nrXgIeT4TBLF4rOZG8ZL8ef6Adibljg1L9zs4edz4IDblx5QKvQS8/L/emj359t5QsTPabuApov/efn1ZqHVa0Q/2Vu7NrUUWRhcLzCGdf439mxr9aYSKOcG+abWDjKF4JnUXO9QWP5zEiXEgaFDxcUqjdndx/qgoWneZiRxF8Wv5MSHEIqhfLNUDotHs9OxCFEks+2GDHskkhfMbrFlLwz3IlndA/WOTiQ8BzZfnQF6tzpPhSfO8EwX4Mph0hBiIKUgGrgd+/uf9kO1C7Apw3T60Q9VDNb+N8DTwcpMYiBgAjMmj2yFuqM7udjyl+5CnMiZ/StUf0Jd4nHLIsNfeijMJzRGkmmKbsgK/m934Y2SnVtlY6gCskZITYR4wZf4eEkVDngrMz3Qjm9xZNqqukj8FUxZmcVFttzWF9HUMiNyClkA3DpBl5Vl3vnyTpPpVNFse0TMXHPUuuCN1M4M0dLRfzxYnNaA/owY3s8ZJoXVYqLaslDiRxO0J03tutdZ+ZaMQQFuaFV5x8GBhbeBUnMJdcNzLqEvvNxg/HfAF2QgHBLc4AwT/0cW0AEar5j2zG5mKsJpfX12Eq6otpJv5Rd5sgcMuKKK4HyuskFX2Dv9BYx8Lr34okeYILcZLBbBociUuq50lqdK/WmGEaqbrTlg+sOVOZvqGtHAYPC0pAlXgvi3+Nb/9kq2cSfGGLebvHmB3UcM0HlOBQ1w81jj501cB/jBaiRR9dbRpXuF2pGi8RupY8Dvg43w2Woip+4ltVrN5yMPQxm0ynY+7uNuvYuUn8kroo5PFwO88mArTItUUpQxAlSb9DMS8NgcCUTXj1Ka6ZDlroJ5IERdtuzIJNgXs6TozmQqHEplEdTCAfSgSlus3OQEYNFXjvXoaLP7533C8MRFDCvJRIjQbJeXilX/lJaITQfsoDg4uRFpF2MP5FSU8H8cZ0S6i+vyS7LDuhD4G9MrR9xxPWUydTHlsfPzi2adO9tV47+YgAVABTurkT6ewjbYgS8nB36AONicGipypFNiUGltAtRVm9rTcH0B4cM3Pp638RFf/KUpYWr1CVmbEkAXK7upxwVIOZuet6gE45Pr+Ck7DF2CkS7e/hZKIfgoOODSZc872ZUmgBsKzokaSGKUcbzMrieBLSqMsPDV5NUbKBksnRA0VlpMePuwQqetQjkmBYSyGocVdg5ztDEj2h54yLM+BUCimuGbue90gOf9zADlWrXy5YHP+5zUzL/6B29hqzj5ALFw7KrniKNkONhyQEDZmVCWn58CjdyvdOqsDaHl2T4zYvbicp8o7Cjuq8KZ8p0vcN7BIvSyI83v5V7AYDGQzvvDsnKKAOAulWzuAP1Yxq5LymQe1eRCT1T1Iq/E53QtXoOY+JuSoPwI4QicGlTHhvcM7kYUxtnWnongl7kh2+Bz0ncj2DW+kLWe7S6v68JRP1Rfvz03UMsufCtJtfg10zabQJyR2avkQRwtbU9Zj4DiFV94C8ycVCBD8F/NSlDQMLY6HBt0jteRXNjHanNx2rdEQHvMtT26g/EuqPwXfPSw758andKjGR5mxCm8nJZSX2OTnsZRAzo+4mkjEIoQudcgOEIuCuZeCtNfhaAHu2cdaqJaQ/XpkjT+B1RMW5Tyvyop9eIn9XR547EllrXlMsFxFX3Nq3mTqoxu4RyJW/fdsO2KsPBdmECvVbjg8KAE+IegZjTXW50K0DalMGuiijWhe9rvLJxm09pk13mei5Q5jv9FgQKw67qQoTR8gHYDZoIbWNlFEmIuPrY0ajCcpbRhR/vp0mlxIsUfmSQffGEcji9DuRv/in+MlViRWgANQe5mwKXaJhczuJvUI5Qb6S45+0eejr8JFk6A+lKdC7xoTI0CfcaISssNsvWZP4c6dxcLSL7oxI2b85Tp1va3Rav2s92zAOQdN91B7MbQfGZbGA0iKyOuGqpLVp4ijsg8eorgUSqopMYZPNWkzd4zoxyGyO/7Y3FDr16o3hzq6mWtuz9RBXo6srZSnnncSRRDldrL482+7GDxbqVq34m5Xb4rhIhE4x5TjxFi8RCBEpyQvurWu2gCvO0J+eQkzj0j88UQxRYNzK0seTLXM64HyE6ac8ZxQcxElFm/Lh7bsyP16GxFcfe37t4V7bniRe7UbfXTxRSloiIARkrgKAtzIwJiitYZHUPtDVnPLuvgdFEk8PWF7h854stdaPqizsMuJOyIyMxav+9j8HO5vyKHVNR2dgLFilzXO+zux24dcN1HBPGIAMJ9iefdk3Md1t9McLYv0CTpMv89gkoYMJa66mHEzoAza6AmIMVczhboEVkewNZSoL2JuRsbDqWBaXMdw6RtRLprX6oHHhutE6Gb8nIHFJQYWdNP7K7nLJatduAF2WwgVI0T3+ARsY5gzVJFJyZwUvP7HAH+1AaFpszHPU+G7f6dkk/20He3e5utLOAjjFgpaXwtS/ug== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="https://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>https://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="https://www.wshunli.com/posts/96840e7.html"/>
    <id>https://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="https://www.wshunli.com/posts/4e57ccd.html"/>
    <id>https://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-05-12T15:05:05.553Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="https://www.wshunli.com/posts/91672bd7.html"/>
    <id>https://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-05-12T15:05:05.553Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="https://www.wshunli.com/posts/84f52548.html"/>
    <id>https://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="https://www.wshunli.com/posts/b4e3c990.html"/>
    <id>https://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（六）</title>
    <link href="https://www.wshunli.com/posts/9c05eee5.html"/>
    <id>https://www.wshunli.com/posts/9c05eee5.html</id>
    <published>2018-01-22T02:44:25.000Z</published>
    <updated>2018-05-12T15:05:05.557Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】生活是一条路，走走停停，停停走走
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
</feed>
