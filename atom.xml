<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-05-16T15:07:49.472Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录2018年春季中国银联实习生面试</title>
    <link href="https://www.wshunli.com/posts/60f1f107.html"/>
    <id>https://www.wshunli.com/posts/60f1f107.html</id>
    <published>2018-05-14T06:24:49.000Z</published>
    <updated>2018-05-16T15:07:49.472Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（unionpay）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（unionpay）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春中国银联暑期实习生面试（系统与应用开发）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>我本将心向明月，奈何明月照沟渠</title>
    <link href="https://www.wshunli.com/posts/2739df62.html"/>
    <id>https://www.wshunli.com/posts/2739df62.html</id>
    <published>2018-05-08T06:06:23.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<p>我本将心向明月，奈何明月照沟渠，<br>落花有意随流水，流水无心恋落花。</p><a id="more"></a><p>简历初筛未通过，笔试机会都没有。</p><p>滴，好人卡。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我本将心向明月，奈何明月照沟渠，&lt;br&gt;落花有意随流水，流水无心恋落花。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《Java多线程编程核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/4e70966b.html"/>
    <id>https://www.wshunli.com/posts/4e70966b.html</id>
    <published>2018-05-05T14:47:09.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<p>前面面试什么的多线程部分问的比较多，需要加强下<a id="more"></a> ，这里记录总结 《Java多线程编程核心技术》 读书情况。</p><h1 id="第一章-Java-多线程技能"><a href="#第一章-Java-多线程技能" class="headerlink" title="第一章 Java 多线程技能"></a>第一章 Java 多线程技能</h1><p>本章主要介绍了线程概念、核心方法以及优先级。</p><p>1、进程和线程的区别</p><p><strong>进程</strong>是受操作系统管理的基本运行单元，是系统进行资源分配和调度的独立单位。<br><strong>线程</strong>是在进程中独立运行的子任务，CPU 在这些任务之间不停地切换，各子任务共享程序的内存空间。</p><p>线程和进程的区别是什么？ - 知乎：<br><a href="https://www.zhihu.com/question/25532384" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/25532384</a></p><p>2、线程的创建</p><p>（1）继承 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.html" rel="external nofollow noopener noreferrer" target="_blank">Thread</a> 类</p><p>（2）实现 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Runnable.html" rel="external nofollow noopener noreferrer" target="_blank">Runnable</a> 接口</p><p>其中 Thread 类实现了 Runable 接口，都需要重写里面 run 方法。</p><p>两种方式的区别：</p><p>实现 Runnable 的类更具有健壮性，避免了单继承的局限。<br>Runnable 更容易实现资源共享，能多个线程同时处理一个资源。</p><p>Java中 Thread和Runnable实现多线程的区别和联系 - CSDN博客:<br><a href="https://blog.csdn.net/oxuanboy1/article/details/51733279" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/oxuanboy1/article/details/51733279</a></p><p><strong>非线程安全</strong> 主要是指多个线程对同一对象中的同一变量实例进行操作时会出现值被修改、值不同步的现象。</p><p>3、线程的启动和停止</p><p>线程的启动可以使用 start() 或者 run() 方法，</p><p>调用 start() 方法，虚拟机会创建新的线程运行 run 方法；<br>调用 run() 方法后，会在调用的线程执行，不会创建新的线程。</p><p>线程的终止方法有三种：</p><p>（1）使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。<br>（2）使用 stop() 方法强行终止线程（这个方法不推荐使用，因为 stop() 和 suspend()、resume() 一样，也可能发生不可预料的结果）。<br>（3）使用 interrupt() 方法中断线程。</p><p>下面介绍了 interrupt() 方法停止线程，调用该方法知识在当前线程中打了一个停止的标记，并不是真的停止线程。</p><p>如何判断线程的状态是不是停止的：</p><p>（1）this.interrupted() 测试 <strong>当前线程</strong> 是否已经中断，会将状态标志置清为 false 。</p><pre><code class="Java">public static boolean interrupted() {}</code></pre><p>（2）this.isInterrupted() 测试线程是否已经中断，不清除状态标志。</p><pre><code class="Java">public boolean isInterrupted() {}</code></pre><p>Java并发（基础知识）—— 创建、运行以及停止一个线程 - Tim-Tom - 博客园：<br><a href="https://www.cnblogs.com/timlearn/p/4007982.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/timlearn/p/4007982.html</a></p><p>其他方法 stop()、suspend()、resume() 不推荐使用。</p><p>4、线程的主要方法</p><p>Thread.currentThread() 返回代码段正在被哪个线程调用的信息。</p><p>isAlive() 判断当前线程是否处于活动状态，即线程已经启动但尚未终止。</p><pre><code class="Java">package com.wshunli.thread;public class CountOperate extends Thread{    public CountOperate(){        System.out.println(&quot;CountOperate---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName()=&quot; + Thread.currentThread().getName());//获取线程名        System.out.println(&quot;Thread.currentThread().isAlive()=&quot; + Thread.currentThread().isAlive()); //查看线程是否存活        System.out.println(&quot;this.getName=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;CountOperate---end &quot;);        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));    }    @Override    public void run() {        System.out.println(&quot;run---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName=&quot; + Thread.currentThread().getName());        System.out.println(&quot;Thread.currentThread().isAlive()&quot; + Thread.currentThread().isAlive());        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));        System.out.println(&quot;this.getName()=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;run --- end&quot;);    }}package com.wshunli.thread;public class Main {    public static void main(String[] args) {        CountOperate c = new CountOperate();//        c.start();        Thread t1 = new Thread(c);        System.out.println(&quot;main begin t1 isAlive=&quot; + t1.isAlive());        t1.setName(&quot;A&quot;);        t1.start();        System.out.println(&quot;main end t1 isAlive=&quot; + t1.isAlive());    }}/* * CountOperate---begin * Thread.currentThread().getName()=main * Thread.currentThread().isAlive()=true * this.getName=Thread-0 * this.isAlive()=false * CountOperate---end * Thread.currentThread()==this :false * main begin t1 isAlive=false * main end t1 isAlive=true * run---begin * Thread.currentThread().getName=A * Thread.currentThread().isAlive()true * Thread.currentThread()==this :false * this.getName()=Thread-0 * this.isAlive()=false * run --- end */</code></pre><p>Thread.sleep() 方法是在指定的毫秒数内让“当前正在执行的线程”休眠（暂停执行）。</p><p>yield() 放弃当前 CPU 资源，将它让给其他任务占用 CPU 时间。</p><p>5、线程的优先级</p><p>在 Java 中线程的优先级分为 1 ~ 10 这 10 个等级，可以使用 setPriority​(int newPriority) 方法设置。</p><p>优先级较高的线程得到的 CPU 资源较多，CPU 会尽量优先执行，并不一定先执行完。</p><p>线程的优先级具有继承性。</p><p>6、守护线程</p><p>在 java 中线程有两种：用户线程、守护线程。</p><p>守护线程的作用是为其他线程提供便利服务，当进程中不存在非守护线程了，守护线程会自动销毁。</p><p>守护线程最典型的应用就是 GC （垃圾回收器）。</p><h1 id="第二章-对象及变量的并发访问"><a href="#第二章-对象及变量的并发访问" class="headerlink" title="第二章 对象及变量的并发访问"></a>第二章 对象及变量的并发访问</h1><h2 id="synchronized-同步方法"><a href="#synchronized-同步方法" class="headerlink" title="synchronized 同步方法"></a>synchronized 同步方法</h2><p>（1）方法内的变量线程安全，而 <strong>实例变量</strong> 非线程安全。</p><p>（2）多个对象多个锁</p><p>关键字 synchronized 取得的锁都是对象锁，而不是把方法或者代码段当作锁。</p><pre><code class="Java">class HasSelfPrivateNum {    public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class ThreadA extends Thread {    private HasSelfPrivateNum numRef;    public ThreadA(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;a&quot;);    }}class ThreadB extends Thread {    private HasSelfPrivateNum numRef;    public ThreadB(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;b&quot;);    }}class Main {    public static void main(String[] args) {        HasSelfPrivateNum numRef = new HasSelfPrivateNum();        ThreadA athread = new ThreadA(numRef);        athread.start();        ThreadB bthread = new ThreadB(numRef);        bthread.start();    }}/* * a set over! * b set over! * b num=200 * a num=100 */</code></pre><p>对于多个对象实例，会有多个对象锁，所以还是异步的、互不影响。</p><p>（3）synchronized 方法与对象锁</p><p>调用 synchronized 声明的方法是排队同步执行的。</p><p>把 HasSelfPrivateNum 类的 addI() 方法添加 synchronized 关键字，输出就变为：</p><pre><code class="java">class HasSelfPrivateNum {    synchronized public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * a set over! * a num=100 * b set over! * b num=200 */</code></pre><p>上面多个线程调用同一方法，下面再看调用 <strong>不同方法</strong> 的情况。</p><pre><code class="java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyObject object;    public ThreadA(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodA();    }}class ThreadB extends Thread {    private MyObject object;    public ThreadB(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodB();    }}public class Main {    public static void main(String[] args) {        MyObject object = new MyObject();        ThreadA a = new ThreadA(object);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(object);        b.setName(&quot;B&quot;);        a.start();        b.start();    }}/* * begin methodA threadName=A * end endTime=1526043906998 * begin methodB threadName=B begin time=1526043906998 * end */</code></pre><p>修改下 methodB() 方法，去除 synchronized 关键字。</p><pre><code class="Java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * begin methodA threadName=A * begin methodB threadName=B begin time=1526044084533 * end * end endTime=1526044089534 */</code></pre><p>由此可见：</p><p>A 线程先持有 object 对象锁，B 线程可以以异步方式调用 object 对象中的 <strong>非 synchronized 类型</strong> 的方法。<br>A 线程先持有 object 对象锁，B 线程如果在这时调用 object 对中的 <strong>synchronized 类型</strong> 的方法则需等待，也就是同步。</p><p>（4）脏读</p><p>脏读（dirtyRead）即赋值时进行了同步，但在取值时已经被其他线程修改过了。</p><p>跟上例类似，在方法上加 synchronized 关键字可以解决脏读问题。</p><p>（5）synchronized 锁重入</p><p>synchronized 具有锁重入功能，也就说当一个线程获得对象锁之后，再次请求此对象锁可以再次得到该对象的锁。</p><pre><code class="Java">public class Service {    synchronized public void service1() {        System.out.println(&quot;service1&quot;);        service2();    }    synchronized public void service2() {        System.out.println(&quot;service2&quot;);        service3();    }    synchronized public void service3() {        System.out.println(&quot;service3&quot;);    }}</code></pre><p>可重入锁的概念：自己可以再次获取自己的内部锁。假如说不可锁重入的话，线程一直等待释放对象锁，而对象锁自己拥有，就会造成死锁。</p><p><strong>可重入锁</strong> 也支持在父子类继承的环境中，即子类可以通过重入锁调用父类的同步方法。</p><p>（6）当线程执行的代码出现异常时，其所持有的锁会自动释放。</p><p>（7）同步不可以继承。</p><pre><code class="Java">class Super {    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int main 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int main 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class Sub extends Super {    @Override    public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class MyThreadA extends Thread {    private Sub sub;    public MyThreadA(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}class MyThreadB extends Thread {    private Sub sub;    public MyThreadB(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}public class Main {    public static void main(String[] args) {        Sub subRef = new Sub();        MyThreadA a = new MyThreadA(subRef);        a.setName(&quot;A&quot;);        a.start();        MyThreadB b = new MyThreadB(subRef);        b.setName(&quot;B&quot;);        b.start();    }}/* * int sub 下一步 sleep begin threadName=A time=1526046246540 * int sub 下一步 sleep begin threadName=B time=1526046246540 * int sub 下一步 sleep   end threadName=A time=1526046251541 * int sub 下一步 sleep   end threadName=B time=1526046251541 * int main 下一步 sleep begin threadName=A time=1526046251541 * int main 下一步 sleep   end threadName=A time=1526046256541 * int main 下一步 sleep begin threadName=B time=1526046256541 * int main 下一步 sleep   end threadName=B time=1526046261542 */</code></pre><p>子类方法添加 synchronized 关键字。</p><pre><code class="Java">class Sub extends Super {    @Override    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * int sub 下一步 sleep begin threadName=A time=1526046197787 * int sub 下一步 sleep   end threadName=A time=1526046202787 * int main 下一步 sleep begin threadName=A time=1526046202787 * int main 下一步 sleep   end threadName=A time=1526046207788 * int sub 下一步 sleep begin threadName=B time=1526046207788 * int sub 下一步 sleep   end threadName=B time=1526046212789 * int main 下一步 sleep begin threadName=B time=1526046212789 * int main 下一步 sleep   end threadName=B time=1526046217790 */</code></pre><p>由此可见：重写父类的同步方法并不能同步，还是要加 synchronized 关键字才行。</p><h2 id="synchronized-同步语句块"><a href="#synchronized-同步语句块" class="headerlink" title="synchronized 同步语句块"></a>synchronized 同步语句块</h2><p>（1）synchronized 同步语句块的使用</p><p>当两个线程同时访问同一对象 object 中的 synchronized (this) 同步代码块时，一段时间内只能有一个线程被执行，另一个线程要等这个线程执行完以后才能执行。</p><p>（2）用同步代码块解决同步方法的弊端</p><p>同步方法的弊端是有时候执行时间会比较长。</p><pre><code class="Java">// 使用同步方法public class Task {    private String getData1;    private String getData2;    public synchronized void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            getData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            getData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}// 使用同步代码块public class Task {    private String getData1;    private String getData2;    public void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            String privateGetData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            String privateGetData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            synchronized (this) {                getData1 = privateGetData1;                getData2 = privateGetData2;            }            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>其实也就是在耗时部分是异步执行的，从而缩短了代码的执行时长。</p><p>当一个线程访问 同步代码块 时，另一个线程仍然可以访问该对象的非同步代码块。即在 synchronized 块中就是同步执行，不在 synchronized 块中时异步执行。</p><p>（3）synchronized 代码块之间的同步性</p><p>在使用 synchronized (this) 代码块时，当线程访问 object 的一个 synchronized (this) 代码块时，其他线程对同一 object 中所有 synchronized (this) 同步代码块的访问将阻塞。</p><p>和 synchronized 方法一样，synchronized (this) 代码块也是锁定 <strong>当前对象</strong> 的。其他对象访问同一 object 中的 synchronized 方法也会阻塞。</p><p>（4）将任意对象作为对象监视器</p><p>多个线程调用同一个对象中的不同名称的 synchronized 同步方法或 synchronized(this) 同步代码块时，调用的效果就是按顺序执行，也就是 <strong>同步的，阻塞的</strong> 。</p><p>这说明 synchronized 同步方法或 synchronized(this) 同步代码块分别有 <strong>两种作用</strong> ：</p><ul><li>synchronized 同步 <strong>方法</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized 同步方法中的代码。</li></ul></li><li>synchronized(this) 同步 <strong>代码块</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized(this) 同步代码块中的代码。</li></ul></li></ul><p>类似，对于 synchronized(非this对象) 同步代码块：</p><p>当多个线程持有 “对象监视器” 为同一个对象的前提下，同一时间只有一个线程可以执行 synchronized(非this对象x) 同步代码块中的代码。</p><pre><code class="java">public class Service {    private String usernameParam;    private String passwordParam;    public void setUsernamePassword(String username, String password) {        try {            String anyString = new String();            synchronized (anyString) {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入同步块&quot;);                usernameParam = username;                Thread.sleep(3000);                passwordParam = password;                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开同步块&quot;);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>而多个线程持有的 “对象监视器” 不是同一对象时，还是异步执行的。</p><pre><code class="Java">public class Service {    private String anyString = new String();    public void a() {        try {            synchronized (anyString) {                System.out.println(&quot;a begin&quot;);                Thread.sleep(3000);                System.out.println(&quot;a   end&quot;);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void b() {        System.out.println(&quot;b begin&quot;);        System.out.println(&quot;b   end&quot;);    }}</code></pre><p>站在多个线程角度，多个线程调用同一方法先后顺序是随机的，只是对于单个线程而言，在同步方法/代码块内部是同步的。</p><p>（5）静态 synchronized 方法与 synchronized(class) 代码块</p><p>对于静态的 synchronized 方法，是对当前 Class 类进行封锁。<br>对于非静态 synchronized 方法，是对当前 对象 的封锁。</p><p>二者是不同的锁，但是 Class 锁可以对所有对象实例起作用。</p><pre><code class="Java">package com.wshunli.thread.sync5;class Service {    synchronized public static void printA() {        try {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);            Thread.sleep(3000);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public static void printB() {        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;进入printB&quot;);        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;离开printB&quot;);    }}class ThreadA extends Thread {    private Service service;    public ThreadA(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printA();    }}class ThreadB extends Thread {    private Service service;    public ThreadB(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printB();    }}public class Main {    public static void main(String[] args) {        Service service1 = new Service();        Service service2 = new Service();        ThreadA a = new ThreadA(service1);        a.setName(&quot;A&quot;);        a.start();        ThreadB b = new ThreadB(service2);        b.setName(&quot;B&quot;);        b.start();    }}/* * 线程名称为：A在1526136864655进入printA * 线程名称为：A在1526136867656离开printA * 线程名称为：B在1526136867656进入printB * 线程名称为：B在1526136867656离开printB */</code></pre><p>同步 synchronized(class) 代码块的作用其实和 synchronized static 方法的作用一样。</p><pre><code class="Java">class Service {    public static void printA() {        synchronized (Service.class) {            try {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);                Thread.sleep(3000);                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public static void printB() {        synchronized (Service.class) {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printB&quot;);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printB&quot;);        }    }}/* * 线程名称为：A在1526137124491进入printA * 线程名称为：A在1526137127492离开printA * 线程名称为：B在1526137127492进入printB * 线程名称为：B在1526137127492离开printB */</code></pre><p>（6）数据类型 String 的常量池特性</p><p>对于 synchronized(<strong>string</strong>) 同步块，string 值为相同 String 常量时，两个线程持有相同的锁。</p><p>所以在大多数情况下，synchronized 代码块不使用 String 作为锁对象。</p><p>（7）多线程的死锁</p><p>不同的线程都在等待根本不可能释放的锁，从而导致所有任务都无法继续完成。</p><p>线程互相持有对方的锁，然后等待对方释放锁就有可能出现死锁。</p><p>（8）内置类与静态内置类</p><p>对于内置类中有两个同步方法，只要是使用不同的锁，多线程还是异步的。</p><p>对于两个内置类 class1 class2 ，class1 中使用 synchronized(<strong>class2</strong>) 同步代码块时，其他线程只能以同步方式调用 class2 中的 synchronized 同步方法</p><p>（9）锁对象的改变</p><p>再将任何数据作为同步锁时，只需判断多线程是否同时持有相同的锁对象即可。</p><pre><code class="Java">class MyService {    private String lock = &quot;123&quot;;    public void testMethod() {        try {            synchronized (lock) {                System.out.println(Thread.currentThread().getName() + &quot; begin &quot;                        + System.currentTimeMillis());                lock = &quot;456&quot;;                Thread.sleep(2000);                System.out.println(Thread.currentThread().getName() + &quot;   end &quot;                        + System.currentTimeMillis());            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyService service;    public ThreadA(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.testMethod();    }}class ThreadB extends Thread {    private MyService service;    public ThreadB(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.testMethod();    }}public class Main {    public static void main(String[] args) throws InterruptedException {        MyService service = new MyService();        ThreadA a = new ThreadA(service);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(service);        b.setName(&quot;B&quot;);        a.start();        Thread.sleep(50);        b.start();    }}/* * A begin 1526217990101 * B begin 1526217990151 * A   end 1526217992101 * B   end 1526217992151 */</code></pre><p>运行到线程 B 时，对象锁已经改变，所以是异步。</p><p>但是对于对象而言，只是改变对象的属性时不行的，运行结果还是同步的。</p><h2 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h2><p>关键字 volatile 的主要作用是使变量在多个线程间可见。</p><p>（1）关键字 volatile 与死循环</p><pre><code class="Java">class PrintString {    private boolean isContinuePrint = true;    public boolean isContinuePrint() {        return isContinuePrint;    }    public void setContinuePrint(boolean isContinuePrint) {        this.isContinuePrint = isContinuePrint;    }    public void printStringMethod() {        try {            while (isContinuePrint == true) {                System.out.println(&quot;run printStringMethod threadName=&quot;                        + Thread.currentThread().getName());                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        PrintString printStringService = new PrintString();        printStringService.printStringMethod();        System.out.println(&quot;我要停止它！ stopThread=&quot;                + Thread.currentThread().getName());        printStringService.setContinuePrint(false);    }}</code></pre><p>这个程序停不下来，主要原因是 main 线程一直在处理 while() 循环，导致程序不能继续执行。</p><p>我们可以使用多线程技术解决这个问题，在子线程中执行 while() 循环，这样主线程就能继续执行了。</p><pre><code class="Java">class PrintString implements Runnable {    private boolean isContinuePrint = true;    public boolean isContinuePrint() {        return isContinuePrint;    }    public void setContinuePrint(boolean isContinuePrint) {        this.isContinuePrint = isContinuePrint;    }    public void printStringMethod() {        try {            while (isContinuePrint == true) {                System.out.println(&quot;run printStringMethod threadName=&quot;                        + Thread.currentThread().getName());                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    @Override    public void run() {        printStringMethod();    }}public class Run {    public static void main(String[] args) {        PrintString printStringService = new PrintString();        new Thread(printStringService).start();        System.out.println(&quot;我要停止它！ stopThread=&quot;                + Thread.currentThread().getName());        printStringService.setContinuePrint(false);    }}</code></pre><p>但是这种在 <code>-server</code> 服务器模式下，还是会出现死循环。<br>主要是因为在服务器模式下，为了提高线程运行的效率，线程一致在私有堆栈中取得 <code>isContinuePrint</code> 的值为 true 。</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/内存结构.png" alt="内存结构"></p><p>volatile 关键字增加了实例变量在多个线程之间的可见性，但不支持原子性。</p><p>也就是说同步私有堆栈中的值和公共堆栈中的值，强制从公共堆栈中进行取值，或者强制将值写入公共堆栈。</p><p><strong>synchronized 和 volatile 的比较</strong>：</p><p>1、关键字 volatile 是线程同步的轻量级实现，所以 volatile 性能肯定比 synchronized 要好，并且 volatile 只能修饰变量，而 synchronized 可以修饰方法和代码块。目前在开发中使用 synchronized 关键字的比率还是比较大的。<br>2、多线程访问 volatile 不会发生阻塞，而 synchronized 会出现阻塞。<br>3、volatile 能保证数据的可见性，但是不能保证原子性；而 synchronized 可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公有内存中的数据同步。<br>4、volatile 关键字是解决变量在多个线程之间的可见性；而 synchronized 关键字是解决多个线程之间访问资源同步性的。</p><p>所谓的线程安全包含 <strong>原子性和可见性</strong> 两个方面，Java 的同步机制都是围绕这两个方面量保证线程安全的。</p><p>volatile和synchronized的区别 - CSDN博客:<br><a href="https://blog.csdn.net/suifeng3051/article/details/52611233" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/suifeng3051/article/details/52611233</a></p><p>（2）volatile 关键字的非原子性</p><p>（3）原子类</p><p>原子操作是不可分割的整体，没有其他线程能够中断或检查正在原子操作中的变量。</p><pre><code class="Java">import java.util.concurrent.atomic.AtomicInteger;public class AddCountThread extends Thread {    private AtomicInteger count = new AtomicInteger(0);    @Override    public void run() {        for (int i = 0; i &lt; 10000; i++) {            System.out.println(count.incrementAndGet());        }    }}</code></pre><p>一个原子（atomic）类型就是一个原子操作可用的类型，它可以在没有锁的情况下做到线程安全（thread-safe）。</p><p>注意方法之间的调用不是原子操作。</p><p>（4）synchronized 代码块具有 volatile 同步功能。</p><p>关键字 synchronized 可以使多个线程访问统一资源具有同步性，而且它还具有将线程内存中的私有变量与公共内存中的变量同步的功能。</p><h1 id="第三章-线程间通信"><a href="#第三章-线程间通信" class="headerlink" title="第三章 线程间通信"></a>第三章 线程间通信</h1><p>进程间通信使系统之间的交互性更强大，在大大提高 CPU 利用率的同时，还可以对个线程任务在处理的过程中进行有效的把控和监督。</p><h2 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h2><p>（1）使用 wait/notify 实现进程间通信</p><p>java中等待通知机制（wait/notify） - CSDN博客：<br><a href="https://blog.csdn.net/joenqc/article/details/54981532" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/joenqc/article/details/54981532</a></p><p>wait() 和 notify() 需要在同步方法或者同步代码块中调用。</p><p>wait() 会使线程停止运行，而 notify() 使停止的线程继续运行。</p><pre><code class="Java">import java.util.ArrayList;import java.util.List;class MyList {    private static List list = new ArrayList();    public static void add() {        list.add(&quot;anyString&quot;);    }    public static int size() {        return list.size();    }}class ThreadA extends Thread {    private Object lock;    public ThreadA(Object lock) {        super();        this.lock = lock;    }    @Override    public void run() {        try {            synchronized (lock) {                if (MyList.size() != 5) {                    System.out.println(&quot;wait begin &quot;                            + System.currentTimeMillis());                    lock.wait();                    System.out.println(&quot;wait end  &quot;                            + System.currentTimeMillis());                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadB extends Thread {    private Object lock;    public ThreadB(Object lock) {        super();        this.lock = lock;    }    @Override    public void run() {        try {            synchronized (lock) {                for (int i = 0; i &lt; 10; i++) {                    MyList.add();                    if (MyList.size() == 5) {                        lock.notify();                        System.out.println(&quot;已发出通知！&quot;);                    }                    System.out.println(&quot;添加了&quot; + (i + 1) + &quot;个元素!&quot;);                    Thread.sleep(1000);                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}public class Main {    public static void main(String[] args){        try {            Object lock = new Object();            ThreadA a = new ThreadA(lock);            a.start();            Thread.sleep(50);            ThreadB b = new ThreadB(lock);            b.start();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * wait begin 1526377675223 * 添加了1个元素! * 添加了2个元素! * 添加了3个元素! * 添加了4个元素! * 已发出通知！ * 添加了5个元素! * 添加了6个元素! * 添加了7个元素! * 添加了8个元素! * 添加了9个元素! * 添加了10个元素! * wait end  1526377685276 */</code></pre><p>方法 wait() 被执行后，锁会自动释放；执行完 notify() 方法后，锁不会自动释放，只有同步方法或者代码块执行完后才会释放。</p><p>（2）Thread 中关于线程状态的 API</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/线程状态切换.png" alt="线程状态切换"></p><p>Java 线程一共有七个状态，分别是新建（New），就绪（Ready to run），运行中（Running），睡眠（Sleeping），阻塞（Blocked），等待（Waiting），死亡（Dead/Terminate）。</p><p>java线程状态切换 - 简书：<br><a href="https://www.jianshu.com/p/531310753a64" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/531310753a64</a></p><p>每个锁对象都有两个队列：就绪队列、阻塞队列。就绪队列存储了将要获得锁的线程，阻塞队列存储了被阻塞的线程。</p><p>当一个线程被唤醒 (notify) 后，才会进入到就绪队列，等待 CPU 的调度，反之，当一个线程被等待 (wait) 后，就会进入阻塞队列，等待下一次被唤醒。</p><p>（3）wait() 方法的使用</p><p>wait() 方法会使线程进入等待状态。</p><p>wait(long) 方法是线程等待一段时间内是否被唤醒，超时则自动唤醒。</p><p>当线程在 wait() 状态时，调用线程的 interrupt() 方法会出现 InterruptedException 异常。</p><p>在以下情况下，持有锁的线程会释放锁：<br>1、执行完同步代码块。<br>2、在执行同步代码块的过程中，遇到异常而导致线程终止。<br>3、在执行同步代码块的过程中，执行了锁所属对象的 wait() 方法，这个线程会释放锁，进行对象的等待池。</p><p>（4）通知一个线程和唤醒所有线程</p><p>notify() 仅 <strong>随机</strong> 唤醒一个线程，多次调用也会随机将等待 wait 状态的线程进行唤醒。</p><p>notifyAll() 方法可以唤醒所有线程。</p><p>但是通知 notify() 方法在 wait() 方法之前调用，后面 wait 线程收不到通知就会一直处于等待状态。</p><p>注意线程在等待结束后其外部条件数据值可能发生改变。</p><p>（5）生产者/消费者模式</p><p>1、一生产者一消费者:</p><pre><code class="Java">class MyStack {    private List list = new ArrayList();    synchronized public void push() {        try {            if (list.size() == 1) {                this.wait();            }            list.add(&quot;anyString=&quot; + Math.random());            this.notify();            System.out.println(&quot;push=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public String pop() {        String returnValue = &quot;&quot;;        try {            if (list.size() == 0) {                System.out.println(&quot;pop操作中的：&quot;                        + Thread.currentThread().getName() + &quot; 线程呈wait状态&quot;);                this.wait();            }            returnValue = &quot;&quot; + list.get(0);            list.remove(0);            this.notify();            System.out.println(&quot;pop=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }        return returnValue;    }}class P {    private MyStack myStack;    public P(MyStack myStack) {        super();        this.myStack = myStack;    }    public void pushService() {        myStack.push();    }}class C {    private MyStack myStack;    public C(MyStack myStack) {        super();        this.myStack = myStack;    }    public void popService() {        System.out.println(&quot;pop=&quot; + myStack.pop());    }}class P_Thread extends Thread {    private P p;    public P_Thread(P p) {        super();        this.p = p;    }    @Override    public void run() {        while (true) {            p.pushService();        }    }}class C_Thread extends Thread {    private C r;    public C_Thread(C r) {        super();        this.r = r;    }    @Override    public void run() {        while (true) {            r.popService();        }    }}public class Main {    public static void main(String[] args) {        MyStack myStack = new MyStack();        P p = new P(myStack);        C r = new C(myStack);        P_Thread pThread = new P_Thread(p);        C_Thread rThread = new C_Thread(r);        pThread.start();        rThread.start();    }}</code></pre><p>2、一生产者多消费者：</p><pre><code class="Java">class MyStack {    private List list = new ArrayList();    synchronized public void push() {        try {            while (list.size() == 1) {                this.wait();            }            list.add(&quot;anyString=&quot; + Math.random());            this.notify();            System.out.println(&quot;push=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public String pop() {        String returnValue = &quot;&quot;;        try {            while (list.size() == 0) {                System.out.println(&quot;pop操作中的：&quot;                        + Thread.currentThread().getName() + &quot; 线程呈wait状态&quot;);                this.wait();            }            returnValue = &quot;&quot; + list.get(0);            list.remove(0);            this.notify();            System.out.println(&quot;pop=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }        return returnValue;    }}</code></pre><p>3、多生产者一消费者。</p><p>4、多生产者多消费者。</p><p>可能产生假死的情况，使用 notifyAll() 方法通知其他线程即可。</p><p>（6）通过管道进行进程间通信</p><p>在 Java 语言中提供了各种各样的输入/输出流，其中管道流 pipeStream 可用于不同线程间之间传送数据。</p><p>一个线程发送数据到输出管道，另一个线程从输入管道中读取数据。</p><pre><code class="Java">class WriteData {    public void writeMethod(PipedOutputStream out) {        try {            System.out.println(&quot;write :&quot;);            for (int i = 0; i &lt; 300; i++) {                String outData = &quot;&quot; + (i + 1);                out.write(outData.getBytes());                System.out.print(outData);            }            System.out.println();            out.close();        } catch (IOException e) {            e.printStackTrace();        }    }}class ReadData {    public void readMethod(PipedInputStream input) {        try {            System.out.println(&quot;read  :&quot;);            byte[] byteArray = new byte[20]; // 字节流            // char[] byteArray = new char[20]; //字符流            int readLength = input.read(byteArray);            while (readLength != -1) {                String newData = new String(byteArray, 0, readLength);                System.out.print(newData);                readLength = input.read(byteArray);            }            System.out.println();            input.close();        } catch (IOException e) {            e.printStackTrace();        }    }}class ThreadWrite extends Thread {    private WriteData write;    private PipedOutputStream out;    public ThreadWrite(WriteData write, PipedOutputStream out) {        super();        this.write = write;        this.out = out;    }    @Override    public void run() {        write.writeMethod(out);    }}class ThreadRead extends Thread {    private ReadData read;    private PipedInputStream input;    public ThreadRead(ReadData read, PipedInputStream input) {        super();        this.read = read;        this.input = input;    }    @Override    public void run() {        read.readMethod(input);    }}public class Main {    public static void main(String[] args) {        try {            WriteData writeData = new WriteData();            ReadData readData = new ReadData();            PipedInputStream inputStream = new PipedInputStream();            PipedOutputStream outputStream = new PipedOutputStream();            // inputStream.connect(outputStream);            outputStream.connect(inputStream);            ThreadRead threadRead = new ThreadRead(readData, inputStream);            threadRead.start();            Thread.sleep(2000);            ThreadWrite threadWrite = new ThreadWrite(writeData, outputStream);            threadWrite.start();        } catch (IOException e) {            e.printStackTrace();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面面试什么的多线程部分问的比较多，需要加强下
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java多线程编程核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="https://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>https://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-16T15:07:49.464Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><a id="more"></a><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="https://www.wshunli.com/posts/4cbab315.html"/>
    <id>https://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="https://www.wshunli.com/posts/b96eb139.html"/>
    <id>https://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-04-28T06:47:46.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里云实习生面试</title>
    <link href="https://www.wshunli.com/posts/b3a8426.html"/>
    <id>https://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-16T15:07:49.472Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="https://www.wshunli.com/posts/689a494.html"/>
    <id>https://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-16T15:07:49.472Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+e0ic/1IZxyDWmhUzSgOzYXmYaqnUzeoQhKTm4UNPfkEEOdJJpu1RAAgxzTvWSzOKTftv/3qw2VNZaDAOp1QAM/3YoRRLDah1p+MwB2x3JkMeHhH/B0xKOzl1gVbJTed2h+GlfLqdQshP+Z0topVLi4LiIqDoQUhpv2T/oNejZGHAZ+llzbDZVD59111fXuDSclN4Pkm1wt9pcjJjeNdjgFUmi+68X3VdH9ebg6JRzNhi6eVa14ceTz+8gx+Khco4KXg+wLc++PkmXByFJW+eXFBqphXFf42gka+ARL9CDOyFYSkWCGbLVaCOnplXfVuQcsWszJ1aRoB0cOYyO7bQG8QsX8l6o4IbuE909PwSnyMo4aMnPHqECULj5AKVkkRp9RuEjzR+zOK2keDNIIEjeTw+NSwURxkmZQmjG86eDWzAI1tqbim6zhGeAr9xi49Lp7EwTltB4/NDt3kTuTzFB1e5GR14lkRbzBOeEAab8bfyADGULi0oYXHO5s4tWoX++EwSiYHfqHI+2jcte0+UAfQgb573xj+hNdCU+TNWqQ1b2boWFsfeJ4qGabbKyQIyRYjNFcyedL7++8r4kcT2mQOOL3ujH+3+iQ85BroGn9FLg/E1N2vu2Uk+V0TfOfLsMxT86r9pDC3kozov4fBd7VAX8+ECEPhQGdEqSob+EAOu1foR4NVDTI8dVw/p8MywTK8GfloCvOnoNgwVBg1nFFfHVVMuk32ndNkYPuLwsIAUMT0ITCCFrK5+xPcOh4LAfVyKYXKvr0wXQCtO0rXCiE+N86hdASOFIhvTb6nE6m4Dxf6LJINl0gqXkOgtUX7ahwhV5JQux+qYR+Bb9glIXLnhu8rmAYetQ6vr9SdBnNGWDlJKj7IegKxtF+z/A/HL3aNhnhJdUFhlKZlTBc8OxuA/oToIy9JJbEyUXEaWqaMySdk1dHEi1oEWBvafp3Qr6jxPkdtyqMrVUCiLujXpbBIPM0Hji9YokSqRzciMFqCJY6XjNvs74EorGBXg7fYtUr6qJT8dRJ8wcn7X8Ys2N3U0JjNpRAJ610IhIirrpYwUwSGyHgLWS9xQbWAlHz9G7wbMv917DS3sn8RKHPf9rXwz6OZ4kTKCEHy+IxOahdAa/vDXSaept3XbsTyzXlc3YoFpSFgaLNOzuii7ZeX3SEan6BJggvT13/OlhA9NhiJ4en8Q3gMK+x/l+bXkaKHHgsVNsEFyQZeUrM81dfylqgVpexCflH+5+1D7m9otQ3VK3WHE4vWiIHaBdTnPsK85v0PSbRfuXAgUFNfFTuqGNmvNvnb6DnZwIFJaXY4kwqEkQTfonSj9RQPyEaqKhon9jakgtR+PUbHp6GXXUiTxrlapJPU70zkfa7Bz++cxwN0vw2rYcyK7mlx53GmAFBAPMcrBML9EeOdhoirOp5ivMmAI+QpyVhDM8ynSaBiPWlVQPMRq+2pwPMhclfczHjgogSmDbsn1F2fMLBLc4wrasWkLj3LFyqJrnaP6SYF57unbsYOhqDCzo9+rTLVZT9f2i4jERp2vUhpmXj4LGJPfZuCTio9cxLjjywyEkhPAzEe0zGle7nksBpu2/UK2yire4MAC1K+rUCOelhi1ib73ZmVrrJCreFrkKiN5CO/WIEF9w63NlbUIMN8f4tnnoBI3hamKhHMCm+GKtFsXxcNke3dW7lV20kAIcO/BdWlzvAS+Eyg7VGzzSMDO3V3GBsGfuCf4rl7t45NPMzhWZ1jFzrLEgHzgnXUA14L+kygWfmE9DR6qcg6TLMAU/RnvzqjMKFu7V306oHf10YIJnHyZxbVDr4LDKeJzjdEaHXicDFqzyMfM+0rPqo+hMs+CkLz+Ny+Jl0QbGU5KGKj0wNROTACPyUijcRDOJLmoUKsxrgbX8LYD9PHmv8I4AzS4Gap+f03LMFR9tLDiZk5ShO2i2NlNfM/UJVDMk+LCjVlXGSigoVTW9XAMSzV+Cc3F26MGBERxeuz1yVhbM4ZJvqkY/e6RJyJd0ZGuIek8d4aJfntSm7gX21/puoyii950a3ik1cvtXHRvPCl1KyitNDBRn0Od1hFGZ9A1qSMhoNgStvwNh9hZvkUYygP+Zc56p/tJ19EWjD21Y8VdXuNPvF2WorF8S666+xw2tCIeWI7tMuowLc2WLjkf2TtQR7OzBZBp+i6e2uJlu3iV2/cv+L7jehCnbmWW5DQ9S5SULHlIFSNHwB9tZSYat4NEWW6M1lXFoJC5ND3b29gcsQ8tMXZB5Z7nHV1bgNlC5mjE2TZz18vRfc6XD5PcNxdtWBnlOpmMJl1etr6RGq2CK6AfXlWV+AQew58NLw6/UNGtHGz0xBsUoFWDl2vo9MyIstWGGSf9F4dYe/R0vEQbpTi5DGNy9L8xNbhaF81AkKj1B+1LbjVfgTAjfrcPc3q8+Eh2KF+iLqFytmVWnh3LDfFvaf3jV6QyCeXeLrGwNHtPSP6hKOfh+VTewkP7d71yLKpuKxT3TRRGDGocoxemDDaac0NZIv6EYlc3C6VqPna3d6fR1VP2awqJm7vMnpwdUkaHpqMGGdufa9VWkRA0reszHXr4BaUo8iTSf9nYE7zrp9w+hKrTZCNfQ7TCDP+HYi7MpQzmW9B6HVDovGDplNVqFwXyr/bdeFQjZrquGAtbWmT3Aoyx2I8XstnZqjKHzluN9ZMRFhr76fWuLcUJLxSxyo7iDDiXDtKBRf5k9c2mb4wCS4ZItGjkiQL61eKVy23nH8q0oylD4SyTolnebewV2rL92q/xqm/nVghlfXYfmCttK6PvJ3g67BkXEhgX9WNRmgQnpUfMlxiTDvj9AQrOkXHUJnUv9RbHsI/+judgCrCg7GZIwlpGQlOMGg5VhrjbNlY8FxVoPRpXI3mde6T6/z8j6Ma9sCGh4idJpWgtX859a/lnJJMrhSGVBy2aoIPsv6U7ox9UpHO606oaGTA+TpHFsLynKtby2NH04NuhrFWtasWRTTYW5TuOs52tIaNnkljqsOWCR4kqPhOufu4T78DWBSUMkG0GvP5QOaPLKf/4P84WxtaJoe+3LxUVsoyr5cP++Hr8mwUOXCVfxwAUxywSMKEEg7GhD2AEnGWi1TcKBtcO78o8N7/dw5uG1Bm+jUWkpSp4/MhESmYm76cmLlMycGjknfQDL25O1tyUL506+unhCLwP/yjJLV1r54BSX2Z8R533909V9VjK+bd+xMGn0Ob6/GSHzZg2t4RXfzuSR+95iMDCgRfr3d+oQFdZtxlrrxQD0wH0uQONgxGWhgjv6AJbG0Yci5i8k97rneUghymFzCIt3Zc1yrFj4xC3q1RZjFihQXo2UF5sBaeaGf9yHBMawNW8fknqM/qWXePGKQV7qkHLoMXM0Lts61Hibdrkuw08acSFnj866QhwMHjWO7TYqx6w0csmVYFkRXJeH9WipkZMbJ4NuxffWdYvHWe9yecGzJB790pyhxcj39Lm0ZVW7V6JtyG8eNF/Seq9GNnDetaFNgKweO+H29jW662VeiLIbrcjjmZOlPWPIicqlE9/e0VI+gfoMFnbFbY94H3iSAktSaOhayK4dEImqWt9nd/UmiAYcPvAVjW9u5c1v7mcS1G2gsCJaaAMEViPtvYZnhI92Sbk1KPUzOPiABNNEPHL4RptKOac/W7uQgQ1luvWwv3j9EZU2vRKSmOqs3TNmsAhuq2fZIgDf9BR/wPPgwsh0oIcAobYnDtrdDc5SXPnWwIZubB2MKd7GV62gjm7V6KmlObcm7w8tmmBp66wKX6ro+/4Juc4E0xdvyiMiZCsTNlGlZO5kfnAhd5/mh2mS83DuUQlmNCqVcac6ABmBKVxUVBmnCJtvVUbyoTXibGip3XPP/OhkOBl0PoI8iPKB1Lye5ieMqJsJpzogE59sMImOivaC02hmvahkoMeXj2RFqNnIg3sY5sJ2Jy2AAELEBfzVZQgCvFj9bjPGncTEWrZCiJ8mlHcKZsMrrpS/Tki9Hoq0/bCb9sVBzh/FRT8WlhrcT6C7Zvqu4iZ7hqWAaehhWo7xEAvb1VNQ6EU2uRdVToeJmwg= </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="https://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>https://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-16T15:07:49.472Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="https://www.wshunli.com/posts/3cb63fb.html"/>
    <id>https://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-16T15:07:49.472Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/9c87288c.html"/>
    <id>https://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><p>第十四章 并发</p><p>这部分大概地看了下，后面再看本书仔细学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="https://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>https://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-05-16T15:07:49.472Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（amap）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（amap）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="https://www.wshunli.com/posts/4e05997a.html"/>
    <id>https://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="https://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>https://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="https://www.wshunli.com/posts/96840e7.html"/>
    <id>https://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="https://www.wshunli.com/posts/4e57ccd.html"/>
    <id>https://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-05-16T15:07:49.464Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="https://www.wshunli.com/posts/91672bd7.html"/>
    <id>https://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-05-16T15:07:49.464Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="https://www.wshunli.com/posts/84f52548.html"/>
    <id>https://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="https://www.wshunli.com/posts/b4e3c990.html"/>
    <id>https://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-05-16T15:07:49.468Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
</feed>
