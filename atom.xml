<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  <subtitle>wshunli`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-09-23T01:59:46.002Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录2018年秋季校园招聘超图集团面试</title>
    <link href="https://www.wshunli.com/posts/32fe73ed.html"/>
    <id>https://www.wshunli.com/posts/32fe73ed.html</id>
    <published>2018-09-22T10:02:29.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<p>超图集团</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;超图集团&lt;/p&gt;
      
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘欧珀移动面试</title>
    <link href="https://www.wshunli.com/posts/f61bf791.html"/>
    <id>https://www.wshunli.com/posts/f61bf791.html</id>
    <published>2018-09-22T10:02:07.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<p>欧珀移动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欧珀移动&lt;/p&gt;
      
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘猿辅导面试</title>
    <link href="https://www.wshunli.com/posts/c00883be.html"/>
    <id>https://www.wshunli.com/posts/c00883be.html</id>
    <published>2018-09-21T14:26:48.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘猿辅导面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘极验验证面试</title>
    <link href="https://www.wshunli.com/posts/d3039901.html"/>
    <id>https://www.wshunli.com/posts/d3039901.html</id>
    <published>2018-09-20T14:02:46.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘极验验证面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘合众思壮面试</title>
    <link href="https://www.wshunli.com/posts/d5b4b71d.html"/>
    <id>https://www.wshunli.com/posts/d5b4b71d.html</id>
    <published>2018-09-20T14:02:42.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘合众思壮面试。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘四维图新面试</title>
    <link href="https://www.wshunli.com/posts/48b7610a.html"/>
    <id>https://www.wshunli.com/posts/48b7610a.html</id>
    <published>2018-09-19T12:09:23.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19Enk1WVvyPCk09CTtDDUyztpFPUegTgMXkBKmMaap0IbXGqC/x2nyol2S//VJz7pzTrqSstg6MrclI3sfbyXmzjOkYuMYHf1krU1J4pAmvJjGIyDrzU5I2Nez0MVNmyhy+m4VE5/81HIgiFkTQv5EwFXGxJSt2BV3er1ywyRAPSDef+AFzo7pX95FrBXQHCxPondW9outuNO5IJxqXs5ZrkW8CusJODUYWIkcBUG+wMJxVSXoU2fRqi/Hwqj5bze2MJIhwheIhlyLfMn5DXpGRbWpqLCZQlNw+OiWxW4S8X2UStI4gYZpU </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘四维图新面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘网易杭州面试</title>
    <link href="https://www.wshunli.com/posts/2fbed755.html"/>
    <id>https://www.wshunli.com/posts/2fbed755.html</id>
    <published>2018-09-19T12:09:17.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19Jhi0cbM2qAyFD+gm7xc0e3jHLF2Zz0hqoU1tvw6qMjytoUYlzrfYd8dXu6cGZiX0pDQUJNkNT7Wkv27SjkhYsEUlpkvD/U+0TOWMUUl9I8jaqt80MNZw4pvqEwws+qOvk+dTuht7WvvVr0E98AEtxKucKAx27bC/0bk0jzgIG55VMWFbmg9VYo0q4+eF/8zhZ/7EvcDyX4U8+vYJ47S6liPftaN08bZ26XMlUCkCIEdVp65mXD7p9 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘网易杭州面试。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘金山办公面试</title>
    <link href="https://www.wshunli.com/posts/ec86f75.html"/>
    <id>https://www.wshunli.com/posts/ec86f75.html</id>
    <published>2018-09-19T12:09:13.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19VqJjbLJ2pwuE3yK1rv1cTNqvwB0QhllIo1dRrAQTF0Cj6557gH3DANpScrtNjMILOGhYrBf/+T3YV5wqkWIbK+H3uP+ipjI6Hd/glcOa/86UWUML2pJbwsh0+GhGV9c+H7p4dO48wDF9oP9no6ESAKzM3iN/ZY7qLdA7DLaysuU4Cq5S2u5dnH3mubPtEArSL1K8MOfUOtDsm4OqVh85XcUwTFV2Lvg7jjugwXPi1jsLOhu6P3BgKaiLlDLwE+K9YlOmf6gmSHzKtgPJ+UfvldR29Nb0kakGA/fXjOFfWOvj+8ftCrOQXJkWNswlfyfbauFnYIVOH0Q== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘金山办公面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘中兴通讯面试</title>
    <link href="https://www.wshunli.com/posts/7189e0ee.html"/>
    <id>https://www.wshunli.com/posts/7189e0ee.html</id>
    <published>2018-09-18T13:55:52.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘中兴通讯面试（软件开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘顺丰科技面试</title>
    <link href="https://www.wshunli.com/posts/b8083d29.html"/>
    <id>https://www.wshunli.com/posts/b8083d29.html</id>
    <published>2018-09-18T10:05:15.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘顺丰科技面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘视源股份面试</title>
    <link href="https://www.wshunli.com/posts/1f4b1509.html"/>
    <id>https://www.wshunli.com/posts/1f4b1509.html</id>
    <published>2018-09-18T09:46:07.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘视源股份面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Glide 图片加载框架源码解析</title>
    <link href="https://www.wshunli.com/posts/c47606cc.html"/>
    <id>https://www.wshunli.com/posts/c47606cc.html</id>
    <published>2018-09-17T05:18:23.000Z</published>
    <updated>2018-09-23T01:59:45.990Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Glide 图片加载框架，包含简单的使用和源码解析。<strong>本文内容基于 Glide 4.7.1 版本</strong>。</p><p>Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。Glide 提供了易用的 API，高性能、可扩展的图片解码管道，以及自动的资源池技术。<a href="https://muyangmin.github.io/glide-docs-cn/" rel="external nofollow noopener noreferrer" target="_blank">https://muyangmin.github.io/glide-docs-cn/</a></p><p>Glide 支持拉取，解码和展示视频快照，图片，和 GIF 动画。Glide 的 API 是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide 使用的是一个定制化的基于 HttpUrlConnection 的栈，但同时也提供了与 Google Volley 和 Square OkHttp 快速集成的工具库。</p><h1 id="Glide-的简单使用"><a href="#Glide-的简单使用" class="headerlink" title="Glide 的简单使用"></a>Glide 的简单使用</h1><p>前面有比较详细的介绍，这里不再赘述。</p><p>Android 图片加载框架 Glide 简单使用 | CirGIS</p><p><a href="https://www.wshunli.com/posts/d82d8606.html">https://www.wshunli.com/posts/d82d8606.html</a></p><h1 id="Glide-的源码解析"><a href="#Glide-的源码解析" class="headerlink" title="Glide 的源码解析"></a>Glide 的源码解析</h1><p>1、我们先看 Glide 的 with() 方法</p><pre><code class="lang-Java">  @NonNull  public static RequestManager with(@NonNull Context context) {    return getRetriever(context).get(context);  }  @NonNull  public static RequestManager with(@NonNull Activity activity) {    return getRetriever(activity).get(activity);  }  @NonNull  public static RequestManager with(@NonNull FragmentActivity activity) {    return getRetriever(activity).get(activity);  }  @NonNull  public static RequestManager with(@NonNull Fragment fragment) {    return getRetriever(fragment.getActivity()).get(fragment);  }  @NonNull  public static RequestManager with(@NonNull View view) {    return getRetriever(view.getContext()).get(view);  }</code></pre><p>未完待续。。</p><blockquote><p>参考资料<br>1、Glide源码分析 | lightSky’Blog<br><a href="http://www.lightskystreet.com/2015/10/12/glide_source_analysis/" rel="external nofollow noopener noreferrer" target="_blank">http://www.lightskystreet.com/2015/10/12/glide_source_analysis/</a><br>2、Android Glide源码解析 - 简书<br><a href="https://www.jianshu.com/p/0c383eaa5675" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0c383eaa5675</a><br>3、Android Glide源码解析 | Frodo’s Blog<br><a href="http://frodoking.github.io/2015/10/10/android-glide/" rel="external nofollow noopener noreferrer" target="_blank">http://frodoking.github.io/2015/10/10/android-glide/</a><br>4、Android源码分析：手把手带你分析 Glide的缓存功能 - CSDN博客<br><a href="https://blog.csdn.net/carson_ho/article/details/79256892" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/carson_ho/article/details/79256892</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Glide 图片加载框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 Glide 4.7.1 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。Glide 提供了易用的 API，高性能、可
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Glide" scheme="https://www.wshunli.com/tags/Glide/"/>
    
      <category term="图片加载" scheme="https://www.wshunli.com/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 网络框架源码解析</title>
    <link href="https://www.wshunli.com/posts/2bda06ba.html"/>
    <id>https://www.wshunli.com/posts/2bda06ba.html</id>
    <published>2018-09-16T01:38:40.000Z</published>
    <updated>2018-09-23T01:59:45.994Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Retrofit 网络框架，包含简单的使用和源码解析。<strong>本文内容基于 Retrofit 2.4.0 版本</strong>。</p><p>Type-safe HTTP client for Android and Java by Square, Inc. <a href="http://square.github.io/retrofit/" rel="external nofollow noopener noreferrer" target="_blank">http://square.github.io/retrofit/</a></p><p>前面介绍过 OkHttp ，Retrofit 是对 OkHttp 网络请求框架的封装，前者专注于接口的封装，后者专注于真正的网络请求。</p><p><img src="https://img.wshunli.com/Android/Retrofit/Retrofit_OkHttp.png" alt="封装流程图"></p><p>应用程序通过 Retrofit 请求网络，实际上是由 Retrofit 接口层封装请求参数、Header、Url 等信息，由 OkHttp 完成实际的请求操作；在服务端返回数据后，OkHttp 将原始的结果交给 Retrofit，Retrofit 根据用户的需求对结果进行解析。</p><h1 id="Retrofit-的简单使用"><a href="#Retrofit-的简单使用" class="headerlink" title="Retrofit 的简单使用"></a>Retrofit 的简单使用</h1><p>参考官网的介绍：</p><p>1、创建 HTTP API 接口</p><pre><code class="lang-Java">public interface GitHubService {  @GET(&quot;users/{user}/repos&quot;)  Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path(&quot;user&quot;) String user);}</code></pre><p>2、创建 Retrofit 实例，并实现接口实例</p><pre><code class="lang-Java">Retrofit retrofit = new Retrofit.Builder()    .baseUrl(&quot;https://api.github.com/&quot;)    .build();GitHubService service = retrofit.create(GitHubService.class);</code></pre><p>3、创建请求实例</p><pre><code class="lang-Java">Call&lt;List&lt;Repo&gt;&gt; call = service.listRepos(&quot;wshunli&quot;);</code></pre><p>4、发送网络请求</p><pre><code class="lang-Java">// 同步请求call.execute();// 异步请求call.enqueue(new Callback&lt;List&lt;Repo&gt;&gt;() {    @Override    public void onResponse(Call&lt;List&lt;Repo&gt;&gt; call, Response&lt;List&lt;Repo&gt;&gt; response) {    }    @Override    public void onFailure(Call&lt;List&lt;Repo&gt;&gt; call, Throwable t) {        Log.d(TAG, &quot;onFailure: &quot;);    }});</code></pre><p>和 OkHttp 流程差不多，特别是发送请求方法名字都没有变。</p><h1 id="Retrofit-的源码分析"><a href="#Retrofit-的源码分析" class="headerlink" title="Retrofit 的源码分析"></a>Retrofit 的源码分析</h1><p>Retrofit 网络请求完整的流程图如下：</p><p><img src="https://img.wshunli.com/Android/Retrofit/retrofit_full_process.min.png" alt="Retrofit 流程图"></p><p>下面详细介绍。</p><h2 id="创建-Retrofit-实例"><a href="#创建-Retrofit-实例" class="headerlink" title="创建 Retrofit 实例"></a>创建 Retrofit 实例</h2><p>Retrofit 实例化，也是使用的建造者模式。</p><p><img src="https://img.wshunli.com/Android/Retrofit/retrofit_builder.png" alt="retrofit_builder"></p><p>我们先看 Builder 成员变量的含义：</p><pre><code class="lang-Java">// Retrofit#Builderpublic static final class Builder {// 当前系统环境private final Platform platform;// 网络请求器的工厂private @Nullable okhttp3.Call.Factory callFactory;// 网络请求地址private HttpUrl baseUrl;// 数据转换器工厂集合private final List&lt;Converter.Factory&gt; converterFactories = new ArrayList&lt;&gt;();// 网络请求适配器工厂集合private final List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;();// 回调方法执行器private @Nullable Executor callbackExecutor;// 标志位private boolean validateEagerly;</code></pre><p>1、首先构造函数中通过 <code>Platform.get()</code> 初始化了平台参数</p><pre><code class="lang-Java">Builder(Platform platform) {    this.platform = platform;}public Builder() {    this(Platform.get());}Builder(Retrofit retrofit) {    platform = Platform.get();    callFactory = retrofit.callFactory;    baseUrl = retrofit.baseUrl;    converterFactories.addAll(retrofit.converterFactories);    // Remove the default BuiltInConverters instance added by build().    converterFactories.remove(0);    callAdapterFactories.addAll(retrofit.callAdapterFactories);    // Remove the default, platform-aware call adapter added by build().    callAdapterFactories.remove(callAdapterFactories.size() - 1);    callbackExecutor = retrofit.callbackExecutor;    validateEagerly = retrofit.validateEagerly;}</code></pre><p>我们可以看下判断方法：</p><pre><code class="lang-Java">// Platformclass Platform {  private static final Platform PLATFORM = findPlatform();  static Platform get() {    return PLATFORM;  }  private static Platform findPlatform() {    try {      Class.forName(&quot;android.os.Build&quot;);      if (Build.VERSION.SDK_INT != 0) {        return new Android();      }    } catch (ClassNotFoundException ignored) {    }    try {      Class.forName(&quot;java.util.Optional&quot;);      return new Java8();    } catch (ClassNotFoundException ignored) {    }    return new Platform();  }  /* 省略部分无关代码 */}</code></pre><p>后面如果有需要，我们也可以直接拷贝。</p><p>2、然后设置 Retrofit 所需的参数即可</p><pre><code class="lang-Java">public Builder baseUrl(String baseUrl) {    checkNotNull(baseUrl, &quot;baseUrl == null&quot;);    HttpUrl httpUrl = HttpUrl.parse(baseUrl);    if (httpUrl == null) {    throw new IllegalArgumentException(&quot;Illegal URL: &quot; + baseUrl);    }    return baseUrl(httpUrl);}public Builder baseUrl(HttpUrl baseUrl) {    checkNotNull(baseUrl, &quot;baseUrl == null&quot;);    List&lt;String&gt; pathSegments = baseUrl.pathSegments();    if (!&quot;&quot;.equals(pathSegments.get(pathSegments.size() - 1))) {    throw new IllegalArgumentException(&quot;baseUrl must end in /: &quot; + baseUrl);    }    this.baseUrl = baseUrl;    return this;}/** Add converter factory for serialization and deserialization of objects. */public Builder addConverterFactory(Converter.Factory factory) {    converterFactories.add(checkNotNull(factory, &quot;factory == null&quot;));    return this;}public Builder addCallAdapterFactory(CallAdapter.Factory factory) {    callAdapterFactories.add(checkNotNull(factory, &quot;factory == null&quot;));    return this;}</code></pre><p>3、最后是 build() 方法</p><pre><code class="lang-Java">public Retrofit build() {    if (baseUrl == null) {    throw new IllegalStateException(&quot;Base URL required.&quot;);    }    okhttp3.Call.Factory callFactory = this.callFactory;    if (callFactory == null) {    callFactory = new OkHttpClient();    }    Executor callbackExecutor = this.callbackExecutor;    if (callbackExecutor == null) {    callbackExecutor = platform.defaultCallbackExecutor();    }    // Make a defensive copy of the adapters and add the default Call adapter.    List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;(this.callAdapterFactories);    callAdapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));    // Make a defensive copy of the converters.    List&lt;Converter.Factory&gt; converterFactories =        new ArrayList&lt;&gt;(1 + this.converterFactories.size());    // Add the built-in converter factory first. This prevents overriding its behavior but also    // ensures correct behavior when using converters that consume all types.    converterFactories.add(new BuiltInConverters());    converterFactories.addAll(this.converterFactories);    return new Retrofit(callFactory, baseUrl, unmodifiableList(converterFactories),        unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);}</code></pre><h2 id="创建-API-实例"><a href="#创建-API-实例" class="headerlink" title="创建 API 实例"></a>创建 API 实例</h2><p>获取 API 实例使用 Retrofit 的 <code>create()</code> 方法</p><pre><code class="lang-Java">// Retrofit#create()public &lt;T&gt; T create(final Class&lt;T&gt; service) {    Utils.validateServiceInterface(service);    if (validateEagerly) {        eagerlyValidateMethods(service);    }    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] { service },        new InvocationHandler() {            private final Platform platform = Platform.get();            @Override public Object invoke(Object proxy, Method method, @Nullable Object[] args)                throws Throwable {            // If the method is a method from Object then defer to normal invocation.            if (method.getDeclaringClass() == Object.class) {                return method.invoke(this, args);            }            if (platform.isDefaultMethod(method)) {                return platform.invokeDefaultMethod(method, service, proxy, args);            }            ServiceMethod&lt;Object, Object&gt; serviceMethod =                (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);            OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);            return serviceMethod.adapt(okHttpCall);            }        });}</code></pre><p>创建 API 实例使用的是 <strong>动态代理</strong> 设计模式。</p><h2 id="创建请求实例"><a href="#创建请求实例" class="headerlink" title="创建请求实例"></a>创建请求实例</h2><p>创建请求实例，跟钱买你的动态代理有关。</p><pre><code class="lang-Java">// Retrofit#create()ServiceMethod&lt;Object, Object&gt; serviceMethod =    (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);return serviceMethod.adapt(okHttpCall);</code></pre><p>1、<code>loadServiceMethod()</code> 方法</p><p>一个 <code>ServiceMethod</code> 对应于一个 API 接口的一个方法，<code>loadServiceMethod()</code> 方法负责加载 <code>ServiceMethod</code></p><pre><code class="lang-Java">// Retrofit#loadServiceMethod()ServiceMethod&lt;?, ?&gt; loadServiceMethod(Method method) {    ServiceMethod&lt;?, ?&gt; result = serviceMethodCache.get(method);    if (result != null) return result;    synchronized (serviceMethodCache) {        result = serviceMethodCache.get(method);        if (result == null) {        result = new ServiceMethod.Builder&lt;&gt;(this, method).build();        serviceMethodCache.put(method, result);        }    }    return result;}</code></pre><p>2、<code>OkHttpCall</code> 类</p><p><code>OkHttpCall</code> 实现了 <code>retrofit2.Call</code> ，我们通常会使用它的 <code>execute()</code> 和 <code>enqueue()</code> 接口。</p><pre><code class="lang-Java">OkHttpCall(ServiceMethod&lt;T, ?&gt; serviceMethod, @Nullable Object[] args) {    this.serviceMethod = serviceMethod;    this.args = args;}</code></pre><p>构造方法也没有什么好看的。</p><h2 id="发送网络请求"><a href="#发送网络请求" class="headerlink" title="发送网络请求"></a>发送网络请求</h2><p>发送网络请求其实也就是 <code>OkHttpCall</code> 类中的方法。</p><p>1、<strong>同步请求</strong> 使用 <code>execute()</code> 方法</p><pre><code class="lang-Java">// OkHttpCall#execute()@Override public Response&lt;T&gt; execute() throws IOException {    okhttp3.Call call;    synchronized (this) {        if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);        executed = true;        if (creationFailure != null) {            if (creationFailure instanceof IOException) {                throw (IOException) creationFailure;            } else if (creationFailure instanceof RuntimeException) {                throw (RuntimeException) creationFailure;            } else {                throw (Error) creationFailure;            }        }        call = rawCall;        if (call == null) {            try {                call = rawCall = createRawCall();            } catch (IOException | RuntimeException | Error e) {                throwIfFatal(e); //  Do not assign a fatal error to creationFailure.                creationFailure = e;                throw e;            }        }    }    if (canceled) {        call.cancel();    }    return parseResponse(call.execute());}</code></pre><p>这里就是 Retrofit 和 OkHttp 交互的核心了，分为三步：</p><p>（1）创建 <code>okhttp3.Call</code> ，包括构造参数</p><pre><code class="lang-Java">private okhttp3.Call createRawCall() throws IOException {    okhttp3.Call call = serviceMethod.toCall(args);    if (call == null) {        throw new NullPointerException(&quot;Call.Factory returned null.&quot;);    }    return call;}</code></pre><p>（2）执行网络请求，也就是 OkHttp 的同步网络请求</p><pre><code class="lang-Java">call.execute()</code></pre><p>（3）解析返回的结果</p><pre><code class="lang-Java">Response&lt;T&gt; parseResponse(okhttp3.Response rawResponse) throws IOException {    ResponseBody rawBody = rawResponse.body();    // Remove the body&#39;s source (the only stateful object) so we can pass the response along.    rawResponse = rawResponse.newBuilder()        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))        .build();    int code = rawResponse.code();    if (code &lt; 200 || code &gt;= 300) {        try {        // Buffer the entire body to avoid future I/O.        ResponseBody bufferedBody = Utils.buffer(rawBody);        return Response.error(bufferedBody, rawResponse);        } finally {        rawBody.close();        }    }    if (code == 204 || code == 205) {        rawBody.close();        return Response.success(null, rawResponse);    }    ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);    try {        T body = serviceMethod.toResponse(catchingBody);        return Response.success(body, rawResponse);    } catch (RuntimeException e) {        // If the underlying source threw an exception, propagate that rather than indicating it was        // a runtime exception.        catchingBody.throwIfCaught();        throw e;    }}</code></pre><p>2、<strong>异步请求</strong> 使用 <code>enqueue()</code> 方法</p><pre><code class="lang-Java">@Override public void enqueue(final Callback&lt;T&gt; callback) {    checkNotNull(callback, &quot;callback == null&quot;);    okhttp3.Call call;    Throwable failure;    synchronized (this) {        if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);        executed = true;        call = rawCall;        failure = creationFailure;        if (call == null &amp;&amp; failure == null) {        try {            call = rawCall = createRawCall();        } catch (Throwable t) {            throwIfFatal(t);            failure = creationFailure = t;        }        }    }    if (failure != null) {        callback.onFailure(this, failure);        return;    }    if (canceled) {        call.cancel();    }    call.enqueue(new okhttp3.Callback() {        @Override public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse) {        Response&lt;T&gt; response;        try {            response = parseResponse(rawResponse);        } catch (Throwable e) {            callFailure(e);            return;        }        try {            callback.onResponse(OkHttpCall.this, response);        } catch (Throwable t) {            t.printStackTrace();        }        }        @Override public void onFailure(okhttp3.Call call, IOException e) {        callFailure(e);        }        private void callFailure(Throwable e) {        try {            callback.onFailure(OkHttpCall.this, e);        } catch (Throwable t) {            t.printStackTrace();        }        }    });}</code></pre><p>我们可以看到和同步请求是一致的，实际请求交给了 <code>okhttp3.Call#enqueue(Callback responseCallback)</code> 来实现，并在它的 <code>callback</code> 中调用 <code>parseResponse()</code> 解析响应数据，并转发给传入的 <code>callback</code> 。</p><p>Retrofit 源码就先介绍到这里了，后面有机会再详细介绍。</p><blockquote><p>参考资料<br>1、Retrofit分析-漂亮的解耦套路 - 简书<br><a href="https://www.jianshu.com/p/45cb536be2f4" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/45cb536be2f4</a><br>2、Android：手把手带你 深入读懂 Retrofit 2.0 源码 - 简书<br><a href="https://www.jianshu.com/p/0c055ad46b6c" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0c055ad46b6c</a><br>3、Retrofit源码分析（超详细） - 简书<br><a href="https://www.jianshu.com/p/097947afddaf" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/097947afddaf</a><br>4、拆轮子系列：拆 Retrofit - Piasy的博客 | Piasy Blog<br><a href="https://blog.piasy.com/2016/06/25/Understand-Retrofit/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.piasy.com/2016/06/25/Understand-Retrofit/</a><br>5、Retrofit源码解析 | mundane的幻想空间<br><a href="https://mundane799699.github.io/2018/03/13/retrofit-analysis/" rel="external nofollow noopener noreferrer" target="_blank">https://mundane799699.github.io/2018/03/13/retrofit-analysis/</a><br>6、Retrofit源码解析 - 掘金<br><a href="https://juejin.im/post/5acee62c6fb9a028df22ffee" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/post/5acee62c6fb9a028df22ffee</a><br>7、Retrofit源码解析 | 俞其荣的博客 | Qirong Yu’s Blog<br><a href="https://yuqirong.me/2017/08/03/Retrofit源码解析/" rel="external nofollow noopener noreferrer" target="_blank">https://yuqirong.me/2017/08/03/Retrofit源码解析/</a><br>8、android-cn/android-open-project-analysis<br><a href="https://github.com/android-cn/android-open-project-analysis/tree/master/tool-lib/network/retrofit" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/android-cn/android-open-project-analysis/tree/master/tool-lib/network/retrofit</a><br>9、【Android】Retrofit源码分析 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/79933220" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/79933220</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Retrofit 网络框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 Retrofit 2.4.0 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Type-safe HTTP client for Android and Java by Square, In
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
      <category term="Retrofit" scheme="https://www.wshunli.com/tags/Retrofit/"/>
    
      <category term="网络框架" scheme="https://www.wshunli.com/tags/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp 网络框架源码解析</title>
    <link href="https://www.wshunli.com/posts/5bd2f229.html"/>
    <id>https://www.wshunli.com/posts/5bd2f229.html</id>
    <published>2018-09-13T08:28:11.000Z</published>
    <updated>2018-09-23T01:59:45.994Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 OkHttp 网络框架，包含简单的使用和源码解析。<strong>本文内容基于 OkHttp 3.11.0 版本</strong>。</p><p>网上关于 OkHttp 源码解析的文章有很多，我在这里参考他们的资料，形成自己的知识体系。</p><p>只是停留在应用层面，会使用一些框架是不行的，还需要深入源码、剖析结构。</p><p>An HTTP+HTTP/2 client for Android and Java applications. <a href="http://square.github.io/okhttp/" rel="external nofollow noopener noreferrer" target="_blank">http://square.github.io/okhttp/</a></p><blockquote><p>支持 HTTP/2 协议，允许连接到同一个主机地址的所有请求共享 Socket 。<br>在 HTTP/2 协议不可用的情况下，通过连接池减少请求的延迟。<br>支持 GZip 透明压缩，减少传输的数据包大小。<br>支持响应缓存，避免同一个重复的网络请求。</p></blockquote><h1 id="OkHttp-的简单使用"><a href="#OkHttp-的简单使用" class="headerlink" title="OkHttp 的简单使用"></a>OkHttp 的简单使用</h1><p>一般情况下，对于网络框架有两种常见的使用场景，同步请求和异步请求。</p><p><strong>同步请求</strong>：</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);Response response = call.execute();Log.d(TAG, &quot;onCreate: &quot; + response.body().string());</code></pre><p><strong>异步请求</strong>：</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);call.enqueue(new Callback() {    @Override    public void onFailure(Call call, IOException e) {    }    @Override    public void onResponse(Call call, Response response) throws IOException {        Log.d(TAG, &quot;onCreate: &quot; + response.body().string());    }});</code></pre><p>同步请求和异步请求类似，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，只不过最后执行 enqueue() 方法，整体和网络请求的思路相似。</p><h1 id="OkHttp-的源码分析"><a href="#OkHttp-的源码分析" class="headerlink" title="OkHttp 的源码分析"></a>OkHttp 的源码分析</h1><p>OkHttp 网络请求完整的流程图如下：</p><div align="center"><img src="https://img.wshunli.com/Android/OkHttp/okhttp_full_process.min.png" title="OkHttp 流程图" alt="OkHttp 流程图"></div><p>下面详细介绍。</p><h2 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h2><p>同步请求，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，最后执行 execute() 方法，整体和网络请求的思路相似。</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);Response response = call.execute();</code></pre><h3 id="创建-OkHttpClient-对象"><a href="#创建-OkHttpClient-对象" class="headerlink" title="创建 OkHttpClient 对象"></a>创建 OkHttpClient 对象</h3><p>我们先看 OkHttp 的构造函数：</p><pre><code class="lang-Java">public OkHttpClient() {  this(new Builder());}</code></pre><p>这里是直接实例化，实质上是使用 <strong>建造者模式</strong> 构建 OkHttpClient 实例。</p><p>下面是 OkHttpClient 内部类 Builder 的构造方法：</p><pre><code class="lang-Java">public Builder() {  dispatcher = new Dispatcher();  protocols = DEFAULT_PROTOCOLS;  connectionSpecs = DEFAULT_CONNECTION_SPECS;  eventListenerFactory = EventListener.factory(EventListener.NONE);  proxySelector = ProxySelector.getDefault();  cookieJar = CookieJar.NO_COOKIES;  socketFactory = SocketFactory.getDefault();  hostnameVerifier = OkHostnameVerifier.INSTANCE;  certificatePinner = CertificatePinner.DEFAULT;  proxyAuthenticator = Authenticator.NONE;  authenticator = Authenticator.NONE;  connectionPool = new ConnectionPool();  dns = Dns.SYSTEM;  followSslRedirects = true;  followRedirects = true;  retryOnConnectionFailure = true;  connectTimeout = 10_000;  readTimeout = 10_000;  writeTimeout = 10_000;  pingInterval = 0;}public OkHttpClient build() {  return new OkHttpClient(this);}</code></pre><p>这里 <code>OkHttpClient.Builder</code> 有很多参数，后面再介绍。</p><h3 id="创建-Request-对象"><a href="#创建-Request-对象" class="headerlink" title="创建 Request 对象"></a>创建 Request 对象</h3><p>和 OkHttpClient 类似，Request 也是是使用 <strong>建造者模式</strong> 创建实例。</p><pre><code class="lang-Java">public Builder() {  this.method = &quot;GET&quot;;  this.headers = new Headers.Builder();}public Request build() {  if (url == null) throw new IllegalStateException(&quot;url == null&quot;);  return new Request(this);}</code></pre><p>其中配置默认请求方法为 <code>GET</code> ，还有一些头部的默认参数。</p><h3 id="创建-Call-对象"><a href="#创建-Call-对象" class="headerlink" title="创建 Call 对象"></a>创建 Call 对象</h3><p>OkHttpClient 实现了 <code>Call.Factory</code> ，负责根据请求创建新的 Call 对象。</p><pre><code class="lang-Java">@Override public Call newCall(Request request) {  return RealCall.newRealCall(this, request, false /* for web socket */);}</code></pre><p>Call 只是个接口，实际是实例化的 RealCall 对象。</p><pre><code class="lang-Java">private RealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {  this.client = client;  this.originalRequest = originalRequest;  this.forWebSocket = forWebSocket;  this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client, forWebSocket);}static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {  // Safely publish the Call instance to the EventListener.  RealCall call = new RealCall(client, originalRequest, forWebSocket);  call.eventListener = client.eventListenerFactory().create(call);  return call;}</code></pre><h3 id="发送同步网络请求"><a href="#发送同步网络请求" class="headerlink" title="发送同步网络请求"></a>发送同步网络请求</h3><p>发送请求也是在 <code>RealCall</code> 的 <code>execute()</code> 方法中执行的。</p><pre><code class="lang-Java">// RealCall#execute()@Override public Response execute() throws IOException {  synchronized (this) {    if (executed) throw new IllegalStateException(&quot;Already Executed&quot;);    executed = true;  }  captureCallStackTrace();  eventListener.callStart(this);  try {    client.dispatcher().executed(this);    Response result = getResponseWithInterceptorChain();    if (result == null) throw new IOException(&quot;Canceled&quot;);    return result;  } catch (IOException e) {    eventListener.callFailed(this, e);    throw e;  } finally {    client.dispatcher().finished(this);  }}</code></pre><p>在这里主要做了四件事：</p><p>1、检查 Call 是否执行过，没有执行将 <code>executed</code> 赋值为 true ，保证每个请求只执行一次；<br>2、使用 <code>client.dispatcher().executed(this)</code> 来进行实际的请求；<br>3、调用 <code>getResponseWithInterceptorChain()</code> 方法，获取请求响应的结果；<br>4、最后 <code>dispatcher</code> 结束自己。</p><pre><code class="lang-Java">// Dispatcher#executed()/** Used by {@code Call#execute} to signal it is in-flight. */synchronized void executed(RealCall call) {  runningSyncCalls.add(call);}</code></pre><p>在同步请求中 <code>dispatcher</code> 只是负责判断请求执行的状态，在异步请求中参与内容过多。</p><p>下面我们来看 <code>getResponseWithInterceptorChain()</code> 方法：</p><pre><code class="lang-Java">Response getResponseWithInterceptorChain() throws IOException {  // Build a full stack of interceptors.  List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();  interceptors.addAll(client.interceptors()); // 加入用户自定义的拦截器  interceptors.add(retryAndFollowUpInterceptor); // 重试和重定向拦截器  interceptors.add(new BridgeInterceptor(client.cookieJar())); // 加入转化请求响应的拦截器  interceptors.add(new CacheInterceptor(client.internalCache())); // 加入缓存拦截器  interceptors.add(new ConnectInterceptor(client)); // 加入连接拦截器  if (!forWebSocket) {      interceptors.addAll(client.networkInterceptors()); // 加入用户自定义的网络拦截器  }  interceptors.add(new CallServerInterceptor(forWebSocket)); // 加入请求响应的拦截器  Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,          originalRequest, this, eventListener, client.readTimeoutMillis());  // 利用 chain 来链式调用拦截器，最后的返回结果就是 Response 对象  return chain.proceed(originalRequest);}</code></pre><p>我们都知道，拦截器是 OkHttp 的精髓。</p><p>1、<code>client.interceptors()</code> ，首先加入 <code>interceptors</code> 的是用户自定义的拦截器，比如修改请求头的拦截器等；<br>2、<code>RetryAndFollowUpInterceptor</code> 是用来重试和重定向的拦截器，在下面我们会讲到；<br>3、<code>BridgeInterceptor</code> 是用来将用户友好的请求转化为向服务器的请求，之后又把服务器的响应转化为对用户友好的响应；<br>4、<code>CacheInterceptor</code> 是缓存拦截器，若存在缓存并且可用就直接返回该缓存，否则会向服务器请求；<br>5、<code>ConnectInterceptor</code> 用来建立连接的拦截器；<br>6、<code>client.networkInterceptors()</code> 加入用户自定义的 <code>networkInterceptors</code> ；<br>7、<code>CallServerInterceptor</code>是真正向服务器发出请求且得到响应的拦截器；</p><p>最后在聚合了这些拦截器后，利用 <code>RealInterceptorChain</code> 来链式调用这些拦截器，利用的就是 <strong>责任链模式</strong> 。</p><font font="" size="3" color="#FF0000">下面介绍 OkHttp 中的 拦截器</font><p>拦截器 <code>Interceptor</code> 是 OkHttp 的核心，<strong>实际上它把实际的网络请求、缓存、透明压缩等功能都统一了起来</strong>，每一个功能都只是一个 <code>Interceptor</code>，它们再连接成一个 <code>Interceptor.Chain</code>，环环相扣，最终圆满完成一次网络请求。</p><div align="center"><img src="https://img.wshunli.com/Android/OkHttp/okhttp_interceptors.jpg" title="OkHttp 拦截器" alt="OkHttp 拦截器"></div><p>1、<code>RealInterceptorChain</code> 拦截器链</p><p>拦截器链 <code>RealInterceptorChain</code> 是真正把这些拦截器串起来的一个角色，调用 <code>proceed()</code> 方法</p><pre><code class="lang-Java">public Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,    RealConnection connection) throws IOException {  if (index &gt;= interceptors.size()) throw new AssertionError();  calls++;  // If we already have a stream, confirm that the incoming request will use it.  if (this.httpCodec != null &amp;&amp; !this.connection.supportsUrl(request.url())) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptors.get(index - 1)        + &quot; must retain the same host and port&quot;);  }  // If we already have a stream, confirm that this is the only call to chain.proceed().  if (this.httpCodec != null &amp;&amp; calls &gt; 1) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptors.get(index - 1)        + &quot; must call proceed() exactly once&quot;);  }  // Call the next interceptor in the chain.  // 得到下一次对应的 RealInterceptorChain  RealInterceptorChain next = new RealInterceptorChain(interceptors, streamAllocation, httpCodec,      connection, index + 1, request, call, eventListener, connectTimeout, readTimeout,      writeTimeout);  // 当前次数的 interceptor  Interceptor interceptor = interceptors.get(index);  // 进行拦截处理，并且在 interceptor 链式调用 next 的 proceed 方法  Response response = interceptor.intercept(next);  // Confirm that the next interceptor made its required call to chain.proceed().  // 确认下一次的 interceptor 调用过 chain.proceed()  if (httpCodec != null &amp;&amp; index + 1 &lt; interceptors.size() &amp;&amp; next.calls != 1) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptor        + &quot; must call proceed() exactly once&quot;);  }  // Confirm that the intercepted response isn&#39;t null.  if (response == null) {    throw new NullPointerException(&quot;interceptor &quot; + interceptor + &quot; returned null&quot;);  }  if (response.body() == null) {    throw new IllegalStateException(        &quot;interceptor &quot; + interceptor + &quot; returned a response with no body&quot;);  }  return response;}</code></pre><p>在代码中是一次次链式调用拦截器。</p><p>2、<code>RetryAndFollowUpInterceptor</code> 重试和重定向的拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  Request request = chain.request();  RealInterceptorChain realChain = (RealInterceptorChain) chain;  Call call = realChain.call();  EventListener eventListener = realChain.eventListener();  StreamAllocation streamAllocation = new StreamAllocation(client.connectionPool(),      createAddress(request.url()), call, eventListener, callStackTrace);  this.streamAllocation = streamAllocation;  int followUpCount = 0;  Response priorResponse = null;  while (true) {    // 如果取消，就释放资源    if (canceled) {      streamAllocation.release();      throw new IOException(&quot;Canceled&quot;);    }    Response response;    boolean releaseConnection = true;    try {      // 调用下一个拦截器      response = realChain.proceed(request, streamAllocation, null, null);      releaseConnection = false;    } catch (RouteException e) {      // The attempt to connect via a route failed. The request will not have been sent.      // 路由连接失败，请求将不会被发送      if (!recover(e.getLastConnectException(), streamAllocation, false, request)) {        throw e.getFirstConnectException();      }      releaseConnection = false;      continue;    } catch (IOException e) {      // An attempt to communicate with a server failed. The request may have been sent.      // 服务器连接失败，请求可能已被发送      boolean requestSendStarted = !(e instanceof ConnectionShutdownException);      if (!recover(e, streamAllocation, requestSendStarted, request)) throw e;      releaseConnection = false;      continue;    } finally {      // We&#39;re throwing an unchecked exception. Release any resources.      // 抛出未检查的异常，释放资源      if (releaseConnection) {        streamAllocation.streamFailed(null);        streamAllocation.release();      }    }    // Attach the prior response if it exists. Such responses never have a body.    if (priorResponse != null) {      response = response.newBuilder()          .priorResponse(priorResponse.newBuilder()                  .body(null)                  .build())          .build();    }    // 如果不需要重定向，那么 followUp 为空，会根据响应码判断    Request followUp;    try {      followUp = followUpRequest(response, streamAllocation.route());    } catch (IOException e) {      streamAllocation.release();      throw e;    }    // 释放资源，返回 response    if (followUp == null) {      if (!forWebSocket) {        streamAllocation.release();      }      return response;    }    // 关闭 response 的 body    closeQuietly(response.body());    if (++followUpCount &gt; MAX_FOLLOW_UPS) {      streamAllocation.release();      throw new ProtocolException(&quot;Too many follow-up requests: &quot; + followUpCount);    }    if (followUp.body() instanceof UnrepeatableRequestBody) {      streamAllocation.release();      throw new HttpRetryException(&quot;Cannot retry streamed HTTP body&quot;, response.code());    }    // response 和 followUp 比较是否为同一个连接    // 若为重定向就销毁旧连接，创建新连接    if (!sameConnection(response, followUp.url())) {      streamAllocation.release();      streamAllocation = new StreamAllocation(client.connectionPool(),          createAddress(followUp.url()), call, eventListener, callStackTrace);      this.streamAllocation = streamAllocation;    } else if (streamAllocation.codec() != null) {      throw new IllegalStateException(&quot;Closing the body of &quot; + response          + &quot; didn&#39;t close its backing stream. Bad interceptor?&quot;);    }    // 将重定向操作得到的新请求设置给 request    request = followUp;    priorResponse = response;  }}</code></pre><p>总体来说，<code>RetryAndFollowUpInterceptor</code> 是用来失败重试以及重定向的拦截器。</p><p>3、<code>BridgeInterceptor</code> 桥街和适配拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  Request userRequest = chain.request();  Request.Builder requestBuilder = userRequest.newBuilder();  // 将用户友好的 request 构造为发送给服务器的 request  RequestBody body = userRequest.body();  // 若有请求体，则构造  if (body != null) {    MediaType contentType = body.contentType();    if (contentType != null) {      requestBuilder.header(&quot;Content-Type&quot;, contentType.toString());    }    long contentLength = body.contentLength();    if (contentLength != -1) {      requestBuilder.header(&quot;Content-Length&quot;, Long.toString(contentLength));      requestBuilder.removeHeader(&quot;Transfer-Encoding&quot;);    } else {      requestBuilder.header(&quot;Transfer-Encoding&quot;, &quot;chunked&quot;);      requestBuilder.removeHeader(&quot;Content-Length&quot;);    }  }  if (userRequest.header(&quot;Host&quot;) == null) {    requestBuilder.header(&quot;Host&quot;, hostHeader(userRequest.url(), false));  }  if (userRequest.header(&quot;Connection&quot;) == null) {    requestBuilder.header(&quot;Connection&quot;, &quot;Keep-Alive&quot;);  }  // If we add an &quot;Accept-Encoding: gzip&quot; header field we&#39;re responsible for also decompressing  // the transfer stream.  // 使用 gzip 压缩  boolean transparentGzip = false;  if (userRequest.header(&quot;Accept-Encoding&quot;) == null &amp;&amp; userRequest.header(&quot;Range&quot;) == null) {    transparentGzip = true;    requestBuilder.header(&quot;Accept-Encoding&quot;, &quot;gzip&quot;);  }  // 设置 cookie  List&lt;Cookie&gt; cookies = cookieJar.loadForRequest(userRequest.url());  if (!cookies.isEmpty()) {    requestBuilder.header(&quot;Cookie&quot;, cookieHeader(cookies));  }  // 设置 UA  if (userRequest.header(&quot;User-Agent&quot;) == null) {    requestBuilder.header(&quot;User-Agent&quot;, Version.userAgent());  }  // 构造完后，将 request 交给下一个拦截器去处理。最后又得到服务端响应 networkResponse  Response networkResponse = chain.proceed(requestBuilder.build());  // 保存 networkResponse 的 cookie  HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());  // 将 networkResponse 构造为对用户友好的 response  Response.Builder responseBuilder = networkResponse.newBuilder()      .request(userRequest);  // 如果 networkResponse 使用 gzip 并且有响应体的话，给用户友好的 response 设置响应体  if (transparentGzip      &amp;&amp; &quot;gzip&quot;.equalsIgnoreCase(networkResponse.header(&quot;Content-Encoding&quot;))      &amp;&amp; HttpHeaders.hasBody(networkResponse)) {    GzipSource responseBody = new GzipSource(networkResponse.body().source());    Headers strippedHeaders = networkResponse.headers().newBuilder()        .removeAll(&quot;Content-Encoding&quot;)        .removeAll(&quot;Content-Length&quot;)        .build();    responseBuilder.headers(strippedHeaders);    String contentType = networkResponse.header(&quot;Content-Type&quot;);    responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));  }  return responseBuilder.build();}</code></pre><p>在 <code>BridgeInterceptor</code> 这一步，先把用户友好的请求进行重新构造，变成了向服务器发送的请求。</p><p>之后调用 <code>chain.proceed(requestBuilder.build())</code> 进行下一个拦截器的处理。</p><p>等到后面的拦截器都处理完毕，得到响应。再把 <code>networkResponse</code> 转化成对用户友好的 <code>response</code> 。</p><p>4、<code>CacheInterceptor</code> 缓存拦截器</p><p>分析 <code>CacheInterceptor</code> 拦截器 <code>intercept()</code> 方法的源代码</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {    // 得到 request 对应缓存中的 response    Response cacheCandidate = cache != null            ? cache.get(chain.request())            : null;    // 获取当前时间，会和之前缓存的时间进行比较    long now = System.currentTimeMillis();    // 得到缓存策略    CacheStrategy strategy = new CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();    Request networkRequest = strategy.networkRequest;    Response cacheResponse = strategy.cacheResponse;    // 追踪缓存，其实就是计数    if (cache != null) {        cache.trackResponse(strategy);    }    // 缓存不适用，关闭    if (cacheCandidate != null &amp;&amp; cacheResponse == null) {        closeQuietly(cacheCandidate.body()); // The cache candidate wasn&#39;t applicable. Close it.    }    // If we&#39;re forbidden from using the network and the cache is insufficient, fail.    // 禁止网络并且没有缓存的话，返回失败    if (networkRequest == null &amp;&amp; cacheResponse == null) {        return new Response.Builder()                .request(chain.request())                .protocol(Protocol.HTTP_1_1)                .code(504)                .message(&quot;Unsatisfiable Request (only-if-cached)&quot;)                .body(Util.EMPTY_RESPONSE)                .sentRequestAtMillis(-1L)                .receivedResponseAtMillis(System.currentTimeMillis())                .build();    }    // If we don&#39;t need the network, we&#39;re done.    // 不用网络请求，返回缓存    if (networkRequest == null) {        return cacheResponse.newBuilder()                .cacheResponse(stripBody(cacheResponse))                .build();    }    Response networkResponse = null;    try {        // 交给下一个拦截器，返回 networkResponse        networkResponse = chain.proceed(networkRequest);    } finally {        // If we&#39;re crashing on I/O or otherwise, don&#39;t leak the cache body.        if (networkResponse == null &amp;&amp; cacheCandidate != null) {            closeQuietly(cacheCandidate.body());        }    }    // 如果我们同时有缓存和 networkResponse ，根据情况使用    if (cacheResponse != null) {        if (networkResponse.code() == HTTP_NOT_MODIFIED) {            Response response = cacheResponse.newBuilder()                    .headers(combine(cacheResponse.headers(), networkResponse.headers()))                    .sentRequestAtMillis(networkResponse.sentRequestAtMillis())                    .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())                    .cacheResponse(stripBody(cacheResponse))                    .networkResponse(stripBody(networkResponse))                    .build();            networkResponse.body().close();            // 更新原来的缓存至最新            // Update the cache after combining headers but before stripping the            // Content-Encoding header (as performed by initContentStream()).            cache.trackConditionalCacheHit();            cache.update(cacheResponse, response);            return response;        } else {            closeQuietly(cacheResponse.body());        }    }    Response response = networkResponse.newBuilder()            .cacheResponse(stripBody(cacheResponse))            .networkResponse(stripBody(networkResponse))            .build();    // 保存之前未缓存的缓存    if (cache != null) {        if (HttpHeaders.hasBody(response) &amp;&amp; CacheStrategy.isCacheable(response, networkRequest)) {            // Offer this request to the cache.            CacheRequest cacheRequest = cache.put(response);            return cacheWritingResponse(cacheRequest, response);        }        if (HttpMethod.invalidatesCache(networkRequest.method())) {            try {                cache.remove(networkRequest);            } catch (IOException ignored) {                // The cache cannot be written.            }        }    }    return response;}</code></pre><p><code>CacheInterceptor</code> 做的事情就是根据请求拿到缓存，若没有缓存或者缓存失效，就进入网络请求阶段，否则会返回缓存。</p><p>5、<code>ConnectInterceptor</code> 拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  RealInterceptorChain realChain = (RealInterceptorChain) chain;  Request request = realChain.request();  StreamAllocation streamAllocation = realChain.streamAllocation();  // We need the network to satisfy this request. Possibly for validating a conditional GET.  boolean doExtensiveHealthChecks = !request.method().equals(&quot;GET&quot;);  HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);  RealConnection connection = streamAllocation.connection();  return realChain.proceed(request, streamAllocation, httpCodec, connection);}</code></pre><p>实际上建立连接就是创建了一个 <code>HttpCodec</code> 对象，它是对 <code>HTTP</code> 协议操作的抽象，有两个实现：<code>Http1Codec</code> 和 <code>Http2Codec</code>，顾名思义，它们分别对应 HTTP/1.1 和 HTTP/2 版本的实现。</p><p>6、<code>CallServerInterceptor</code> 拦截器，发送和接收数据</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  RealInterceptorChain realChain = (RealInterceptorChain) chain;  HttpCodec httpCodec = realChain.httpStream();  StreamAllocation streamAllocation = realChain.streamAllocation();  RealConnection connection = (RealConnection) realChain.connection();  Request request = realChain.request();      long sentRequestMillis = System.currentTimeMillis();  // 整理请求头并写入  httpCodec.writeRequestHeaders(request);  Response.Builder responseBuilder = null;  // 检查是否为有 body 的请求方法  if (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != null) {      // If there&#39;s a &quot;Expect: 100-continue&quot; header on the request, wait for a &quot;HTTP/1.1 100      // Continue&quot; response before transmitting the request body. If we don&#39;t get that, return what      // we did get (such as a 4xx response) without ever transmitting the request body.      // 如果有 Expect: 100-continue 在请求头中，那么要等服务器的响应      if (&quot;100-continue&quot;.equalsIgnoreCase(request.header(&quot;Expect&quot;))) {          httpCodec.flushRequest();          responseBuilder = httpCodec.readResponseHeaders(true);      }      if (responseBuilder == null) {          // Write the request body if the &quot;Expect: 100-continue&quot; expectation was met.          // 写入请求体          Sink requestBodyOut = httpCodec.createRequestBody(request, request.body().contentLength());          BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);          request.body().writeTo(bufferedRequestBody);          bufferedRequestBody.close();      } else if (!connection.isMultiplexed()) {          // If the &quot;Expect: 100-continue&quot; expectation wasn&#39;t met, prevent the HTTP/1 connection from          // being reused. Otherwise we&#39;re still obligated to transmit the request body to leave the          // connection in a consistent state.          streamAllocation.noNewStreams();      }  }  httpCodec.finishRequest();  // 得到响应头  if (responseBuilder == null) {      responseBuilder = httpCodec.readResponseHeaders(false);  }  // 构造 response  Response response = responseBuilder          .request(request)          .handshake(streamAllocation.connection().handshake())          .sentRequestAtMillis(sentRequestMillis)          .receivedResponseAtMillis(System.currentTimeMillis())          .build();  int code = response.code();  // 如果为 web socket 且状态码是 101 ，那么 body 为空  if (forWebSocket &amp;&amp; code == 101) {      // Connection is upgrading, but we need to ensure interceptors see a non-null response body.      response = response.newBuilder()              .body(Util.EMPTY_RESPONSE)              .build();  } else {      // 读取 body      response = response.newBuilder()              .body(httpCodec.openResponseBody(response))              .build();  }  // 如果请求头中有 close 那么断开连接  if (&quot;close&quot;.equalsIgnoreCase(response.request().header(&quot;Connection&quot;))          || &quot;close&quot;.equalsIgnoreCase(response.header(&quot;Connection&quot;))) {      streamAllocation.noNewStreams();  }  // 抛出协议异常  if ((code == 204 || code == 205) &amp;&amp; response.body().contentLength() &gt; 0) {      throw new ProtocolException(              &quot;HTTP &quot; + code + &quot; had non-zero Content-Length: &quot; + response.body().contentLength());  }  return response;}</code></pre><p>在 <code>CallServerInterceptor</code> 中可见，关于请求和响应部分都是通过 <code>HttpCodec</code> 来实现的。而在 <code>HttpCodec</code> 内部又是通过 <code>sink</code> 和 <code>source</code> 来实现的。所以说到底还是 IO 流在起作用。</p><h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><p>和同步请求类似，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，只不过最后执行 enqueue() 方法，整体和网络请求的思路相似。</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);call.enqueue(new Callback() {    @Override    public void onFailure(Call call, IOException e) {    }    @Override    public void onResponse(Call call, Response response) throws IOException {    }});</code></pre><p>异步请求在 <code>Callback</code> 回调中获取响应，有 <code>onResponse()</code> 、 <code>onFailure()</code> 两个方法。</p><h3 id="发送异步网络请求"><a href="#发送异步网络请求" class="headerlink" title="发送异步网络请求"></a>发送异步网络请求</h3><p>前面三个步骤完全一致，我们从发送异步网络请求开始，异步请求是调用 <code>RealCall</code> 实例的 <code>enqueue()</code> 方法。。</p><pre><code class="lang-Java">// RealCall#enqueue()@Override public void enqueue(Callback responseCallback) {  synchronized (this) {    if (executed) throw new IllegalStateException(&quot;Already Executed&quot;);    executed = true;  }  captureCallStackTrace();  eventListener.callStart(this);  client.dispatcher().enqueue(new AsyncCall(responseCallback));}</code></pre><p>这里使用 <code>Dispatcher</code> 分发器我来处理请求。</p><pre><code class="lang-Java">// Dispatcher#enqueue()synchronized void enqueue(AsyncCall call) {  if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) {    runningAsyncCalls.add(call);    executorService().execute(call);  } else {    readyAsyncCalls.add(call);  }}</code></pre><p>实质上异步网络请求是在 <code>Dispatcher</code> 中做到任务调度。</p><font font="" size="3" color="#FF0000">下面介绍 OkHttp 中的 任务调度</font><p>我们来看 <code>Dispatcher</code> 类的源代码。</p><pre><code class="lang-Java">public final class Dispatcher {  private int maxRequests = 64;  private int maxRequestsPerHost = 5;  private @Nullable Runnable idleCallback;  /** Executes calls. Created lazily. */  // 线程池的实现  private @Nullable ExecutorService executorService;  /** Ready async calls in the order they&#39;ll be run. */  // 就绪等待网络请求的异步队列  private final Deque&lt;AsyncCall&gt; readyAsyncCalls = new ArrayDeque&lt;&gt;();  /** Running asynchronous calls. Includes canceled calls that haven&#39;t finished yet. */  // 正在执行网络请求的异步队列  private final Deque&lt;AsyncCall&gt; runningAsyncCalls = new ArrayDeque&lt;&gt;();  /** Running synchronous calls. Includes canceled calls that haven&#39;t finished yet. */  // 正在执行网络请求的同步队列  private final Deque&lt;RealCall&gt; runningSyncCalls = new ArrayDeque&lt;&gt;();  public Dispatcher(ExecutorService executorService) {    this.executorService = executorService;  }  public Dispatcher() {  }  // 创建线程池  public synchronized ExecutorService executorService() {    if (executorService == null) {      executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,          new SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(&quot;OkHttp Dispatcher&quot;, false));    }    return executorService;  }  /* 省略部分无关代码*/  synchronized void enqueue(AsyncCall call) {    if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) {      runningAsyncCalls.add(call);      executorService().execute(call);    } else {      readyAsyncCalls.add(call);    }  }  /* 省略部分无关代码*/}</code></pre><p>异步请求是放在线程池中执行的，如果最大异步请求数小于 64 并且 单个 HOST 的异步请求数小于 5 ，将请求添加到 <code>runningAsyncCalls</code> 中，否则添加到 <code>readyAsyncCalls</code> 中。</p><p>我们来看添加进线程池的 <code>AsyncCall</code> 类，实际上 <code>AsyncCall</code> 是继承自 <code>NamedRunnable</code> 的 <code>RealCall</code> 内部类。<code>NamedRunnable</code> 是实现了 <code>Runnable</code> 接口的抽象类。</p><pre><code class="lang-Java">final class AsyncCall extends NamedRunnable {  private final Callback responseCallback;  AsyncCall(Callback responseCallback) {    super(&quot;OkHttp %s&quot;, redactedUrl());    this.responseCallback = responseCallback;  }  String host() {    return originalRequest.url().host();  }  Request request() {    return originalRequest;  }  RealCall get() {    return RealCall.this;  }  @Override protected void execute() {    boolean signalledCallback = false;    try {      // 和同步请求相同，调用拦截器，得到响应      Response response = getResponseWithInterceptorChain();      if (retryAndFollowUpInterceptor.isCanceled()) {        signalledCallback = true;        responseCallback.onFailure(RealCall.this, new IOException(&quot;Canceled&quot;));      } else {        signalledCallback = true;        responseCallback.onResponse(RealCall.this, response);      }    } catch (IOException e) {      if (signalledCallback) {        // Do not signal the callback twice!        Platform.get().log(INFO, &quot;Callback failure for &quot; + toLoggableString(), e);      } else {        eventListener.callFailed(RealCall.this, e);        responseCallback.onFailure(RealCall.this, e);      }    } finally {      // 在 runningAsyncCalls 中移除      client.dispatcher().finished(this);    }  }}</code></pre><p>在 <code>AsyncCall</code> 的 <code>execute()</code> 方法中，也是调用了 <code>getResponseWithInterceptorChain()</code> 方法来得到 <code>Response</code> 对象。从这里开始，就和同步请求的流程是一样的，就没必要讲了。</p><p>不同的是在得到 <code>Response</code> 后，进行结果的回调。</p><p>在 <code>AsyncCall</code> 的最后调用了 <code>Dispatcher</code> 的 <code>finished()</code> 方法。</p><pre><code class="lang-Java">// Dispatcher#finished()/** Used by {@code AsyncCall#run} to signal completion. */void finished(AsyncCall call) {  finished(runningAsyncCalls, call, true);}/** Used by {@code Call#execute} to signal completion. */void finished(RealCall call) {  finished(runningSyncCalls, call, false);}private &lt;T&gt; void finished(Deque&lt;T&gt; calls, T call, boolean promoteCalls) {  int runningCallsCount;  Runnable idleCallback;  synchronized (this) {    if (!calls.remove(call)) throw new AssertionError(&quot;Call wasn&#39;t in-flight!&quot;);    // 将 readyAsyncCalls 中的 call 移动到 runningAsyncCalls 中，并加入到线程池中    if (promoteCalls) promoteCalls();    runningCallsCount = runningCallsCount();    idleCallback = this.idleCallback;  }  if (runningCallsCount == 0 &amp;&amp; idleCallback != null) {    idleCallback.run();  }}</code></pre><p>这里所做的工作就是把执行过的 Call 移除，然后将 <code>readyAsyncCalls</code> 中的 Call 移动到 <code>runningAsyncCalls</code> 中并加入线程池中。</p><blockquote><p>基本上 OkHttp 的请求响应的流程就介绍完了，主要是关于 OkHttp 的 <strong>拦截器链</strong> 和 <strong>任务调度</strong> 原理。</p></blockquote><p>还有很多细节没有涉及，需要花费很大的精力，才能理解分析透彻，后面有机会再介绍。</p><blockquote><p>参考资料：<br>1、拆轮子系列：拆 OkHttp - Piasy的博客 | Piasy Blog<br><a href="https://blog.piasy.com/2016/07/11/Understand-OkHttp/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.piasy.com/2016/07/11/Understand-OkHttp/</a><br>2、OkHttp源码解析 | 俞其荣的博客 | Qirong Yu’s Blog<br><a href="http://yuqirong.me/2017/07/25/OkHttp源码解析/" rel="external nofollow noopener noreferrer" target="_blank">http://yuqirong.me/2017/07/25/OkHttp源码解析/</a><br>3、OkHttp源码分析 - 掘金<br><a href="https://juejin.im/post/5af4482951882567286064e6" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/post/5af4482951882567286064e6</a><br>4、okhttp源码分析（一）——基本流程（超详细） - 简书<br><a href="https://www.jianshu.com/p/37e26f4ea57b" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/37e26f4ea57b</a><br>5、OKHttp源码解析 | Frodo’s Blog<br><a href="http://frodoking.github.io/2015/03/12/android-okhttp/" rel="external nofollow noopener noreferrer" target="_blank">http://frodoking.github.io/2015/03/12/android-okhttp/</a><br>6、OkHttp 源码解析（一）：基本流程 - Coding - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000012656606" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000012656606</a><br>7、【Android】OkHttp源码分析 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/79175824" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/79175824</a><br>8、深入浅出 OkHttp 源码 - DiyCode<br><a href="https://www.diycode.cc/topics/640" rel="external nofollow noopener noreferrer" target="_blank">https://www.diycode.cc/topics/640</a><br>9、Okhttp框架源码分析 - 简书<br><a href="https://www.jianshu.com/p/18a4861600d1" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/18a4861600d1</a><br>10、OkHttp 3.7源码分析（一）——整体架构 - CSDN博客<br><a href="https://blog.csdn.net/asiaLIYAZHOU/article/details/72598320" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/asiaLIYAZHOU/article/details/72598320</a><br>11、okhttp网络框架源码解析 - CSDN博客<br><a href="https://blog.csdn.net/fanguangjun123/article/details/78621585" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/fanguangjun123/article/details/78621585</a><br>12、OKHttp网络框架源码解析（一）okHttp框架同步异步请求流程和源码分析 - CSDN博客<br><a href="https://blog.csdn.net/qq_24675479/article/details/79483193" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_24675479/article/details/79483193</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 OkHttp 网络框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 OkHttp 3.11.0 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;网上关于 OkHttp 源码解析的文章有很多，我在这里参考他们的资料，形成自己的知识体系。&lt;/p&gt;&lt;p&gt;只是停留在应用
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
      <category term="网络框架" scheme="https://www.wshunli.com/tags/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/"/>
    
      <category term="OkHttp" scheme="https://www.wshunli.com/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘超图软件面试</title>
    <link href="https://www.wshunli.com/posts/9a69cc4.html"/>
    <id>https://www.wshunli.com/posts/9a69cc4.html</id>
    <published>2018-09-12T06:10:06.000Z</published>
    <updated>2018-09-23T01:59:46.002Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘超图软件面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目 Java 实现（01-10）</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-09-11T13:07:05.000Z</published>
    <updated>2018-09-23T01:59:45.998Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目 Java 实现，老是看书学习理论知识不太行，还得动手写代码啊。</p><p>笔试中的重要性不必多说，面试官还总是喜欢让手写代码。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><p>在设计模式中有详细的介绍，这里不再赘述，请移步：</p><p><a href="https://www.wshunli.com/posts/d1c4534.html">https://www.wshunli.com/posts/d1c4534.html</a></p><p>3、二维数组中查找目标值</p><blockquote><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><p>（1）直接暴力查找</p><pre><code class="lang-Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="lang-Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><blockquote><p>请实现一个函数，将一个字符串中的每个空格替换成 “%20” 。</p></blockquote><pre><code class="lang-Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="lang-Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><blockquote><p>输入一个链表，按链表值从尾到头的顺序返回一个 ArrayList 。</p></blockquote><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="lang-Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="lang-Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="lang-Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><blockquote><p>参考资料<br>1、剑指Offer<em>编程题</em>牛客网<br><a href="https://www.nowcoder.com/ta/coding-interviews" rel="external nofollow noopener noreferrer" target="_blank">https://www.nowcoder.com/ta/coding-interviews</a><br>2、【剑指offer】Java版代码（完整版） - CSDN博客<br><a href="https://blog.csdn.net/baiye_xing/article/details/78428561" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/baiye_xing/article/details/78428561</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《剑指Offer》编程题目 Java 实现，老是看书学习理论知识不太行，还得动手写代码啊。&lt;/p&gt;&lt;p&gt;笔试中的重要性不必多说，面试官还总是喜欢让手写代码。&lt;/p&gt;&lt;p&gt;1、赋值运算函数&lt;/p&gt;&lt;p&gt;2、单例设计模式&lt;/p&gt;&lt;p&gt;在设计模式中有详细的介绍，这里不再赘述，请移
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十四）观察者模式</title>
    <link href="https://www.wshunli.com/posts/58b1d741.html"/>
    <id>https://www.wshunli.com/posts/58b1d741.html</id>
    <published>2018-09-10T12:19:14.000Z</published>
    <updated>2018-09-23T01:59:45.994Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式（Observer Pattern）是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。</p><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/14.Observer.png" title="观察者模式" alt="观察者模式"></div><p>观察者模式所涉及的角色有：</p><p>(1) 抽象主题(Subject)角色：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。</p><p>(2) 具体主题(ConcreteSubject)角色：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。</p><p>(3) 抽象观察者(Observer)角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。</p><p>(4) 具体观察者(ConcreteObserver)角色：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。</p><p>1、抽象主题角色类</p><pre><code class="lang-Java">public abstract class Subject {    private List&lt;Observer&gt; list = new ArrayList&lt;&gt;();    /**     * 注册观察者对象     *     * @param observer 观察者对象     */    public void attach(Observer observer) {        list.add(observer);        System.out.println(&quot;Attached an observer&quot;);    }    /**     * 删除观察者对象     *     * @param observer 观察者对象     */    public void detach(Observer observer) {        list.remove(observer);        System.out.println(&quot;Detached an observer&quot;);    }    /**     * 通知所有注册的观察者对象     */    public void nodifyObservers(String newState) {        for (Observer observer : list) {            observer.update(newState);        }    }}</code></pre><p>2、具体主题角色类</p><pre><code class="lang-Java">public class ConcreteSubject extends Subject {    private String state;    public String getState() {        return state;    }    public void change(String newState) {        state = newState;        System.out.println(&quot;ConcreteSubject：&quot; + state);        this.nodifyObservers(state);//状态发生改变，通知各个观察者    }}</code></pre><p>3、抽象观察者角色类</p><pre><code class="lang-Java">public interface Observer {    public void update(String state);}</code></pre><p>4、具体观察者角色类</p><pre><code class="lang-Java">public class ConcreteObserver implements Observer {    private String observerState;//观察者的状态    @Override    public void update(String state) {        /**         * 更新观察者的状态，使其与目标的状态保持一致         */        observerState = state;        System.out.println(&quot;ConcreteObserver：&quot; + observerState);    }}</code></pre><p>5、观察者模式的使用</p><pre><code class="lang-Java">public class ObserverPatternMain {    public static void main(String[] args) {        ConcreteSubject subject = new ConcreteSubject();        ConcreteObserver observer = new ConcreteObserver();        subject.attach(observer);        subject.change(&quot;New State&quot;);        subject.detach(observer);        subject.change(&quot;New State&quot;);    }}</code></pre><p>当主题对象的状态改变时，将通知所有观察者，观察者接收到主题对象的通知后，将可以进行其他操作，进行响应。</p><p><strong>推模型和拉模型</strong>：</p><p>在观察者模式中，又分为推模型和拉模型两种方式。</p><p>（1）推模型：主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。</p><p>（2）拉模型：主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把 <strong>主题对象自身</strong> 通过 update() 方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。</p><p>前面就是典型的推模型，下面介绍拉模型。</p><p>1、抽象主题角色类</p><pre><code class="lang-Java">public abstract class Subject {    private List&lt;Observer&gt; list = new ArrayList&lt;&gt;();    /**     * 注册观察者对象     *     * @param observer 观察者对象     */    public void attach(Observer observer) {        list.add(observer);        System.out.println(&quot;Attached an observer&quot;);    }    /**     * 删除观察者对象     *     * @param observer 观察者对象     */    public void detach(Observer observer) {        list.remove(observer);        System.out.println(&quot;Detached an observer&quot;);    }    /**     * 通知所有注册的观察者对象     */    public void nodifyObservers() {        for (Observer observer : list) {            observer.update(this);        }    }}</code></pre><p>3、抽象观察者角色类</p><pre><code class="lang-Java">public interface Observer {    public void update(Subject subject);}</code></pre><p>4、具体观察者角色类</p><pre><code class="lang-Java">public class ConcreteObserver implements Observer {    @Override    public void update(Subject subject) {        String state = ((ConcreteSubject) subject).getState();        System.out.println(&quot;ConcreteObserver：&quot; + state);    }}</code></pre><p>5、观察者模式的使用</p><pre><code class="lang-Java">public class ObserverPatternMain {    public static void main(String[] args) {        ConcreteSubject subject = new ConcreteSubject();        ConcreteObserver observer = new ConcreteObserver();        subject.attach(observer);        subject.change(&quot;New State&quot;);        subject.detach(observer);        subject.change(&quot;New State&quot;);    }}</code></pre><p><strong>两种模式的比较</strong>：</p><p>（1）推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。</p><p>（2）推模型可能会使得观察者对象难以复用，因为观察者的 update() 方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，就可能提供新的 update() 方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update() 方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。</p><p><strong>观察者模式的优缺点</strong>：</p><p>优点：观察者和被观察者是抽象耦合的；建立一套触发机制。<br>缺点：1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch14" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch14</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之观察者模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;观察者模式（Observer Pattern）是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。&lt;/p&gt;&lt;h1 id=&quot;观
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十三）享元模式</title>
    <link href="https://www.wshunli.com/posts/180f2df5.html"/>
    <id>https://www.wshunli.com/posts/180f2df5.html</id>
    <published>2018-09-10T10:43:03.000Z</published>
    <updated>2018-09-23T01:59:45.994Z</updated>
    
    <content type="html"><![CDATA[<p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/13.Flyweight.png" title="享元模式" alt="享元模式"></div><p>享元模式所涉及到的角色如下：</p><p>(1) 抽象享元(Flyweight)角色 ：给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。</p><p>(2) 具体享元(ConcreteFlyweight)角色：实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。</p><p>(3) 享元工厂(FlyweightFactory)角色 ：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。</p><p>1、创建一个接口</p><pre><code class="lang-Java">public interface Shape {    void draw();}</code></pre><p>2、创建实现接口的实体类</p><pre><code class="lang-Java">public class Circle implements Shape {    private String color;    private int x;    private int y;    private int radius;    public Circle(String color) {        this.color = color;    }    public void setX(int x) {        this.x = x;    }    public void setY(int y) {        this.y = y;    }    public void setRadius(int radius) {        this.radius = radius;    }    @Override    public void draw() {        System.out.println(&quot;Circle: Draw() [Color : &quot; + color                + &quot;, x : &quot; + x + &quot;, y :&quot; + y + &quot;, radius :&quot; + radius);    }}</code></pre><p>3、创建一个工厂，生成基于给定信息的实体类的对象</p><pre><code class="lang-Java">public class ShapeFactory {    private static final HashMap&lt;String, Shape&gt; circleMap = new HashMap&lt;&gt;();    public static Shape getCircle(String color) {        Circle circle = (Circle) circleMap.get(color);        if (circle == null) {            circle = new Circle(color);            circleMap.put(color, circle);            System.out.println(&quot;Creating circle of color : &quot; + color);        }        return circle;    }}</code></pre><p>4、享元模式的使用</p><pre><code class="lang-Java">public class FlyweightPatternMain {    private static final String colors[] =            {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;White&quot;, &quot;Black&quot;};    public static void main(String[] args) {        for (int i = 0; i &lt; 20; ++i) {            Circle circle =                    (Circle) ShapeFactory.getCircle(getRandomColor());            circle.setX(getRandomX());            circle.setY(getRandomY());            circle.setRadius(100);            circle.draw();        }    }    private static String getRandomColor() {        return colors[(int) (Math.random() * colors.length)];    }    private static int getRandomX() {        return (int) (Math.random() * 100);    }    private static int getRandomY() {        return (int) (Math.random() * 100);    }}</code></pre><p><strong>享元模式的优缺点</strong>：</p><p>优点：系统有大量相似对象；需要缓冲池的场景。<br>缺点：注意划分外部状态和内部状态，否则可能会引起线程安全问题，这些类必须有一个工厂对象加以控制。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch13" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch13</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之享元模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/04/26/2468499.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/04/26/2468499.html</a><br>2、设计模式读书笔记——享元模式 - chenssy - 博客园<br><a href="https://www.cnblogs.com/chenssy/p/3330555.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/chenssy/p/3330555.html</a><br>3、享元模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/flyweight-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/flyweight-pattern.html</a><br>4、JAVA设计模式-享元模式（Flyweight） - 简书<br><a href="https://www.jianshu.com/p/f88b903a166a" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f88b903a166a</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。&lt;/p&gt;&lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;he
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十二）桥接模式</title>
    <link href="https://www.wshunli.com/posts/f75ecf9a.html"/>
    <id>https://www.wshunli.com/posts/f75ecf9a.html</id>
    <published>2018-09-10T09:09:30.000Z</published>
    <updated>2018-09-23T01:59:45.994Z</updated>
    
    <content type="html"><![CDATA[<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p><h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p>桥接模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/12.Bridge.png" title="桥接模式" alt="桥接模式"></div><p>桥接模式包含如下角色：</p><p>(1) Abstraction：抽象类，抽象部分的接口。通常在这个对象里面，要维护一个实现部分的对象引用，在抽象对象里面的方法，需要调用实现部分的对象来完成。这个对象里面的方法，通常都是跟具体的业务相关的方法。Shape<br>(2) RefinedAbstraction：扩充抽象类，扩展抽象部分的接口，通常在这些对象里面，定义跟实际业务相关的方法，这些方法的实现通常会使用Abstraction中定义的方法，也可能需要调用实现部分的对象来完成。Circle<br>(3) Implementor：实现类接口，定义实现部分的接口，这个接口不用和 Abstraction 里面的方法一致，通常是由 Implementor 接口提供基本的操作，而 Abstraction 里面定义的是基于这些基本操作的业务方法，也就是说 Abstraction 定义了基于这些基本操作的较高层次的操作。DrawAPI<br>(4) ConcreteImplementor：具体实现类，真正实现 Implementor 接口的对象。GreenCircle、RedCircle</p><p>1、创建桥接实现接口</p><pre><code class="lang-Java">public interface DrawAPI {    void drawCircle(int radius, int x, int y);}</code></pre><p>2、创建实现了 DrawAPI 接口的实体桥接实现类</p><pre><code class="lang-Java">public class GreenCircle implements DrawAPI {    @Override    public void drawCircle(int radius, int x, int y) {        System.out.println(&quot;Drawing Circle[ color: green, radius: &quot;                + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);    }}public class RedCircle implements DrawAPI {    @Override    public void drawCircle(int radius, int x, int y) {        System.out.println(&quot;Drawing Circle[ color: red, radius: &quot;                + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);    }}</code></pre><p>3、使用 DrawAPI 接口创建抽象类 Shape</p><pre><code class="lang-Java">public abstract class Shape {    protected DrawAPI drawAPI;    protected Shape(DrawAPI drawAPI) {        this.drawAPI = drawAPI;    }    public abstract void draw();}</code></pre><p>4、创建实现了 Shape 接口的实体类</p><pre><code class="lang-Java">public class Circle extends Shape {    private int x, y, radius;    public Circle(DrawAPI drawAPI, int x, int y, int radius) {        super(drawAPI);        this.x = x;        this.y = y;        this.radius = radius;    }    @Override    public void draw() {        drawAPI.drawCircle(radius, x, y);    }}</code></pre><p>5、使用 Shape 和 DrawAPI 类画出不同颜色的圆</p><pre><code class="lang-Java">public class BridgePatternMain {    public static void main(String[] args) {        Shape redCircle = new Circle(new RedCircle(), 100, 100, 10);        Shape greenCircle = new Circle(new GreenCircle(), 100, 100, 10);        redCircle.draw();        greenCircle.draw();    }}</code></pre><p><strong>桥接模式的优缺点</strong>：</p><p>优点：抽象和实现的分离；优秀的扩展能力；实现细节对客户透明。<br>缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch12" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch12</a></p><blockquote><p>参考资料<br>1、Java设计模式之十五（桥接模式） - CSDN博客<br><a href="https://blog.csdn.net/shaopeng5211/article/details/8827507" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/shaopeng5211/article/details/8827507</a><br>2、JAVA设计模式之 桥接模式【Bridge Pattern】 - CSDN博客<br><a href="https://blog.csdn.net/janice0529/article/details/44102637" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/janice0529/article/details/44102637</a><br>3、java中的桥接模式 - 简书<br><a href="https://www.jianshu.com/p/c71562c98258" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c71562c98258</a><br>4、讲故事，学（Java）设计模式—桥接模式 - ImportNew<br><a href="http://www.importnew.com/6857.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/6857.html</a><br>5、桥接模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/bridge-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/bridge-pattern.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。&lt;/p&gt;&lt;h1 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十一）组合模式</title>
    <link href="https://www.wshunli.com/posts/fb6e1df3.html"/>
    <id>https://www.wshunli.com/posts/fb6e1df3.html</id>
    <published>2018-09-10T08:40:17.000Z</published>
    <updated>2018-09-23T01:59:45.994Z</updated>
    
    <content type="html"><![CDATA[<p>组合模式(Composite Pattern)有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/11.Composite.png" title="组合模式" alt="组合模式"></div><p>组合模式的包含角色：</p><p>(1) Component 抽象构件角色，定义参加组合对象的共有方法和属性，可以定义一些默认的行为或属性。<br>(2) Leaf 叶子构件，叶子对象，其下再也没有其他的分支，也就是遍历的最小单位。<br>(3) Composite 树枝构件，树枝对象，它的作用是组合树枝节点和叶子节点形成一个树形结构。</p><p>1、抽象构件角色</p><pre><code class="lang-Java">public abstract class Component {    public void operation() {        System.out.println(&quot;Component.operation()&quot;);    }}</code></pre><p>2、树枝构件</p><pre><code class="lang-Java">public class Composite extends Component {    private ArrayList&lt;Component&gt; componentArrayList = new ArrayList&lt;&gt;();    public void add(Component component) {        componentArrayList.add(component);    }    public void remove(Component component) {        componentArrayList.remove(component);    }    public ArrayList&lt;Component&gt; getChildren() {        return this.componentArrayList;    }}</code></pre><p>3、树叶构件</p><pre><code class="lang-Java">public class Leaf extends Component {    @Override    public void operation() {        System.out.println(&quot;Leaf.operation()&quot;);    }}</code></pre><p>4、组合模式的使用</p><pre><code class="lang-Java">public class CompositeMain {    public static void main(String[] args) {        Composite root = new Composite();        root.operation();        Composite branch = new Composite();        root.add(branch);        Leaf leaf1 = new Leaf();        Leaf leaf2 = new Leaf();        branch.add(leaf1);        branch.add(leaf2);        display(root);    }    public static void display(Composite root) {        for (Component component : root.getChildren()) {            if (component instanceof Leaf) {                component.operation();            } else {                display((Composite) component);            }        }    }}</code></pre><p><strong>组合模式的优缺点</strong>：</p><p>优点：高层模块调用简单；节点自由增加。<br>缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch11" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch11</a></p><blockquote><p>参考资料<br>1、JAVA设计模式十七—Composite(组合模式) - CSDN博客<br><a href="https://blog.csdn.net/hfmbook/article/details/7693069" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hfmbook/article/details/7693069</a><br>2、Java设计模式—组合模式 - CSDN博客<br><a href="https://blog.csdn.net/qq_25827845/article/details/52496522" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_25827845/article/details/52496522</a><br>3、组合模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/composite-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/composite-pattern.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;组合模式(Composite Pattern)有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。&lt;/p&gt;&lt;h1 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
</feed>
