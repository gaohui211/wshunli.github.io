<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  <subtitle>wshunli`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-09-07T15:00:00.311Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式（六）原型模式</title>
    <link href="https://www.wshunli.com/posts/b7ba42b9.html"/>
    <id>https://www.wshunli.com/posts/b7ba42b9.html</id>
    <published>2018-09-07T14:31:45.000Z</published>
    <updated>2018-09-07T15:00:00.311Z</updated>
    
    <content type="html"><![CDATA[<p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/6.Prototype.png" alt="原型模式"></p><p>原型模式的参与角色:</p><p>(1) 客户角色：客户类提出创建对象的请求。</p><p>(2) 抽象原型角色：这是一个抽象角色，通常由一个java接口或抽象类实现，具体原型都需要实现该接口。</p><p>(3) 具体原型角色：客户端所需要的被复制的对象。</p><p>1、创建抽象原型角色</p><pre><code class="lang-Java">public class Prototype implements Cloneable {    @Override    protected Object clone() throws CloneNotSupportedException {        return super.clone();    }}</code></pre><p>2、创建具体原型角色</p><pre><code class="lang-Java">public class ConcretePrototype1 extends Prototype {    public static int classFlag = 1;    @Override    protected ConcretePrototype1 clone() throws CloneNotSupportedException {        return (ConcretePrototype1) super.clone();    }}public class ConcretePrototype2 extends Prototype {    public static int classFlag = 2;    @Override    protected ConcretePrototype2 clone() throws CloneNotSupportedException {        return (ConcretePrototype2) super.clone();    }}</code></pre><p>3、原型模式的使用</p><pre><code class="lang-Java">public class PrototypePatternMain {    public static void main(String[] args) throws CloneNotSupportedException {        Prototype prototype1 = new ConcretePrototype1();        ConcretePrototype1 concretePrototype1 = (ConcretePrototype1) prototype1.clone();        System.out.println(concretePrototype1.classFlag);        Prototype prototype2 = new ConcretePrototype2();        ConcretePrototype2 concretePrototype2 = (ConcretePrototype2) prototype2.clone();        System.out.println(concretePrototype2.classFlag);    }}</code></pre><p>优点：1、性能提高。2、逃避构造函数的约束。</p><p>缺点：1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。2、必须实现 Cloneable 接口。</p><blockquote><p>参考资料<br>1、《JAVA与模式》之原型模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/04/11/2439387.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/04/11/2439387.html</a><br>2、23种设计模式（5）：原型模式 - CSDN博客<br><a href="https://blog.csdn.net/zhengzhb/article/details/7393528" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/zhengzhb/article/details/7393528</a><br>3、java中的原型模式 - 简书<br><a href="https://www.jianshu.com/p/4e1f2d090f20" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/4e1f2d090f20</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;&lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（五）建造者模式</title>
    <link href="https://www.wshunli.com/posts/325f89c7.html"/>
    <id>https://www.wshunli.com/posts/325f89c7.html</id>
    <published>2018-09-07T10:07:47.000Z</published>
    <updated>2018-09-07T15:00:00.311Z</updated>
    
    <content type="html"><![CDATA[<p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>建造者模式将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/5.Builder.png" alt="建造者模式"></p><p>建造者模式中的四个要素：</p><p>(1) 产品类：一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有比较多的代码量。在本类图中，产品类是一个具体的类，而非抽象类。实际编程中，产品类可以是由一个抽象类与它的不同实现组成，也可以是由多个抽象类与他们的实现组成。</p><p>(2) 抽象建造者：引入抽象建造者的目的，是为了将建造的具体过程交与它的子类来实现。这样更容易扩展。一般至少会有两个抽象方法，一个用来建造产品，一个是用来返回产品。</p><p>(3) 建造者：实现抽象类的所有未实现的方法，具体来说一般是两项任务：组建产品；返回组建好的产品。</p><p>(4) 导演类：负责调用适当的建造者来组建产品，导演类一般不与产品类发生依赖关系，与导演类直接交互的是建造者类。一般来说，导演类被用来封装程序中易变的部分。</p><p>1、构造产品实例类</p><pre><code class="lang-Java">public class Product {    private String name;    private String type;    private String size;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getType() {        return type;    }    public void setType(String type) {        this.type = type;    }    public String getSize() {        return size;    }    public void setSize(String size) {        this.size = size;    }    @Override    public String toString() {        return &quot;Product{&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, type=&#39;&quot; + type + &#39;\&#39;&#39; +                &quot;, size=&#39;&quot; + size + &#39;\&#39;&#39; +                &#39;}&#39;;    }    public void show() {        System.out.println(this.toString());    }}</code></pre><p>2、抽象建造者</p><pre><code class="lang-Java">public abstract class Builder {    public abstract void name(String name);    public abstract void type(String type);    public abstract void size(String size);    public abstract Product build();}</code></pre><p>3、建造者实例</p><pre><code class="lang-Java">public class ConcreteBuilder extends Builder {    private Product product = new Product();    @Override    public void name(String name) {        product.setName(name);    }    @Override    public void type(String type) {        product.setType(type);    }    @Override    public void size(String size) {        product.setSize(size);    }    public Product build() {        return product;    }}</code></pre><p>4、导演类</p><pre><code class="lang-Java">public class Director {    private Builder builder = new ConcreteBuilder();    public Product getAProduct() {        builder.name(&quot;Burger&quot;);        builder.type(&quot;Wrapper&quot;);        builder.size(&quot;big&quot;);        return builder.build();    }    public Product getBProduct() {        builder.name(&quot;Coke&quot;);        builder.type(&quot;Bottle&quot;);        builder.size(&quot;small&quot;);        return builder.build();    }}</code></pre><p>5、建造者模式的使用</p><pre><code class="lang-Java">public class BuilderPatternMain {    public static void main(String[] args) {        Director director = new Director();        Product aProduct = director.getAProduct();        aProduct.show();        Product bProduct = director.getBProduct();        bProduct.show();    }}</code></pre><p>优点：1、建造者独立，易扩展。2、便于控制细节风险。</p><p>缺点：1、产品必须有共同点，范围有限制。2、如内部变化复杂，会有很多的建造类。</p><p>使用场景：1、需要生成的对象具有复杂的内部结构。2、需要生成的对象内部属性本身相互依赖。</p><p>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch05" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch05</a></p><blockquote><p>参考资料<br>1、建造者模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/builder-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/builder-pattern.html</a><br>2、建造者模式（Builder Pattern）- 最易懂的设计模式解析 - CSDN博客<br><a href="https://blog.csdn.net/carson_ho/article/details/54910597" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/carson_ho/article/details/54910597</a><br>3、23种设计模式（4）：建造者模式 - CSDN博客<br><a href="https://blog.csdn.net/zhengzhb/article/details/7375966" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/zhengzhb/article/details/7375966</a><br>4、Java 设计模式 — 建造者模式 - 简书<br><a href="https://www.jianshu.com/p/7d16da4e61b8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/7d16da4e61b8</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;&lt;h1 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（四）抽象工厂模式</title>
    <link href="https://www.wshunli.com/posts/4e3be4ad.html"/>
    <id>https://www.wshunli.com/posts/4e3be4ad.html</id>
    <published>2018-09-07T07:45:07.000Z</published>
    <updated>2018-09-07T15:00:00.311Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：</p><p>1）简单工厂模式（Simple Factory）<br>2）工厂方法模式（Factory Method）<br>3）抽象工厂模式（Abstract Factory）</p><p>本文及主要介绍抽象工厂模式。</p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式 (Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为 Kit 模式，属于对象创建型模式。</p><p>抽象工厂模式中，一个工厂可以提供多个不同种类产品对象，而不是单一种类的产品对象。</p><p>为了更清晰地理解工厂方法模式，需要先引入两个概念：</p><p><strong>产品等级结构</strong>： 产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</p><p><strong>产品族</strong>： 在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</p><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用抽象工厂模式。</p><p>抽象工厂模式与工厂方法模式最大的区别在于，<strong>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</strong>，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建 。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/4.AbstractFactory.png" alt="抽象工厂模式"></p><p>抽象工厂模式包含角色和工厂方法模式相同。</p><p>假设有一个移动终端工厂，可以制造苹果系列的移动产品和华为系列的移动产品。<br>这个工厂下有两个子厂，一个负责制造苹果系列的 Pad 和华为系列的 Pad ，另一个负责制造苹果系列的手机和华为系列的手机。这便是一个典型的抽象工厂的实例。</p><p>1、创建产品产品接口</p><pre><code class="lang-Java">// 苹果系列public interface Apple {    void AppleStyle();}// 华为系列public interface Huawei {    void HuaweiStyle();}</code></pre><p>2、实现具体产品角色</p><pre><code class="lang-Java">// 苹果系列产品public class iPhone implements Apple {    @Override    public void AppleStyle() {        System.out.println(&quot;Apple&#39;s style: iPhone!&quot;);    }}public class iPad implements Apple {    @Override    public void AppleStyle() {        System.out.println(&quot;Apple&#39;s style: iPad!&quot;);    }}// 华为系列产品public class Honor implements Huawei {    @Override    public void HuaweiStyle() {        System.out.println(&quot;Huawei&#39;s style: Honor!&quot;);    }}public class HuaweiPad implements Huawei {    @Override    public void HuaweiStyle() {        System.out.println(&quot;Huawei&#39;s style: HuaweiPad!&quot;);    }}</code></pre><p>3、创建抽象工厂接口</p><pre><code class="lang-Java">public interface Factory {    Apple createAppleProduct();    Huawei createHuaweiProduct();}</code></pre><p>4、实现具体工厂类，生成实例对象，和工厂方法模式的核心区别</p><pre><code class="lang-Java">// 手机工厂public class PhoneFactory implements Factory {    @Override    public Apple createAppleProduct() {        return new iPhone();    }    @Override    public Huawei createHuaweiProduct() {        return new Honor();    }}// 平板工厂public class PadFactory implements Factory {    @Override    public Apple createAppleProduct() {        return new iPad();    }    @Override    public Huawei createHuaweiProduct() {        return new HuaweiPad();    }}</code></pre><p>5、调用不同工厂的方法生成实例对象</p><pre><code class="lang-Java">public class AbstractFactoryMain {    public static void main(String[] args) {        Factory factory = new PhoneFactory();        Apple apple = factory.createAppleProduct();        apple.AppleStyle();        Huawei huawei = factory.createHuaweiProduct();        huawei.HuaweiStyle();        factory = new PadFactory();        apple = factory.createAppleProduct();        apple.AppleStyle();        huawei = factory.createHuaweiProduct();        huawei.HuaweiStyle();    }}</code></pre><p><strong>抽象工厂模式优缺点</strong>:</p><p>优点:<br>1、抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛的应用。<br>2、增加新的具体工厂和产品族很方便，因为一个具体的工厂实现代表的是一个产品族，无须修改已有系统，符合“开闭原则”。</p><p>缺点：<br>1、在添加新的产品对象（不同于现有的产品等级结构）时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。<br>2、开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</p><p><strong>适用环境</strong>：</p><p>1、一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。<br>2、系统中有多于一个的产品族，而每次只使用其中某一产品族。<strong>与工厂方法模式的区别</strong>。<br>3、属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。<br>4、系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch04" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch04</a></p><blockquote><p>参考资料<br>1、java中的工厂模式 - 简书<br><a href="https://www.jianshu.com/p/bf8341c75304" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/bf8341c75304</a><br>2、《JAVA与模式》之抽象工厂模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/03/28/2418836.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/03/28/2418836.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。&lt;/p&gt;&lt;p&gt;工厂模式可以分为三类：&lt;/p&gt;&lt;p&gt;1）简单工厂模式（Simple Factory）&lt;br&gt;2）工厂方法模式（Factory Method）&lt;br&gt;3）抽象工厂模
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（三）工厂方法模式</title>
    <link href="https://www.wshunli.com/posts/4982f93c.html"/>
    <id>https://www.wshunli.com/posts/4982f93c.html</id>
    <published>2018-09-07T07:40:09.000Z</published>
    <updated>2018-09-07T15:00:00.311Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：</p><p>1）简单工厂模式（Simple Factory）<br>2）工厂方法模式（Factory Method）<br>3）抽象工厂模式（Abstract Factory）</p><p>本文及主要介绍工厂方法模式。</p><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>工厂方法模式 (Factory Method Pattern) 又称为工厂模式，也叫虚拟构造器 (Virtual Constructor) 模式或者多态工厂( Polymorphic Factory) 模式，它属于类创建型模式。</p><p>在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/3.FactoryMethod.png" alt="工厂方法模式"></p><p>工厂方法模式包含如下角色：</p><p>(1) Product：抽象产品，工厂方法模式所创建的对象的超类，也就是所有产品类的共同父类或共同拥有的接口。在实际的系统中，这个角色也常常使用抽象类实现。</p><p>(2) ConcreteProduct：具体产品，这个角色实现了抽象产品（Product）所声明的接口，工厂方法模式所创建的每一个对象都是某个具体产品的实例。</p><p>(3) Factory：抽象工厂，担任这个角色的是工厂方法模式的核心，任何在模式中创建对象的工厂类必须实现这个接口。在实际的系统中，这个角色也常常使用抽象类实现。</p><p>(4) ConcreteFactory：具体工厂，担任这个角色的是实现了抽象工厂接口的具体 Java 类。具体工厂角色含有与业务密切相关的逻辑，并且受到使用者的调用以创建具体产品对象。</p><p>1、创建抽象产品接口</p><pre><code class="lang-Java">public interface Shape {    void draw();}</code></pre><p>2、实现具体产品角色</p><pre><code class="lang-Java">public class Point implements Shape {    @Override    public void draw() {        System.out.println(&quot;Point.draw()&quot;);    }}public class Line implements Shape {    @Override    public void draw() {        System.out.println(&quot;Line.draw()&quot;);    }}public class Plane implements Shape {    @Override    public void draw() {        System.out.println(&quot;Plane.draw()&quot;);    }}</code></pre><p>以上内容和简单工厂模式相同。</p><p>3、创建抽象工厂接口</p><pre><code class="lang-Java">public interface ICreator {    Shape getShape();}</code></pre><p>4、实现具体工厂类，生成实例对象</p><pre><code class="lang-Java">public class PointCreator implements ICreator {    @Override    public Shape getShape() {        return new Point();    }}public class LineCreator implements ICreator {    @Override    public Shape getShape() {        return new Line();    }}public class PlaneCreator implements ICreator {    @Override    public Shape getShape() {        return new Plane();    }}</code></pre><p>5、调用不同工厂的方法生成实例对象</p><pre><code class="lang-Java">public class FactoryMethodMain {    public static void main(String[] args) {        ICreator creator = new PointCreator();        Shape shape = creator.getShape();        shape.draw();        creator = new LineCreator();        shape = creator.getShape();        shape.draw();        creator = new PlaneCreator();        shape = creator.getShape();        shape.draw();    }}</code></pre><p><strong>工厂方法模式的优缺点</strong>:</p><p>优点：<br>1、在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。<br>2、基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。<br>3、使用工厂方法模式的另一个优点是在系统中加入新产品时，只要添加一个具体工厂和具体产品就可以了。</p><p>缺点：<br>1、在添加新产品时，需要编写新的具体产品类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度。<br>2、由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</p><p><strong>适用场景</strong>：</p><p>1、一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。<br>2、一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。<br>3、将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch03" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch03</a></p><blockquote><p>参考资料<br>1、java中的工厂模式 - 简书<br><a href="https://www.jianshu.com/p/bf8341c75304" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/bf8341c75304</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。&lt;/p&gt;&lt;p&gt;工厂模式可以分为三类：&lt;/p&gt;&lt;p&gt;1）简单工厂模式（Simple Factory）&lt;br&gt;2）工厂方法模式（Factory Method）&lt;br&gt;3）抽象工厂模
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（二）简单工厂模式</title>
    <link href="https://www.wshunli.com/posts/6ae09785.html"/>
    <id>https://www.wshunli.com/posts/6ae09785.html</id>
    <published>2018-09-07T07:39:09.000Z</published>
    <updated>2018-09-07T15:00:00.311Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：</p><p>1）简单工厂模式（Simple Factory）<br>2）工厂方法模式（Factory Method）<br>3）抽象工厂模式（Abstract Factory）</p><p>本文及主要介绍简单工厂模式。</p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。</p><p>在简单工厂模式中，可以根据参数的不同返回不同类的实例。</p><p>简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/2.SimpleFactory.png" alt="简单工厂模式"></p><p>简单工厂模式包含如下角色：</p><p>(1) Factory：工厂角色<br>工厂角色负责实现创建所有实例的内部逻辑。</p><p>(2) Product：抽象产品角色<br>抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的 <strong>公共接口</strong> 。</p><p>(3) ConcreteProduct：具体产品角色<br>具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</p><p>1、创建抽象产品接口</p><pre><code class="lang-Java">public interface Shape {    void draw();}</code></pre><p>2、实现具体产品角色</p><pre><code class="lang-Java">public class Point implements Shape {    @Override    public void draw() {        System.out.println(&quot;Point.draw()&quot;);    }}public class Line implements Shape {    @Override    public void draw() {        System.out.println(&quot;Line.draw()&quot;);    }}public class Plane implements Shape {    @Override    public void draw() {        System.out.println(&quot;Plane.draw()&quot;);    }}</code></pre><p>3、工厂角色，生成基于给定信息的实体类的对象</p><pre><code class="lang-Java">public class ShapeFactory {    // 使用 getShape 方法获取形状类型的对象    public Shape getShape(String shapeType) {        if (shapeType == null) {            return null;        }        if (shapeType.equalsIgnoreCase(&quot;POINT&quot;)) {            return new Point();        } else if (shapeType.equalsIgnoreCase(&quot;LINE&quot;)) {            return new Line();        } else if (shapeType.equalsIgnoreCase(&quot;PLANE&quot;)) {            return new Plane();        }        return null;    }}</code></pre><p>4、使用该工厂，通过传递类型信息来获取实体类的对象</p><pre><code class="lang-Java">public class SimpleFactoryMain {    public static void main(String[] args) {        ShapeFactory shapeFactory = new ShapeFactory();        //获取 Point 的对象，并调用它的 draw 方法        Shape shape1 = shapeFactory.getShape(&quot;POINT&quot;);        //调用 Point 的 draw 方法        shape1.draw();        //获取 Line 的对象，并调用它的 draw 方法        Shape shape2 = shapeFactory.getShape(&quot;LINE&quot;);        //调用 Line 的 draw 方法        shape2.draw();        //获取 Plane 的对象，并调用它的 draw 方法        Shape shape3 = shapeFactory.getShape(&quot;PLANE&quot;);        //调用 Plane 的 draw 方法        shape3.draw();    }}</code></pre><p><strong>简单工厂模式优缺点</strong>:</p><p>优点：<br>通过使用工厂类，外界不再需要关心如何创造各种具体的产品，只要提供一个产品的名称作为参数传给工厂，就可以直接得到一个想要的产品对象，并且可以按照接口规范来调用产品对象的所有功能（方法）。构造容易，逻辑简单。</p><p>缺点：<br>1、简单工厂模式中的 if else 判断非常多，当系统中的具体产品类不断增多时候，就要不断的修改工厂类，对系统的维护和扩展不利。<br>2、一个工厂类中集合了所有的类的实例创建逻辑，什么时候它不能工作了，整个系统都会受到影响。<br>3、简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</p><p><strong>适用场景</strong>：</p><p>1、工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。<br>2、客户端只知道传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch02" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch02</a></p><blockquote><p>参考资料<br>1、工厂模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/factory-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/factory-pattern.html</a><br>2、JAVA设计模式之工厂模式(简单工厂模式+工厂方法模式) - CSDN博客<br><a href="https://blog.csdn.net/jason0539/article/details/23020989" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/jason0539/article/details/23020989</a><br>3、java中的工厂模式 - 简书<br><a href="https://www.jianshu.com/p/bf8341c75304" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/bf8341c75304</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。&lt;/p&gt;&lt;p&gt;工厂模式可以分为三类：&lt;/p&gt;&lt;p&gt;1）简单工厂模式（Simple Factory）&lt;br&gt;2）工厂方法模式（Factory Method）&lt;br&gt;3）抽象工厂模
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘数字政通面试</title>
    <link href="https://www.wshunli.com/posts/93b729e9.html"/>
    <id>https://www.wshunli.com/posts/93b729e9.html</id>
    <published>2018-09-06T13:48:00.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘数字政通面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘中海达面试</title>
    <link href="https://www.wshunli.com/posts/c783f06d.html"/>
    <id>https://www.wshunli.com/posts/c783f06d.html</id>
    <published>2018-09-06T02:43:04.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘中海达面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图解数据结构-算法部分（Java语言实现）</title>
    <link href="https://www.wshunli.com/posts/444e2c0f.html"/>
    <id>https://www.wshunli.com/posts/444e2c0f.html</id>
    <published>2018-09-04T06:48:13.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。</p><p>前面一直学习的数据结构，下面排序、查找属于算法的范畴了。</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>所谓 “排序” (Sorting) 就是指将一组数据，按特定规则调换位置，使数据具有某种顺序关系（递增或递减）。</p><p><strong>排序分类</strong>，可分为内部（内存中）和外部（外部存储器）排序两大类。</p><p>常见的内部排序法有：冒泡排序法、选择排序法、插入排序法、合并排序法、快速排序 法、堆积排序法、希尔排序法、基数排序法等。 至于比较常见的外部排序法有：直接合并排序法、K 路合并法、多相合并法等。</p><p><strong>排序算法分析</strong>：算法是否稳定、时间复杂度、空间复杂度。</p><p>稳定的排序是指数据在经过排序后，两个相同键值的记录仍然保待原来的次序。</p><h2 id="内部排序法"><a href="#内部排序法" class="headerlink" title="内部排序法"></a>内部排序法</h2><p>内部排序法的时间复杂度及键值整理。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/内部排序法.png" alt="内部排序法"></p><p>1、<strong>冒泡排序法</strong></p><p>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/冒泡排序法.gif" alt="冒泡排序法"></p><p>实现算法：</p><pre><code class="lang-Java">int i, j, tmp;int data[] = {6, 5, 9, 7, 2, 8};    //原始数据for (i = 5; i &gt; 0; i--)             //扫描次数{    for (j = 0; j &lt; i; j++)         //比较、交换次数    {        // 比较相邻两数，如第一数较大则交换        if (data[j] &gt; data[j + 1]) {            tmp = data[j];            data[j] = data[j + 1];            data[j + 1] = tmp;        }    }}</code></pre><p>但是这样如论如何都会执行 $ n(n-1)/2 $ 次，我们可以加一个判断在没有可替换的数据时终止程序。</p><pre><code class="lang-Java">public void bubble() {    int i, j, tmp, flag;    for (i = 5; i &gt;= 0; i--) {        flag = 0;           //flag用来判断是否有执行交换的动作        for (j = 0; j &lt; i; j++) {            if (data[j + 1] &lt; data[j]) {                tmp = data[j];                data[j] = data[j + 1];                data[j + 1] = tmp;                flag++;    //如果有执行过交换，则flag不为0            }        }        //当执行完一次扫描就判断是否做过交换动作，如果没有交换过数据，        //表示此时数组已完成排序，故可直接跳出循环        if (flag == 0) {            break;        }    }</code></pre><p>冒泡排序是最容易实现的排序, 最坏的情况是每次都需要交换, 共需遍历并交换将近 n²/2 次, 时间复杂度为 O(n²) . 最佳的情况是内循环遍历一次后发现排序是对的, 因此退出循环, 时间复杂度为O(n).</p><p>平均来讲, 时间复杂度为O(n²). 由于冒泡排序中只有缓存的 temp 变量需要内存空间, 因此空间复杂度为常量O(1).</p><p>Tips: 由于冒泡排序只在相邻元素大小不符合要求时才调换他们的位置, 它并不改变相同元素之间的相对顺序, 因此它是稳定的排序算法.</p><p>2、<strong>选择排序法</strong></p><p>在未排序序列中找到最小（大）元素，存放到未排序序列的起始位置。</p><p>算法描述：</p><p>(1) 从待排序序列中，找到关键字最小的元素；<br>(2) 如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；<br>(3) 从余下的 N - 1 个元素中，找出关键字最小的元素，重复 (1)、(2) 步，直到排序结束。</p><pre><code class="lang-Java">void select() {    int i, j, tmp;    for (i = 0; i &lt; 5; i++) {            //扫描 5 次        for (j = i + 1; j &lt; 6; j++) {    //由 i+1 比较起，比较 5 次            if (data[i] &gt; data[j]) {     //比较第 i 及第 j 个元素                tmp = data[i];                data[i] = data[j];                data[j] = tmp;            }        }    }}</code></pre><p>选择排序的简单和直观名副其实，这也造就了它 “出了名的慢性子” ，无论是哪种情况，哪怕原数组已排序完成，它也将花费将近 n²/2 次遍历来确认一遍。即便是这样，它的排序结果也还是不稳定的。 唯一值得高兴的是，它并不耗费额外的内存空间。</p><p>3、<strong>插入排序法</strong></p><p>将数组中的所有元素依次跟前面已经排好的元素相比较，再将数组元素插入合适的位置。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/插入排序法.gif" alt="插入排序法"></p><p>实现算法：</p><pre><code class="lang-Java">void insert() {    int i;     // i 为扫描次数    int j;     // j 来定位比较的元素    int tmp;   // tmp 用来暂存数据    for (i = 1; i &lt; size; i++) {  // 扫描循环次数为 SIZE-1        tmp = data[i];        j = i - 1;        while (j &gt;= 0 &amp;&amp; tmp &lt; data[j]) {  // 如果第二元素小于第一元素            data[j + 1] = data[j]; // 就把所有元素往后推一个位置            j--;        }        data[j + 1] = tmp;       // 最小的元素放到第一个元素    }}</code></pre><p>Tips: 由于直接插入排序每次只移动一个元素的位，并不会改变值相同的元素之间的排序，因此它是一种稳定排序。</p><p>4、<strong>希尔排序法</strong></p><p>希尔排序是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录 “基本有序” 时，再对全体记录进行依次直接插入排序。</p><p>实现算法：</p><pre><code class="lang-Java">void shell() {    int i;        // i 为扫描次数    int j;        // j 来定位比较的元素    int k = 1;    // k 打印计数    int tmp;      // tmp 用来暂存数据    int jmp;      // 设定间隔位移量    jmp = size / 2;    while (jmp != 0) {        for (i = jmp; i &lt; size; i++) {            tmp = data[i];            j = i - jmp;            while (j &gt;= 0 &amp;&amp; tmp &lt; data[j])  //插入排序法            {                data[j + jmp] = data[j];                j = j - jmp;            }            data[jmp + j] = tmp;        }        jmp = jmp / 2;    //控制循环数    }}</code></pre><p>5、<strong>合并排序法</strong></p><p>合并排序算法是将两个（或两个以上）有序表合并成一个新的有序表；<br>即把待排序序列分为若干个子序列，每个子序列是有序的，然后再把有序子序列合并为整体有序序列。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/合并排序法.gif" alt="合并排序法"></p><p>6、<strong>快速排序法</strong></p><p>快速排序法又称分割交换排序法，是目前公认最佳的排序法。</p><p>它的原理和冒泡排序法一样都是用交换的方式，不过它会先在数据中找到一个虚拟的中间值，把小于中间值的数据放在左边，而大于中间值的数据放在右边，再以同样的方式分别处理左右两边的数据，直到完成为止。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/快速排序法.gif" alt="快速排序法"></p><p>7、<strong>堆积排序法</strong></p><p>堆排序的过程就是将待排序的序列构造成一个堆，选出堆中最大的移走，再把剩余的元素调整成堆，找出最大的再移走，重复直至有序。</p><p>8、<strong>基数排序法</strong></p><p>基数排序（Radix sort）是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><h2 id="外部排序法"><a href="#外部排序法" class="headerlink" title="外部排序法"></a>外部排序法</h2><p>直接合井排序法 (Direct Merge Sort) 是外部存储设备最常用的排序方法。</p><p>它可以分为两个步骤：<br>步骤1: 将要排序的文件分为几个大小可以加载到内存空间的小文件，再使用内部排序法将各文件内的数据排序。<br>步骤2: 将第一步所建立的小文件每两个合并成一个文件。两两合井后，把所有文件合并成一个文件后就可以完成排序了。</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>所谓查找，就是从数据文件中，寻找符合某特定条件的记录。而用来查找的条件就称为 “键值” 。</p><p>一般来说，如果数据在查找前经过排序，将可大幅减少查找的时间。至于查找技巧中比 较常见的方法有顺序法、二分查找法、斐波那契法、插值法、哈希法、m 路查找树、B-tree 等。</p><p>数据结构：<a href="https://www.wshunli.com/posts/850e5c53.html">https://www.wshunli.com/posts/850e5c53.html</a><br>算法：<a href="https://www.wshunli.com/posts/444e2c0f.html">https://www.wshunli.com/posts/444e2c0f.html</a></p><blockquote><p>参考资料<br>1、八大排序算法总结与java实现 | iTimeTraveler<br><a href="https://itimetraveler.github.io/2017/07/18/八大排序算法总结与java实现/" rel="external nofollow noopener noreferrer" target="_blank">https://itimetraveler.github.io/2017/07/18/八大排序算法总结与java实现/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。&lt;/p&gt;&lt;p&gt;前面一直学习的数据结构，下面排序、查找属于算法的范畴了。&lt;/p&gt;&lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="算法" scheme="https://www.wshunli.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘数文科技面试</title>
    <link href="https://www.wshunli.com/posts/244dd89b.html"/>
    <id>https://www.wshunli.com/posts/244dd89b.html</id>
    <published>2018-08-31T12:46:52.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘数文科技面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘（GIS行业）</title>
    <link href="https://www.wshunli.com/posts/9aef7ef9.html"/>
    <id>https://www.wshunli.com/posts/9aef7ef9.html</id>
    <published>2018-08-31T09:10:41.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季（2019届应届生）校园招聘（GIS行业）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图解数据结构（Java语言实现）</title>
    <link href="https://www.wshunli.com/posts/850e5c53.html"/>
    <id>https://www.wshunli.com/posts/850e5c53.html</id>
    <published>2018-08-29T12:41:03.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。</p><p>这次选择看的书籍是 《图解数据结构-使用Java》 ，先入门，后面再深入学习。</p><p>算法的时间复杂度，用来度量算法的运行时间，记作: T(n) = O(f(n))。它表示随着 输入大小 n 的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。</p><p>线性表是 n 个元素的有限序列（n &gt;= 0），是计算机科学中一种相当基础的数据结构。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><strong>数组</strong> 其实是一排紧密相邻的可读内存，并提供一个能够 <strong>直接访问</strong> 单一数据内容的计算方法。</p><p>这样能够直接通过计算，并访问任一位置的数据，即所谓的数组的 <strong>随机读取</strong> 。</p><p>当 Java 数组声明时会在内存中分配一定的暂存空间，空间大小以数据类型和数组数量为依据。</p><p>一维数据、二维数组、三维数组、n 维数组。</p><p>数组可用于矩阵、多项式等的运算。</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><strong>链表</strong> 是由许多相同数据类型的元素按照特定顺序排列而成的线性表，其在内存中是不连续与随机存储的。</p><p>这样就不能像数组那样随机读取数据，而要 <strong>按照顺序</strong> 找到所需数据。</p><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p>单向链表是由节点组成，指针方向相同的链表。其中节点由数据字段和链接字段组成。</p><p>在 Java 中，声明节点：</p><pre><code class="lang-Java">public class Node {    int data;    Node next;    public Node(int data) {        this.data = data;        this.next = null;    }}</code></pre><p>而 Java 中没有指针的概念，我们声明两个对象分别指向第一个和最后一个节点：</p><pre><code class="lang-Java">public class LinkedList {    private Node first;    private Node last;    ...}</code></pre><p>1、<strong>单向链表的创建</strong></p><p>下面创建简单单向链表类：</p><pre><code class="lang-Java">public class LinkedList {    private Node first;    private Node last;    public boolean isEmpty() {        return first == null;    }    public void insert(int data) {        Node node = new Node(data);        if (this.isEmpty()) {            first = node;            last = node;        } else {            last.next = node;            last = node;        }    }    public void print() {        Node current = first;        while (current != null) {            System.out.println(&quot;current.data=&quot; + current.data);            current = current.next;        }    }}</code></pre><p>然后实例化链表对象即可：</p><pre><code class="lang-Java">public class Main {    public static void main(String[] args) {        LinkedList linkedList = new LinkedList();        linkedList.insert(99);        linkedList.insert(90);        linkedList.insert(95);        linkedList.print();    }}</code></pre><p>这样所有节点都知道下个节点在哪里，只要有首节点的存在，就可以对整个列表进行遍历、插入及删除节点等动作。</p><p>2、<strong>单向链表节点的删除</strong></p><p>将欲删除节点的前一个节点的指针指向欲删除节点的下一个节点即可。</p><p>如果删除 <strong>首节点</strong>，将首节点的下个节点设置为首节点；如果删除 <strong>末节点</strong>，将前一个节点指向 null 即可。</p><pre><code class="lang-Java">  public void delete(Node node) {      Node newNode;      Node temp;      if (first.data == node.data) {          first = first.next;      } else if (last.data == node.data) {          temp = first;          while (temp.next != last) {              temp = temp.next;          }          temp.next = last.next; // temp.next = null;          last = temp; // 设置末节点      } else {          newNode = first;          temp = first;          while (temp.data != node.data) {              newNode = temp;              temp = temp.next;          }          newNode.next = temp.next;      }  }</code></pre><p>这样删除有点弊端，根据 node 节点的值判断是否是同一节点，并且没有对节点是否存在做判断。</p><p>3、<strong>单向链表节点的添加</strong></p><p>添加节点和删除节点有点类似，将前一个节点指向新添加的节点，然后将新添加节点指向下一个节点即可。</p><p>如果添加为 <strong>首节点</strong> ，将欲添加节点指向首节点；如果添加为 <strong>末节点</strong> ，将原末节点指向新节点即可。</p><pre><code class="lang-Java">public void insert(Node node) {    Node newNode;    Node temp;    if (node.next == first) {        node.next = first;        first = node;    } else if (node.next == null) {        last.next = node;        node.next = null;    } else {        newNode = first;        temp = first;        while (node.next != newNode.next) {            temp = newNode;            newNode = newNode.next;        }        temp.next = node;        node.next = newNode;    }}</code></pre><p>这样在节点位置的判断上还是有弊端的。</p><p>4、<strong>单向链表的反转</strong></p><p>面试有时候会让手写这个代码。</p><p><strong>遍历法</strong>: 从链表头部开始，逐个反转节点。</p><pre><code class="lang-Java">public Node reverse(Node head) {    if (head == null) return null;      // 空链表    if (head.next == null) return head; // 一个元素的链表    Node preNode = null;    Node nowNode = head;    while (nowNode != null) {        Node nextNode = nowNode.next;   // 保存下一个结点        nowNode.next = preNode;         // 当前结点指向前一个结点        preNode = nowNode;              // 前任结点 到现任节点        nowNode = nextNode;             // 现任节点到下一结点    }    return preNode;}</code></pre><p><strong>递归法</strong>：从链表尾部开始，逐个反转节点。</p><pre><code class="lang-Java">public Node reverse(Node node) {    if (node == null || node.next == null) return node;    Node headNode = reverse(node.next);    node.next.next = node;    node.next = null;    return headNode;}</code></pre><p>以上算法都需要传入链表的头部节点，打印时需要注意头部和尾部节点引用。</p><p>5、<strong>单向链表的串联</strong></p><p>将列表的首位节点相连即可。</p><pre><code class="lang-Java">public LinkedList connect(LinkedList list1, LinkedList list2) {    LinkedList list = list1;//  while (list.last.next != null) {//     list.last = list.last.next;//  }    list.last.next = list2.first;    return list;}</code></pre><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p>我们把单向链表的尾部指向头部，整个链表就成为单向环形结构。</p><p>这里创建链表、插入节点、删除节点、链表串联都很类似。</p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>双向链表基本结构和单项连链表类似，至少一个节点存放数据，另外它有两个字段存放指针。</p><h1 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h1><p>堆栈是一种抽象的数据结构：只能从堆栈的 <strong>顶端</strong> 访问数据；数据访问符合 <strong>后进先出</strong> 的原则。</p><h2 id="堆栈的数组实现"><a href="#堆栈的数组实现" class="headerlink" title="堆栈的数组实现"></a>堆栈的数组实现</h2><pre><code class="lang-Java">class StackByArray { //以数组模拟堆栈的类声明    private int[] stack; //在类中声明数组    private int top;  //指向堆栈顶端的索引    //StackByArray类构造函数    public StackByArray(int stack_size) {        stack = new int[stack_size]; //建立数组        top = -1;    }    //类方法：push    //存放顶端数据，并更正新堆栈的内容    public boolean push(int data) {        if (top &gt;= stack.length) { //判断堆栈顶端的索引是否大于数组大小            System.out.println(&quot;堆栈已满，无法再加入&quot;);            return false;        } else {            stack[++top] = data; //将数据存入堆栈            return true;        }    }    //类方法：empty    //判断堆栈是否为空堆栈，是则返回true，不是则返回false    public boolean empty() {        if (top == -1) return true;        else return false;    }    //类方法：pop    //从堆栈取出数据    public int pop() {        if (empty()) //判断堆栈是否为空，如果是则返回-1值            return -1;        else            return stack[top--]; //先将数据取出后，再将堆栈指针往下移    }}</code></pre><h2 id="堆栈的链表实现"><a href="#堆栈的链表实现" class="headerlink" title="堆栈的链表实现"></a>堆栈的链表实现</h2><pre><code class="lang-Java">class Node //链接节点的声明{    int data;    Node next;    public Node(int data) {        this.data = data;        this.next = null;    }}class StackByLink {    public Node front; //指向堆栈底端的指针    public Node rear;  //指向堆栈顶端的指针    //类方法：isEmpty()    //判断堆栈如果为空堆栈,则front==null;    public boolean isEmpty() {        return front == null;    }    //打印堆栈内容    public void output_of_Stack() {        Node current = front;        while (current != null) {            System.out.print(&quot;[&quot; + current.data + &quot;]&quot;);            current = current.next;        }        System.out.println();    }    //在堆栈顶端加入数据    public void insert(int data) {        Node newNode = new Node(data);        if (this.isEmpty()) {            front = newNode;            rear = newNode;        } else {            rear.next = newNode;            rear = newNode;        }    }    //在堆栈顶端删除数据    public void pop() {        Node newNode;        if (this.isEmpty()) {            System.out.print(&quot;===目前为空堆栈===\n&quot;);            return;        }        newNode = front;        if (newNode == rear) {            front = null;            rear = null;            System.out.print(&quot;===目前为空堆栈===\n&quot;);        } else {            while (newNode.next != rear)                newNode = newNode.next;            newNode.next = rear.next;            rear = newNode;        }    }}</code></pre><h2 id="堆栈的应用"><a href="#堆栈的应用" class="headerlink" title="堆栈的应用"></a>堆栈的应用</h2><p>二叉树及森林的遍历；图形的深度优先遍历；递归程序的调用及返回等等。</p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列是一种抽象的数据结构：只能从队列的 <strong>两端</strong> 访问数据；数据访问符合 <strong>先进先出</strong> 的原则。</p><h2 id="队列的数组实现"><a href="#队列的数组实现" class="headerlink" title="队列的数组实现"></a>队列的数组实现</h2><pre><code class="lang-Java">public class ArrayQueue {    private int[] data;    private int size;//元素个数    private int front;//队列中第一个对象的位置    private int rear;//队列中当前对象的位置    public ArrayQueue() {        data = new int[10];        size = 0;        front = 0;        rear = 0;    }    public void add(int t) {        if (isFull()) {            resize();            front = 0;        }        rear = (front + size) % data.length;        System.out.println(rear);        data[rear] = t;        size++;    }    public int remove() {        if (isEmpty()) {            throw new RuntimeException(&quot;队列为空!&quot;);        }        int tempData = data[front];        data[front] = 0;        front = (front + 1) % (data.length);        size--;        return tempData;    }    public int size() {        return size;    }    public boolean isEmpty() {        return size == 0;    }    public boolean isFull() {        return size == data.length;    }    public void resize() {        /*注意重新扩容的时候并不需要去设置size         * 队列的大小并不能通过数组的大小直观的显示出来。         * 但是栈就可以直观的通过数组的大小显示出来*/        int[] tmp = new int[data.length * 2];        System.arraycopy(data, 0, tmp, 0, data.length);        data = tmp;        tmp = null;//引用置为空，便于gc处理      }}</code></pre><h2 id="队列的链表实现"><a href="#队列的链表实现" class="headerlink" title="队列的链表实现"></a>队列的链表实现</h2><pre><code class="lang-Java">class QueueNode                 // 队列节点类{    int data;                    // 节点数据    QueueNode next;              // 指向下一个节点    //构造函数    public QueueNode(int data) {        this.data = data;        next = null;    }}class Linked_List_Queue { //队列类    public QueueNode front; //队列的前端指针    public QueueNode rear;  //队列的尾端指针    //构造函数    public Linked_List_Queue() {        front = null;        rear = null;    }    //方法enqueue:队列数据的存入    public boolean enqueue(int value) {        QueueNode node = new QueueNode(value); //建立节点        //检查是否为空队列        if (rear == null)            front = node; //新建立的节点成为第一个节点        else            rear.next = node; //将节点加入到队列的尾端        rear = node; //将队列的尾端指针指向新加入的节点        return true;    }    //方法dequeue:队列数据的取出    public int dequeue() {        int value;        //检查队列是否为空队列        if (!(front == null)) {            if (front == rear) rear = null;            value = front.data; //将队列数据取出            front = front.next; //将队列的前端指针指向下一个            return value;        } else return -1;    }} //队列类声明结束</code></pre><p>环形队列、优先队列、双向队列</p><h1 id="树状结构"><a href="#树状结构" class="headerlink" title="树状结构"></a>树状结构</h1><p>树是一种用来表述有 <strong>分支</strong> 的数据结构，是由一个或者一个以上的节点组成的有限集合。</p><p><strong>树的专有名词</strong>：</p><p>结点度：结点子树的个数；树的度：树中最大的结点度。</p><p>叶子节点：没有子节点的节点，即度为 0 的节点。</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树最多有两个子节点，即度 &lt;= 2 的树。</p><p><strong>特殊的二叉树</strong>：</p><p>1、满二叉树，树的高度为 h 树的节点为 $2^h-1$ 我们称为满二叉树。</p><p>2、完全二叉树，树的高度为 h 树的节点小于 $2^h-1$ ，但是其节点和满二叉树从左到右，从上到下的顺序一一对应。</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/二叉树-特殊的二叉树.png" alt="特殊的二叉树"></p><p>3、歪二叉树，当一个二叉树完全没有右节点/左节点时。</p><p>4、严格二叉树，每个二叉树都有非空的左右子树。成为严格二叉树。</p><h2 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h2><p>1、<strong>数组表示法</strong></p><p>首先将二叉树想象为满二叉树，然后依次存放入数组中，空位为 null 即可。</p><blockquote><p>以数组建立二叉树，要求小于父节点的值放在左子节点，反之放在右边。</p></blockquote><pre><code class="lang-Java">public class CH06_01 {    public static void main(String args[]) throws IOException    {        int i, level;        int data[] = {6, 3, 5, 9, 7, 8, 4, 2}; /*原始数组*/        int btree[] = new int[16];        for (i = 0; i &lt; 16; i++) btree[i] = 0;        System.out.print(&quot;原始数组内容: \n&quot;);        for (i = 0; i &lt; 8; i++)            System.out.print(&quot;[&quot; + data[i] + &quot;] &quot;);        System.out.println();        for (i = 0; i &lt; 8; i++)                    /*把原始数组中的值逐一对比*/ {            for (level = 1; btree[level] != 0; )   /*比较树根及数组内的值*/ {                if (data[i] &gt; btree[level])        /*如果数组内的值大于树根，则往右子树比较*/                    level = level * 2 + 1;                else                               /*如果数组内的值小于或等于树根，则往左子树比较*/                    level = level * 2;            }                                      /*如果子树节点的值不为0，则再与数组内的值比较一次*/            btree[level] = data[i];                /*把数组值放入二叉树*/        }        System.out.print(&quot;二叉树内容：\n&quot;);        for (i = 1; i &lt; 16; i++)            System.out.print(&quot;[&quot; + btree[i] + &quot;] &quot;);        System.out.print(&quot;\n&quot;);    }}</code></pre><p>2、链表表示法</p><p>二叉链表结构主要由一个数据域和两个分别指向左、右孩子的结点组成，其结构如下：</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/二叉树-链表表示法.png" alt="链表表示法"></p><p>TreeNode 及 BinaryTree 声明如下：</p><pre><code class="lang-Java">class TreeNode {    int value;    TreeNode left_Node;    TreeNode right_Node;    // TreeNode构造函数    public TreeNode(int value) {        this.value = value;        this.left_Node = null;        this.right_Node = null;    }}//二叉树类声明class BinaryTree {    public TreeNode rootNode; //二叉树的根节点    //构造函数:利用传入一个数组的参数来建立二叉树    public BinaryTree(int[] data) {        for (int i = 0; i &lt; data.length; i++)            Add_Node_To_Tree(data[i]);    }    //将指定的值加入到二叉树中适当的节点    void Add_Node_To_Tree(int value) {        TreeNode currentNode = rootNode;        if (rootNode == null) { //建立树根            rootNode = new TreeNode(value);            return;        }        //建立二叉树        while (true) {            if (value &lt; currentNode.value) { //在左子树                if (currentNode.left_Node == null) {                    currentNode.left_Node = new TreeNode(value);                    return;                } else currentNode = currentNode.left_Node;            } else { //在右子树                if (currentNode.right_Node == null) {                    currentNode.right_Node = new TreeNode(value);                    return;                } else currentNode = currentNode.right_Node;            }        }    }}</code></pre><p>这样增删很容易，但是不容易找到父节点，除非增加字段。</p><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树的遍历：即“访问树中所有节点各一次”。按照二叉树特性，一律从左向右。</p><p>根据访问根节点的顺序，二叉树的遍历规则主要有四种，先根次序遍历，中根次序遍历，后根次序遍历以及层次遍历。</p><pre><code class="lang-Java">// 中序遍历public void InOrder(TreeNode node) {    if (node != null) {        InOrder(node.left_Node);        System.out.print(&quot;[&quot; + node.value + &quot;] &quot;);        InOrder(node.right_Node);    }}// 前序遍历public void PreOrder(TreeNode node) {    if (node != null) {        System.out.print(&quot;[&quot; + node.value + &quot;] &quot;);        PreOrder(node.left_Node);        PreOrder(node.right_Node);    }}// 后序遍历public void PostOrder(TreeNode node) {    if (node != null) {        PostOrder(node.left_Node);        PostOrder(node.right_Node);        System.out.print(&quot;[&quot; + node.value + &quot;] &quot;);    }}</code></pre><h1 id="图形结构"><a href="#图形结构" class="headerlink" title="图形结构"></a>图形结构</h1><p>图形结构是用来探讨两个顶点间是否相连的关系图，若在边上加权值，这类图成为“网络”。</p><h2 id="图形介绍"><a href="#图形介绍" class="headerlink" title="图形介绍"></a>图形介绍</h2><p>图形有两种：有向图、无向图。</p><p>图形的专业术语：</p><p>度：一个顶点所拥有边的总数。<br>入/出度：在有向图中，定点为箭头终点的边的个数为入度；出度为起点边的个数。</p><h2 id="图形的表示法"><a href="#图形的表示法" class="headerlink" title="图形的表示法"></a>图形的表示法</h2><p>1、邻接矩阵法/相邻表法</p><p>2、相邻多元列表法/索引表格法</p><h2 id="图形的遍历"><a href="#图形的遍历" class="headerlink" title="图形的遍历"></a>图形的遍历</h2><p>图形的遍历方法有两种：深度优先遍历、广度优先遍历。</p><p>1、深度优先使用递归与 <strong>堆栈</strong> 的技巧</p><p>从图形的某一顶点开始遍历，被访问过的顶点就做上已访问的记号，接着遍历此顶点的所有相邻且未访问过的顶点中的任意一个顶点，并做上已访问的记号，再以该点为新的起点继续进行先深后广的搜索。</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/图形-图的遍历.png" alt="图形-图的遍历"></p><p>（1）从起点 1 开始，将相邻的 2 3 放入堆栈</p><p>3 2</p><p>（2）将 2 取出，并将与 2 相邻且未访问的 4 5 放入堆栈</p><p>3 5 4</p><p>（3）将 4 取出，并将与 4 相邻且未访问的 8 放入堆栈</p><p>3 5 8</p><p>（4）将 8 取出，并将与 8 相邻且未访问的 5 放入堆栈</p><p>3 5 5</p><p>（5）将 5 取出，发现与 5 相邻的节点都访问过了，这里就舍去</p><p>3</p><p>（6）将 3 取出，并将与 3 相邻且未访问的 6 7 放入堆栈</p><p>7 6</p><p>（7）最后将堆栈的节点逐个判断即可。</p><p>7 7</p><p>最终遍历顺序为：1 -&gt; 2 -&gt; 4 -&gt; 8 -&gt; 5 -&gt; 3 -&gt; 6 -&gt; 7</p><pre><code class="lang-Java">public static void dfs(int current){    run[current] = 1;    System.out.print(&quot;[&quot; + current + &quot;]&quot;);    while ((Head[current].first) != null) {        if (run[Head[current].first.x] == 0) //如果顶点尚未遍历，就进行dfs的递归调用            dfs(Head[current].first.x);        Head[current].first = Head[current].first.next;    }}</code></pre><p>2、广度优先使用递归与 <strong>队列</strong> 的技巧</p><p>从图形的某顶点开始遍历，被访问过的顶点就做上已访问的记号，接着遍历此顶点的所有相邻且未访问过的顶点中的任意个顶点，并做上已访问的记号，再以该点为新的起点继续进行先广后深的搜索。</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/图形-图的遍历.png" alt="图形-图的遍历"></p><p>（1）从起点 1 开始，将相邻的 2 3 放入堆栈</p><p>2 3</p><p>（2）将 2 取出，并将与 2 相邻且未访问的 4 5 放入堆栈</p><p>3 4 5</p><p>（3）将 3 取出，并将与 3 相邻且未访问的 6 7 放入堆栈</p><p>4 5 6 7</p><p>（4）将 4 取出，并将与 4 相邻且未访问的 8 放入堆栈</p><p>5 6 7 8</p><p>（5）将 5 取出，并将与 5 相邻且未访问的 8 放入堆栈</p><p>6 7 8 8</p><p>（6）将 6 取出，并将与 6 相邻且未访问的 7 放入堆栈</p><p>7 8 8 7</p><p>（7）将 7 取出，发现与 7 相邻的节点都访问过了，这里就舍去</p><p>8 8 7</p><p>（8）最后将队列的节点逐个判断即可。</p><p>8 7</p><p>最终遍历顺序为：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8</p><pre><code class="lang-Java">public void bfs(int current) {    Node tempnode; //临时的节点指针    enqueue(current); //将第一个顶点存入队列    run[current] = 1; //将遍历过的顶点设定为1    System.out.print(&quot;[&quot; + current + &quot;]&quot;); //打印该遍历过的顶点    while (front != rear) { //判断目前是否为空队列        current = dequeue(); //将顶点从队列中取出        tempnode = Head[current].first; //先记录目前顶点的位置        while (tempnode != null) {            if (run[tempnode.x] == 0) {                enqueue(tempnode.x);                run[tempnode.x] = 1; //记录已遍历过                System.out.print(&quot;[&quot; + tempnode.x + &quot;]&quot;);            }            tempnode = tempnode.next;        }    }}</code></pre><h2 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h2><p>一个图形的生成树以最少的边来连接图形中所有的顶点，且不造成回路(Cycle)的树状结构。</p><p>深度优先生成树、广度优先生成树。</p><p>MST 生成树，即在加权图（网络）上，计算路径成本最小的的生成树。有 Peim 算法和 Kruskal 算法等。</p><blockquote><p>前面一直学习的数据结构，下面排序、查找属于算法的范畴了。</p></blockquote><p>数据结构：<a href="https://www.wshunli.com/posts/850e5c53.html">https://www.wshunli.com/posts/850e5c53.html</a><br>算法：<a href="https://www.wshunli.com/posts/444e2c0f.html">https://www.wshunli.com/posts/444e2c0f.html</a></p><blockquote><p>参考资料<br>1、《图解数据结构-使用Java》<br>2、（数据结构）十分钟搞定时间复杂度（算法的时间复杂度） - 简书<br><a href="https://www.jianshu.com/p/f4cca5ce055a" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f4cca5ce055a</a><br>3、单链表反转的两种实现（Java） - CSDN博客<br><a href="https://blog.csdn.net/acquaintanceship/article/details/73011169" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/acquaintanceship/article/details/73011169</a><br>4、data structures - Reversing a linked list in Java, recursively - Stack Overflow<br><a href="https://stackoverflow.com/questions/354875/reversing-a-linked-list-in-java-recursively" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/354875/reversing-a-linked-list-in-java-recursively</a><br>5、【算法】如何判断链表有环 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/78896293" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/78896293</a><br>6、队列的实现(JAVA) - CSDN博客<br><a href="https://blog.csdn.net/lcore/article/details/8868078" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lcore/article/details/8868078</a><br>7、树和二叉树定义、基本术语和性质 - CSDN博客<br><a href="https://blog.csdn.net/lsh_2013/article/details/43121373" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lsh_2013/article/details/43121373</a><br>8、java数据结构与算法之树基本概念及二叉树（BinaryTree）的设计与实现 - CSDN博客<br><a href="https://blog.csdn.net/javazejian/article/details/53727333" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/javazejian/article/details/53727333</a><br>9、data structures - Difference between “Complete binary tree”, “strict binary tree”,”full binary Tree”? - Stack Overflow<br><a href="https://stackoverflow.com/questions/12359660/difference-between-complete-binary-tree-strict-binary-tree-full-binary-tre" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/12359660/difference-between-complete-binary-tree-strict-binary-tree-full-binary-tre</a><br>10、数据结构 - 图的基本术语 - CSDN博客<br><a href="https://blog.csdn.net/wangzi11322/article/details/45417081" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/wangzi11322/article/details/45417081</a><br>11、《图论》——图的存储与遍历（Java） - CSDN博客<br><a href="https://blog.csdn.net/Gamer_gyt/article/details/51498546" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/Gamer_gyt/article/details/51498546</a><br>12、Java 与图 - 简书<br><a href="https://www.jianshu.com/p/a47a147ec92c" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/a47a147ec92c</a><br>13、DFS（深度优先搜索）和BFS(广度优先搜索) - 简书<br><a href="https://www.jianshu.com/p/b086986969e6" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/b086986969e6</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。&lt;/p&gt;&lt;p&gt;这次选择看的书籍是 《图解数据结构-使用Java》 ，先入门，后面再深入学习。&lt;/p&gt;&lt;p&gt;算法的时间复杂度，用来度量算法的运行时间，记作: T(n) =
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.wshunli.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘阿里巴巴面试</title>
    <link href="https://www.wshunli.com/posts/964a7017.html"/>
    <id>https://www.wshunli.com/posts/964a7017.html</id>
    <published>2018-08-29T07:51:07.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘阿里巴巴面试（客户端开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘金山软件面试</title>
    <link href="https://www.wshunli.com/posts/52954f8e.html"/>
    <id>https://www.wshunli.com/posts/52954f8e.html</id>
    <published>2018-08-29T03:01:12.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘金山软件面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins及C++自动检测流水线搭建流程方法</title>
    <link href="https://www.wshunli.com/posts/22a0081c.html"/>
    <id>https://www.wshunli.com/posts/22a0081c.html</id>
    <published>2018-08-17T02:18:16.000Z</published>
    <updated>2018-09-07T15:00:00.311Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要整理 UK 代码自动检测流水线搭建流程方法。</p><h1 id="UK-代码自动检测流水线搭建概述"><a href="#UK-代码自动检测流水线搭建概述" class="headerlink" title="UK 代码自动检测流水线搭建概述"></a>UK 代码自动检测流水线搭建概述</h1><p>依托 Atlas 实现 Pclint、Compile、CodeDEX、Cmetrics 流水线，自动 check 代码和 UK 要求的符合度。</p><h1 id="流水线-Cmetrics-代码量检测任务创建配置"><a href="#流水线-Cmetrics-代码量检测任务创建配置" class="headerlink" title="流水线 Cmetrics 代码量检测任务创建配置"></a>流水线 Cmetrics 代码量检测任务创建配置</h1><p>2.0、Cmetrics 环境</p><p>主要涉及 Python 环境搭建、Cmetrics 插件安装及其脚本部署。前面介绍已经比较详细，不再赘述。</p><p>2.1、Jenkins 中创建配置 Cmetrics 任务</p><p>创建 Cmetrics 任务前面也有介绍，但是配置任务时，我们可以将 Cmetrics 脚本路径写入环境参数，比如 cmetrics_dir ： /usr1/cmetrics 。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image001.png" alt="image"></p><p>执行以下 shell 脚本：</p><pre><code class="lang-shell">cd $cmetrics_dirpython cmetrics.py -p 8 -fp /usr1/HEAD_OSP_Version/Version/USP_ONE_TRUNK/CI_USP_CONFIG -ft xml -d all -o /usr1/HEAD_OSP_Version/Version/cmetrics_CI_USP_CONFIG.xml</code></pre><p>最后收集报告即可。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image002.png" alt="image"></p><p>2.2、代码量较大相关问题解决方法</p><p>代码量过大，因而生成报告过大，脚本进程被杀死。</p><p>1、代码量较大导致构建失败</p><p>可以在一个任务里写七条脚本，这样会顺序队列执行，但是这样 Cmetrics 插件无法解析结果，并且无法与 Atalas 对接，不过可以正确生成报告。本文推荐拆分为七个 Jenkins 任务执行，每个个任务检查一个仓库。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image003.png" alt="image"></p><p>2、代码量较大导致同步时间较长</p><p>可以配置 RsyncFiles 和 RsyncExcludeFiles 参数减少代码的同步量，以提高效率。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image004.png" alt="image"></p><h1 id="流水线-Compile-代码编译任务创建配置"><a href="#流水线-Compile-代码编译任务创建配置" class="headerlink" title="流水线 Compile 代码编译任务创建配置"></a>流水线 Compile 代码编译任务创建配置</h1><p>3.1、编译任务创建配置</p><p>编译任务主要由 HWCompile 插件处理。</p><p>工作空间：USP_ONE_TRUNK/domain/trunk/ci_onetrunk/entrance/v1r17/OSP<br>编译脚本：osp_head_packet.sh</p><p>具体详细配置可参考：<br><a href="http://100.112.230.148:9999/job/UTS_V1R7_OSP_T_TEST_compile_version/" rel="external nofollow noopener noreferrer" target="_blank">http://100.112.230.148:9999/job/UTS_V1R7_OSP_T_TEST_compile_version/</a></p><p>3.2、编译告警日志收集</p><p>1、编译前删除所有日志，执行以下 shell 脚本：</p><pre><code class="lang-shell">find $workspace_pom -name &quot;*.log&quot; -type f -print -exec rm -rf {} \;</code></pre><p>2、编译后收集日志，执行以下 shell 脚本：</p><pre><code class="lang-shell">cd $workspace_pommkdir ./VersionLogfind . -name &quot;*.log&quot; -type f -print -exec cp {} ./VersionLog \;cd VersionLogfind . -name &quot;*.log&quot; -type f -print -exec cat {} \; &gt; build.txtcp /usr1/tools/ccgs/cwarning/cwarning.sh $workspace_pom/VersionLogchmod -R 755 ./cwarning.shsh ./cwarning.sh ./build.txt ./cwarning_result.txtexit 0</code></pre><p>思路流程如下：</p><p>（1）首先在工作空间创建日志目录，然后找到所有 .log 日志拷贝至日志目录；<br>（2）将所有日志合并为一个文件；<br>（3）执行 cwarning.sh 脚本并退出。</p><p>此脚本成功执行并正确生成结果，还是会导致 Jenkins 任务失败。</p><h1 id="流水线-Pclint-代码检测任务创建配置"><a href="#流水线-Pclint-代码检测任务创建配置" class="headerlink" title="流水线 Pclint 代码检测任务创建配置"></a>流水线 Pclint 代码检测任务创建配置</h1><p>Pclint 任务可由 Atalas 模板创建，使用 Windows 机器。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image005.png" alt="image"></p><p>其中：<br>ToolPath：Pclint 工具路径；SrcRootPath：代码根目录。<br>DefaultLntFile：默认的 lnt 文件路径；DefaultEnv： lnt 文件中的默认的环境变量。</p><p>模块配置中：<br>Include：需要检查的文件路径；Exclude：需要排除的文件路径。Env：环境变量。</p><p>本任务没有运行成功，问题已定位、正在解决。</p><h1 id="流水线-CodeDEX-代码检测任务创建配置"><a href="#流水线-CodeDEX-代码检测任务创建配置" class="headerlink" title="流水线 CodeDEX 代码检测任务创建配置"></a>流水线 CodeDEX 代码检测任务创建配置</h1><p>CodeDEX 任务同样可由 Atlas 创建，配置如下，其他为空。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image006.png" alt="image"></p><p>其中：<br>Tool Home 和 Tool Version 分别表示 CodeDEX 工具包安装路径及系统版本；<br>Executable：对代码进行编译的脚本；Working Dir：可执行编译脚本的执行路径。<br>具体到 Jenkins 任务中的配置如下，其实 Atlas 创建的任务是不能直接用的。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image007.png" alt="image"></p><p>需要注意一下几点：<br>1、 CodeDEX 插件不支持参数化，需要把具体内容填死，没有内容为空。<br>2、 注意 upload the middle file 参数，点开隐藏参数删除。<br>3、 注意 layerpath 参数，需要以 / 符号开头，表示文件夹。<br>4、 参数 mailto 为必填项，填工号即可。<br>5、 根据系统环境选择合适的检查脚本。<br>6、可选配置 RsyncFiles 和 RsyncExcludeFiles 参数，同步所需仓库，排除 .git 文件夹。</p><blockquote><p>参考资料：<br>1、【P&amp;S】 Cmetrics工具试用指南 - 云核心网系统工程能力中心 - 3MS知识管理社区<br><a href="http://3ms.[wshunli].com/km/groups/2033815/blogs/details/5582855" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/groups/2033815/blogs/details/5582855</a><br>2、CGPS/cmetrics/tree/master | iSource 5.0<br><a href="http://isource.[wshunli].com/CGPS/cmetrics/tree/master" rel="external nofollow noopener noreferrer" target="_blank">http://isource.[wshunli].com/CGPS/cmetrics/tree/master</a><br>3、linux中find与rm实现查找并删除目录或文件 - CSDN博客<br><a href="https://blog.csdn.net/wbaction/article/details/72794251" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/wbaction/article/details/72794251</a><br>4、Linux下用find查找并复制指定文件到指定目录下 - CSDN博客<br><a href="https://blog.csdn.net/mydriverc2/article/details/78805287" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/mydriverc2/article/details/78805287</a><br>5、bash - find: missing argument to -exec - Stack Overflow<br><a href="https://stackoverflow.com/questions/2961673/find-missing-argument-to-exec" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/2961673/find-missing-argument-to-exec</a><br>6、一起学shell（一）：合并文件夹下所有文件 - CSDN博客<br><a href="https://blog.csdn.net/navylq/article/details/9496573" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/navylq/article/details/9496573</a><br>7、l00370463/Atlas_Config_Com/tree/CodeGate | iSource 5.0<br><a href="http://rnd-isourceb.[wshunli].com/Atlas_Config_Com/CodeGate/ctrl_compile_warning/x86_warning_ctrl.sh" rel="external nofollow noopener noreferrer" target="_blank">http://rnd-isourceb.[wshunli].com/Atlas_Config_Com/CodeGate/ctrl_compile_warning/x86_warning_ctrl.sh</a><br>8、jenkins上windows的pclint插件使用指导 - 开发工具社区 - 3ms知识管理社区<br><a href="http://3ms.[wshunli].com/hi/group/6373/wiki_4440979.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/6373/wiki_4440979.html</a><br>9、Jenkins PCLint配置（CloudUGW18.10） - 李海燕的博客<br><a href="http://3ms.[wshunli].com/km/blogs/details/5351877" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/blogs/details/5351877</a><br>10、基于Jenkins的CodeDEX检查 - 云核心网系统工程能力中心 - 3ms知识管理社区<br><a href="http://3ms.[wshunli].com/hi/group/2033815/wiki_4383101.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/2033815/wiki_4383101.html</a><br>11、CodeDEX搭建指导 - 处理器基础软件『芯随我动』 - 3ms知识管理社区<br><a href="http://3ms.[wshunli].com/hi/group/1503481/thread_5128047.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/1503481/thread_5128047.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要整理 UK 代码自动检测流水线搭建流程方法。&lt;/p&gt;&lt;h1 id=&quot;UK-代码自动检测流水线搭建概述&quot;&gt;&lt;a href=&quot;#UK-代码自动检测流水线搭建概述&quot; class=&quot;headerlink&quot; title=&quot;UK 代码自动检测流水线搭建概述&quot;&gt;&lt;/a&gt;UK 代码
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins与Atlas中间层系统对接流程方法</title>
    <link href="https://www.wshunli.com/posts/c74848c1.html"/>
    <id>https://www.wshunli.com/posts/c74848c1.html</id>
    <published>2018-08-11T01:59:05.000Z</published>
    <updated>2018-09-07T15:00:00.311Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要整理 Jenkins 与 Atlas 对接流程方法。</p><h1 id="Jenkins-与-Atlas-对接概述"><a href="#Jenkins-与-Atlas-对接概述" class="headerlink" title="Jenkins 与 Atlas 对接概述"></a>Jenkins 与 Atlas 对接概述</h1><p>Atlas 是中间层的系统，负责工程和任务的执行流程、构建、结果展示，Jenkins 是最底层的应用系统，集成了任务和工程的基本配置，工程的任务执行、结果回收、机器调用和管理，都是 Jenkins 实现的。</p><p>新建流水线有两种方式：模板（Template Pipeline）和非模板流水线（Pipeline）。</p><p>前者可以使用 Atlas 创建 Jenkins 任务（并不是所有的 Jenkins 任务都可以模板创建），尤其是涉及到代码同步时，提高配置 Jenkins 任务准确度和效率，减少重复劳动。</p><p>后者主要用于 Atals 和 Jenkins 任务关联，需要先导入 Jenkins 视图，也可以在 Jenkins 中通过复制模板任务来创建，建议将下载和编译设置在同一任务。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image001.png" alt="image"></p><h1 id="Jenkins-与-Atlas-对接流程（Template-Pipeline）"><a href="#Jenkins-与-Atlas-对接流程（Template-Pipeline）" class="headerlink" title="Jenkins 与 Atlas 对接流程（Template Pipeline）"></a>Jenkins 与 Atlas 对接流程（Template Pipeline）</h1><p>首先在右上角选择合适的版本，没有权限时，注意添加权限。在基础信息设置流水线类型及名称；在流水线参数中设置工作空间及主源码仓库即可。</p><p>然后系统会自动添加 Stage 阶段，我们在相应的 Stage 添加合适的 Task 任务即可，如下图示。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image002.png" alt="image"></p><p>详细的模板创建可参考：<a href="http://3ms.[wshunli].com/hi/group/3211543/file_12423313.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/3211543/file_12423313.html</a></p><h1 id="Jenkins-与-Atlas-对接流程（Pipeline）"><a href="#Jenkins-与-Atlas-对接流程（Pipeline）" class="headerlink" title="Jenkins 与 Atlas 对接流程（Pipeline）"></a>Jenkins 与 Atlas 对接流程（Pipeline）</h1><p>非模板和模板非常类似，首先在基础信息选择流水线构建类型、名称，代码仓库地址、分支等信息。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image003.png" alt="image"></p><p>然后会进入和模板类似的界面，在这里关联 Jenkins 任务即可。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image004.png" alt="image"></p><p>关联 Jenkins 任务的流程方法如下：<br>1、 首先导入所需 Jenkins 视图；<br>2、 然后新建 Task 选择合适的 Jenkins 任务即可。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image005.png" alt="image"></p><p>最后流水线执行报告和非模板相同。</p><h1 id="相关问题及解决方法"><a href="#相关问题及解决方法" class="headerlink" title="相关问题及解决方法"></a>相关问题及解决方法</h1><p>1、 权限问题，联系添加权限解决。<br>2、 流水线重复执行问题，删除多余流水线，重新提交 MR 解决。<br>3、 Windows 从机无法下载源码，更新 tbs-git 插件至 2.7.7 ，安装 rsync 软件。<br>4、 Jenkins 任务不执行，更新 notification 插件版本至 1.9.7 。<br>5、 工程构建失败，注意 Maven 环境及镜像设置。</p><p>首先应该准备好 Jenkins 环境及插件，尤其注意其版本，其次注意 Slaver 机器的环境安装配置，比如任务所需操作系统，工具软件环境配置，针对 Java 流水线包括，Java 环境、Maven 构建工具等等。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image006.png" alt="image"></p><blockquote><p>参考资料：<br>1、精益流水线Atlas快速上手 - 李永峰的博客<br><a href="http://3ms.[wshunli].com/km/blogs/details/5488779" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/blogs/details/5488779</a><br>2、atlas、jenkins、cloudbuild、isource、smartide关联关系介绍 - 精益流水线 - 3ms知识管理社区<br><a href="http://3ms.[wshunli].com/hi/group/3211543/thread_7146097.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/3211543/thread_7146097.html</a><br>3、用rsync在linux编译机和windows桌面之间同步代码 - 黄岩的博客<br><a href="http://3ms.[wshunli].com/km/blogs/details/2652181" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/blogs/details/2652181</a><br>4、导入jenkins任务到atlas - 精益流水线 - 3MS知识管理社区<br><a href="http://3ms.[wshunli].com/km/groups/3211543/blogs/details/5535979" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/groups/3211543/blogs/details/5535979</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要整理 Jenkins 与 Atlas 对接流程方法。&lt;/p&gt;&lt;h1 id=&quot;Jenkins-与-Atlas-对接概述&quot;&gt;&lt;a href=&quot;#Jenkins-与-Atlas-对接概述&quot; class=&quot;headerlink&quot; title=&quot;Jenkins 与 Atlas
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘中国银联面试</title>
    <link href="https://www.wshunli.com/posts/b372432c.html"/>
    <id>https://www.wshunli.com/posts/b372432c.html</id>
    <published>2018-08-08T05:22:35.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘中国银联面试（客户端开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘</title>
    <link href="https://www.wshunli.com/posts/8dfab246.html"/>
    <id>https://www.wshunli.com/posts/8dfab246.html</id>
    <published>2018-07-30T01:24:39.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季（2019届应届生）校园招聘。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（十一）</title>
    <link href="https://www.wshunli.com/posts/a7e2fd51.html"/>
    <id>https://www.wshunli.com/posts/a7e2fd51.html</id>
    <published>2018-07-27T06:41:47.000Z</published>
    <updated>2018-09-07T15:00:00.319Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】算是人生的第一份工作吧
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins安装Java代码质量分析工具</title>
    <link href="https://www.wshunli.com/posts/57f40b04.html"/>
    <id>https://www.wshunli.com/posts/57f40b04.html</id>
    <published>2018-07-25T01:15:32.000Z</published>
    <updated>2018-09-07T15:00:00.311Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Checkstyle、PMD、FindBugs 三款主流的 Java 静态分析工具，以及 SourceMonitor 代码度量工具，Simian 代码重复检查工具等。</p><h1 id="Jenkins-安装-Java-代码质量分析工具"><a href="#Jenkins-安装-Java-代码质量分析工具" class="headerlink" title="Jenkins 安装 Java 代码质量分析工具"></a>Jenkins 安装 Java 代码质量分析工具</h1><p>在 Java 世界中，Checkstyle、PMD、FindBugs 插件是三款主流的静态分析工具。</p><p>1、Checkstyle 擅长检查编码标准和约定，编码行为以及其他的一些质量指标（如代码复杂度）。</p><p>Checkstyle（<a href="http://checkstyle.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">http://checkstyle.sourceforge.net/</a> ） 是 SourceForge 下的一个项目，提供了一个帮助 JAVA 开发人员遵守某些编码规范的工具。</p><p>CheckStyle 检验的主要内容包括：Javadoc 注释、命名约定、标题、Import 语句、体积大小、空白、修饰符、块、代码问题、类设计和混合检查（包括一些有用的比如非必须的 System.out 和 printstackTrace）。</p><p>在 Jenkins 中安装 CheckStyle 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="lang-XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;        &lt;version&gt;2.16&lt;/version&gt;        &lt;configuration&gt;            &lt;configLocation&gt;checkstyle.xml&lt;/configLocation&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>checkstyle:checkstyle</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/Checkstyle+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Checkstyle+Plugin</a></p><p>2、PMD 类似于 Checkstyle ，它更加专注于编码和设计实践。</p><p>PMD（<a href="https://pmd.github.io/" rel="external nofollow noopener noreferrer" target="_blank">https://pmd.github.io/</a> ） An extensible cross-language static code analyzer.</p><p>专注于潜在的编码问题，比如未使用或者次优化的代码，代码大小和复杂性，以及良好的编码行为。</p><p>PMD 也附带了 CPD ，以支持探测重复或者近似重复代码。</p><p>在 Jenkins 中安装 PMD 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="lang-XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;        &lt;version&gt;3.5&lt;/version&gt;    &lt;/plugin&gt;            ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>pmd:pmd</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/PMD+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/PMD+Plugin</a></p><p>3、FindBugs 专注于识别潜在的危险和错误的代码。</p><p>FindBugs（<a href="http://findbugs.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">http://findbugs.sourceforge.net/</a> ） 检查应用程序的字节码来找出潜在的 bug 、性能问题或者差的编码行为。</p><p>在 Jenkins 中安装 FindBugs 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="lang-XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;        &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.5.2&lt;/version&gt;        &lt;configuration&gt;            &lt;findbugsXmlOutput&gt;true&lt;/findbugsXmlOutput&gt;            &lt;findbugsXmlWithMessages&gt;true&lt;/findbugsXmlWithMessages&gt;            &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>findbugs:findbugs</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/FindBugs+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/FindBugs+Plugin</a></p><p>4、Static Analysis Collector 插件汇总静态分析结果</p><p>插件地址：<a href="https://wiki.jenkins.io/display/JENKINS/Analysis+Collector+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Analysis+Collector+Plugin</a></p><h1 id="Jenkins-安装-SourceMonitor-代码度量工具"><a href="#Jenkins-安装-SourceMonitor-代码度量工具" class="headerlink" title="Jenkins 安装 SourceMonitor 代码度量工具"></a>Jenkins 安装 SourceMonitor 代码度量工具</h1><p>SourceMonitor（<a href="http://www.campwoodsw.com/sourcemonitor.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.campwoodsw.com/sourcemonitor.html</a> ） 允许查看软件源代码内部，以了解项目拥有的代码量，并确定模块的相对复杂度。</p><p>在 Jenkins 中也有 SourceMonitor（<a href="https://github.com/jenkinsci/sourcemonitor-plugin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jenkinsci/sourcemonitor-plugin</a> ）插件，但是好久没更新了，也存在一些问题（<a href="https://issues.jenkins-ci.org/browse/JENKINS-5741" rel="external nofollow noopener noreferrer" target="_blank">https://issues.jenkins-ci.org/browse/JENKINS-5741</a> ）。</p><p>报错如下：</p><pre><code class="lang-TXT">Parsing sourcemonitor resultshudson.AbortException: Parsing file error    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorParser.invoke(SourceMonitorParser.java:70)    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorParser.invoke(SourceMonitorParser.java:45)    at hudson.FilePath.act(FilePath.java:1047)    at hudson.FilePath.act(FilePath.java:1025)    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorPublisher.perform(SourceMonitorPublisher.java:80)    at hudson.tasks.BuildStepMonitor$3.perform(BuildStepMonitor.java:45)    at hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)    at hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:690)    at hudson.model.Build$BuildExecution.post2(Build.java:186)    at hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:635)    at hudson.model.Run.execute(Run.java:1819)    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)    at hudson.model.ResourceController.execute(ResourceController.java:97)    at hudson.model.Executor.run(Executor.java:429)Build step &#39;Publish SourceMonitor results&#39; changed build result to FAILUREBuild step &#39;Publish SourceMonitor results&#39; marked build as failureFinished: FAILURE</code></pre><p>原因是在构建的时候需要添加 <code>sourcemonitor:sourcemonitor</code> 参数。</p><p>SourceMonitor 插件地址：<a href="https://plugins.jenkins.io/sourcemonitor" rel="external nofollow noopener noreferrer" target="_blank">https://plugins.jenkins.io/sourcemonitor</a></p><p>这里可以安装公司内部的 <code>hwSourceMonitor.hpi</code> 插件</p><p>参考资料：<br>1、<a href="http://3ms.[wshunli].com/km/blogs/details/2503631" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/blogs/details/2503631</a><br>2、<a href="http://3ms.[wshunli].com/hi/group/2033815/wiki_4496373.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/2033815/wiki_4496373.html</a></p><p><del>也可以使用 HTML Publisher 插件解析 SourceMonitor 输出的 xml 结果。</del></p><p>0、准备 SourceMonitor 并安装 Jenkins Server 上。</p><p>本文安装在 <code>C:\Program Files (x86)\SourceMonitor\SourceMonitor.exe</code> 目录。</p><p>1、安装 HTML Publisher 插件。</p><p>HTML Publisher Plugin 用来把 SourceMonitor 检测的结果可视化。</p><p>2、在构建后添加 Windows 批处理命令。</p><pre><code class="lang-Shell">&quot;C:\Program Files (x86)\SourceMonitor\SourceMonitor.exe&quot; /C &quot;C:\CI_Tools\SourceMonitorCommand.xml&quot;&quot;C:\CI_Tools\msxsl.exe&quot; SourceMonitorReport.xml &quot;C:\CI_Tools\SourceMonitorSummaryGeneration.xsl&quot; -o SourceMonitorSummaryGeneration.xml&quot;C:\CI_Tools\msxsl.exe&quot; SourceMonitorSummaryGeneration.xml &quot;C:\CI_Tools\SourceMonitor.xsl&quot; -o SourceMonitorResult.html</code></pre><p>其中 <code>SourceMonitorCommand.xml</code> 来自</p><p><code>C:\Program Files (x86)\SourceMonitor\Samples\sample_commands.xml</code></p><pre><code class="lang-XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;sourcemonitor_commands&gt;    &lt;write_log&gt;true&lt;/write_log&gt;    &lt;command&gt;        &lt;project_file&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\target/sourcemonitor\project.smp&lt;/project_file&gt;        &lt;project_language&gt;Java&lt;/project_language&gt;        &lt;source_directory&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\src\main\java&lt;/source_directory&gt;        &lt;parse_utf8_files&gt;true&lt;/parse_utf8_files&gt;        &lt;file_extensions&gt;*.java&lt;/file_extensions&gt;        &lt;include_subdirectories&gt;true&lt;/include_subdirectories&gt;        &lt;export&gt;            &lt;export_file&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\target/sourcemonitor\sourcemonitor.xml&lt;/export_file&gt;            &lt;export_type&gt;2 (project details as XML)&lt;/export_type&gt;            &lt;export_option&gt;Include method metrics: option 3&lt;/export_option&gt;        &lt;/export&gt;    &lt;/command&gt;&lt;/sourcemonitor_commands&gt;</code></pre><p>需要下载 <code>msxsl</code> 工具（<a href="http://www.microsoft.com/en-us/download/details.aspx?id=21714" rel="external nofollow noopener noreferrer" target="_blank">http://www.microsoft.com/en-us/download/details.aspx?id=21714</a> ）并放置到 <code>C:\CI_Tools</code> 目录下。</p><p>3、最后添加 Publish HTML reports 即可。</p><p>不过我没有配置成功，总是提示找不到 <code>SourceMonitorReport.xml</code> 文件。</p><p>如果使用 SourceMonitor 插件遇到如下 OutOfMemoryError 错误。</p><pre><code class="lang-TXT">FATAL: Java heap spacejava.lang.OutOfMemoryError: Java heap space</code></pre><p>解决办法：<a href="https://wiki.jenkins.io/display/JENKINS/Builds+failing+with+OutOfMemoryErrors" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Builds+failing+with+OutOfMemoryErrors</a></p><h1 id="Jenkins-安装-Simian-代码重复检查工具"><a href="#Jenkins-安装-Simian-代码重复检查工具" class="headerlink" title="Jenkins 安装 Simian 代码重复检查工具"></a>Jenkins 安装 Simian 代码重复检查工具</h1><p>Simian（<a href="http://www.harukizaemon.com/simian/" rel="external nofollow noopener noreferrer" target="_blank">http://www.harukizaemon.com/simian/</a> ） 是一个检查重复代码的工具。</p><p>这里可以使用公司内部的插件</p><p><a href="http://3ms.[wshunli].com/hi/group/2964/wiki_4145693.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/2964/wiki_4145693.html</a></p><h1 id="Jenkins-安装-Cobertura-代码测试覆盖率工具"><a href="#Jenkins-安装-Cobertura-代码测试覆盖率工具" class="headerlink" title="Jenkins 安装 Cobertura 代码测试覆盖率工具"></a>Jenkins 安装 Cobertura 代码测试覆盖率工具</h1><p>Cobertura（<a href="https://sourceforge.net/projects/cobertura/" rel="external nofollow noopener noreferrer" target="_blank">https://sourceforge.net/projects/cobertura/</a> ） 一项衡量是否所有代码都被测到的工具。</p><p>在 Jenkins 中安装 Cobertura 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="lang-XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;        &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.6&lt;/version&gt;        &lt;configuration&gt;            &lt;instrumentation&gt;                &lt;ignoreTrivial&gt;false&lt;/ignoreTrivial&gt;            &lt;/instrumentation&gt;            &lt;formats&gt;                &lt;format&gt;html&lt;/format&gt;                &lt;format&gt;xml&lt;/format&gt;            &lt;/formats&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>cobertura:cobertura</code> 参数。</p><p><code>compile -D cobertura.report.format=xml clean compile cobertura:cobertura</code></p><p>这里注意添加 <code>-D cobertura.report.format=xml</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/Cobertura+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Cobertura+Plugin</a></p><blockquote><p>参考资料<br>1、jenkins+maven配置Checkstyle+FindBugs+PMD - 简书<br><a href="https://www.jianshu.com/p/03b9e38d03b2" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/03b9e38d03b2</a><br>2、CheckStyle提高代码质量 - CSDN博客<br><a href="https://blog.csdn.net/lx_yoyo/article/details/73332590" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lx_yoyo/article/details/73332590</a><br>3、Jenkins+maven+checkstyle对java代码进行静态代码分析 - CSDN博客<br><a href="https://blog.csdn.net/hwhua1986/article/details/48339545" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hwhua1986/article/details/48339545</a><br>4、Jenkins+maven+pmd对java代码进行静态代码分析 - CSDN博客<br><a href="https://blog.csdn.net/hwhua1986/article/details/48342745" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hwhua1986/article/details/48342745</a><br>5、[Jenkins]持续集成环境下fingbug插件的安装使用与配置 - Amberly - 博客园<br><a href="https://www.cnblogs.com/amberly/p/7201041.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/amberly/p/7201041.html</a><br>6、静态检查———SourceMonitor的学习和使用 - CSDN博客<br><a href="https://blog.csdn.net/yf210yf/article/details/17535713" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yf210yf/article/details/17535713</a><br>7、[料理佳餚] Jenkins 增加 SourceMonitor Plugin | 軟體主廚的程式料理廚房 - 點部落<br><a href="https://dotblogs.com.tw/supershowwei/2015/10/14/153562" rel="external nofollow noopener noreferrer" target="_blank">https://dotblogs.com.tw/supershowwei/2015/10/14/153562</a><br>8、CI Server 16 - 整合程式碼複雜度及深度報表 (Source Monitor) - iT 邦幫忙<br><a href="https://ithelp.ithome.com.tw/articles/10107051" rel="external nofollow noopener noreferrer" target="_blank">https://ithelp.ithome.com.tw/articles/10107051</a><br>8、重复代码检查工具simian的基本用法 | 知行一<br><a href="http://purecpp.org/?p=92" rel="external nofollow noopener noreferrer" target="_blank">http://purecpp.org/?p=92</a><br>9、Jenkins集成Simian插件_百度经验<br><a href="https://jingyan.baidu.com/article/c45ad29ccbfd3a051653e272.html" rel="external nofollow noopener noreferrer" target="_blank">https://jingyan.baidu.com/article/c45ad29ccbfd3a051653e272.html</a><br>10、[料理佳餚] Jenkins 增加 Simian Plugin | 軟體主廚的程式料理廚房 - 點部落<br><a href="https://dotblogs.com.tw/supershowwei/2015/10/14/153561" rel="external nofollow noopener noreferrer" target="_blank">https://dotblogs.com.tw/supershowwei/2015/10/14/153561</a><br>11、代码测试覆盖率Cobertura使用 - CSDN博客<br><a href="https://blog.csdn.net/cathy_sunshine/article/details/75258298" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cathy_sunshine/article/details/75258298</a><br>12、jenkins集成cobertura，调用显示cobertura的report - CSDN博客<br><a href="https://blog.csdn.net/yaominhua/article/details/40684647" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yaominhua/article/details/40684647</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Checkstyle、PMD、FindBugs 三款主流的 Java 静态分析工具，以及 SourceMonitor 代码度量工具，Simian 代码重复检查工具等。&lt;/p&gt;&lt;h1 id=&quot;Jenkins-安装-Java-代码质量分析工具&quot;&gt;&lt;a href=&quot;#J
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins服务搭建及环境配置</title>
    <link href="https://www.wshunli.com/posts/5d09cdc2.html"/>
    <id>https://www.wshunli.com/posts/5d09cdc2.html</id>
    <published>2018-07-24T11:16:40.000Z</published>
    <updated>2018-09-07T15:00:00.311Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 是一款优秀的开源自动化服务器，允许持续集成和持续交付。Jenkins 支持数百个插件，以支持项目的构建、部署和自动化。</p><p>Jenkins 官网：<a href="https://jenkins.io/" rel="external nofollow noopener noreferrer" target="_blank">https://jenkins.io/</a></p><p>「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」这三个概念的解释。</p><p><strong>持续集成</strong> 强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p><p><strong>持续交付</strong> 在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。</p><p><strong>持续部署</strong> 则是在持续交付的基础上，把部署到生产环境的过程自动化。</p><h2 id="Jenkins-基础环境"><a href="#Jenkins-基础环境" class="headerlink" title="Jenkins 基础环境"></a>Jenkins 基础环境</h2><p>Jenkins 使用 Java 编写，支持所有主流操作系统。</p><p>本文仅介绍在 Windows 操作系统下 Jenkins 单机本地部署。</p><p>首先应配置 Java 环境，然后部署 Tomcat 服务。</p><p>然后即可安装 Jenkins 应用。</p><p>安装步骤可参考：<a href="https://www.cnblogs.com/hdwang/p/6081994.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/hdwang/p/6081994.html</a></p><p>最后推荐安装一些工具包括：</p><p>1、Apache Maven 软件（特别是Java软件）项目管理及自动构建工具。</p><p>推荐 Maven 配置镜像。</p><pre><code class="lang-XML">&lt;mirror&gt;    &lt;!--This sends everything else to /public --&gt;    &lt;id&gt;nexus-aliyun&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Nexus aliyun&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>Maven 仓库阿里云镜像配置 - CSDN博客<br><a href="https://blog.csdn.net/cwenyifan/article/details/54864504" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cwenyifan/article/details/54864504</a></p><p>在公司内部推荐使用</p><pre><code class="lang-XML">&lt;mirror&gt;&lt;id&gt;rnd-[wshunli]&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Maven China Mirror&lt;/name&gt;      &lt;url&gt;http://rnd-mirrors.[wshunli].com/maven/&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>参考链接：MAVEN公司内部镜像配置&amp;Intellij IDEA MAVEN配置 - CE中间件与系统集成 - 3ms知识管理社区<br><a href="http://3ms.[wshunli].com/hi/group/2027489/wiki_4781465.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/2027489/wiki_4781465.html</a></p><p>2、Git SVN 源代码版本控制工具。</p><p>具体安装配置操作可参考资料。</p><h2 id="Jenkins-全局工具配置"><a href="#Jenkins-全局工具配置" class="headerlink" title="Jenkins 全局工具配置"></a>Jenkins 全局工具配置</h2><p>JDK 配置 JAVA_HOME 目录即可</p><p>比如 <code>C:\Program Files\Java\jdk1.8.0_171</code></p><p>Git 配置 git.exe 文件即可</p><p>比如 <code>C:\Program Files\Git\bin\git.exe</code></p><p>Maven 配置 MAVEN_HOME 目录即可</p><p>比如 <code>D:\apache-maven\</code></p><h2 id="Jenkins-插件管理高级配置"><a href="#Jenkins-插件管理高级配置" class="headerlink" title="Jenkins 插件管理高级配置"></a>Jenkins 插件管理高级配置</h2><p>推荐配置 <strong>升级站点</strong></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json" rel="external nofollow noopener noreferrer" target="_blank">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json</a></p><p>公司内部推荐使用</p><p><a href="http://cmc-cd-mirror.rnd.[wshunli].com/jenkins-updates/update-center.json" rel="external nofollow noopener noreferrer" target="_blank">http://cmc-cd-mirror.rnd.[wshunli].com/jenkins-updates/update-center.json</a></p><p>参考链接：公司Jenkins插件中心上线啦，只需两步，免代理配置和漫长等待，轻松实现Jenkins插件在线自动安装和升级 - 刘珍珍的博客<br><a href="http://3ms.[wshunli].com/km/blogs/details/5544279" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/blogs/details/5544279</a></p><blockquote><p>参考资料<br>1、jenkins详解 - CSDN博客<br><a href="https://blog.csdn.net/qq_26848099/article/details/78901240" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_26848099/article/details/78901240</a><br>2、如何理解持续集成、持续交付、持续部署？ - 知乎<br><a href="https://www.zhihu.com/question/23444990" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/23444990</a><br>3、使用jekins自动构建部署java maven项目（jdk1.7+tomcat7.0+jenkins2.19.3） - 追极 - 博客园<br><a href="https://www.cnblogs.com/hdwang/p/6081994.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/hdwang/p/6081994.html</a><br>4、Jenkins：插件安装失败问题 - 简书<br><a href="https://www.jianshu.com/p/2b7288e77ff8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/2b7288e77ff8</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jenkins 是一款优秀的开源自动化服务器，允许持续集成和持续交付。Jenkins 支持数百个插件，以支持项目的构建、部署和自动化。&lt;/p&gt;&lt;p&gt;Jenkins 官网：&lt;a href=&quot;https://jenkins.io/&quot; rel=&quot;external nofollow
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
</feed>
