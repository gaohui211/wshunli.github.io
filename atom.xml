<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wshunli.com/"/>
  <updated>2018-01-23T15:17:47.603Z</updated>
  <id>http://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="http://www.wshunli.com/posts/b4e3c990.html"/>
    <id>http://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统的内容
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（六）</title>
    <link href="http://www.wshunli.com/posts/9c05eee5.html"/>
    <id>http://www.wshunli.com/posts/9c05eee5.html</id>
    <published>2018-01-22T02:44:25.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. "/> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19fLgRzLKvAb8WQk8OSykbQ2fOo3iLF+U9f3PEIE0HYhnRgXt0p9TQgSWkG8PrhfVcxbLRKgkeKTWpICqBhzrwOASMt6WTplkew8EYMrk+cm9gaCO6WU8EOZbUdFaZG3quN6TWzYpy6wb65ebpKhjzmr22m9aDzboLhVSJTCw9/iQKddo2vJ+dCux5NjUQW0B8GK5hq4NpmIWtnWzcA0ZM4wmlMSGtNk5D/c5LgIjn1FQUf0Ih9xkY32tcT054Xku4NubdgE4AP86scaWXx66cXAl/UNrwwwZ3sTKwg4e3H1qxT2cXPU86gguBSjmSyEw2fyD8hrWj4Q0KUzKKqn+64ZH/Rl3RyvW+RzinI8UkcTLu3sJOqi8LxNrTQ2pScDL3vmBFR/N/+o/+OTQutzrnLC44agUAUarz+eSlNKyVukk18xByb85xJQnLeujPpRZ8hSLPDuzfStztGk0+YnIGHItmXp/zYyx1J1NbUWnT5CIweJLMZOH+qf2IWWLa3tyUrdU3xUjP7pzgW4lH38nZugaOlqBDYm64gBzKRTvPAUnaFo9sftwtChXtFJpoeYoGG2XPeY4JR6zQV8rFsJEKnBvsUXdzgT8zyugXqi9arpnsqqM2KT287EILuJw7gZ7+OCPMI9bdasnxMryIbLw6DXHOXLQ36H4T92rL5Ar1OWPcReSwD3O8YHij62onFQVbVXzVWZ4jnr+iaIgcYh2T6DuE56RPxsaqlGnBkBUjAWVXAJRgSNX30LvrC8c7yVCM7YVvFNKcQFnsprAu6SUbEmcX9ufDXVxNkctYXJuekoS4gxEdmVI3kbEtb+cSTGsGKLnhkLRrZ5OHxHxYur9viuM6FQxs6w52E/TND87B//jbCN9++/9ymnGBWffbBPKL1+yIFZcHwC11zhKRSSK5GSRtm/VkHszV8U0odEOUtFU1EyO7M35Bg1KRgyws5pX+H1TxZeaOHX3A/lwSpqCxPG7xquzG7d43o6ov2d7ePSwrGa++PQGW70FPfcZgyka2BYQSf0MNc1UX4TNxLXpBaiDi95avQY0Wqsp5vRmDsaixnFJZU+x3bXKleXFRTODIqmg3mln2ITmw4jS5/Zbk3K+nHtu7qsSzyAEyk+h2AAlylWOHuasv1dMJCKH8A9NzOyh5M1AXvDPlnw7Qs5/9cZkUZNC2YOjZHsSTpC23T1ptQR0PnsoAAXLqRUlh0XdTZFMcn6+hEl5RbN8wjclksIm60HsiWG7ro38P5vLyc/g8tN19LaSd1Q04CEEolGHfbdVUMBXKVG5C6qMOeJsAnrSpE0LjCzPkoOsfvgfEsc30COi0vcJPzELXr78a0jh2D+1BR9xkuqdvnz5lpc//mDk/f2yd0G0ew7ZFV3vhtyYpEdbaw+jinOsMFzLLyB5ExBvRQ5FOYOkcY1XEreY4vkMOLbhfM+gnXA5q8OtmW3ZhWiIeIyi2mQerZnTmb4c0z5MLixTJtzlzD4AdLaXItHmdLcGhh1yTZsgEqQR/gXrwhJ+9qkjXpl0JrY42v7wUyShHwFGZjohGXNF+vonNjr0BtIo1SlMB+Wm8u1KK37ftux260vG8+MQ4aDOVAdyI1E6MaVtqY70qoScHvOdwfKZHXQyD1N5a3+n3Rch+nlQVMWapL08efEtASDhOlCTD/KyW9Vju5TpiGYksd7RxiJv4G3w6Z8PikvNoAW2LA0dv5+r262ALM8/+wxeMXhaWullVo9MWymMtPW2dFaty7E2DE0vCcsZu3JZmibdS8HQYmbEFjOqZ5BMqEeuTA3owUU+G6/n9xCwDNl9RakvzRY7tZ4VyYb+dDnqQHyy+x3DimBrYl7zaFPf++824xzrR2WAaQT90IDQzlz8ka5iC3xYAfa06Jv0lTfqwTjWwhzOSZOUl1HulGa65GbVzbrubgFpSwEGU4rPfrk1V8OsPs4cky6IQ8GoWioW6yfM2m4agsydZ0k6szW9Yb53o346YLWohZDyvSf4iNA4pwe49GXAAq8yuBaIknJwjgJtUSi6nXLNRSLALR/FWl3DyMRpfBDyFT9dcz2L8AwD3ceXSkGDOeJYI+m4PKKUPXS3wMScHL5rLbOPT/pwv9obmeqIb+6vL+nM3Wj8clSyIUHMLzJfaYAjlxT4Uel0OKMExO1mnBOlgYJ7Vd9fSTHq2KVTfFbNzKA4fRWjuXXFMzVoVZdK+oy63Zqd7yh8kvmlNacvywyrKukICfBeJl3Bw2Mah+bHqEHtVF8yTfSGW0QKyouikznxdncfcf69kmR9gLuK2/S/jz4nQ+OpbFkVsihRvZ8JQRKNC9vc4ErjbLXvHbKgj0bStlcGeeuEUp5CoPE7vdcrjZoY84j3HByJxhKUnT5WLUqT1g8CSFLrFZQvSf7Fuqt/4zZLx1C4qDZJrPxJcL6jy4uQA3zpKXFNho8PS+oN/rI9Ry5pEXlX6xTe9Tj21dUv9ViOCxdoO4SU3eg/4O8ciAEeBrG1Wm0WwJpNMvahH0LWneevPVYUCL2q0OOMQdzP3VwD2qGcBRT9Q9/wrplfPorCH1rakhVhaqdQF4si/XmkuKXw== </div>]]></content>
    
    <summary type="html">
    
      【加密文章】生活是一条路，走走停停，停停走走
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK 开发入门</title>
    <link href="http://www.wshunli.com/posts/3eae2406.html"/>
    <id>http://www.wshunli.com/posts/3eae2406.html</id>
    <published>2018-01-19T13:00:14.000Z</published>
    <updated>2018-01-23T15:17:47.599Z</updated>
    
    <content type="html"><![CDATA[<p>Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。<a id="more"></a>在开发某些类型应用时，这有助于您重复使用以这些语言编写的代码库。</p><p>那我们为什么要使用 NDK 呢?</p><ul><li>代码的保护。由于 apk 的 Java 层代码很容易被反编译，而 C/C++ 库反汇难度较大。</li><li>可以方便地使用现存的开源库。大部分现存的开源库都是 用C/C++ 代码编写的。</li><li>提高程序的执行效率。将要求高性能的应用逻辑使用 C 开发，从而提高应用程序的执行效率。</li><li>便于移植。用 C/C++ 写得库可以方便在其他的嵌入式平台上再次使用。</li></ul><p>上述文字致谢 <a href="http://www.cnblogs.com/devinzhang/archive/2012/02/29/2373729.html" rel="external nofollow noopener noreferrer" target="_blank">Devin Zhang</a> 提供理论支持</p><p>本文默认已配置好 Android 开发环境，<br>关于 Android 开发环境配置可参考：<a href="http://www.wshunli.com/posts/f6977dbb.html">http://www.wshunli.com/posts/f6977dbb.html</a></p><h1 id="NDK-环境配置"><a href="#NDK-环境配置" class="headerlink" title="NDK 环境配置"></a>NDK 环境配置</h1><p>1、首先应该下载 NDK</p><p>官方指定的下载地址：<a href="https://developer.android.google.cn/ndk/downloads/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.google.cn/ndk/downloads/index.html</a></p><p>可能因为网络原因打不开，而且我们也不要那么新的。</p><p>本文以 Android NDK r10e 版本为例：</p><p>下载地址：<a href="https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip" rel="external nofollow noopener noreferrer" target="_blank">https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip</a></p><p>下载好之后，解压即可，我们解压到：<code>D:\Android\android-ndk-r10e</code></p><p>2、和配置 Android 环境类似，配置 NDK 环境</p><p>新建变量：<code>ANDROID_NDK</code></p><pre><code class="TXT">D:\Android\android-ndk-r10e</code></pre><p>在 <code>Path</code> 中添加</p><pre><code class="TXT">%ANDROID_NDK%</code></pre><p>3、验证 NDK 环境</p><p>在 命令控制符 中输入 <code>ndk-build -version</code> 存在输出即可。</p><h1 id="第一个-Android-NDK-项目"><a href="#第一个-Android-NDK-项目" class="headerlink" title="第一个 Android NDK 项目"></a>第一个 Android NDK 项目</h1><p>在 Android Studio 中新建 Android NDK 项目特别简单，</p><p>只需在新建项目时，勾选 <code>include C++ support</code> 即可：</p><p><img src="https://img.wshunli.com/Android/NDK/1.新建NDK项目.png" alt="1.新建NDK项目.png"></p><p>点击运行即可看到效果：</p><p><img src="https://img.wshunli.com/Android/NDK/1.Screenshot_1516414188.png-hexo.png" alt="1.Screenshot_1516414188.png"></p><h1 id="向现有项目添加-C-C-代码"><a href="#向现有项目添加-C-C-代码" class="headerlink" title="向现有项目添加 C/C++ 代码"></a>向现有项目添加 C/C++ 代码</h1><p>如果您希望向现有项目添加原生代码，请执行以下步骤：</p><p>1、<a href="#创建新的原生源文件">创建新的原生源文件</a>并将其添加到您的 Android Studio 项目中。</p><p>如果您已经拥有原生代码或想要导入预构建的原生库，则可以跳过此步骤。</p><p>2、<a href="#创建CMake构建脚本">创建 CMake 构建脚本</a>，将您的原生源代码构建到库中。如果导入和关联预构建库或平台库，您也需要此构建脚本。</p><p>如果您的现有原生库已经拥有 <code>CMakeLists.txt</code> 构建脚本或者使用 ndk-build 并包含 Android.mk 构建脚本，则可以跳过此步骤。</p><p>3、提供一个指向您的 CMake 或 ndk-build 脚本文件的路径，<a href="#将Gradle关联到您的原生库">将 Gradle 关联到您的原生库</a>。Gradle 使用构建脚本将源代码导入您的 Android Studio 项目并将原生库（SO 文件）打包到 APK 中。</p><h2 id="创建新的原生源文件"><a href="#创建新的原生源文件" class="headerlink" title="创建新的原生源文件"></a>创建新的原生源文件</h2><p>1、选择 Project 视图，在 main 目录下，新建 cpp 文件夹；</p><p>2、在 cpp 文件夹下新建 C/C++ Source File ，本文以 <code>native-lib</code> 为例。</p><p><img src="https://img.wshunli.com/Android/NDK/1.创建新的原生源文件.png" alt="1.创建新的原生源文件.png"></p><h2 id="创建CMake构建脚本"><a href="#创建CMake构建脚本" class="headerlink" title="创建CMake构建脚本"></a>创建CMake构建脚本</h2><p>CMake 构建脚本是一个纯文本文件，您必须将其命名为 CMakeLists.txt。</p><p>在 Android 视图下，在 app 模块下右键，新建 File，文件名为 <code>CMakeLists.txt</code>。</p><p>文件内容如下：</p><pre><code class="TXT"># For more information about using CMake with Android Studio, read the# documentation: https://d.android.com/studio/projects/add-native-code.html# Sets the minimum version of CMake required to build the native library.cmake_minimum_required(VERSION 3.4.1)# 指示 CMake 从原生源代码创建一个原生库add_library( # Sets the name of the library.             native-lib             # Sets the library as a shared library.             SHARED             # Provides a relative path to your source file(s).             src/main/cpp/native-lib.cpp )# 添加引用 NDK 库find_library( # Sets the name of the path variable.              log-lib              # Specifies the name of the NDK library that              # you want CMake to locate.              log )# 关联 NDK 库target_link_libraries( # Specifies the target library.                       native-lib                       # Links the target library to the log library                       # included in the NDK.                       ${log-lib} )</code></pre><h2 id="将Gradle关联到您的原生库"><a href="#将Gradle关联到您的原生库" class="headerlink" title="将Gradle关联到您的原生库"></a>将Gradle关联到您的原生库</h2><p>在 Android 视图下，右键点击您想要关联到原生库的模块（例如 app 模块），并从菜单中选择 <code>Link C++ Project with Gradle</code>。</p><p><img src="https://img.wshunli.com/Android/NDK/1.将Gradle关联到您的原生库.png" alt="1.将Gradle关联到您的原生库.png"></p><p>或者手动配置：</p><pre><code class="Gradle">android {  ...  defaultConfig {...}  buildTypes {...}  // Encapsulates your external native build configurations.  externalNativeBuild {    // Encapsulates your CMake build configurations.    cmake {      // Provides a relative path to your CMake build script.      path &quot;CMakeLists.txt&quot;    }  }}</code></pre><p>可选配置，可以包裹一些特定的示例代码：</p><pre><code class="Gradle">android {    compileSdkVersion 26    defaultConfig {        ···        externalNativeBuild {            cmake {                cppFlags &quot;-frtti -fexceptions&quot;            }        }        ndk {            // Specifies the ABI configurations of your native            // libraries Gradle should build and package with your APK.            abiFilters &#39;x86&#39;, &#39;x86_64&#39;, &#39;armeabi&#39;, &#39;armeabi-v7a&#39;, &#39;arm64-v8a&#39;        }    }</code></pre><p>最后运行即可，效果是一样的。</p><h1 id="添加-native-方法流程"><a href="#添加-native-方法流程" class="headerlink" title="添加 native 方法流程"></a>添加 native 方法流程</h1><p>在 <code>MainActivity</code> 中添加 native 方法：</p><pre><code class="Java">    public native void printLog();</code></pre><p>在 <code>native-lib.cpp</code> 中添加头文件及宏定义</p><pre><code class="C">#include &lt;android/log.h&gt;#define TAG &quot;native-lib&quot;#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, TAG, __VA_ARGS__)</code></pre><p>实现 native 方法，我们这里打印个日志：</p><pre><code class="C">extern &quot;C&quot;JNIEXPORT void JNICALLJava_com_wshunli_android_ndk_demo_MainActivity_printLog(JNIEnv *env, jobject instance) {    LOGV(&quot;log from native&quot;);}</code></pre><p>这个方法可以自动生成，在 native 方法下 <code>Alt + Enter</code> 即可。</p><p>本文源码：<a href="https://github.com/wshunli/android-ndk-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/android-ndk-demo</a></p><blockquote><p>参考资料<br>1、Android NDK | Android Developers<br><a href="https://developer.android.com/ndk/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/ndk/index.html</a><br>2、Android-NDK入门-慕课网<br><a href="https://www.imooc.com/learn/411" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/411</a><br>3、Android-NDK进阶-慕课网<br><a href="https://www.imooc.com/learn/918" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/918</a><br>4、Android NDK开发(一) 入门 - 简书<br><a href="https://www.jianshu.com/p/0261e6cceb3e" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0261e6cceb3e</a><br>5、向您的项目添加 C 和 C++ 代码 | Android Studio<br><a href="https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="NDK" scheme="http://www.wshunli.com/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Android图片加载框架Glide简单使用</title>
    <link href="http://www.wshunli.com/posts/d82d8606.html"/>
    <id>http://www.wshunli.com/posts/d82d8606.html</id>
    <published>2018-01-19T12:14:17.000Z</published>
    <updated>2018-01-23T15:17:47.599Z</updated>
    
    <content type="html"><![CDATA[<p>Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。<a id="more"></a>Glide 提供了易用的 API，高性能、可扩展的图片解码管道（decode pipeline），以及自动的资源池技术。</p><h1 id="Glide-介绍"><a href="#Glide-介绍" class="headerlink" title="Glide 介绍"></a>Glide 介绍</h1><p>Glide 支持拉取，解码和展示视频快照，图片，和GIF动画。Glide的Api是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide使用的是一个定制化的基于HttpUrlConnection的栈，但同时也提供了与Google Volley和Square OkHttp快速集成的工具库。</p><p>虽然Glide 的主要目标是让任何形式的图片列表的滚动尽可能地变得更快、更平滑，但实际上，Glide几乎能满足你对远程图片的拉取/缩放/显示的一切需求。</p><h1 id="Glide-简单使用"><a href="#Glide-简单使用" class="headerlink" title="Glide 简单使用"></a>Glide 简单使用</h1><p>0、添加 Glide 依赖</p><pre><code class="gradle">dependencies {  implementation &#39;com.github.bumptech.glide:glide:4.5.0&#39;  annotationProcessor &#39;com.github.bumptech.glide:compiler:4.5.0&#39;}</code></pre><p>1、准备图片容器</p><p>我们在布局文件中添加 ImageView 控件：</p><pre><code class="XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;    android:background=&quot;#8f8f8f&quot;    tools:context=&quot;com.wshunli.glidedemo.MainActivity&quot;&gt;    &lt;Button        android:id=&quot;@+id/bt&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;@string/app_name&quot; /&gt;    &lt;ImageView        android:id=&quot;@+id/img&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt;</code></pre><p>2、加载图片</p><p>我们以加载 <a href="https://img.wshunli.com/Android/Glide/Glide.min.png" rel="external nofollow noopener noreferrer" target="_blank">https://img.wshunli.com/Android/Glide/Glide.min.png</a> 为例。</p><pre><code class="Java">Glide.with(MainActivity.this)        .load(&quot;https://img.wshunli.com/Android/Glide/Glide.min.png&quot;)        .into(img);</code></pre><p>真的超级简单。</p><p>MainActivity 完整代码如下：</p><pre><code class="Java">package com.wshunli.glidedemo;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.Button;import android.widget.ImageView;import com.bumptech.glide.Glide;public class MainActivity extends AppCompatActivity {    private ImageView img;    private Button bt;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        img = findViewById(R.id.img);        bt = findViewById(R.id.bt);        bt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Glide.with(MainActivity.this)                        .load(&quot;https://img.wshunli.com/Android/Glide/Glide.min.png&quot;)                        .into(img);            }        });    }}</code></pre><p>注意别忘了声明权限：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code></pre><p>3、取消加载图片</p><pre><code class="Java">Glide.with(MainActivity.this).clear(img);</code></pre><p>取消加载也超级简单。</p><p>4、最终加载效果</p><p><img src="https://img.wshunli.com/Android/Glide/Screenshot_1516366180.png-hexo.png" alt="Glide加载图图片"></p><h1 id="ProGuard-混淆规则"><a href="#ProGuard-混淆规则" class="headerlink" title="ProGuard 混淆规则"></a>ProGuard 混淆规则</h1><pre><code class="gradle">-keep public class * implements com.bumptech.glide.module.GlideModule-keep public class * extends com.bumptech.glide.module.AppGlideModule-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {  **[] $VALUES;  public *;}# for DexGuard only-keepresourcexmlelements manifest/application/meta-data@value=GlideModule</code></pre><blockquote><p>参考资料<br>1、bumptech/glide: An image loading and caching library for Android focused on smooth scrolling<br><a href="https://github.com/bumptech/glide" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/bumptech/glide</a><br>2、Android图片加载框架最全解析（一），Glide的基本用法 - 郭霖的专栏 - CSDN博客<br><a href="http://blog.csdn.net/guolin_blog/article/details/53759439" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/guolin_blog/article/details/53759439</a><br>3、Glide v4 : 快速高效的Android图片加载库<br><a href="https://muyangmin.github.io/glide-docs-cn/" rel="external nofollow noopener noreferrer" target="_blank">https://muyangmin.github.io/glide-docs-cn/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="Glide" scheme="http://www.wshunli.com/tags/Glide/"/>
    
  </entry>
  
  <entry>
    <title>Android注入框架Butter Knife使用入门</title>
    <link href="http://www.wshunli.com/posts/896cb4b5.html"/>
    <id>http://www.wshunli.com/posts/896cb4b5.html</id>
    <published>2018-01-18T04:54:15.000Z</published>
    <updated>2018-01-23T15:17:47.599Z</updated>
    
    <content type="html"><![CDATA[<p>Butter Knife 是一个专注于 Android 系统的 View 注入框架<a id="more"></a>，可以减少大量的 findViewById 以及 setOnClickListener 代码，可视化一键生成。</p><h1 id="Butter-Knife-概述"><a href="#Butter-Knife-概述" class="headerlink" title="Butter Knife 概述"></a>Butter Knife 概述</h1><p>1.强大的View绑定和Click事件处理功能，简化代码，提升开发效率<br>2.方便的处理Adapter里的ViewHolder绑定问题<br>3.运行时不会影响APP效率，使用配置方便<br>4.代码清晰，可读性强</p><h1 id="Butter-Knife-上手使用"><a href="#Butter-Knife-上手使用" class="headerlink" title="Butter Knife 上手使用"></a>Butter Knife 上手使用</h1><p>0、首先为项目添加 Butter Knife 依赖：</p><pre><code class="gradle">dependencies {  compile &#39;com.jakewharton:butterknife:8.8.1&#39;  annotationProcessor &#39;com.jakewharton:butterknife-compiler:8.8.1&#39;}</code></pre><p>1、简单使用示例:</p><p>首先在 onCreate 绑定 Activity 实例。</p><pre><code class="Java">package com.wshunli.butterknifedemo;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.widget.Button;import android.widget.Toast;import butterknife.BindString;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;public class MainActivity extends AppCompatActivity {    @BindView(R.id.button)    Button button;    @BindString(R.string.app_name)    String appName;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        ButterKnife.bind(this);    }    @OnClick(R.id.button)    void clickButton() {        Toast.makeText(this, appName, Toast.LENGTH_LONG).show();    }}</code></pre><p>其中：<code>@BindView</code> 根据控件 id 绑定；<code>@BindString</code> 绑定资源中的字符串；<code>@OnClick</code> 绑定按钮的单击事件。</p><p>3、最终效果：</p><p>点击按钮，显示app名称。</p><p><img src="https://img.wshunli.com/Android/ButterKnife/Screenshot_1516251143.png-hexo.png" alt="最终效果"></p><h1 id="Butter-Knife-方法详解"><a href="#Butter-Knife-方法详解" class="headerlink" title="Butter Knife 方法详解"></a>Butter Knife 方法详解</h1><p>1、绑定 Activity 和 Fragment</p><p>在 onCreate 中绑定 Activity</p><pre><code class="Java">@Override public void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.simple_activity);    ButterKnife.bind(this);    // TODO Use fields...  }</code></pre><p>在 onCreateView 中绑定 Fragment</p><pre><code class="Java"> @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {    View view = inflater.inflate(R.layout.fancy_fragment, container, false);    ButterKnife.bind(this, view);    // TODO Use fields...    return view;  }</code></pre><p>2、绑定布局中的 View</p><pre><code class="Java">  @BindView(R.id.title) TextView title;  @BindView(R.id.subtitle) TextView subtitle;  @BindView(R.id.footer) TextView footer;</code></pre><p>3、在 Adapter ViewHolder 中绑定 View</p><pre><code class="Java">  static class ViewHolder {    @BindView(R.id.title) TextView name;    @BindView(R.id.job_title) TextView jobTitle;    public ViewHolder(View view) {      ButterKnife.bind(this, view);    }  }</code></pre><p>4、绑定资源</p><pre><code class="Java">  @BindString(R.string.title) String title;  @BindDrawable(R.drawable.graphic) Drawable graphic;  @BindColor(R.color.red) int red; // int or ColorStateList field  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field  // ...</code></pre><p>5、绑定方法</p><pre><code class="Java">@OnClick(R.id.submit)public void submit() {  // TODO submit data to server...}</code></pre><p>或者</p><pre><code class="Java">@OnClick(R.id.submit)public void submit(View view) {  // TODO submit data to server...}</code></pre><p>甚至自动类型转换：</p><pre><code class="Java">@OnClick(R.id.submit)public void sayHi(Button button) {  button.setText(&quot;Hello!&quot;);}</code></pre><p>多个 View 绑定同一个事件：</p><pre><code class="Java">@OnClick({ R.id.door1, R.id.door2, R.id.door3 })public void pickDoor(DoorView door) {  if (door.hasPrizeBehind()) {    Toast.makeText(this, &quot;You win!&quot;, LENGTH_SHORT).show();  } else {    Toast.makeText(this, &quot;Try again&quot;, LENGTH_SHORT).show();  }}</code></pre><p>本文内容基于 Butter Knife 8.8.1 ，时间原因部分方法可能过时，最新版可参考 <a href="http://jakewharton.github.io/butterknife/" rel="external nofollow noopener noreferrer" target="_blank">http://jakewharton.github.io/butterknife/</a></p><blockquote><p>参考资料<br>1、JakeWharton/butterknife: Bind Android views and callbacks to fields and methods.<br><a href="https://github.com/JakeWharton/butterknife" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/JakeWharton/butterknife</a><br>2、ButterKnife使用详解 - ITjianghuxiaoxiong的专栏 - CSDN博客<br><a href="http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Butter Knife 是一个专注于 Android 系统的 View 注入框架
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="ButterKnife" scheme="http://www.wshunli.com/tags/ButterKnife/"/>
    
  </entry>
  
  <entry>
    <title>Android事件总线EventBus使用总结</title>
    <link href="http://www.wshunli.com/posts/6a115a99.html"/>
    <id>http://www.wshunli.com/posts/6a115a99.html</id>
    <published>2018-01-17T04:36:06.000Z</published>
    <updated>2018-01-23T15:17:47.599Z</updated>
    
    <content type="html"><![CDATA[<p>EventBus是一款针对Android优化的<strong>发布/订阅</strong>事件总线<a id="more"></a>，简化了应用程序内各组件间、组件与后台线程间的通信。</p><p><img src="https://img.wshunli.com/Android/EventBus/EventBus-Publish-Subscribe.min.png" alt="EventBus 发布订阅模式"></p><p>主要是替代 handler BroadCast 在 Fragment 、Activity 、Service 线程之间传递消息。</p><h1 id="EventBus-概述"><a href="#EventBus-概述" class="headerlink" title="EventBus 概述"></a>EventBus 概述</h1><p>1、EventBus 有三个主要的元素：</p><ul><li>Event：事件，可以是任意类型的对象。</li><li>Subscriber：事件订阅者，<del>在EventBus3.0之前消息处理的方法只能限定于onEvent、onEventMainThread、onEventBackgroundThread和onEventAsync，他们分别代表四种线程模型</del>。而在EventBus3.0之后，事件处理的方法可以随便取名，但是需要添加一个注解@Subscribe，并且要指定线程模型（默认为POSTING），四种线程模型下面会讲到。</li><li>Publisher：事件发布者，可以在任意线程任意位置发送事件，直接调用EventBus的post(Object)方法。可以自己实例化EventBus对象，但一般使用EventBus.getDefault()就好了，根据post函数参数的类型，会自动调用订阅相应类型事件的函数。</li></ul><p>2、EventBus3.0有以下四种ThreadMode（线程模型）：</p><ul><li>POSTING（默认）：<strong>发布事件和接收事件在同一个线程</strong>，也就是说该事件在哪个线程发布出来的，事件处理函数就会在这个线程中运行。</li><li>MAIN: 事件的处理<strong>总是在UI线程</strong>中执行。</li><li>ASYNC：无论事件在哪个线程发布，该事件处理函数<strong>总是在新建的子线程</strong>中执行，同样，此事件处理函数中禁止进行UI更新操作。</li><li>BACKGROUND：如果事件是在UI线程中发布出来的，那么该事件处理函数就会在新的线程中运行，如果事件本来就是子线程中发布出来的，那么该事件处理函数直接在发布事件的线程中执行。</li></ul><h1 id="EventBus-快速入门"><a href="#EventBus-快速入门" class="headerlink" title="EventBus 快速入门"></a>EventBus 快速入门</h1><p>0、首先为项目添加 EventBus 依赖：</p><pre><code class="gradle">compile &#39;org.greenrobot:eventbus:3.1.1&#39;</code></pre><p>1、定义事件类:</p><pre><code class="java">public static class MessageEvent { /* Additional fields if needed */ }</code></pre><p>2、准备订阅者:</p><pre><code class="java">@Subscribe(threadMode = ThreadMode.MAIN)public void onMessageEvent(MessageEvent event) {/* Do something */};</code></pre><p>3、发送事件:</p><pre><code class="java">EventBus.getDefault().post(new MessageEvent());</code></pre><h1 id="EventBus-实际应用"><a href="#EventBus-实际应用" class="headerlink" title="EventBus 实际应用"></a>EventBus 实际应用</h1><p>这里举例子具体介绍 EventBus 的用法，实现Activity之间传值。</p><p>1、定义消息事件类</p><pre><code class="java">package com.wshunli.eventbusdemo;public class MessageEvent {    private String message;    public MessageEvent(String message) {        this.message = message;    }    public String getMessage() {        return message;    }    public void setMessage(String message) {        this.message = message;    }    @Override    public String toString() {        return &quot;MessageEvent{&quot; +                &quot;message=&#39;&quot; + message + &#39;\&#39;&#39; +                &#39;}&#39;;    }}</code></pre><p>2、注册和取消订阅事件</p><p>根据组件的声明周期，在 MainActivity.java 中注册/取消订阅事件。</p><pre><code class="java">package com.wshunli.eventbusdemo;import android.content.Intent;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import android.widget.TextView;import android.widget.Toast;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;public class MainActivity extends AppCompatActivity {    private TextView textView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        // 注册订阅事件        EventBus.getDefault().register(this);        // 跳转到 SecondActivity        findViewById(R.id.bt).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                startActivity(new Intent(MainActivity.this, SecondActivity.class));            }        });        textView = findViewById(R.id.text);    }    @Override    protected void onDestroy() {        super.onDestroy();        // 取消订阅事件        EventBus.getDefault().unregister(this);    }}</code></pre><p>3、添加消息处理函数</p><p>在 MainActivity.java 中添加事件的处理函数：</p><pre><code class="java">    @Subscribe(threadMode = ThreadMode.MAIN)    public void onMessageEvent(MessageEvent event) {        textView.setText(String.format(&quot;接收到发送的事件：%s&quot;, event.getMessage()));    }</code></pre><p>我们选择 <code>threadMode = ThreadMode.MAIN</code> 表示总是在 <strong>主线程</strong> 中执行。</p><p>4、发布事件</p><p>在 SecondActivity 中发布事件：</p><pre><code class="java">package com.wshunli.eventbusdemo;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import org.greenrobot.eventbus.EventBus;public class SecondActivity extends AppCompatActivity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_second);        findViewById(R.id.bt).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                EventBus.getDefault().post(new MessageEvent(&quot;来自SecondActivity的消息&quot;));                finish();            }        });    }}</code></pre><p>5、接收到消息</p><p>在 MainActivity 接受到来自 SecondActivity 中发送的消息：</p><p><img src="https://img.wshunli.com/Android/EventBus/Screenshot_1516247350.png-hexo.png" alt="EventBus消息"></p><h1 id="ProGuard-混淆规则"><a href="#ProGuard-混淆规则" class="headerlink" title="ProGuard 混淆规则"></a>ProGuard 混淆规则</h1><pre><code class="gradle">-keepattributes *Annotation*-keepclassmembers class ** {    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;}-keep enum org.greenrobot.eventbus.ThreadMode { *; }# Only required if you use AsyncExecutor-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {    &lt;init&gt;(java.lang.Throwable);}</code></pre><blockquote><p>参考资料<br>1、greenrobot/EventBus: Event bus for Android and Java that simplifies communication between Activities, Fragments, Threads, Services, etc. Less code, better quality.<br><a href="https://github.com/greenrobot/EventBus" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/greenrobot/EventBus</a><br>2、Android事件总线（一）EventBus3.0用法全解析 - 刘望舒的专栏 - CSDN博客<br><a href="http://blog.csdn.net/itachi85/article/details/52205464" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/itachi85/article/details/52205464</a><br>3、EventBus 3.0的用法详解（一） - neu - SegmentFault<br><a href="https://segmentfault.com/a/1190000004279679" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000004279679</a><br>4、Android事件分发库的使用-慕课网<br><a href="https://www.imooc.com/learn/871" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/871</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EventBus是一款针对Android优化的&lt;strong&gt;发布/订阅&lt;/strong&gt;事件总线
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="EventBus" scheme="http://www.wshunli.com/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>ClassNotFoundException</title>
    <link href="http://www.wshunli.com/posts/774f73e1.html"/>
    <id>http://www.wshunli.com/posts/774f73e1.html</id>
    <published>2018-01-10T12:23:30.000Z</published>
    <updated>2018-01-23T15:17:47.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ClassNotFoundException</strong> 是 java.lang.ClassNotFoundException 的简称<a id="more"></a>，是 Java 语言中的一个异常类，位于 java.lang 包中，父类是 java.lang.ReflectiveOperationException ，该异常指找不到指定的 Class。</p><p>常见的场景就是：</p><p>1 调用class的forName方法时，找不到指定的类。<br>2 ClassLoader 中的 findSystemClass() 方法时，找不到指定的类。<br>3 ClassLoader 中的 loadClass() 方法时，找不到指定的类。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ClassNotFoundException&lt;/strong&gt; 是 java.lang.ClassNotFoundException 的简称
    
    </summary>
    
      <category term="技术分享" scheme="http://www.wshunli.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="ClassNotFoundException" scheme="http://www.wshunli.com/tags/ClassNotFoundException/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Hello Spring Boot !</title>
    <link href="http://www.wshunli.com/posts/b93d59e.html"/>
    <id>http://www.wshunli.com/posts/b93d59e.html</id>
    <published>2018-01-05T03:19:35.000Z</published>
    <updated>2018-01-23T15:17:47.599Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 入门 Hello Spring Boot !</p><a id="more"></a><p>前面在师兄的带领下，基于 nodejs 写了机房管理系统后端，也根据需要实现了简单三维重建的后端服务。<br>但是总感觉怪怪的，前者基于 Eggjs 后端框架，后者基于 Express 后端框架，好像跟 Java 没啥关系啊。</p><p>这几天刻意学习下 Spring Boot 后端框架，并把三维重建服务后端重写了。下面记录下学习过程。</p><h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p><p>Spring Boot 可以使用 Maven 或 Gradle 这样的构建系统，本文是基于 Maven（现在用得比较多，其实我更熟悉Gradle）。</p><h2 id="Spring-Boot-特性"><a href="#Spring-Boot-特性" class="headerlink" title="Spring Boot 特性"></a>Spring Boot 特性</h2><p>Spring将很多魔法带入了 Spring 应用程序的开发之中，其中最重要的是以下四个核心。</p><ul><li>自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置。</li><li>起步依赖：告诉Spring Boot需要什么功能，它就能引入需要的库。</li><li>命令行界面：这是Spring Boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建。</li><li>Actuator：让你能够深入运行中的Spring Boot应用程序，一探究竟。</li></ul><h2 id="Spring-Boot-环境"><a href="#Spring-Boot-环境" class="headerlink" title="Spring Boot 环境"></a>Spring Boot 环境</h2><p>首先 Spring Boot 需要 java 环境，需要使用 Gradle 2.3+ 或者 Maven 3.0+ 构建。</p><p>本文环境是 Java 1.8，Spring Boot (v1.5.9.RELEASE) 以及 Maven3.3.9 构建。开发工具使用 IntelliJ IDEA。</p><h1 id="初始化Spring-Boot项目"><a href="#初始化Spring-Boot项目" class="headerlink" title="初始化Spring Boot项目"></a>初始化Spring Boot项目</h1><p>本文使用 Spring Initializr 初始化 Spring Boot项目。</p><h2 id="通过-Spring-官网"><a href="#通过-Spring-官网" class="headerlink" title="通过 Spring 官网"></a>通过 Spring 官网</h2><p>1、打开 <a href="http://start.spring.io/" rel="external nofollow noopener noreferrer" target="_blank">http://start.spring.io/</a></p><p>2、选择构建工具 Maven Project、Spring Boot版本1.5.9 以及一些依赖，输入 Web 即可，如下图所示：</p><p><img src="https://cdn.wshunli.com/SpringBoot/1HelloSpringBoot/1.png" alt="初始化Spring Boot项目"></p><p>3、点击 <code>Generate Project</code> 即可下载项目压缩包</p><h2 id="通过IntelliJ-IDEA"><a href="#通过IntelliJ-IDEA" class="headerlink" title="通过IntelliJ IDEA"></a>通过IntelliJ IDEA</h2><p>1、在 IntelliJ IDEA 中新建项目，选择 Spring Initializr ，如下图所示：</p><p><img src="https://cdn.wshunli.com/SpringBoot/1HelloSpringBoot/2.png" alt="初始化Spring Boot项目2"></p><p>2、配置项目的基本信息</p><p><img src="https://cdn.wshunli.com/SpringBoot/1HelloSpringBoot/3.png" alt="初始化Spring Boot项目3"></p><p>3、配置项目的依赖，这里选择添加 Web 模块</p><p><img src="https://cdn.wshunli.com/SpringBoot/1HelloSpringBoot/4.png" alt="初始化Spring Boot项目4"></p><p>4、设置项目存储位置</p><p><img src="https://cdn.wshunli.com/SpringBoot/1HelloSpringBoot/5_1.png" alt="初始化Spring Boot项目5"></p><p>初始化Spring Boot项目完成</p><h2 id="Spring-Boot-项目结构"><a href="#Spring-Boot-项目结构" class="headerlink" title="Spring Boot 项目结构"></a>Spring Boot 项目结构</h2><p>Spring Boot 项目 初始化完成后，项目如下图所示：</p><p><img src="https://cdn.wshunli.com/SpringBoot/1HelloSpringBoot/6.png" alt="Spring Boot 项目结构"></p><p>SpringBootDemoApplication 是 Spring Boot 的程序的入口。</p><p>我们添加 <code>@RestController</code> 注解，及 <code>home()</code> 方法</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@SpringBootApplicationpublic class SpringBootDemoApplication {    @RequestMapping(&quot;/&quot;)    String home() {        return &quot;Hello Spring Boot !&quot;;    }    public static void main(String[] args) {        SpringApplication.run(SpringBootDemoApplication.class, args);    }}</code></pre><h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><p>1、可以在 IntelliJ IDEA 中点击 run 按钮启动应用。</p><p><img src="https://cdn.wshunli.com/SpringBoot/1HelloSpringBoot/7.png" alt="Spring Boot 项目启动"></p><p>2、也可以在项目根目录使用 <code>mvnw spring-boot:run</code> 命令。</p><p><img src="https://cdn.wshunli.com/SpringBoot/1HelloSpringBoot/8.png" alt="Spring Boot 项目启动"></p><p>如果提示无法识别 <code>mvnw</code> 命令，可改为 <code>.\mvnw spring-boot:run</code></p><p>3、使用 <code>mvnw clean package</code> 命令打包后启动</p><p><img src="https://cdn.wshunli.com/SpringBoot/1HelloSpringBoot/9.png" alt="Spring Boot 项目启动"></p><p>再执行一下命令启动：</p><pre><code class="bash">java -jar  target/demo-0.0.1-SNAPSHOT.jar</code></pre><p>其中 <code>demo-0.0.1-SNAPSHOT.jar</code> 替换为自己的 jar 包名字。</p><p>最后 打开 <a href="http://127.0.0.1:8080/" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/</a> 即可看到 <code>Hello Spring Boot !</code></p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p><blockquote><p>参考资料<br>1、Getting Started · Building an Application with Spring Boot<br><a href="https://spring.io/guides/gs/spring-boot/" rel="external nofollow noopener noreferrer" target="_blank">https://spring.io/guides/gs/spring-boot/</a><br>2、Spring Boot干货系列：（一）优雅的入门篇 | 嘟嘟独立博客<br><a href="http://tengj.top/2017/02/26/springboot1/" rel="external nofollow noopener noreferrer" target="_blank">http://tengj.top/2017/02/26/springboot1/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 入门 Hello Spring Boot !&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>2017年终总结，我这一年的点点滴滴</title>
    <link href="http://www.wshunli.com/posts/33b6fcdd.html"/>
    <id>http://www.wshunli.com/posts/33b6fcdd.html</id>
    <published>2017-12-30T13:37:12.000Z</published>
    <updated>2018-01-23T15:17:47.599Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. "/> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      【加密文章】 深自缄默，如云漂泊
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="年终总结" scheme="http://www.wshunli.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（三）</title>
    <link href="http://www.wshunli.com/posts/fba26489.html"/>
    <id>http://www.wshunli.com/posts/fba26489.html</id>
    <published>2017-12-27T07:05:30.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的Broadcast消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的Broadcast被以Intent的形式发送出来，BroadcastReceiver就会被激活。</p><p>第7章 跨程序共享数据</p><p>第10章 后台默默的劳动者</p><p>未完待续。。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统下搭建Android开发环境</title>
    <link href="http://www.wshunli.com/posts/80d94eb7.html"/>
    <id>http://www.wshunli.com/posts/80d94eb7.html</id>
    <published>2017-12-26T05:25:55.000Z</published>
    <updated>2018-01-23T15:17:47.599Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 16.04 LTS 系统下搭建 Android 开发环境</p><a id="more"></a><p>昨天圣诞节在机房装了台 Ubuntu ，主要是想试下管理系统的部署，<br>原来在虚拟机下部署的没问题，在真机上部署基本上也没有什么问题。</p><p>有台 Ubuntu 还是很有必要的，后面编译软件会方便很多。<br>现在先学习搭建下 Android 开发环境。</p><h1 id="Java-环境"><a href="#Java-环境" class="headerlink" title="Java 环境"></a>Java 环境</h1><p>在比较新的版本 Android Studio 里面已经有 OpenJDK 了，但是 Oracle Java 更好点，我们直接使用命令安装。</p><pre><code class="bash">sudo add-apt-repository ppa:webupd8team/javasudo apt-get updatesudo apt-get install java-common oracle-java8-installer</code></pre><p>在安装的过程会询问是否同意许可，选择同意即可。</p><p>配置 Java 环境变量，依次执行以下命令：</p><pre><code class="bash">sudo apt-get install oracle-java8-set-defaultsource /etc/profile</code></pre><p>默认安装路径在 <code>/usr/lib/jvm/java-8-oracle</code> .</p><h1 id="Android-环境"><a href="#Android-环境" class="headerlink" title="Android 环境"></a>Android 环境</h1><p>安装 Android Studio 和 安装 JDK 类似，执行一下命令：</p><pre><code class="bash">sudo add-apt-repository ppa:maarten-fonville/android-studiosudo apt updatesudo apt install android-studio`</code></pre><p>JDK 默认安装路径在 <code>/opt/android-studio</code> .</p><h2 id="配置-Android-环境变量："><a href="#配置-Android-环境变量：" class="headerlink" title="配置 Android 环境变量："></a>配置 Android 环境变量：</h2><pre><code class="bash">gedit ~/.bashrc</code></pre><p>在文件的末尾添加如下代码并保存</p><pre><code class="bash">export ANDROID_HOME=/home/wshunli/Android/Sdkexport PATH=$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH</code></pre><p>其中 <code>/home/wshunli/Android/Sdk</code> 替换为自己 SDK 的安装位置，一般在 <code>android-studio</code> 同级目录下。</p><p>应用环境变量：</p><pre><code class="bash">source ~/.bashrc</code></pre><p>测试下查看原来设置的目录：</p><pre><code class="bash">echo $ANDROID_HOME</code></pre><p>返回 SDK 所在目录，配置正确。</p><p>接下来就可以启动 Android Studio 了。</p><h2 id="NDK-安装及环境配置（可选）："><a href="#NDK-安装及环境配置（可选）：" class="headerlink" title="NDK 安装及环境配置（可选）："></a>NDK 安装及环境配置（可选）：</h2><p>可以在 Android Studio 中下载，也执行以下命令下载并解压</p><pre><code class="bash">wget -c https://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zipunzip android-ndk-r10e-linux-x86_64.zip</code></pre><p>配置 NDK 环境变量，和 SDK 类似：</p><pre><code class="bash">gedit ~/.bashrc</code></pre><p>在文件的末尾添加如下代码并保存</p><pre><code class="bash">export ANDROID_NDK=/home/wshunli/Android/android-ndk-r10eexport PATH=$ANDROID_NDK:$PATH</code></pre><p>其中 <code>/home/wshunli/Android/android-ndk-r10e</code> 替换为自己 NDK 的安装位置</p><p>应用环境变量：</p><pre><code class="bash">source ~/.bashrc</code></pre><p>测试下查看原来设置的目录：</p><pre><code class="bash">echo $ANDROID_NDK</code></pre><p>Android Studio 中文社区(官网)下载所需开发工具。<br><a href="http://www.android-studio.org/" rel="external nofollow noopener noreferrer" target="_blank">http://www.android-studio.org/</a></p><blockquote><p>参考资料<br>1、2 Ways to Install Android Studio in Ubuntu 16.04 and Ubuntu 17.04 - LinuxBabe.Com<br><a href="https://www.linuxbabe.com/ubuntu/install-android-studio-ubuntu-16-04" rel="external nofollow noopener noreferrer" target="_blank">https://www.linuxbabe.com/ubuntu/install-android-studio-ubuntu-16-04</a><br>2、Ubuntu系统下配置Android开发环境 - 简书<br><a href="https://www.jianshu.com/p/949a5a2ddceb" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/949a5a2ddceb</a><br>3、Ubuntu 16.04 搭建Android开发环境 - Droi - 博客园<br><a href="http://www.cnblogs.com/droi/p/5399975.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/droi/p/5399975.html</a><br>4、Ubuntu下安装Android NDK - 简书<br><a href="https://www.jianshu.com/p/b12d714435bc" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/b12d714435bc</a><br>5、NDK:Linux下NDK安装和配置 - 简书<br><a href="https://www.jianshu.com/p/abdad7fd1367" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/abdad7fd1367</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu 16.04 LTS 系统下搭建 Android 开发环境&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="Ubuntu" scheme="http://www.wshunli.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（五）</title>
    <link href="http://www.wshunli.com/posts/f90ba53c.html"/>
    <id>http://www.wshunli.com/posts/f90ba53c.html</id>
    <published>2017-12-20T12:59:34.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. "/> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      【加密文章】今天又没找到对象
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（二）</title>
    <link href="http://www.wshunli.com/posts/b6bcc7db.html"/>
    <id>http://www.wshunli.com/posts/b6bcc7db.html</id>
    <published>2017-12-06T07:35:48.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 Activity</p><a id="more"></a><p>Android 应用的四大组件 Activity，Service，Broadcast Receiver， Content Provider 最为核心。</p><h1 id="第2章-先从看得到的入手"><a href="#第2章-先从看得到的入手" class="headerlink" title="第2章 先从看得到的入手"></a>第2章 先从看得到的入手</h1><p>Activity 是一个应用组件，用户可与其提供的屏幕进行交互，以执行拨打电话、拍摄照片或查看地图等操作。</p><h2 id="Activity-创建、启动及销毁"><a href="#Activity-创建、启动及销毁" class="headerlink" title="Activity 创建、启动及销毁"></a>Activity 创建、启动及销毁</h2><p>要创建 Activity，必须创建 <a href="https://developer.android.com/reference/android/app/Activity.html" rel="external nofollow noopener noreferrer" target="_blank">Activity</a> 的子类（或使用其现有子类）。</p><h3 id="实现用户界面"><a href="#实现用户界面" class="headerlink" title="实现用户界面"></a>实现用户界面</h3><p>Activity 的用户界面是由层级式视图 — 衍生自 View 类的对象 — 提供的，也可以利用 Android 提供的现成视图设计和组织布局。</p><p>利用视图定义布局的最常见方法是借助保存在您的应用资源内的 XML 布局文件。</p><pre><code class="Java">setContentView(R.layout.activity_main);</code></pre><p>不过，也可以在 Activity 代码中创建新 View，并通过将新 View 插入 ViewGroup 来创建视图层次，然后通过将根 ViewGroup 传递到 setContentView() 来使用该布局。</p><h3 id="声明-Activity"><a href="#声明-Activity" class="headerlink" title="声明 Activity"></a>声明 Activity</h3><p>Activity 需要在 清单文件 中声明。</p><pre><code class="XML">&lt;manifest ... &gt;  &lt;application ... &gt;    &lt;activity android:name=&quot;.MainActivity&quot;&gt;        &lt;intent-filter&gt;            &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;        &lt;/intent-filter&gt;    &lt;/activity&gt;    ...  &lt;/application ... &gt;  ...&lt;/manifest &gt;</code></pre><p><code>&lt;action&gt;</code> 元素指定这是应用的“主”入口点。<br><code>&lt;category&gt;</code> 元素指定此 Activity 应列入系统的应用启动器内（以便用户启动该 Activity）。</p><h3 id="启动-Activity"><a href="#启动-Activity" class="headerlink" title="启动 Activity"></a>启动 Activity</h3><p>可以通过调用 startActivity()，并将其传递给描述想启动的 Activity 的 Intent 来启动另一个 Activity。</p><pre><code class="Java">Intent intent = new Intent(Intent.ACTION_SEND);intent.putExtra(Intent.EXTRA_EMAIL, recipientArray);startActivity(intent);</code></pre><p>启动 Activity 推荐写法：</p><pre><code class="Java">public class SecondActivity extends FirstActivity {    public static void actionStart(Context context, String data1, String data2) {        Intent intent = new Intent(context, SecondActivity.class);        intent.putExtra(&quot;param1&quot;, data1);        intent.putExtra(&quot;param2&quot;, data2);        context.startActivity(intent);    }    ···}</code></pre><p>可以通过调用 startActivityForResult() 方法启动 Activity 并实现 onActivityResult() 回调方法得到启动 Activity 的结果。</p><pre><code class="Java">private void pickContact() {    Intent intent = new Intent(Intent.ACTION_PICK, Contacts.CONTENT_URI);    startActivityForResult(intent, PICK_CONTACT_REQUEST);}@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) {    // If the request went well (OK) and the request was PICK_CONTACT_REQUEST    if (resultCode == Activity.RESULT_OK &amp;&amp; requestCode == PICK_CONTACT_REQUEST) {        // Perform a query to the contact&#39;s content provider for the contact&#39;s name        Cursor cursor = getContentResolver().query(data.getData(),        new String[] {Contacts.DISPLAY_NAME}, null, null, null);        if (cursor.moveToFirst()) { // True if the cursor is not empty            int columnIndex = cursor.getColumnIndex(Contacts.DISPLAY_NAME);            String name = cursor.getString(columnIndex);            // Do something with the selected contact&#39;s name...        }    }}</code></pre><p>处理 Activity 结果时应该在 onActivityResult() 方法中使用的基本逻辑。</p><p>检查请求是否成功以及requestCode 与随 startActivityForResult() 发送的第二个参数是否匹配。<br>代码通过查询 Intent 中返回的数据（data 参数）从该处开始处理 Activity 结果。</p><h3 id="结束-Activity"><a href="#结束-Activity" class="headerlink" title="结束 Activity"></a>结束 Activity</h3><p>通过调用 Activity 的 finish() 方法来结束该 Activity。也可以通过调用 finishActivity() 结束之前启动的另一个 Activity。</p><h2 id="Activity-生命周期"><a href="#Activity-生命周期" class="headerlink" title="Activity 生命周期"></a>Activity 生命周期</h2><h3 id="Activity-状态"><a href="#Activity-状态" class="headerlink" title="Activity 状态"></a>Activity 状态</h3><p>Activity 在其生命周期中最多有4种状态：</p><ul><li>运行状态：Activity 位于屏幕前台并具有用户焦点。</li><li>暂停状态：另一个 Activity 位于屏幕前台并具有用户焦点，但此 Activity 仍可见。</li><li>停止状态：该 Activity 被另一个 Activity 完全遮盖（该 Activity 目前位于“后台”）。</li><li>销毁状态：系统结束 Activity （调用其 finish() 方法）或直接终止其进程，将其从内存中删除。</li></ul><h3 id="生命周期回调"><a href="#生命周期回调" class="headerlink" title="生命周期回调"></a>生命周期回调</h3><p>当一个 Activity 转入和转出上述不同状态时，系统会通过各种回调方法向其发出通知。</p><pre><code class="Java">public class ExampleActivity extends Activity {    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // The activity is being created.    }    @Override    protected void onStart() {        super.onStart();        // The activity is about to become visible.    }    @Override    protected void onResume() {        super.onResume();        // The activity has become visible (it is now &quot;resumed&quot;).    }    @Override    protected void onPause() {        super.onPause();        // Another activity is taking focus (this activity is about to be &quot;paused&quot;).    }    @Override    protected void onStop() {        super.onStop();        // The activity is no longer visible (it is now &quot;stopped&quot;)    }    @Override    protected void onDestroy() {        super.onDestroy();        // The activity is about to be destroyed.    }}</code></pre><p>这些方法共同定义 Activity 的整个生命周期。可以通过实现这些方法监控 Activity 生命周期中的三个嵌套循环：</p><ul><li><strong>完整生命周期</strong> 发生在 onCreate() 与 onDestroy() 之间，就是完整的生存期。</li><li><strong>可见生命周期</strong> 发生在 onStart() 与 onStop() 之间。在这段时间，用户可以在屏幕上看到 Activity 并与其交互。</li><li><strong>前台生命周期</strong> 发生在 onResume() 与 onPause() 之间。在这段时间，Activity 位于屏幕上的所有其他 Activity 之前，并具有用户输入焦点。</li></ul><center><img src="https://img.wshunli.com/Android/第一行代码/2.activity_lifecycle.png" alt="activity_lifecycle"></center><p>Activity 生命周期回调方法汇总表。</p><p><img src="https://img.wshunli.com/Android/第一行代码/2.activity_lifecycle_method.png" alt="activity_lifecycle"></p><p>名为“是否能事后终止？”的列表示系统是否能在不执行另一行 Activity 代码的情况下，在方法返回后随时终止承载 Activity 的进程。</p><h3 id="保存-Activity-状态"><a href="#保存-Activity-状态" class="headerlink" title="保存 Activity 状态"></a>保存 Activity 状态</h3><p>在 Activity 暂停或者停止时，Activity 的状态会得到保留。<br>但是当系统为了回复内存而销毁 Activity 时，Activity 对象也会被销毁，<br>我们可以使用 onSaveInstanceState() 方法保存 Acitivity 状态信息，使用 onRestoreInstanceState() 方法 恢复保存的状态信息。</p><center><img src="https://img.wshunli.com/Android/第一行代码/2.restore_instance.png" alt="restore_instance"></center><p>当 Activity A 启动 Activity B 时一系列操作的发生顺序：</p><ol><li>Activity A 的 onPause() 方法执行。</li><li>Activity B 的 onCreate()、onStart() 和 onResume() 方法依次执行。（Activity B 现在具有用户焦点。）</li><li>然后，如果 Activity A 在屏幕上不再可见，则其 onStop() 方法执行。</li></ol><h2 id="Intent-和-Intent-过滤器"><a href="#Intent-和-Intent-过滤器" class="headerlink" title="Intent 和 Intent 过滤器"></a>Intent 和 Intent 过滤器</h2><p>Intent 是一个消息传递对象，可以使用它从其他应用组件请求操作。尽管 Intent 可以通过多种方式促进组件之间的通信，但其基本用例主要包括以下三个：</p><p><strong>启动 Activity</strong>：Activity 表示应用中的一个屏幕。通过将 Intent 传递给 startActivity()，您可以启动新的 Activity 实例。Intent 描述了要启动的 Activity，并携带了任何必要的数据。</p><p>如果您希望在 Activity 完成后收到结果，请调用 startActivityForResult()。在 Activity 的 onActivityResult() 回调中，您的 Activity 将结果作为单独的 Intent 对象接收。</p><p><strong>启动服务</strong>：Service 是一个不使用用户界面而在后台执行操作的组件。通过将 Intent 传递给 startService()，您可以启动服务执行一次性操作（例如，下载文件）。Intent 描述了要启动的服务，并携带了任何必要的数据。</p><p>如果服务旨在使用客户端-服务器接口，则通过将 Intent 传递给 bindService()，您可以从其他组件绑定到此服务。</p><p><strong>传递广播</strong>：广播是任何应用均可接收的消息。系统将针对系统事件（例如：系统启动或设备开始充电时）传递各种广播。通过将 Intent 传递给 sendBroadcast()、sendOrderedBroadcast() 或 sendStickyBroadcast()，您可以将广播传递给其他应用。</p><h3 id="显示Intent和隐式Intent"><a href="#显示Intent和隐式Intent" class="headerlink" title="显示Intent和隐式Intent"></a>显示Intent和隐式Intent</h3><p>显式 Intent 按名称（完全限定类名）指定要启动的组件。</p><pre><code class="Java">startActivity(new Intent(this, SecondActivity.class));</code></pre><p>隐式 Intent 不会指定特定的组件，而是声明要执行的常规操作，从而允许其他应用中的组件来处理它。</p><p>创建隐式 Intent 时，Android 系统通过将 Intent 的内容与在设备上其他应用的清单文件中声明的 Intent 过滤器进行比较，从而找到要启动的相应组件。</p><p><img src="https://img.wshunli.com/Android/第一行代码/2.intent-filters.png-hexo.png" alt="intent-filters"></p><p>隐式 Intent 如何通过系统传递以启动其他 Activity 的图解：<br>[1] Activity A 创建包含操作描述的 Intent，并将其传递给 startActivity()。<br>[2] Android 系统搜索所有应用中与 Intent 匹配的 Intent 过滤器。 找到匹配项之后，<br>[3] 该系统通过调用匹配 Activity（Activity B）的 onCreate() 方法并将其传递给 Intent，以此启动匹配 Activity。</p><h3 id="构建-Intent"><a href="#构建-Intent" class="headerlink" title="构建 Intent"></a>构建 Intent</h3><p>Intent 对象携带了 Android 系统用来确定要启动哪个组件的信息，以及收件人组件为了正确执行操作而使用的信息。</p><p>Intent 中包含的主要信息如下：</p><ul><li>组件名称(Component name)：要启动的组件名称。</li><li>操作(Action)：指定要执行的通用操作的字符串。如 ACTION_VIEW 、ACTION_SEND。</li><li>数据(Data)：引用待操作数据和/或该数据 MIME 类型的 URI（Uri 对象）。</li><li>类别(Category)：一个包含应处理 Intent 组件类型的附加信息的字符串。如 CATEGORY_BROWSABLE、CATEGORY_LAUNCHER。</li><li>Extra：携带完成请求操作所需的附加信息的键值对。</li><li>标志(Flags)：在 Intent 类中定义的、充当 Intent 元数据的标志。</li></ul><p>隐式创建 Intent 示例：</p><pre><code class="Java">// Create the text message with a stringIntent sendIntent = new Intent();sendIntent.setAction(Intent.ACTION_SEND);sendIntent.putExtra(Intent.EXTRA_TEXT, textMessage);sendIntent.setType(&quot;text/plain&quot;);// Verify that the intent will resolve to an activityif (sendIntent.resolveActivity(getPackageManager()) != null) {    startActivity(sendIntent);}</code></pre><p>使用<strong>应用选择器</strong></p><p>如果有多个应用响应隐式 Intent，则用户可以选择要使用的应用，并将其设置为该操作的默认选项。</p><p>要显示选择器，请使用 createChooser() 创建 Intent，并将其传递给 startActivity()。</p><pre><code class="Java">Intent sendIntent = new Intent(Intent.ACTION_SEND);...String title = getResources().getString(R.string.chooser_title);// Create intent to show the chooser dialogIntent chooser = Intent.createChooser(sendIntent, title);if (sendIntent.resolveActivity(getPackageManager()) != null) {    startActivity(chooser);}</code></pre><h3 id="接收隐式-Intent"><a href="#接收隐式-Intent" class="headerlink" title="接收隐式 Intent"></a>接收隐式 Intent</h3><p>要公布应用可以接收哪些隐式 Intent，需要在清单文件中使用 <code>&lt;intent-filter&gt;</code> 元素为每个应用组件声明一个或多个 Intent 过滤器。</p><p>在 <code>&lt;intent-filter&gt;</code> 内部，您可以使用以下三个元素中的一个或多个指定要接受的 Intent 类型：</p><p><code>&lt;action&gt;</code> 在 name 属性中，声明接受的 Intent 操作。该值必须是操作的文本字符串值，而不是类常量。<br><code>&lt;data&gt;</code> 使用一个或多个指定数据 URI 各个方面（scheme、host、port、path 等）和 MIME 类型的属性，声明接受的数据类型。<br><code>&lt;category&gt;</code> 在 name 属性中，声明接受的 Intent 类别。该值必须是操作的文本字符串值，而不是类常量。</p><pre><code class="XML">&lt;activity android:name=&quot;ShareActivity&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.SEND&quot;/&gt;        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;        &lt;data android:mimeType=&quot;text/plain&quot;/&gt;    &lt;/intent-filter&gt;&lt;/activity&gt;</code></pre><h3 id="使用待定-Intent"><a href="#使用待定-Intent" class="headerlink" title="使用待定 Intent"></a>使用待定 Intent</h3><p>PendingIntent 对象是 Intent 对象的包装器。PendingIntent 的主要目的是授权外部应用使用包含的 Intent，就像是它从您应用本身的进程中执行的一样。</p><p>待定 Intent 的主要用例包括：</p><ul><li>声明用户使用您的通知执行操作时所要执行的 Intent（Android 系统的 NotificationManager 执行 Intent）。</li><li>声明用户使用您的 应用小部件执行操作时要执行的 Intent（主屏幕应用执行 Intent）。</li><li>声明未来某一特定时间要执行的 Intent（Android 系统的 AlarmManager 执行 Intent）。</li></ul><h3 id="Intent-解析"><a href="#Intent-解析" class="headerlink" title="Intent 解析"></a>Intent 解析</h3><p>当系统收到隐式 Intent 以启动 Activity 时，它根据以下三个方面将该 Intent 与 Intent 过滤器进行比较，搜索该 Intent 的最佳 Activity：</p><ul><li>Intent 操作</li></ul><pre><code class="Java">&lt;intent-filter&gt;    &lt;action android:name=&quot;android.intent.action.EDIT&quot; /&gt;    &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;    ...&lt;/intent-filter&gt;</code></pre><ul><li>Intent 数据（URI 和数据类型）</li></ul><pre><code class="Java">&lt;intent-filter&gt;    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;    &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;    ...&lt;/intent-filter&gt;</code></pre><ul><li>Intent 类别</li></ul><pre><code class="Java">&lt;intent-filter&gt;    &lt;data android:mimeType=&quot;video/mpeg&quot; android:scheme=&quot;http&quot; ... /&gt;    &lt;data android:mimeType=&quot;audio/mpeg&quot; android:scheme=&quot;http&quot; ... /&gt;    ...&lt;/intent-filter&gt;</code></pre><h3 id="Intent-匹配"><a href="#Intent-匹配" class="headerlink" title="Intent 匹配"></a>Intent 匹配</h3><p>通过 Intent 过滤器匹配 Intent，这不仅有助于发现要激活的目标组件，还有助于发现设备上组件集的相关信息。<br>例如，主页应用通过使用指定 ACTION_MAIN 操作和 CATEGORY_LAUNCHER 类别的 Intent 过滤器查找所有 Activity，以此填充应用启动器。</p><p>PackageManager 提供了一整套 query…() 方法来返回所有能够接受特定 Intent 的组件，resolve…() 方法来确定响应 Intent 的最佳组件。例如，queryIntentActivities()、queryIntentServices()、queryBroadcastReceivers()将返回能够执行那些作为参数传递的 Intent 的所有 组件 列表，但方法均不会激活组件，而只是列出能够响应的组件。</p><h3 id="通用-Intent"><a href="#通用-Intent" class="headerlink" title="通用 Intent"></a>通用 Intent</h3><p>主要是调用系统提供的一些服务，如闹钟、相机等等。</p><p><a href="https://developer.android.com/guide/components/intents-common.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/intents-common.html</a></p><h2 id="Activity-启动模式"><a href="#Activity-启动模式" class="headerlink" title="Activity 启动模式"></a>Activity 启动模式</h2><h3 id="任务和返回栈"><a href="#任务和返回栈" class="headerlink" title="任务和返回栈"></a>任务和返回栈</h3><p>任务是指在执行特定作业时与用户交互的一系列 Activity。 这些 Activity 按照各自的打开顺序排列在堆栈（即返回栈）中。</p><p><img src="https://img.wshunli.com/Android/第一行代码/2.diagram_backstack.png" alt="diagram_backstack"></p><p>当前 Activity 启动另一个 Activity 时，新 Activity 会被推到栈顶，并获得焦点。当用户按返回按钮时，当前 Activity 会从栈顶弹出并销毁。</p><p>当用户直接按 Home 键回到主屏幕时，尽管该任务中的所有 Activity 全部停止，但是任务的返回栈仍然不变。</p><p>即使来自其他任务，Activity 也可以多次实例化。</p><h3 id="管理任务"><a href="#管理任务" class="headerlink" title="管理任务"></a>管理任务</h3><p>通过使用 <code>&lt;activity&gt;</code> 清单文件元素中的属性</p><ul><li>taskAffinity</li><li>launchMode</li><li>allowTaskReparenting</li><li>clearTaskOnLaunch</li><li>alwaysRetainTaskState</li><li>finishOnTaskLaunch</li></ul><p>以及传递给 <code>startActivity()</code> 的 Intent 中的标志</p><ul><li>FLAG_ACTIVITY_NEW_TASK</li><li>FLAG_ACTIVITY_CLEAR_TOP</li><li>FLAG_ACTIVITY_SINGLE_TOP</li></ul><p>管理 Activity 如何与任务关联或者如何存在于返回栈中。</p><h3 id="定义启动模式"><a href="#定义启动模式" class="headerlink" title="定义启动模式"></a>定义启动模式</h3><p><strong>使用清单文件</strong>：</p><p>在清单文件中声明 Activity 时，您可以使用 <code>&lt;activity&gt;</code> 元素的 launchMode 属性指定 Activity 应该如何与任务关联。</p><p>launchMode 属性的启动模式共有四种：</p><p><strong>“standard”</strong>（默认模式）每次启动 Activity 系统都会在任务中创建 Activity 的新实例并向其传送 Intent。Activity 可以多次实例化，而每个实例均可属于不同的任务，并且一个任务可以拥有多个实例。</p><p><strong>“singleTop”</strong> 如果当前任务的顶部已存在 Activity 的一个实例，则系统会通过调用该实例的 onNewIntent() 方法向其传送 Intent，而不是创建 Activity 的新实例。Activity 可以多次实例化，而每个实例均可属于不同的任务，并且一个任务可以拥有多个实例（但前提是位于返回栈顶部的 Activity 并不是 Activity 的现有实例）。</p><p><strong>“singleTask”</strong> 系统创建新任务并实例化位于新任务底部的 Activity。但是如果该 Activity 的一个实例已存在于一个单独的任务中，则系统会通过调用现有实例的 onNewIntent() 方法向其传送 Intent，而不是创建新实例。一次只能存在 Activity 的一个实例。</p><p><strong>“singleInstance”</strong> 与 “singleTask” 相同，只是系统不会将任何其他 Activity 启动到包含实例的任务中。该 Activity 始终是其任务唯一仅有的成员；由此 Activity 启动的任何 Activity 均在单独的任务中打开。</p><p><strong>使用 Intent 标志</strong>：</p><p>启动 Activity 时，您可以通过在传递给 startActivity() 的 Intent 中加入相应的标志，修改 Activity 与其任务的默认关联方式。可用于修改默认行为的标志包括：</p><p><strong>FLAG_ACTIVITY_NEW_TASK</strong> 在新任务中启动 Activity。如果已为正在启动的 Activity 运行任务，则该任务会转到前台并恢复其最后状态，同时 Activity 会在 onNewIntent() 中收到新 Intent。这会产生与 “singleTask” launchMode 值相同的行为。</p><p><strong>FLAG_ACTIVITY_SINGLE_TOP</strong> 如果正在启动的 Activity 是当前 Activity（位于返回栈的顶部），则 现有实例会接收对 onNewIntent() 的调用，而不是创建 Activity 的新实例。这会产生与 “singleTop” launchMode 值相同的行为。</p><p><strong>FLAG_ACTIVITY_CLEAR_TOP</strong> 如果正在启动的 Activity 已在当前任务中运行，则会销毁当前任务顶部的所有 Activity，并通过 onNewIntent() 将此 Intent 传递给 Activity 已恢复的实例（现在位于顶部），而不是启动该 Activity 的新实例。产生这种行为的 launchMode 属性没有值。</p><h3 id="处理关联"><a href="#处理关联" class="headerlink" title="处理关联"></a>处理关联</h3><p>“关联”指示 Activity 优先属于哪个任务。默认情况下，同一应用中的所有 Activity 彼此关联。</p><p>可以使用 <code>&lt;activity&gt;</code> 元素的 taskAffinity 属性修改任何给定 Activity 的关联。</p><p>taskAffinity 属性取字符串值，该值必须不同于在 <code>&lt;manifest&gt;</code> 元素中声明的默认软件包名称，因为系统使用该名称标识应用的默认任务关联。</p><p>在两种情况下，关联会起作用：</p><ul><li>启动 Activity 的 Intent 包含 FLAG_ACTIVITY_NEW_TASK 标志。</li><li>Activity 将其 allowTaskReparenting 属性设置为 “true”。</li></ul><h3 id="清理返回栈"><a href="#清理返回栈" class="headerlink" title="清理返回栈"></a>清理返回栈</h3><p>如果用户长时间离开任务，则系统会清除所有 Activity 的任务，根 Activity 除外。<br>当用户再次返回到任务时，仅恢复根 Activity。</p><p><strong>alwaysRetainTaskState</strong> 如果在任务的根 Activity 中将此属性设置为 “true”，则不会发生刚才所述的默认行为。即使在很长一段时间后，任务仍将所有 Activity 保留在其堆栈中。</p><p><strong>clearTaskOnLaunch</strong> 如果在任务的根 Activity 中将此属性设置为 “true”，则每当用户离开任务然后返回时，系统都会将堆栈清除到只剩下根 Activity。 换而言之，它与 alwaysRetainTaskState 正好相反。 即使只离开任务片刻时间，用户也始终会返回到任务的初始状态。</p><p><strong>finishOnTaskLaunch</strong> 此属性类似于 clearTaskOnLaunch，但它对单个 Activity 起作用，而非整个任务。 此外，它还有可能会导致任何 Activity 停止，包括根 Activity。 设置为 “true” 时，Activity 仍是任务的一部分，但是仅限于当前会话。如果用户离开然后返回任务，则任务将不复存在。</p><h1 id="第4章-手机平板要兼容"><a href="#第4章-手机平板要兼容" class="headerlink" title="第4章 手机平板要兼容"></a>第4章 手机平板要兼容</h1><p>Fragment 表示 Activity 中的行为或部分用户界面。Fragment 必须始终嵌入在 Activity 中，其生命周期直接受宿主 Activity 生命周期的影响。</p><p><img src="https://img.wshunli.com/Android/第一行代码/2.fragments.png" alt="fragments"></p><h2 id="创建-Fragment"><a href="#创建-Fragment" class="headerlink" title="创建 Fragment"></a>创建 Fragment</h2><p>要想创建 Fragment，必须创建 Fragment 的子类（或已有其子类）。</p><center><img src="https://img.wshunli.com/Android/第一行代码/2.fragment_lifecycle.png" alt="fragment_lifecycle"></center><p>其他 Fragment 子类，DialogFragment、ListFragment、PreferenceFragment 。</p><h3 id="构造-Fragment-界面"><a href="#构造-Fragment-界面" class="headerlink" title="构造 Fragment 界面"></a>构造 Fragment 界面</h3><p>实现 onCreateView() 回调方法，Android 系统会在 Fragment 需要绘制其布局时调用该方法。</p><pre><code class="Java">public static class ExampleFragment extends Fragment {    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.example_fragment, container, false);    }}</code></pre><p>inflater 利用 XML 中定义的布局资源来拓展 Fragment 布局。</p><h3 id="向-Activity-添加-Fragment"><a href="#向-Activity-添加-Fragment" class="headerlink" title="向 Activity 添加 Fragment"></a>向 Activity 添加 Fragment</h3><p>可以通过两种方式向 Activity 布局添加 Fragment ：</p><p><strong>在 Activity 的布局文件内声明 Fragment</strong>：</p><pre><code class="XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:orientation=&quot;horizontal&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;&gt;    &lt;fragment android:name=&quot;com.example.news.ArticleListFragment&quot;            android:id=&quot;@+id/list&quot;            android:layout_weight=&quot;1&quot;            android:layout_width=&quot;0dp&quot;            android:layout_height=&quot;match_parent&quot; /&gt;    &lt;fragment android:name=&quot;com.example.news.ArticleReaderFragment&quot;            android:id=&quot;@+id/viewer&quot;            android:layout_weight=&quot;2&quot;            android:layout_width=&quot;0dp&quot;            android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt;</code></pre><p>当系统创建此 Activity 布局时，会实例化在布局中指定的每个Fragment，并为每个Fragment调用 onCreateView() 方法，以检索每个Fragment的布局。系统会直接插入Fragment返回的 View 来替代 <code>&lt;fragment&gt;</code> 元素。</p><p><strong>或者通过编程方式将 Fragment 添加到某个现有 ViewGroup</strong>:</p><p>用 FragmentTransaction 添加、移除或替换 Fragment 。</p><pre><code class="Java">FragmentManager fragmentManager = getFragmentManager();FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();// 使用 add() 方法添加一个 FragmentExampleFragment fragment = new ExampleFragment();fragmentTransaction.add(R.id.fragment_container, fragment);fragmentTransaction.commit();</code></pre><p>添加没有 UI 的 Fragment ：</p><p>使用 add(Fragment, String) 方法在 Activity 添加 Fragment，可以使用 Fragment 为 Activity 提供后台行为，而不显示额外 UI。</p><h2 id="管理-Fragment"><a href="#管理-Fragment" class="headerlink" title="管理 Fragment"></a>管理 Fragment</h2><p>在 Activity 调用 getFragmentManager() 方法得到 FragmentManager 对象可以管理 Activity 中的 Fragment。</p><p>FragmentManager 执行的操作包括：</p><ul><li>findFragmentById()（对于在 Activity 布局中提供 UI 的 Fragment ）或 findFragmentByTag()（对于提供或不提供 UI 的 Fragment）获取 Activity 中存在的 Fragment。</li><li>popBackStack()（模拟用户发出的返回命令）将 Fragment 从返回栈中弹出。</li><li>addOnBackStackChangedListener() 注册一个侦听返回栈变化的侦听器。</li></ul><h2 id="执行-Fragment-事务"><a href="#执行-Fragment-事务" class="headerlink" title="执行 Fragment 事务"></a>执行 Fragment 事务</h2><p>从 FragmentManager 获取 FragmentTransaction 实例，使用 add()、remove() 和 replace() 等方法动态管理 Fragment。</p><pre><code class="Java">// Create new fragment and transactionFragment newFragment = new ExampleFragment();FragmentTransaction transaction = getFragmentManager().beginTransaction();// Replace whatever is in the fragment_container view with this fragment,// and add the transaction to the back stacktransaction.replace(R.id.fragment_container, newFragment);transaction.addToBackStack(null);// Commit the transactiontransaction.commit();</code></pre><p>通过调用 addToBackStack() 可将替换事务保存到返回栈，以便用户能够通过按返回按钮撤消事务并回退到上一 Fragment 。</p><h2 id="Fragment-与-Activity-通信"><a href="#Fragment-与-Activity-通信" class="headerlink" title="Fragment 与 Activity 通信"></a>Fragment 与 Activity 通信</h2><p>尽管 Fragment 是作为独立于 Activity 的对象实现，并且可在多个 Activity 内使用，但 Fragment 的特定实例会直接绑定到包含它的 Activity。</p><p>Fragment 可以通过 getActivity() 访问 Activity 实例，并轻松地执行在 Activity 布局中查找视图等任务。</p><pre><code class="Java">View listView = getActivity().findViewById(R.id.list);</code></pre><p>同样地，Activity 也可以使用 findFragmentById() 或 findFragmentByTag()，通过从 FragmentManager 获取对 Fragment 的引用来调用Fragment中的方法。例如：</p><pre><code class="Java">ExampleFragment fragment = (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);</code></pre><h2 id="处理-Fragment-生命周期"><a href="#处理-Fragment-生命周期" class="headerlink" title="处理 Fragment 生命周期"></a>处理 Fragment 生命周期</h2><p>管理Fragment生命周期与管理 Activity 生命周期很相似。和 Activity 一样，Fragment也以三种状态存在：</p><p><strong>Resumed</strong> Fragment在运行中的 Activity 中可见。<br><strong>Paused</strong> 另一个 Activity 位于前台并具有焦点，但此Fragment所在的 Activity 仍然可见（前台 Activity 部分透明，或未覆盖整个屏幕）。<br><strong>Stopped</strong> Fragment不可见。宿主 Activity 已停止，或Fragment已从 Activity 中移除，但已添加到返回栈。 停止Fragment仍然处于活动状态（系统会保留所有状态和成员信息）。不过，它对用户不再可见，如果 Activity 被终止，它也会被终止。</p><p>Activity 生命周期与 Fragment 生命周期之间的最显著差异在于它们在其各自返回栈中的存储方式。</p><p>默认情况下，Activity 停止时会被放入由系统管理的 Activity 返回栈；<br>不过，仅当您在移除 Fragment 的事务执行期间通过调用 addToBackStack() 显式请求保存实例时，系统才会将 Fragment 放入由宿主 Activity 管理的返回栈。</p><h3 id="与-Activity-生命周期协调一致"><a href="#与-Activity-生命周期协调一致" class="headerlink" title="与 Activity 生命周期协调一致"></a>与 Activity 生命周期协调一致</h3><p>Fragment所在的 Activity 的生命周期会直接影响Fragment的生命周期，其表现为，Activity 的每次生命周期回调都会引发每个Fragment的类似回调。<br>例如，当 Activity 收到 onPause() 时，Activity 中的每个Fragment也会收到 onPause()。</p><p>不过，Fragment 还有几个额外的生命周期回调:</p><ul><li>onAttach() 在片段已与 Activity 关联时调用（Activity 传递到此方法内）。</li><li>onCreateView() 调用它可创建与片段关联的视图层次结构。</li><li>onActivityCreated() 在 Activity 的 onCreate() 方法已返回时调用。</li><li>onDestroyView() 在移除与片段关联的视图层次结构时调用。</li><li>onDetach() 在取消片段与 Activity 的关联时调用。</li></ul><center><img src="https://img.wshunli.com/Android/第一行代码/2.activity_fragment_lifecycle.png" alt="activity_fragment_lifecycle"></center><p>图示说明了受其宿主 Activity 影响的片段生命周期流。</p><blockquote><p>参考资料<br>1、Activity | Android Developers<br><a href="https://developer.android.com/guide/components/activities.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/activities.html</a><br>2、Activity/Service 生命周期 · 笔试面试知识整理<br><a href="https://hit-alibaba.github.io/interview/Android/basic/Activity-Service-Lifecircle.html" rel="external nofollow noopener noreferrer" target="_blank">https://hit-alibaba.github.io/interview/Android/basic/Activity-Service-Lifecircle.html</a><br>3、Intent 和 Intent 过滤器<br><a href="https://developer.android.com/guide/components/intents-filters.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/intents-filters.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 Activity&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（一）</title>
    <link href="http://www.wshunli.com/posts/df51fd76.html"/>
    <id>http://www.wshunli.com/posts/df51fd76.html</id>
    <published>2017-12-06T03:33:44.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 平台架构</p><a id="more"></a><p>我最开始学习 Android 是在 2014 年下半年，看的是《疯狂Android讲义》。</p><p>在 2015 年参加 ESRI 中国组织的 GIS 开发大赛，也是主要在暑假学习了不少 Android 入门知识。</p><p>后面在较长一段时间，感觉停滞在 Android 入门的水平不前。也有尝试在项目中使用一些优秀的框架或者类库，但是感觉自身的水平并没有多大的提高。</p><p>所以有意在前面学习计算机基础、Java 语言基础，后面打算深入之后学习下数据结构及算法。也为明年找工作做准备。</p><p>其实这本书 《第一行代码》 在考研结束以后已经看过一遍了，这次再复习一遍，毕竟有一段时间没有具体做 Android 开发了，再者希望能记忆一些常用的知识点。</p><h1 id="第1章-开启启程"><a href="#第1章-开启启程" class="headerlink" title="第1章 开启启程"></a>第1章 开启启程</h1><h2 id="Android-系统架构"><a href="#Android-系统架构" class="headerlink" title="Android 系统架构"></a>Android 系统架构</h2><p>总的来说，Android的系统体系结构分为四层，自顶向下分别是：</p><ul><li>应用程序(Applications)</li><li>应用程序框架(Application Frameworks)</li><li>系统运行库与 Android 运行环境(Libraris &amp; Android Runtime)</li><li>Linux 核心层</li></ul><p><img src="https://img.wshunli.com/Android/第一行代码/1.Android系统架构.png" alt="1.Android系统架构"></p><h3 id="Linux核心层"><a href="#Linux核心层" class="headerlink" title="Linux核心层"></a>Linux核心层</h3><p><strong>Linux 内核</strong>(Linux Kernel)<br>Android 平台的基础是 Linux 内核，Linux 内核直接和硬件打交道。硬件驱动、进程管理、内存管理、网络管理的功能在这里实现。</p><p><strong>硬件抽象层</strong>(Hardware Abstraction Layer)<br>硬件抽象层 (HAL) 提供标准界面，向更高级别的 Java API 框架显示设备硬件功能。<br>HAL 包含多个库模块，其中每个模块都为特定类型的硬件组件实现一个界面，例如相机或蓝牙模块。</p><h3 id="系统运行库层"><a href="#系统运行库层" class="headerlink" title="系统运行库层"></a>系统运行库层</h3><p><strong>Android 运行环境</strong>(Android Runtime)<br>每个应用都在其自己的进程中运行，有其自己的 Android Runtime (ART) 实例（Android 5.0 之前是 Dalvik）。<br>并且 Android 还包含一套核心运行时库，可提供 Java API 框架使用的 Java 编程语言大部分功能。</p><p><strong>原生C/C++ 库</strong>(Native C/C++ Libraries)<br>许多核心 Android 系统组件和服务（例如 ART 和 HAL）构建自原生代码，需要以 C 和 C++ 编写的原生库。<br>Android 平台提供 Java 框架 API 以向应用显示其中部分原生库的功能。</p><h3 id="应用框架层"><a href="#应用框架层" class="headerlink" title="应用框架层"></a>应用框架层</h3><p><strong>Java API 框架</strong>(Java API Framework)</p><p>提供构建应用的各种 API 。这些 API 形成创建 Android 应用所需的构建块，它们可简化核心模块化系统组件和服务的重复使用，包括以下组件和服务：</p><ul><li>丰富、可扩展的视图系统，可用以构建应用的 UI，包括列表、网格、文本框、按钮甚至可嵌入的网络浏览器。</li><li>资源管理器，用于访问非代码资源，例如本地化的字符串、图形和布局文件。</li><li>通知管理器，可让所有应用在状态栏中显示自定义提醒。</li><li>Activity 管理器，用于管理应用的生命周期，提供常见的导航返回栈。</li><li>内容提供程序，可让应用访问其他应用（例如“联系人”应用）中的数据或者共享其自己的数据。</li></ul><p>开发者可以完全访问 Android 系统应用使用的框架 API。</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p><strong>系统应用</strong>(System Apps)</p><p>所有安装在手机上的应用程序都属于应用层，包括系统自带的软件和自己开发的软件。</p><h2 id="搭建-Android-开发环境"><a href="#搭建-Android-开发环境" class="headerlink" title="搭建 Android 开发环境"></a>搭建 Android 开发环境</h2><p>前面已经写过了，不再重复。<br>《ArcGIS Runtime SDK for Android学习笔记》-1、Android开发环境搭建 | CirGIS<br><a href="https://www.wshunli.com/posts/f6977dbb.html">https://www.wshunli.com/posts/f6977dbb.html</a></p><blockquote><p>参考资料<br>1、平台架构 | Android Developers<br><a href="https://developer.android.com/guide/platform/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/platform/index.html</a><br>2、Android系统架构简介 - 简书<br><a href="http://www.jianshu.com/p/69f0d25c727a" rel="external nofollow noopener noreferrer" target="_blank">http://www.jianshu.com/p/69f0d25c727a</a><br>3、Android系统架构介绍 - LCore的专栏 - CSDN博客<br><a href="http://blog.csdn.net/lcore/article/details/20993367" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/lcore/article/details/20993367</a><br>4、android系统体系结构 - CSDN博客<br><a href="http://blog.csdn.net/spy19881201/article/details/5775484" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/spy19881201/article/details/5775484</a><br>5、Android系统开篇 - Gityuan博客 | 袁辉辉博客<br><a href="http://gityuan.com/android/" rel="external nofollow noopener noreferrer" target="_blank">http://gityuan.com/android/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 平台架构&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（九）</title>
    <link href="http://www.wshunli.com/posts/8c5a6523.html"/>
    <id>http://www.wshunli.com/posts/8c5a6523.html</id>
    <published>2017-12-05T09:51:24.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— Java I/O 系统。</p><a id="more"></a><p>第18章 <strong>Java I/O 系统</strong></p><h1 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h1><p>File 类不仅仅可以代表一个特定文件的名称，还可以代表一个目录下的一组文件的名称。</p><p>未完待续。。</p><h1 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h1><blockquote><p>参考资料<br>1、Java 编程思想（六）Java I/O - Invoker’s Tower - CSDN博客<br><a href="http://blog.csdn.net/kingcat666/article/details/78027078" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/kingcat666/article/details/78027078</a><br>2、java基础学习总结——流 - 孤傲苍狼 - 博客园<br><a href="http://www.cnblogs.com/xdp-gacl/p/3634409.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/xdp-gacl/p/3634409.html</a><br>3、《Java编程思想》学习笔记11——Java I/O - CSDN博客<br><a href="http://blog.csdn.net/chjttony/article/details/6966246" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/chjttony/article/details/6966246</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— Java I/O 系统。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（八）</title>
    <link href="http://www.wshunli.com/posts/f697447c.html"/>
    <id>http://www.wshunli.com/posts/f697447c.html</id>
    <published>2017-12-05T09:46:52.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 容器深入研究。</p><a id="more"></a><p>第17章 <strong>容器深入研究</strong></p><p><img src="https://img.wshunli.com/Java/Java编程思想/Java容器1.png" alt="Java容器"></p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 容器深入研究。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（七）</title>
    <link href="http://www.wshunli.com/posts/1fc6c3f.html"/>
    <id>http://www.wshunli.com/posts/1fc6c3f.html</id>
    <published>2017-12-04T13:54:10.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 类型信息及泛型。</p><a id="more"></a><h1 id="第14章-类型信息"><a href="#第14章-类型信息" class="headerlink" title="第14章 类型信息"></a>第14章 类型信息</h1><p>RTTI (Run-Time Type Identification, 运行时类型识别) 是 Java 中非常有用的机制。</p><pre><code class="Java">abstract class Shape {  void draw() { System.out.println(this + &quot;.draw()&quot;); }  abstract public String toString();}class Circle extends Shape {  public String toString() { return &quot;Circle&quot;; }}class Square extends Shape {  public String toString() { return &quot;Square&quot;; }}public class Shapes {  public static void main(String[] args) {    List&lt;Shape&gt; shapeList = Arrays.asList(      new Circle(), new Square()    );    for(Shape shape : shapeList) shape.draw();  }}/* Output:Circle.draw()Square.draw()*/</code></pre><p>在Java运行时，RTTI 维护类的相关信息，识别一个对象的类型。</p><p>1.Class 对象</p><p>类是程序的一部分，每个类都有一个Class对象。</p><pre><code class="Java">interface HasBatteries {}interface Waterproof {}interface Shoots {}class Toy {  // Comment out the following default constructor  // to see NoSuchMethodError from (*1*)  Toy() {}  Toy(int i) {}}class FancyToy extends Toyimplements HasBatteries, Waterproof, Shoots {  FancyToy() { super(1); }}public class ToyTest {  static void printInfo(Class cc) {    print(&quot;Class name: &quot; + cc.getName() + // 全限定的类型      &quot; is interface? [&quot; + cc.isInterface() + &quot;]&quot;); // Class 对象是否表示某接口    print(&quot;Simple name: &quot; + cc.getSimpleName()); // 不含包名的类名    print(&quot;Canonical name : &quot; + cc.getCanonicalName()); // 含包名的类名  }  public static void main(String[] args) {    Class c = null;    try {      c = Class.forName(&quot;typeinfo.toys.FancyToy&quot;); // 获取 Class 对象的引用    } catch(ClassNotFoundException e) {      print(&quot;Can&#39;t find FancyToy&quot;);      System.exit(1);    }    printInfo(c);    for(Class face : c.getInterfaces()) // 获取 Class 对象中包含的接口      printInfo(face);    Class up = c.getSuperclass(); // 获取 Class 对象的直接基类    Object obj = null;    try {      // Requires default constructor:      obj = up.newInstance(); // 实现虚拟构造器    } catch(InstantiationException e) {      print(&quot;Cannot instantiate&quot;);      System.exit(1);    } catch(IllegalAccessException e) {      print(&quot;Cannot access&quot;);      System.exit(1);    }    printInfo(obj.getClass());  }} /* Output:Class name: typeinfo.toys.FancyToy is interface? [false]Simple name: FancyToyCanonical name : typeinfo.toys.FancyToyClass name: typeinfo.toys.HasBatteries is interface? [true]Simple name: HasBatteriesCanonical name : typeinfo.toys.HasBatteriesClass name: typeinfo.toys.Waterproof is interface? [true]Simple name: WaterproofCanonical name : typeinfo.toys.WaterproofClass name: typeinfo.toys.Shoots is interface? [true]Simple name: ShootsCanonical name : typeinfo.toys.ShootsClass name: typeinfo.toys.Toy is interface? [false]Simple name: ToyCanonical name : typeinfo.toys.Toy*/</code></pre><p>2.类加载器是通过判断这个类包含的Class对象是否已经加载来判断它是否已经加载过这个类。为使用类而做的准备工作实际上包括三个步骤：</p><p>1 加载。这个由类加载器去完成。查找相关的字节码，并从这些字节码中创建一个Class对象。<br>2 链接。在链接阶段将验证类中的字节码，为静态域分配存储空间，并且必须的话将解析这个类创建的对其他类的引用。<br>3 初始化。如果该类具有超类，则对其初始化，执行静态初始化器和静态初始化块。初始化被延迟到了静态方法或者静态域进行首次引用时才执行。</p><pre><code class="Java">class Initable {  static final int staticFinal = 47;  static final int staticFinal2 =    ClassInitialization.rand.nextInt(1000);  static {    System.out.println(&quot;Initializing Initable&quot;);  }}class Initable2 {  static int staticNonFinal = 147;  static {    System.out.println(&quot;Initializing Initable2&quot;);  }}class Initable3 {  static int staticNonFinal = 74;  static {    System.out.println(&quot;Initializing Initable3&quot;);  }}public class ClassInitialization {  public static Random rand = new Random(47);  public static void main(String[] args) throws Exception {    Class initable = Initable.class;    System.out.println(&quot;After creating Initable ref&quot;);    // Does not trigger initialization:    System.out.println(Initable.staticFinal);    // Does trigger initialization:    System.out.println(Initable.staticFinal2);    // Does trigger initialization:    System.out.println(Initable2.staticNonFinal);    Class initable3 = Class.forName(&quot;Initable3&quot;);    System.out.println(&quot;After creating Initable3 ref&quot;);    System.out.println(Initable3.staticNonFinal);  }} /* Output:After creating Initable ref47Initializing Initable258Initializing Initable2147Initializing Initable3After creating Initable3 ref74*/</code></pre><p>3.instanceof</p><p>返回一个布尔值，判断对象是不是某个特定类型的实例。</p><pre><code class="Java">x instanceof Boy</code></pre><p>4.反射：运行时的类信息</p><p>反射机制是在运行状态中，<br>对于任意一个类，都能够知道这个类的所有属性和方法；<br>对于任意一个对象，都能够调用它的任意一个方法和属性；<br>这种动态获取的信息以及动态调用对象的方法的功能称为反射。</p><p>5.动态代理</p><p>代理是一本基本的设计模式；代理通常充当着中间人的角色。</p><h1 id="第15章-泛型"><a href="#第15章-泛型" class="headerlink" title="第15章 泛型"></a>第15章 泛型</h1><p>Java SE5 泛型实现了参数化类型的概念，使代码可以应用于多种类型。</p><p>泛型的出现，最引人注目的原因是为了创造容器类</p><p>一个只能持有单个对象的类：</p><pre><code class="Java">public class Holder {  private Automobile a;  public Holder(Automobile a) { this.a = a; }  Automobile get() { return a; }}</code></pre><p>显然，Holder 类的重用性很差，只能持有 Automobile 类对象。</p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><pre><code class="Java">public class Holder3&lt;T&gt; {  private T a;  public Holder3(T a) { this.a = a; }  public void set(T a) { this.a = a; }  public T get() { return a; }  public static void main(String[] args) {    Holder3&lt;Automobile&gt; h3 =      new Holder3&lt;Automobile&gt;(new Automobile());    Automobile a = h3.get(); // No cast needed    // h3.set(&quot;Not an Automobile&quot;); // Error    // h3.set(1); // Error  }}</code></pre><p>告诉编译器使用什么类型，然后编译器帮你处理一切细节。</p><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>泛型也可以应用于接口；例如生成器，这是一种专门负责创建对象的类。</p><p>生成器接口定义如下：</p><pre><code class="Java">public interface Generator&lt;T&gt; { T next(); }</code></pre><p>实现生成器接口</p><pre><code class="Java">public class CoffeeGeneratorimplements Generator&lt;Coffee&gt;, Iterable&lt;Coffee&gt; {  private Class[] types = { Latte.class, Mocha.class,    Cappuccino.class, Americano.class, Breve.class, };  private static Random rand = new Random(47);  public CoffeeGenerator() {}  // For iteration:  private int size = 0;  public CoffeeGenerator(int sz) { size = sz; }  public Coffee next() {    try {      return (Coffee)        types[rand.nextInt(types.length)].newInstance();      // Report programmer errors at run time:    } catch(Exception e) {      throw new RuntimeException(e);    }  }  class CoffeeIterator implements Iterator&lt;Coffee&gt; {    int count = size;    public boolean hasNext() { return count &gt; 0; }    public Coffee next() {      count--;      return CoffeeGenerator.this.next();    }    public void remove() { // Not implemented      throw new UnsupportedOperationException();    }  };  public Iterator&lt;Coffee&gt; iterator() {    return new CoffeeIterator();  }  public static void main(String[] args) {    CoffeeGenerator gen = new CoffeeGenerator();    for(int i = 0; i &lt; 5; i++)      System.out.println(gen.next());    for(Coffee c : new CoffeeGenerator(5))      System.out.println(c);  }} /* Output:Americano 0Latte 1Americano 2Mocha 3Mocha 4Breve 5Americano 6Latte 7Cappuccino 8Cappuccino 9*/</code></pre><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>一个基本指导原则：无论何时，只要你能做到，你就应该使用泛型方法。</p><pre><code class="Java">public class GenericMethods {  public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());  }  public static void main(String[] args) {    GenericMethods gm = new GenericMethods();    gm.f(&quot;&quot;);    gm.f(1);    gm.f(1.0);    gm.f(1.0F);    gm.f(&#39;c&#39;);    gm.f(gm);  }} /* Output:java.lang.Stringjava.lang.Integerjava.lang.Doublejava.lang.Floatjava.lang.CharacterGenericMethods*/</code></pre><p>泛型方法与可变参数列表能够很好地共存:</p><pre><code class="Java">public class GenericVarargs {  public static &lt;T&gt; List&lt;T&gt; makeList(T... args) {    List&lt;T&gt; result = new ArrayList&lt;T&gt;();    for(T item : args)      result.add(item);    return result;  }  public static void main(String[] args) {    List&lt;String&gt; ls = makeList(&quot;A&quot;);    System.out.println(ls);    ls = makeList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;);    System.out.println(ls);    ls = makeList(&quot;ABCDEFFHIJKLMNOPQRSTUVWXYZ&quot;.split(&quot;&quot;));    System.out.println(ls);  }} /* Output:[A][A, B, C][, A, B, C, D, E, F, F, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]*/</code></pre><blockquote><p>参考资料<br>1、《Java编程思想》读书笔记 第十四章 01 类型信息<br><a href="https://zhuanlan.zhihu.com/p/26081790" rel="external nofollow noopener noreferrer" target="_blank">https://zhuanlan.zhihu.com/p/26081790</a><br>2、《java编程思想》14章类型信息 读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/L2HL2H/article/details/51120480" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/L2HL2H/article/details/51120480</a><br>3、《Java编程思想》读书笔记 第十四章 02 反射<br><a href="https://zhuanlan.zhihu.com/p/26190300" rel="external nofollow noopener noreferrer" target="_blank">https://zhuanlan.zhihu.com/p/26190300</a><br>4、Java泛型详解 | ZiWenXie<br><a href="https://www.ziwenxie.site/2017/03/01/java-generic/" rel="external nofollow noopener noreferrer" target="_blank">https://www.ziwenxie.site/2017/03/01/java-generic/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 类型信息及泛型。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（六）</title>
    <link href="http://www.wshunli.com/posts/d3fc1ba0.html"/>
    <id>http://www.wshunli.com/posts/d3fc1ba0.html</id>
    <published>2017-12-04T12:22:17.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 字符串、数组及枚举类型。</p><a id="more"></a><h1 id="第13章-字符串"><a href="#第13章-字符串" class="headerlink" title="第13章 字符串"></a>第13章 字符串</h1><p>1.不可变的 String<br>String 对象是不可变的，每当修改 String 对象的时候，实际上都是创建了一个新的 String 对象，最初的 String 对象丝毫未动。</p><p>2.重载“+”与 StringBuilder<br>String 对象的不可变性带来一定的效率问题，例如为 String 对象重载的“+”操作符。（用于String的“+”、“+=”是 Java 中仅有的两个重载过的操作符，而 Java 并不允许程序员重载任何操作符）。</p><pre><code class="Java">public class WhitherStringBuilder {  public String implicit(String[] fields) {    String result = &quot;&quot;;    for(int i = 0; i &lt; fields.length; i++)      result += fields[i];    return result;  }  public String explicit(String[] fields) {    StringBuilder result = new StringBuilder();    for(int i = 0; i &lt; fields.length; i++)      result.append(fields[i]);    return result.toString();  }}</code></pre><p>StringBuilder 提供了丰富而全面的方法，包括 append(),toString(),delete(),insert(),replace(),substring() 甚至 reverse()。</p><p>3.String 上的操作</p><p><a href="http://www.cnblogs.com/freeabyss/archive/2013/05/15/3187057.html" rel="external nofollow noopener noreferrer" target="_blank">Java 字符串常用操作（String类）</a></p><p>String 是固定不变的，而 StringBuffer 和 StringBuilder 可以改变它们的值。<br>二者唯一的区别是 StringBuilder 是非同步的而 StringBuffer 是同步的。</p><p>4.格式化输出</p><p>Java SE5 推出了类似 C语言中 printf() 风格的格式化输出这一功能。</p><pre><code class="Java">public class SimpleFormat {  public static void main(String[] args) {    int x = 5;    double y = 5.332542;    // The old way:    System.out.println(&quot;Row 1: [&quot; + x + &quot; &quot; + y + &quot;]&quot;);    // The new way:    System.out.format(&quot;Row 1: [%d %f]\n&quot;, x, y);    // or    System.out.printf(&quot;Row 1: [%d %f]\n&quot;, x, y);  }}/* Output:Row 1: [5 5.332542]Row 1: [5 5.332542]Row 1: [5 5.332542]*/</code></pre><p>format() 和 printf() 是等价的。</p><p><strong>Formatter</strong> 看一看成一个翻译器，劲格式化字符串与数据翻译成需要的结果。</p><pre><code class="Java">private Formatter f = new Formatter(System.out);f.format(&quot;%s The Turtle is at (%d,%d)\n&quot;, name, x, y);</code></pre><p>5.正则表达式</p><p>6.扫描输入</p><p>Java SE5 新增了 Scanner 类接受任意类型的输入对象。</p><h1 id="第16章-数组"><a href="#第16章-数组" class="headerlink" title="第16章 数组"></a>第16章 数组</h1><h1 id="第19章-枚举类型"><a href="#第19章-枚举类型" class="headerlink" title="第19章 枚举类型"></a>第19章 枚举类型</h1><p>未完待续。。</p><blockquote><p>参考资料<br>1、读书笔记 JAVA编程思想 第13章 字符串 - CSDN博客<br><a href="http://blog.csdn.net/imaginedranges/article/details/73335553" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/imaginedranges/article/details/73335553</a><br>2、Java 字符串常用操作（String类） - 薛遗山 - 博客园<br><a href="http://www.cnblogs.com/freeabyss/archive/2013/05/15/3187057.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/freeabyss/archive/2013/05/15/3187057.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 字符串、数组及枚举类型。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（五）</title>
    <link href="http://www.wshunli.com/posts/b6f25079.html"/>
    <id>http://www.wshunli.com/posts/b6f25079.html</id>
    <published>2017-12-04T09:04:23.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 异常处理。</p><a id="more"></a><p>第12章 <strong>通过异常处理错误</strong></p><p>Java的基本理念是“结构不佳的代码不能运行”。</p><p><img src="https://img.wshunli.com/Java/Java编程思想/Java异常.png" alt="Java异常"></p><p>Java 中的异常处理都是围绕着 try-catch-finally, throw, throws 这几个展开的，也就是：</p><p>try-catch-finally：捕获异常并处理。<br>throw：遇到错误的时候抛出一个异常。<br>throws：声明一个方法可能抛出的异常（所有可能抛出的异常都需要声明）。</p><pre><code class="Java">class ThreeException extends Exception {}public class FinallyWorks {  static int count = 0;  public static void main(String[] args) {    while(true) {      try {        // Post-increment is zero first time:        if(count++ == 0) throw new ThreeException();        System.out.println(&quot;No exception&quot;);      } catch(ThreeException e) {        System.out.println(&quot;ThreeException&quot;);      } finally {        System.out.println(&quot;In finally clause&quot;);        if(count == 2) break; // out of &quot;while&quot;      }    }  }}/* Output:ThreeExceptionIn finally clauseNo exceptionIn finally clause*/</code></pre><p>throw 与 throws 的差别</p><p>throw 是语句抛出一个 Throwable 类型的异常，总是出现在函数体中；程序会在 throw 语句之后立即终止。</p><p>如果一个方法可能会出现异常，但没有能力处理这种异常，可以在方法声明处用 throws 子句来声明抛出异常；<br>throws 语句用在方法定义时声明该方法要抛出的异常类型，多个异常可使用逗号分割。</p><pre><code class="Java">f() throws Exception1, Exception2, Exception3, ... {    ...}</code></pre><p>例如：</p><pre><code class="Java">import java.lang.Exception;public class TestException {    public int div(int x, int y) throws MyException {        if (y == 0) {            throw new MyException(&quot;除数不能为0&quot;);        }        return (int)(x/y);    }    public static void main(String[] args) {        int x = 1;        int y = 0;        try {            int result = div(x, y);        } catch (MyException e) {            System.out.println(e.getMessage());        }    }}//自定义异常类class MyException extends Exception {    String message;    public MyException(String ErrorMessage) {        message = ErrorMessage;    }    public String getMessage() {        return message;    }}</code></pre><blockquote><p>参考资料<br>1、《Java编程思想》读书笔记 第十二章 通过异常处理<br><a href="https://zhuanlan.zhihu.com/p/25935822" rel="external nofollow noopener noreferrer" target="_blank">https://zhuanlan.zhihu.com/p/25935822</a><br>2、Java编程思想第四版读书笔记——第十二章 通过异常处理错误 - CSDN博客<br><a href="http://blog.csdn.net/severusyue/article/details/51780879" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/severusyue/article/details/51780879</a><br>3、Java 异常处理<br><a href="https://zhuanlan.zhihu.com/p/24043941" rel="external nofollow noopener noreferrer" target="_blank">https://zhuanlan.zhihu.com/p/24043941</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 异常处理。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（四）</title>
    <link href="http://www.wshunli.com/posts/d96c953e.html"/>
    <id>http://www.wshunli.com/posts/d96c953e.html</id>
    <published>2017-12-03T11:07:09.000Z</published>
    <updated>2018-01-23T15:17:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 集合。</p><a id="more"></a><p>这部分只是还是挺重要的，面试题里面有好多。</p><p>第11章 <strong>持有对象</strong></p><p>Java 容器类提供了完善的方法保存对象，并经其划分为 <strong>Collection</strong> 和 <strong>Map</strong> 两个不同的概念。</p><p><img src="https://img.wshunli.com/Java/Java编程思想/Java容器.png" alt="Java容器"></p><p><strong>Collection</strong> 一个独立的元素序列；<strong>Map</strong> 一组成对的“键值对”对象。</p><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>1.<strong>Collection</strong> 一个独立的元素序列，这些元素服从一条或者多条规则。</p><p>List 必须按照插入的顺序保存元素，而 Set 不能有重复的元素。<br>Queue 按照排队规则来确定对象产生的顺序。</p><pre><code class="java">public class SimpleCollection {  public static void main(String[] args) {    Collection&lt;Integer&gt; c = new ArrayList&lt;Integer&gt;();    for(int i = 0; i &lt; 10; i++)      c.add(i); // Autoboxing    for(Integer i : c)      System.out.print(i + &quot;, &quot;);  }}/* Output:0, 1, 2, 3, 4, 5, 6, 7, 8, 9,*/</code></pre><p>2.Arrays 和 Collections 类有很多实用的方法，可以在 Collection 中添加一组元素。</p><pre><code class="Java">public class AddingGroups {  public static void main(String[] args) {    Collection&lt;Integer&gt; collection =      new ArrayList&lt;Integer&gt;(Arrays.asList(1, 2, 3, 4, 5));    Integer[] moreInts = { 6, 7, 8, 9, 10 };    collection.addAll(Arrays.asList(moreInts));    // Runs significantly faster, but you can&#39;t    // construct a Collection this way:    Collections.addAll(collection, 11, 12, 13, 14, 15);    Collections.addAll(collection, moreInts);    // Produces a list &quot;backed by&quot; an array:    List&lt;Integer&gt; list = Arrays.asList(16, 17, 18, 19, 20);    list.set(1, 99); // OK -- modify an element    // list.add(21); // Runtime error because the                     // underlying array cannot be resized.  }}</code></pre><p>Arrays.asList() 接受一个数组或者可变参数列表，并将之转换为 List 对象。<br>需要注意的是，此种方式获得的 List 对象，由于底层实现仍然是数组，在添加或者删除元素时会出现 UnsupportedOperationException 异常。</p><p>Collections.addAll() 接收一个 Collection 对象、一个数组或者是可变参数列表作为参数，得到新的 Collection 对象。</p><p>3.容器的打印</p><pre><code class="Java">public class PrintingContainers {  static Collection fill(Collection&lt;String&gt; collection) {    collection.add(&quot;rat&quot;);    collection.add(&quot;cat&quot;);    collection.add(&quot;dog&quot;);    collection.add(&quot;dog&quot;);    return collection;  }  static Map fill(Map&lt;String,String&gt; map) {    map.put(&quot;rat&quot;, &quot;Fuzzy&quot;);    map.put(&quot;cat&quot;, &quot;Rags&quot;);    map.put(&quot;dog&quot;, &quot;Bosco&quot;);    map.put(&quot;dog&quot;, &quot;Spot&quot;);    return map;  }      public static void main(String[] args) {    print(fill(new ArrayList&lt;String&gt;()));    print(fill(new LinkedList&lt;String&gt;()));    print(fill(new HashSet&lt;String&gt;()));    print(fill(new TreeSet&lt;String&gt;()));    print(fill(new LinkedHashSet&lt;String&gt;()));    print(fill(new HashMap&lt;String,String&gt;()));    print(fill(new TreeMap&lt;String,String&gt;()));    print(fill(new LinkedHashMap&lt;String,String&gt;()));  }}/* Output:[rat, cat, dog, dog][rat, cat, dog, dog][dog, cat, rat][cat, dog, rat][rat, cat, dog]{dog=Spot, cat=Rags, rat=Fuzzy}{cat=Rags, dog=Spot, rat=Fuzzy}{rat=Fuzzy, cat=Rags, dog=Spot}*/</code></pre><p>Collection 打印出来的内容用 [ ] 括住，Map 打印出来的内容用 { } 括住。</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List 接口在 Collection 基础上添加了大量的方法。可分为 ArrayList 和 LinkedList 两种。</p><p><strong>ArrayList</strong> 数据结构采用的是线性表，优势是访问和查询十分方便，但添加和删除的时候效率很低。<br><strong>LinkedList</strong> 数据结构采用的是链表，优势是删除和添加的效率很高，但随机访问元素时效率较 ArrayList 类低。</p><p>List 重要价值在于提供了一种可修改的序列。</p><p>contains(Object o) 确定某个对象是否在列表中。<br>remove(int index) 移除指定位置上的元素。<br>indexOf() 返回列表中首次出现指定元素的索引，如果不包含该元素，返回-1。</p><p>LikedList 增加了可以使其用作栈、队列或双端队列的方法。</p><pre><code class="Java">public class Stack&lt;T&gt; {    private LinkedList&lt;T&gt; storage = new LinkedList&lt;&gt;();    public void push(T v){        storage.addFirst(v);    }    public T peek(){        return storage.getFirst();    }    public T pop(){        return storage.removeFirst();    }    public boolean empty(){        return storage.isEmpty();    }    public String toString(){        return storage.toString();    }}</code></pre><p>LikedList 具有直接实现栈（LIFO）的所有功能的方法。</p><p>addFirst(E e)/addLast(E e)：将元素添加到列表的开头/结尾<br>getFirst()/element()：返回列表的第一个元素<br>peek()/peekFirst()：获取但不移除列表的第一个元素<br>offer(E e)/offerLast(E e)：将元素插入到列表末尾</p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>队列是典型的先进先出（FIFO）的容器。</p><pre><code class="Java">public class QueueDemo {    public static void printQ(Queue queue) {  while(queue.peek() != null)      System.out.print(queue.remove() + &quot; &quot;);  System.out.println();    }    public static void main(String[] args) {  Queue&lt;Integer&gt; queue = new LinkedList&lt;Integer&gt;();  Random random = new Random(47);  for(int i = 0; i &lt; 10; i++)      queue.offer(random.nextInt(i+10));  printQ(queue);  Queue&lt;Character&gt; qCharacters = new LinkedList&lt;Character&gt;();  for(char c : &quot;Brontosaurus&quot;.toCharArray())      qCharacters.offer(c);  printQ(qCharacters);    }}/* Output: 8 1 1 1 5 14 3 1 0 1 B r o n t o s a u r u s*/</code></pre><p>LinkedList 提供了方法以支持队列的行为，并且它实现了 Queue 接口，<br>因此 LinkedList 可以用作 Queue 的一种实现，也可以将 LinkedList 向上转型为 Queue 。</p><p><strong>PriorityQueue</strong> 优先级队列声明下一个弹出的元素是最需要的元素(具有最高的优先级)，可以确保当调用 peek()、poll() 和 remove() 方法时，获取的元素将是队列中优先级最高的元素。</p><pre><code class="java">PriorityQueue priorityQueue = new PriorityQueue&lt;Integer&gt;(  inis.size(),Collections.reverseOrder());</code></pre><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set 具有与 Collection 完全一样的接口，实际上就是 Collection ，只是行为不同。</p><p><strong>HashSet</strong> 数据结构采用的是散列表，主要是设计用来做高性能集运算的，例如对两个集合求交集、并集、差集等。<br>集合中包含一组不重复出现且无特性顺序的元素，其值是不可重复与无序的。</p><p>LinkedHashSet 的核心概念相对于 HashSet 来说就是一个可以保持顺序的Set集合。</p><p><strong>TreeSet</strong> 数据结构使用的是红黑树，性能上低于HashSet，用于排序。</p><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>Map：一组成对的“键值对”对象，允许使用键来查找值；<br>映射表允许我们使用另一个对象来查找某个对象，它被称为“关联数组”，因为它将某些对象与另外一些对象关联在了一起，或者被称为“字典”</p><pre><code class="Java">Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();</code></pre><p>get(Object o)：返回指定键所映射的值，如果不包含该键的映射关系，返回 null 。<br>put(K key, V value)：将指定的值与此映射中的指定键关联，如果已经存在映射关系，更新值。<br>hashCode()：返回此映射的哈希码值。</p><h2 id="Map-的三种实现"><a href="#Map-的三种实现" class="headerlink" title="Map 的三种实现"></a>Map 的三种实现</h2><p>HashMap：基于“拉链法”实现的散列表，一般用于单线程中，不是线程安全的。<br>HashTable：基于“拉链法”实现的散列表，一般用于多线程中，是线程安全的。<br>TreeMap：有序的散列表，通过红黑树实现的，一般用于单线程中存储有序的映射。</p><h1 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h1><p>迭代器，用于遍历容器，JDK源码如下：</p><pre><code class="Java">package java.util;import java.util.function.Consumer;public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>Java 的 Iterator 只能单向移动：</p><pre><code class="Java">public class SimpleIteration {  public static void main(String[] args) {    List&lt;Pet&gt; pets = Pets.arrayList(12);    Iterator&lt;Pet&gt; it = pets.iterator();    while(it.hasNext()) {      Pet p = it.next();      System.out.print(p.id() + &quot;:&quot; + p + &quot; &quot;);    }    System.out.println();    // A simpler approach, when possible:    for(Pet p : pets)      System.out.print(p.id() + &quot;:&quot; + p + &quot; &quot;);    System.out.println();        // An Iterator can also remove elements:    it = pets.iterator();    for(int i = 0; i &lt; 6; i++) {      it.next();      it.remove();    }    System.out.println(pets);  }}/* Output:0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 8:Cymric 9:Rat 10:EgyptianMau 11:Hamster0:Rat 1:Manx 2:Cymric 3:Mutt 4:Pug 5:Cymric 6:Pug 7:Manx 8:Cymric 9:Rat 10:EgyptianMau 11:Hamster[Pug, Manx, Cymric, Rat, EgyptianMau, Hamster]*/</code></pre><p>Iterator() 要求容器返回一个Iterator。Iterator 准备好返回序列的第一个元素。<br>next() 获得序列中的下一个元素。<br>hasNext() 检查序列中是否还有元素。<br>remove() 将迭代器新近返回的元素删除。</p><h2 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h2><p>ListIterator 是 Iterator 的一个子类，只能用于各种List的访问。<br>ListIterator 可以双向移动，可以产生当前位置的前一个和后一个元素的索引，并且可以使用 set() 方法，将最近访问过的元素进行替换。<br>此外，还可以通过 listIterator(int index) 的方法，获得一个一开始就指向 index 位置的 ListIterator。</p><h1 id="Foreach-与迭代器"><a href="#Foreach-与迭代器" class="headerlink" title="Foreach 与迭代器"></a>Foreach 与迭代器</h1><p>foreach 语法主要用于数组，同样可以用于 Collection 对象。</p><pre><code class="Java">public class ForEachCollections {  public static void main(String[] args) {    Collection&lt;String&gt; cs = new LinkedList&lt;String&gt;();    Collections.addAll(cs,      &quot;Take the long way home&quot;.split(&quot; &quot;));    for(String s : cs)      System.out.print(&quot;&#39;&quot; + s + &quot;&#39; &quot;);  }}/* Output:&#39;Take&#39; &#39;the&#39; &#39;long&#39; &#39;way&#39; &#39;home&#39;*/</code></pre><p>因为 java SE5 引入了 Iterable 接口，该接口包含产生 Iterator 的 iterator 方法，<br>并且 Iterable 接口被 foreach 用来造序列中移动。</p><blockquote><p>参考资料<br>1、Java 容器知识整理 - FullStackDeveloper - SegmentFault<br><a href="https://segmentfault.com/a/1190000002903035" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000002903035</a><br>2、Java编程思想读书笔记——持有对象 - CSDN博客<br><a href="http://blog.csdn.net/baidu_21088863/article/details/78175347" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/baidu_21088863/article/details/78175347</a><br>3、Java编程思想第四版读书笔记——第十一章 持有对象 - CSDN博客<br><a href="http://blog.csdn.net/severusyue/article/details/49491441" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/severusyue/article/details/49491441</a><br>4、深入Java源码解析容器类List、Set、Map - 简书<br><a href="http://www.jianshu.com/p/047e33fdefd2" rel="external nofollow noopener noreferrer" target="_blank">http://www.jianshu.com/p/047e33fdefd2</a><br>5、《Java编程思想》读书笔记 第十一章 持有对象 02 Map<br><a href="https://zhuanlan.zhihu.com/p/25816448" rel="external nofollow noopener noreferrer" target="_blank">https://zhuanlan.zhihu.com/p/25816448</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 集合。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
</feed>
