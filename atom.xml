<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-05-15T15:07:39.492Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录2018年春季中国银联实习生面试</title>
    <link href="https://www.wshunli.com/posts/60f1f107.html"/>
    <id>https://www.wshunli.com/posts/60f1f107.html</id>
    <published>2018-05-14T06:24:49.000Z</published>
    <updated>2018-05-15T15:07:39.492Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（unionpay）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（unionpay）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春中国银联暑期实习生面试（系统与应用开发）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>我本将心向明月，奈何明月照沟渠</title>
    <link href="https://www.wshunli.com/posts/2739df62.html"/>
    <id>https://www.wshunli.com/posts/2739df62.html</id>
    <published>2018-05-08T06:06:23.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<p>我本将心向明月，奈何明月照沟渠，<br>落花有意随流水，流水无心恋落花。</p><a id="more"></a><p>简历初筛未通过，笔试机会都没有。</p><p>滴，好人卡。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我本将心向明月，奈何明月照沟渠，&lt;br&gt;落花有意随流水，流水无心恋落花。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《Java多线程编程核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/4e70966b.html"/>
    <id>https://www.wshunli.com/posts/4e70966b.html</id>
    <published>2018-05-05T14:47:09.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<p>前面面试什么的多线程部分问的比较多，需要加强下<a id="more"></a> ，这里记录总结 《Java多线程编程核心技术》 读书情况。</p><h1 id="第一章-Java-多线程技能"><a href="#第一章-Java-多线程技能" class="headerlink" title="第一章 Java 多线程技能"></a>第一章 Java 多线程技能</h1><p>本章主要介绍了线程概念、核心方法以及优先级。</p><p>1、进程和线程的区别</p><p><strong>进程</strong>是受操作系统管理的基本运行单元，是系统进行资源分配和调度的独立单位。<br><strong>线程</strong>是在进程中独立运行的子任务，CPU 在这些任务之间不停地切换，各子任务共享程序的内存空间。</p><p>线程和进程的区别是什么？ - 知乎：<br><a href="https://www.zhihu.com/question/25532384" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/25532384</a></p><p>2、线程的创建</p><p>（1）继承 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.html" rel="external nofollow noopener noreferrer" target="_blank">Thread</a> 类</p><p>（2）实现 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Runnable.html" rel="external nofollow noopener noreferrer" target="_blank">Runnable</a> 接口</p><p>其中 Thread 类实现了 Runable 接口，都需要重写里面 run 方法。</p><p>两种方式的区别：</p><p>实现 Runnable 的类更具有健壮性，避免了单继承的局限。<br>Runnable 更容易实现资源共享，能多个线程同时处理一个资源。</p><p>Java中 Thread和Runnable实现多线程的区别和联系 - CSDN博客:<br><a href="https://blog.csdn.net/oxuanboy1/article/details/51733279" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/oxuanboy1/article/details/51733279</a></p><p><strong>非线程安全</strong> 主要是指多个线程对同一对象中的同一变量实例进行操作时会出现值被修改、值不同步的现象。</p><p>3、线程的启动和停止</p><p>线程的启动可以使用 start() 或者 run() 方法，</p><p>调用 start() 方法，虚拟机会创建新的线程运行 run 方法；<br>调用 run() 方法后，会在调用的线程执行，不会创建新的线程。</p><p>线程的终止方法有三种：</p><p>（1）使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。<br>（2）使用 stop() 方法强行终止线程（这个方法不推荐使用，因为 stop() 和 suspend()、resume() 一样，也可能发生不可预料的结果）。<br>（3）使用 interrupt() 方法中断线程。</p><p>下面介绍了 interrupt() 方法停止线程，调用该方法知识在当前线程中打了一个停止的标记，并不是真的停止线程。</p><p>如何判断线程的状态是不是停止的：</p><p>（1）this.interrupted() 测试 <strong>当前线程</strong> 是否已经中断，会将状态标志置清为 false 。</p><pre><code class="Java">public static boolean interrupted() {}</code></pre><p>（2）this.isInterrupted() 测试线程是否已经中断，不清除状态标志。</p><pre><code class="Java">public boolean isInterrupted() {}</code></pre><p>Java并发（基础知识）—— 创建、运行以及停止一个线程 - Tim-Tom - 博客园：<br><a href="https://www.cnblogs.com/timlearn/p/4007982.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/timlearn/p/4007982.html</a></p><p>其他方法 stop()、suspend()、resume() 不推荐使用。</p><p>4、线程的主要方法</p><p>Thread.currentThread() 返回代码段正在被哪个线程调用的信息。</p><p>isAlive() 判断当前线程是否处于活动状态，即线程已经启动但尚未终止。</p><pre><code class="Java">package com.wshunli.thread;public class CountOperate extends Thread{    public CountOperate(){        System.out.println(&quot;CountOperate---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName()=&quot; + Thread.currentThread().getName());//获取线程名        System.out.println(&quot;Thread.currentThread().isAlive()=&quot; + Thread.currentThread().isAlive()); //查看线程是否存活        System.out.println(&quot;this.getName=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;CountOperate---end &quot;);        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));    }    @Override    public void run() {        System.out.println(&quot;run---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName=&quot; + Thread.currentThread().getName());        System.out.println(&quot;Thread.currentThread().isAlive()&quot; + Thread.currentThread().isAlive());        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));        System.out.println(&quot;this.getName()=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;run --- end&quot;);    }}package com.wshunli.thread;public class Main {    public static void main(String[] args) {        CountOperate c = new CountOperate();//        c.start();        Thread t1 = new Thread(c);        System.out.println(&quot;main begin t1 isAlive=&quot; + t1.isAlive());        t1.setName(&quot;A&quot;);        t1.start();        System.out.println(&quot;main end t1 isAlive=&quot; + t1.isAlive());    }}/* * CountOperate---begin * Thread.currentThread().getName()=main * Thread.currentThread().isAlive()=true * this.getName=Thread-0 * this.isAlive()=false * CountOperate---end * Thread.currentThread()==this :false * main begin t1 isAlive=false * main end t1 isAlive=true * run---begin * Thread.currentThread().getName=A * Thread.currentThread().isAlive()true * Thread.currentThread()==this :false * this.getName()=Thread-0 * this.isAlive()=false * run --- end */</code></pre><p>Thread.sleep() 方法是在指定的毫秒数内让“当前正在执行的线程”休眠（暂停执行）。</p><p>yield() 放弃当前 CPU 资源，将它让给其他任务占用 CPU 时间。</p><p>5、线程的优先级</p><p>在 Java 中线程的优先级分为 1 ~ 10 这 10 个等级，可以使用 setPriority​(int newPriority) 方法设置。</p><p>优先级较高的线程得到的 CPU 资源较多，CPU 会尽量优先执行，并不一定先执行完。</p><p>线程的优先级具有继承性。</p><p>6、守护线程</p><p>在 java 中线程有两种：用户线程、守护线程。</p><p>守护线程的作用是为其他线程提供便利服务，当进程中不存在非守护线程了，守护线程会自动销毁。</p><p>守护线程最典型的应用就是 GC （垃圾回收器）。</p><h1 id="第二章-对象及变量的并发访问"><a href="#第二章-对象及变量的并发访问" class="headerlink" title="第二章 对象及变量的并发访问"></a>第二章 对象及变量的并发访问</h1><h2 id="synchronized-同步方法"><a href="#synchronized-同步方法" class="headerlink" title="synchronized 同步方法"></a>synchronized 同步方法</h2><p>（1）方法内的变量线程安全，而 <strong>实例变量</strong> 非线程安全。</p><p>（2）多个对象多个锁</p><p>关键字 synchronized 取得的锁都是对象锁，而不是把方法或者代码段当作锁。</p><pre><code class="Java">class HasSelfPrivateNum {    public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class ThreadA extends Thread {    private HasSelfPrivateNum numRef;    public ThreadA(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;a&quot;);    }}class ThreadB extends Thread {    private HasSelfPrivateNum numRef;    public ThreadB(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;b&quot;);    }}class Main {    public static void main(String[] args) {        HasSelfPrivateNum numRef = new HasSelfPrivateNum();        ThreadA athread = new ThreadA(numRef);        athread.start();        ThreadB bthread = new ThreadB(numRef);        bthread.start();    }}/* * a set over! * b set over! * b num=200 * a num=100 */</code></pre><p>对于多个对象实例，会有多个对象锁，所以还是异步的、互不影响。</p><p>（3）synchronized 方法与对象锁</p><p>调用 synchronized 声明的方法是排队同步执行的。</p><p>把 HasSelfPrivateNum 类的 addI() 方法添加 synchronized 关键字，输出就变为：</p><pre><code class="java">class HasSelfPrivateNum {    synchronized public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * a set over! * a num=100 * b set over! * b num=200 */</code></pre><p>上面多个线程调用同一方法，下面再看调用 <strong>不同方法</strong> 的情况。</p><pre><code class="java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyObject object;    public ThreadA(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodA();    }}class ThreadB extends Thread {    private MyObject object;    public ThreadB(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodB();    }}public class Main {    public static void main(String[] args) {        MyObject object = new MyObject();        ThreadA a = new ThreadA(object);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(object);        b.setName(&quot;B&quot;);        a.start();        b.start();    }}/* * begin methodA threadName=A * end endTime=1526043906998 * begin methodB threadName=B begin time=1526043906998 * end */</code></pre><p>修改下 methodB() 方法，去除 synchronized 关键字。</p><pre><code class="Java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * begin methodA threadName=A * begin methodB threadName=B begin time=1526044084533 * end * end endTime=1526044089534 */</code></pre><p>由此可见：</p><p>A 线程先持有 object 对象锁，B 线程可以以异步方式调用 object 对象中的 <strong>非 synchronized 类型</strong> 的方法。<br>A 线程先持有 object 对象锁，B 线程如果在这时调用 object 对中的 <strong>synchronized 类型</strong> 的方法则需等待，也就是同步。</p><p>（4）脏读</p><p>脏读（dirtyRead）即赋值时进行了同步，但在取值时已经被其他线程修改过了。</p><p>跟上例类似，在方法上加 synchronized 关键字可以解决脏读问题。</p><p>（5）synchronized 锁重入</p><p>synchronized 具有锁重入功能，也就说当一个线程获得对象锁之后，再次请求此对象锁可以再次得到该对象的锁。</p><pre><code class="Java">public class Service {    synchronized public void service1() {        System.out.println(&quot;service1&quot;);        service2();    }    synchronized public void service2() {        System.out.println(&quot;service2&quot;);        service3();    }    synchronized public void service3() {        System.out.println(&quot;service3&quot;);    }}</code></pre><p>可重入锁的概念：自己可以再次获取自己的内部锁。假如说不可锁重入的话，线程一直等待释放对象锁，而对象锁自己拥有，就会造成死锁。</p><p><strong>可重入锁</strong> 也支持在父子类继承的环境中，即子类可以通过重入锁调用父类的同步方法。</p><p>（6）当线程执行的代码出现异常时，其所持有的锁会自动释放。</p><p>（7）同步不可以继承。</p><pre><code class="Java">class Super {    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int main 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int main 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class Sub extends Super {    @Override    public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class MyThreadA extends Thread {    private Sub sub;    public MyThreadA(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}class MyThreadB extends Thread {    private Sub sub;    public MyThreadB(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}public class Main {    public static void main(String[] args) {        Sub subRef = new Sub();        MyThreadA a = new MyThreadA(subRef);        a.setName(&quot;A&quot;);        a.start();        MyThreadB b = new MyThreadB(subRef);        b.setName(&quot;B&quot;);        b.start();    }}/* * int sub 下一步 sleep begin threadName=A time=1526046246540 * int sub 下一步 sleep begin threadName=B time=1526046246540 * int sub 下一步 sleep   end threadName=A time=1526046251541 * int sub 下一步 sleep   end threadName=B time=1526046251541 * int main 下一步 sleep begin threadName=A time=1526046251541 * int main 下一步 sleep   end threadName=A time=1526046256541 * int main 下一步 sleep begin threadName=B time=1526046256541 * int main 下一步 sleep   end threadName=B time=1526046261542 */</code></pre><p>子类方法添加 synchronized 关键字。</p><pre><code class="Java">class Sub extends Super {    @Override    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * int sub 下一步 sleep begin threadName=A time=1526046197787 * int sub 下一步 sleep   end threadName=A time=1526046202787 * int main 下一步 sleep begin threadName=A time=1526046202787 * int main 下一步 sleep   end threadName=A time=1526046207788 * int sub 下一步 sleep begin threadName=B time=1526046207788 * int sub 下一步 sleep   end threadName=B time=1526046212789 * int main 下一步 sleep begin threadName=B time=1526046212789 * int main 下一步 sleep   end threadName=B time=1526046217790 */</code></pre><p>由此可见：重写父类的同步方法并不能同步，还是要加 synchronized 关键字才行。</p><h2 id="synchronized-同步语句块"><a href="#synchronized-同步语句块" class="headerlink" title="synchronized 同步语句块"></a>synchronized 同步语句块</h2><p>（1）synchronized 同步语句块的使用</p><p>当两个线程同时访问同一对象 object 中的 synchronized (this) 同步代码块时，一段时间内只能有一个线程被执行，另一个线程要等这个线程执行完以后才能执行。</p><p>（2）用同步代码块解决同步方法的弊端</p><p>同步方法的弊端是有时候执行时间会比较长。</p><pre><code class="Java">// 使用同步方法public class Task {    private String getData1;    private String getData2;    public synchronized void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            getData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            getData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}// 使用同步代码块public class Task {    private String getData1;    private String getData2;    public void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            String privateGetData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            String privateGetData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            synchronized (this) {                getData1 = privateGetData1;                getData2 = privateGetData2;            }            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>其实也就是在耗时部分是异步执行的，从而缩短了代码的执行时长。</p><p>当一个线程访问 同步代码块 时，另一个线程仍然可以访问该对象的非同步代码块。即在 synchronized 块中就是同步执行，不在 synchronized 块中时异步执行。</p><p>（3）synchronized 代码块之间的同步性</p><p>在使用 synchronized (this) 代码块时，当线程访问 object 的一个 synchronized (this) 代码块时，其他线程对同一 object 中所有 synchronized (this) 同步代码块的访问将阻塞。</p><p>和 synchronized 方法一样，synchronized (this) 代码块也是锁定 <strong>当前对象</strong> 的。其他对象访问同一 object 中的 synchronized 方法也会阻塞。</p><p>（4）将任意对象作为对象监视器</p><p>多个线程调用同一个对象中的不同名称的 synchronized 同步方法或 synchronized(this) 同步代码块时，调用的效果就是按顺序执行，也就是 <strong>同步的，阻塞的</strong> 。</p><p>这说明 synchronized 同步方法或 synchronized(this) 同步代码块分别有 <strong>两种作用</strong> ：</p><ul><li>synchronized 同步 <strong>方法</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized 同步方法中的代码。</li></ul></li><li>synchronized(this) 同步 <strong>代码块</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized(this) 同步代码块中的代码。</li></ul></li></ul><p>类似，对于 synchronized(非this对象) 同步代码块：</p><p>当多个线程持有 “对象监视器” 为同一个对象的前提下，同一时间只有一个线程可以执行 synchronized(非this对象x) 同步代码块中的代码。</p><pre><code class="java">public class Service {    private String usernameParam;    private String passwordParam;    public void setUsernamePassword(String username, String password) {        try {            String anyString = new String();            synchronized (anyString) {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入同步块&quot;);                usernameParam = username;                Thread.sleep(3000);                passwordParam = password;                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开同步块&quot;);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>而多个线程持有的 “对象监视器” 不是同一对象时，还是异步执行的。</p><pre><code class="Java">public class Service {    private String anyString = new String();    public void a() {        try {            synchronized (anyString) {                System.out.println(&quot;a begin&quot;);                Thread.sleep(3000);                System.out.println(&quot;a   end&quot;);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void b() {        System.out.println(&quot;b begin&quot;);        System.out.println(&quot;b   end&quot;);    }}</code></pre><p>站在多个线程角度，多个线程调用同一方法先后顺序是随机的，只是对于单个线程而言，在同步方法/代码块内部是同步的。</p><p>（5）静态 synchronized 方法与 synchronized(class) 代码块</p><p>对于静态的 synchronized 方法，是对当前 Class 类进行封锁。<br>对于非静态 synchronized 方法，是对当前 对象 的封锁。</p><p>二者是不同的锁，但是 Class 锁可以对所有对象实例起作用。</p><pre><code class="Java">package com.wshunli.thread.sync5;class Service {    synchronized public static void printA() {        try {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);            Thread.sleep(3000);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public static void printB() {        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;进入printB&quot;);        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;离开printB&quot;);    }}class ThreadA extends Thread {    private Service service;    public ThreadA(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printA();    }}class ThreadB extends Thread {    private Service service;    public ThreadB(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printB();    }}public class Main {    public static void main(String[] args) {        Service service1 = new Service();        Service service2 = new Service();        ThreadA a = new ThreadA(service1);        a.setName(&quot;A&quot;);        a.start();        ThreadB b = new ThreadB(service2);        b.setName(&quot;B&quot;);        b.start();    }}/* * 线程名称为：A在1526136864655进入printA * 线程名称为：A在1526136867656离开printA * 线程名称为：B在1526136867656进入printB * 线程名称为：B在1526136867656离开printB */</code></pre><p>同步 synchronized(class) 代码块的作用其实和 synchronized static 方法的作用一样。</p><pre><code class="Java">class Service {    public static void printA() {        synchronized (Service.class) {            try {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);                Thread.sleep(3000);                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public static void printB() {        synchronized (Service.class) {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printB&quot;);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printB&quot;);        }    }}/* * 线程名称为：A在1526137124491进入printA * 线程名称为：A在1526137127492离开printA * 线程名称为：B在1526137127492进入printB * 线程名称为：B在1526137127492离开printB */</code></pre><p>（6）数据类型 String 的常量池特性</p><p>对于 synchronized(<strong>string</strong>) 同步块，string 值为相同 String 常量时，两个线程持有相同的锁。</p><p>所以在大多数情况下，synchronized 代码块不使用 String 作为锁对象。</p><p>（7）多线程的死锁</p><p>不同的线程都在等待根本不可能释放的锁，从而导致所有任务都无法继续完成。</p><p>线程互相持有对方的锁，然后等待对方释放锁就有可能出现死锁。</p><p>（8）内置类与静态内置类</p><p>对于内置类中有两个同步方法，只要是使用不同的锁，多线程还是异步的。</p><p>对于两个内置类 class1 class2 ，class1 中使用 synchronized(<strong>class2</strong>) 同步代码块时，其他线程只能以同步方式调用 class2 中的 synchronized 同步方法</p><p>（9）锁对象的改变</p><p>再将任何数据作为同步锁时，只需判断多线程是否同时持有相同的锁对象即可。</p><pre><code class="Java">class MyService {    private String lock = &quot;123&quot;;    public void testMethod() {        try {            synchronized (lock) {                System.out.println(Thread.currentThread().getName() + &quot; begin &quot;                        + System.currentTimeMillis());                lock = &quot;456&quot;;                Thread.sleep(2000);                System.out.println(Thread.currentThread().getName() + &quot;   end &quot;                        + System.currentTimeMillis());            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyService service;    public ThreadA(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.testMethod();    }}class ThreadB extends Thread {    private MyService service;    public ThreadB(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.testMethod();    }}public class Main {    public static void main(String[] args) throws InterruptedException {        MyService service = new MyService();        ThreadA a = new ThreadA(service);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(service);        b.setName(&quot;B&quot;);        a.start();        Thread.sleep(50);        b.start();    }}/* * A begin 1526217990101 * B begin 1526217990151 * A   end 1526217992101 * B   end 1526217992151 */</code></pre><p>运行到线程 B 时，对象锁已经改变，所以是异步。</p><p>但是对于对象而言，只是改变对象的属性时不行的，运行结果还是同步的。</p><h2 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h2><p>关键字 volatile 的主要作用是使变量在多个线程间可见。</p><p>（1）关键字 volatile 与死循环</p><pre><code class="Java">class PrintString {    private boolean isContinuePrint = true;    public boolean isContinuePrint() {        return isContinuePrint;    }    public void setContinuePrint(boolean isContinuePrint) {        this.isContinuePrint = isContinuePrint;    }    public void printStringMethod() {        try {            while (isContinuePrint == true) {                System.out.println(&quot;run printStringMethod threadName=&quot;                        + Thread.currentThread().getName());                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        PrintString printStringService = new PrintString();        printStringService.printStringMethod();        System.out.println(&quot;我要停止它！ stopThread=&quot;                + Thread.currentThread().getName());        printStringService.setContinuePrint(false);    }}</code></pre><p>这个程序停不下来，主要原因是 main 线程一直在处理 while() 循环，导致程序不能继续执行。</p><p>我们可以使用多线程技术解决这个问题，在子线程中执行 while() 循环，这样主线程就能继续执行了。</p><pre><code class="Java">class PrintString implements Runnable {    private boolean isContinuePrint = true;    public boolean isContinuePrint() {        return isContinuePrint;    }    public void setContinuePrint(boolean isContinuePrint) {        this.isContinuePrint = isContinuePrint;    }    public void printStringMethod() {        try {            while (isContinuePrint == true) {                System.out.println(&quot;run printStringMethod threadName=&quot;                        + Thread.currentThread().getName());                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    @Override    public void run() {        printStringMethod();    }}public class Run {    public static void main(String[] args) {        PrintString printStringService = new PrintString();        new Thread(printStringService).start();        System.out.println(&quot;我要停止它！ stopThread=&quot;                + Thread.currentThread().getName());        printStringService.setContinuePrint(false);    }}</code></pre><p>但是这种在 <code>-server</code> 服务器模式下，还是会出现死循环。<br>主要是因为在服务器模式下，为了提高线程运行的效率，线程一致在私有堆栈中取得 <code>isContinuePrint</code> 的值为 true 。</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/内存结构.png" alt="内存结构"></p><p>volatile 关键字增加了实例变量在多个线程之间的可见性，但不支持原子性。</p><p>也就是说同步私有堆栈中的值和公共堆栈中的值，强制从公共堆栈中进行取值，或者强制将值写入公共堆栈。</p><p><strong>synchronized 和 volatile 的比较</strong>：</p><p>1、关键字 volatile 是线程同步的轻量级实现，所以 volatile 性能肯定比 synchronized 要好，并且 volatile 只能修饰变量，而 synchronized 可以修饰方法和代码块。目前在开发中使用 synchronized 关键字的比率还是比较大的。<br>2、多线程访问 volatile 不会发生阻塞，而 synchronized 会出现阻塞。<br>3、volatile 能保证数据的可见性，但是不能保证原子性；而 synchronized 可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公有内存中的数据同步。<br>4、volatile 关键字是解决变量在多个线程之间的可见性；而 synchronized 关键字是解决多个线程之间访问资源同步性的。</p><p>所谓的线程安全包含 <strong>原子性和可见性</strong> 两个方面，Java 的同步机制都是围绕这两个方面量保证线程安全的。</p><p>volatile和synchronized的区别 - CSDN博客:<br><a href="https://blog.csdn.net/suifeng3051/article/details/52611233" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/suifeng3051/article/details/52611233</a></p><p>（2）volatile 关键字的非原子性</p><p>（3）原子类</p><p>原子操作是不可分割的整体，没有其他线程能够中断或检查正在原子操作中的变量。</p><pre><code class="Java">import java.util.concurrent.atomic.AtomicInteger;public class AddCountThread extends Thread {    private AtomicInteger count = new AtomicInteger(0);    @Override    public void run() {        for (int i = 0; i &lt; 10000; i++) {            System.out.println(count.incrementAndGet());        }    }}</code></pre><p>一个原子（atomic）类型就是一个原子操作可用的类型，它可以在没有锁的情况下做到线程安全（thread-safe）。</p><p>注意方法之间的调用不是原子操作。</p><p>（4）synchronized 代码块具有 volatile 同步功能。</p><p>关键字 synchronized 可以使多个线程访问统一资源具有同步性，而且它还具有将线程内存中的私有变量与公共内存中的变量同步的功能。</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面面试什么的多线程部分问的比较多，需要加强下
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java多线程编程核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="https://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>https://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-15T15:07:39.484Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><a id="more"></a><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="https://www.wshunli.com/posts/4cbab315.html"/>
    <id>https://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="https://www.wshunli.com/posts/b96eb139.html"/>
    <id>https://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-04-28T06:47:46.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+ucIy5wvxTHEOIukiHWXLQmo9ipGJZQWxN8ns4nvu1FE2YydGwUP1tjY4u+42wgXXzisPl53wprtaKG29YfkXlaB76GlboDB9Q5tLE3Nsyx4VFEx012mCGZdGy1xsWmlh7N4vIVf5eM/xJB32CeuDykqUAW3hAGd4xnjY6xCr7FUsvTzzwoohTfMLb8GWEQYg7lFK5tgri16NhCz4DFkprxEerWE9/tvtdeOM3JVsNhzXd9zAKqEvslTmLu9c5z175OilooLy7Y317vVK6/aYUDOHeMWGWDYCNonOC7WoXjYZWo6Px3iGIF/j5ChiGjUJjm/hANzEOdeJt8cJO0mr8mWuVqUuM/KUfQCa0vcwteNqy7SpatAFOFXnOA3x4pw8p0sYWOZsl72LjE4bQCUHDcOEJ5jA4UY7vA+lBNsTT2jCbGfHdkXe8f3FwusoNFnNbkqC1Nj8FOT+B2abOfOQYby8CNd8zK0zZ6Vc+6sz+zuyWBH7TBIfcYTojiF5G0Kb9oHnnPLd4FSKV6v9s0RGhVhSegjqEYY9aptUUvFXN3JxAIFpnaX2FB5mOmSx4zVfSykfBB66Ii8iok0SdgLW7v+KJz/RF8z0VUyyhBjYdy+zXdxxQkpPwhFdI4RpX1iLcjjvX+Xw2nEOZ1fp7Z3+Z1MDPmF6Qe52XZQNj8U5bbBO+/c13N5RwQb0JUrxfkEtBSrn2zPf183XLKJloThyHzq8ymt4PLaQ/N6N2jT936fC+K0wGbj67byIXAX3EGO4Z4hKvEOov2V8NeKCeEFJQn/jayJoIjsVNtIAi/kg8BEmDpXXgzKB/3QwwrOmYhI5ZncalJOAUbZL0KtkB/Y0mlQwJ2fO0Dy6UPhWVofE4jlhxwbuqZ6iyyNirWIljld9PhJqvDLZLKI3kakxBGT8zXwjg8Sxne8UHDrQ47A1E3aXQH/f7C0Pw/8yVL0r7NMNkCeh6KLKO3Wbfx/kuSzmYS8FYx3lQjteQ1U+TasarB57VoKhwRSc0XenFmRmLJpJ2E1jIVcl0wjVc7PaXIniwzZx5ks0NTAXrMJhKqT/E0HUnNpnro6AB14RDjHpOnlt0DKYBIYEy77RXo80ubO5eBmb17A7RTS0Nv3+ow8ECOPM8WwLeUl9NDRZ5fUstGy8A/FW+0FNjbzdYH8GQR9gupf7hf6+W2Le0VaRfEjVyfZ0lnykn/u9ErY1q270u72/pNfy2L0yBrzRG5p1WbQsy+VuX7aEdQbnTabqq6Nf2EL0iMUmfuyGSlgpE8+PdXGcodEEI/edBEuSyCgCDC1roOaIjdduUDlHfnAoVTxAXP7arpbEuTPUeBtRARS+Nev0MfQDRW2go9eAPbEfQLo2qGZazn2mTayaPYea/sB5I9WqrIZXc37deaC86SVBCWcHbdYqxZGpO6sFvZqD+dyfNZZ0AEMFSCFuZ32yknIUQ1zyWLHANeDkqSbGyAUi2YeVsaN0kVwCfha2HWe/Pe25SwghT9oJVHngNxGXncVmHc37K/mSb7xtBvvfFmOqTUuxkiZVhdgEPy5ecG0qxsozfC9ZWOZC/BBviJXHRlY+i6pgIwStA790m+ZFGeFsgW/tUL0PkCQpF5dYb0FjcDjgVddz86OvRjMmKx2T5bvBIB/1W0lwMJw6r3wUAJGZgWzTE7LpzMHQzZvBAIfIQdc4zHU1UsPemkv/45fNHNB+DveHrg4O1bsfek4L+38s+S4A2sZ9n08CZIoc0+a6fV4vkJQ2cFW5lwf8PN8d7AlqgjipUuJArf68G999keS1iadw9YYQfE/At4Nl2KRKgGb/cvBo9ILKKwiWFInYu8AaBjcIrG/46ajaZMO8UVSUMfQQvUU4l3aE/igEFwUTKt7geqt3DqEjtQyOUo1Y3oK9Nq6IGh8gKTN7GYySb10skhbZdFddMCniEcc/VzWWmpzFG3hQdaMxYbDhH175wGr6ihXo221SRH/jwGK5Raq2Ghlw+62CZuB8EOVYlGwdab2r3SkRCwLfVq6ODJsxVBPm7J5ZmZ8UdVbrkqJhHQCx/bSrYL0QcwAnJSpEg7E0PhDQMEtpYJ42KjFguZv67AwcwOmBP8H4DUG9yTcui+j0CKPx1ZVmweTWPpmt6iWO5TlP3hBIb8DSGbZnrlE5fua/hRSbvNNPIcGpe2pjq+seEW/lH5vpSgz/UUi5ASHr2ct56g/j6gGOtr4WtoNq/Mnw5A4fzMbMrEaYTDITHuJAONYjH71/vuNhVREnJMP3uPktlVd32q6CfV2gBGgZPRkKWlSFmna+P03huvEBrALGT05H4HaCpovtRTwQWOmQGWxtXENr1xZDcYctK37IjviTaFoYo4/eeAPrdvRJBZM5IXTZh0V46YNU2Yu+fXHFLwa4WlUVwF7L9veV3OIPQ9hzRLjGjUo6I5OOjoq84TsBwE3vxiyRM7WNkeA== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里云实习生面试</title>
    <link href="https://www.wshunli.com/posts/b3a8426.html"/>
    <id>https://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-15T15:07:39.492Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="https://www.wshunli.com/posts/689a494.html"/>
    <id>https://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-15T15:07:39.492Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="https://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>https://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-15T15:07:39.492Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="https://www.wshunli.com/posts/3cb63fb.html"/>
    <id>https://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-15T15:07:39.492Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/9c87288c.html"/>
    <id>https://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><p>第十四章 并发</p><p>这部分大概地看了下，后面再看本书仔细学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="https://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>https://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-05-15T15:07:39.492Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（amap）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（amap）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="https://www.wshunli.com/posts/4e05997a.html"/>
    <id>https://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="https://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>https://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="https://www.wshunli.com/posts/96840e7.html"/>
    <id>https://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="https://www.wshunli.com/posts/4e57ccd.html"/>
    <id>https://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-05-15T15:07:39.484Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="https://www.wshunli.com/posts/91672bd7.html"/>
    <id>https://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-05-15T15:07:39.484Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="https://www.wshunli.com/posts/84f52548.html"/>
    <id>https://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="https://www.wshunli.com/posts/b4e3c990.html"/>
    <id>https://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-05-15T15:07:39.488Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
</feed>
