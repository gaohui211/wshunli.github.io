<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wshunli.com/"/>
  <updated>2018-04-28T04:09:43.403Z</updated>
  <id>http://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录2018年春季阿里巴巴实习生面试</title>
    <link href="http://www.wshunli.com/posts/b3a8426.html"/>
    <id>http://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-04-28T04:09:43.403Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎您访问我的博客，请输入密码（aliyun）查看本文." />    <label for="pass">欢迎您访问我的博客，请输入密码（aliyun）查看本文.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="http://www.wshunli.com/posts/689a494.html"/>
    <id>http://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-04-28T04:09:43.403Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎您访问我的博客，请输入密码（baidu）查看本文." />    <label for="pass">欢迎您访问我的博客，请输入密码（baidu）查看本文.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="http://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>http://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-04-28T04:09:43.403Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎您访问我的博客，请输入密码（jingdong）查看本文." />    <label for="pass">欢迎您访问我的博客，请输入密码（jingdong）查看本文.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="http://www.wshunli.com/posts/3cb63fb.html"/>
    <id>http://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-04-28T04:09:43.403Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎您访问我的博客，请输入密码（huawei）查看本文." />    <label for="pass">欢迎您访问我的博客，请输入密码（huawei）查看本文.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="http://www.wshunli.com/posts/25842bb5.html"/>
    <id>http://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-04-28T04:09:43.399Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="http://www.wshunli.com/posts/9c87288c.html"/>
    <id>http://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-04-28T04:09:43.399Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><h1 id="第十四章-并发"><a href="#第十四章-并发" class="headerlink" title="第十四章 并发"></a>第十四章 并发</h1><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="http://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>http://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-04-28T04:09:43.403Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎您访问我的博客，请输入密码（amap）查看本文." />    <label for="pass">欢迎您访问我的博客，请输入密码（amap）查看本文.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+8hVCPk5rVbUDLjPIFFQwz1jBq6ygo8/g/2BMORe8WbAjwutIYoQ4A6v/poeU4TM8kaVsnV9UHBFxdSd+YzSJf0aUi2JxlSAP87cPGUN+oDIgQeUKITKhnon8iC8TSMQU08MQrY13SEs7jhdnWjT0KAi97PtXgpRqQCJBzzQe/bvaMuJPL2IUnUYIARSOnFmNE/i3vKvWSMOaWIuyKI+B3yVndauahHPSU0L6d0l/Gt5LH3YtaI1qxpVRAmHen24LFPv36YRaCo4QZUzG0hDHvnGgtw4niO1rO5xzJ+beEXsEkKi7+DpbIdugU8mDY3wQMKnIIsp3UmwxV5XyG36TopkvzlB+WP88GIqAcWBJgHhYGc2/LqMOSXPuJuj/4/MfETavvEvTS6l521KFQJAu6aj0eeWBmG+i6Vgcvd51Jj6622pHW7EafRtwMIQ/vviRf0aMK0f1TRDckgDKsl4t3JHWNDpPLlC8qS6+RWEgNSnOL5GIS1324VQUllMYIiqPesOEzrm7PJuzBijA9uwd7D0ei9z2i+rklWPCzaa3+bDphVgCzRFslsPJZg31VVrSgSewaGZYj9/uwEopmdjQqONuPo7R0ElkQkiqRapX0OxhJISAbPZJw3uZOBs+3Bpd25vyLuJZkpsTQWRNIvFpENEc4r1meQZWdE4lKcF/9CNNI6gF4H0Onq1PMkM9WJwOC9SQpj4HKqEq5mhnw/G7IjKBARlLMknnLG8KAYJFIMWYytp5ftuLEwxdgPSubLlQTUkdRYer6xEp9RnL1B0uLiMg7upUVJlMZTkaTQJi620WO2mz9sxCGEHxU9vH464TsPOMaE+Wm5Xra9/id6qid2YaBLSoOpHw0mUJPj+Vohe9WD9WV1hkIDHqmTmGO4gzMfvqdwXG4MhU8j/Qu/X5hMYIzX8RQfdXqfdqUuxWSlt3n6020tDhR/bRF1ROMfFqe8eb3SN90ozF23qbcNElQhwAR3oAnchtfCqASsl+jOR02D1I7V/bJUpEO0mdluF/O/Vw6fdCvZAe8UNsGWKfm+iyP2CQxlNHlB/1FVLNJ036QZZhXuLXyFMbpYl85ao8PSeUBsKFTyws0PtxEkhYJ0hdj6HNJCPxghU8NhbJmg4icffgNwHd8OwseK2htf3Me005KfbJU5GTH0pdP4x7cBHvrQbydibEUuuYOTC7QQs5SZxdYOxWjmVxZDq/N/aH4mcHhi+WIsD6FugxcqvpXL47nQE1oQQFxPG5SWbtHH6WS2UuPalFENsDGhxS1ou705pWbRExSzP4vvAzvNtIwOWniDPK5FPkH9LXBSilrxQbRI+CoUVHUqVWOMFbUSQ+82Vrjhe4eWmQLAsKJ1b1cF0rw1AmDkswpYS5KyrCuLz4mgHKuBOSH5UtZmet5aMD2sBuHuvUR75zoYCX9jNovr9/A9v4irjaQ0wEEkqXzSbdXvqMq2HC3uXZFOoAz9J9gFl0tB773h5o4hTma3JD/pdJNoXfGip1B2CXS8/t5y7e4MzTtOZFt6FTchgbZfVcXqIYcZtY8OZEUoWd0mPVDtFtOr1GcRbNtilvnl0OqWdSr7VnQCiNnqE9bPlwccayYx4qPHbXJ1Za2u2HmlYNthD8N+zn1bqI3naXxI5qYvP6C0r2MKMD8zRBZdhnFTFQLo7AKMn/Kzk9KeUhtLfN5Q28uMyu1JAMMqEZhhJRLnVoTkuaqNZHdzcXieBCj1p4UtQ0GifJLarOiWWCIDOTRtvKV2FGHOJG4BVNvvL4010I6IvZRMUdDovpPb4gs84eSkiAlrA65mrF1taWFwkWNmpDFeS4eTcRMgIEW3ILf0LbV4yWHtREuid3RTnJD/oRxkBhyV+Dh5vTGKz2SHZnSs01cnmtbWR1HV2qjMAb5NCMSB1zyq/r4lS3l3owsoK7sQRf8j0bzsvn5iRfEPKZXb7LPP3vfSNafxRiBhoV/aN7m073z2JfUmzzFRROUyVf4r45H85NEF75r4vuACMjifXr1EiPcRdAnZIC2zUDMcQvNheKnjj/aVnZruNnqUjLFRp/dZlY8n4Zm4fqMLC8/HmX48fU0zY7qzh9lL8u4yisfzkut0WPMM1AaP9JvOHjYWdOihSv3qceXqzwOkPuub5cJleHk9Hd+kZCmiE4b6SQj1NwAjSsWHNyR4+MUZUyqgXPnwnd9UJii/R0VR7/Vs/7ApaW4C3V5N0FgH2AtMkWEGR0YbNyij9SVhytigOq0p64IOpY5ui86uQq5yUZJ4A4HRUCSzZGWB0ypwHf088Ux1za+14d4zBAd+vkK+QHVtoBdg7IdkUbbS1OdhTJeF2PITSivZIR7N8J2wCUOOqPrU6SiSZYnioS/QfbY0J6Dsyu/8r7wLTqa8Jf6H8pfsJDF+nwZEYgZsT5PFNwaIKflA/E+ca2gC619hfsPDvBatlaQkUG/YEj5Fz1oiDx8kkN8ORml9S9RYxYSc9KS3xzO96LQlWM4Jblf8KAYUO6K0SLltS2rE/f4xwCcGrBfIoSRucVlvpvV8QNzJVNH2/zFZfkrBkL2989HOURqgYIVO8Xl5h9p2bkIJ5IkHGLxBqEw8GPfrSRFgiQ17Giqf4hiIXOoCf31qhBJhvRPTWQ9wb+XssnjdzGZiE02bk40VTCzlzwcDycFXS8zLQswR5OfQOX4ATpbK92S3P5jJMl67qVpdCAd2tfU0xOa79LVxoL+kHiKwNwjq5Mv54dTGzcZTEi9RqqZFmuLHYdSO5sZIxwhR8FKONuqOKTsrCzZVdjoLkCQ+VWWmy0PbXtfW0TUuRCZc1urtiFXpdYNnxigZ3jjuKm+XNo9kWFFCvAL3El8eG0OXNCS10iljh6nyJItNHwoPRzhVaE6zOBmqmPO3kAz5pglcl6XqvOChS+eLvCs3Rb/OtR2qcBdCN/gwz5A0HlslwoSRi5iSuHos1f/Kjp/LTbgPYfob7L3ze7XUhFumKkiZTlgkKwI3gq8+R0vlHJ0PWwzg1eveJN1FHzN0fz2oen+VJL8FQ6+wPPJFOZ874RmqldI5yLHl3/TQzMp4nmv9dn46jbnILNwMzQXVDD3y7O22WQsQ2Ewbq3otB8MLw9o8fhk5TcIV4QZqG3/Mu6lNvhHUhnO7rM4iQQNYPitjnLohItw1xxS3wtna/Y5l4UvpoM2vpJYw1h7bP6YV0a83xXuUU2qdADLFZTFX9pxasZcLtfA/X2qKXDq0ct7b4cdq+93YLvRTwUYkeB+OEwqeuFkJ2Zdgv6+0kVCDYXtyTyuwMM0YuSWdl0jPl2ibHrCkty/UGlkBTieZXaPrc5YP7/n9zf8ZxaFpy1a7Z4pN2Ptjs9J6ibORgvjZ5APf1RzanYU64kbOdBzZuoeGujjjmgrf4jqTdotOximgvWMO/+FvEvlwKmHQLiPPv+vdreILSBLb+37HuqBmZTEW8w/b0E2SYs0KKob6vimNzLGFGLaeL4y9P2BXjDAXKbWJo7Q45hcH3CQtM2k6Z6ANtfAskZ17Alf9pUv8PYZAJtF9yVb0GcnVaVa7oddn5kq9cb4re9NaelGScRT1CTpbU0VKPDz6oOkL3uTJQH8sL1z48FIKoYv3Y86xb57JL6+wOV0/xMwgAodJPEpzume8c2TQ3Bd/OcVEePXg2H999YM4am+R18fnWpdRjkMEEw/Bd5+oPnygOL59cfmHWLv1jx0454ZlHNxonIPec+W3HA1+VXZVyxO3j+koQYsB2jrAfJz/88kYX2c3050k0oiIjkt7Sk6ifPxlGhCbc9VJt9kGS1zJk6KLtCwPqEO1e1hjrSCMO2Jvjf0PmVH4mpMet1SKE07Jpimc9Z5NZ1Xf+WKKN9yN+rQ/LIOCSmQJw30XAefXetp6mdkvDDZLZhscp/XgwBrGB1WL/ZjYPYJt3mzOfo4KQ+k34y3yCxoYLBZBOlv+/e/GnqPe+Oon+Iskiv3VOYHshNsUZVDKBm7/cntvr+EJQYFzLvamkTJiXG+9Ri71kciz1qonoRw4k0NR9Xg+T0hx2ywU70PbEy9wIfdvQAvWbAqZPch7maRTAoFKWnNVLq0LKopGx/us/lD0Du6Y24/c80u/l0R2PDjqLJMsLLJoAjTPWnFwhqrbDlbf4uQhFEPatYoJfBKUnae0EH+/Ii/cYF5KD1PiqHKGUKWgMlesVlhul9AqnGPyyeGK3TZRJquqf7/NmYNpNsa3c1VfBej0X1b509jTOmY4M7LLItlOIlA1/lTRVAFollHTPzCIO5nmn7IJYQGXrIxFgy59E6yiVr8VHvrmj4Bj2fRKKe+au49QzPF+M2/RXRhuASOUD5VmcJiK4w70MkcB9m86MXCR7nyX1TeYjW3m3QtWa9i08FUgElAj081ro5qa1eahfzcB9vspFDm653ZgVuD0UBYlrAfDsZ5nTORWaJscg6/FMDg1k+/iaXtPKjjyGIB9Lm8+txoHx4U88wDsxfo9MQZlqMyc3MZhVVXfzuQsVmNot8Gt2mMCZw3ixoJIaJ51Iv8H519WjWE+pQOVh1dvvZJ/7icp+5aFTPNN0tebpNsafW1JmgmX7+F5bnpcXpXg3eAEaF5x1fuzdJdmE5dzwGjRISBjcZxcHDr22/+SZZ+HS83FqTp1plvCwIBhovJtuPD+oigqK6choKv5bzvcwgEvsDVIRX5c2MV943jX5WdI5XnesCr1TLb1cIlTCEimGGi+8xki+XbNDS69UT26JaEFK6bEVCSfUxU/PnyGyiaquGlAk9+44vC9F5k+JPY3mkYs4qqV+w84AoeDsIg6RKtW1OyCjEHe76DaBtbtgpLTKMTfDDgm9YKB17nEyKlvPpj4zpcWR5Hvgj5ybYpQytuDIOGHoynq+Sm7WMhT/+QUEVrTqaseuskcaQac5LXiQNrT0QaFg/sr6/myIQ5noom6FWINh5taT48GLT14RiMo0iS4/bCF4vtbemtzIaRE/nsHozOXKsl7YgqUuTnMSDQUpEosmqqxNA6l4bS7nWssK2QuUIWUWJPLFBykiofxdvRVft/o9MyflOJKGDrbiTW1BApyrKMKsgLcIBXe/tsj7Ox3IE1LthcZAsTtF/xd5b6lkB7M6ia3mDxB5pcQKL4xTTQ0n+tNZ1UwjPglIDar8SqrzH+sxyT8+ly5qk5a0Db9kQ9Hzwh8bpxDJ1kKN+RkUWA29fIlL9X6IIAP2OXJttL5cVvJswbYzBHWGsvi7vLhdqqImOnlFRHOIOnckz7VjbqbWSO0H5gUujfVZc6XeMORlM6/l0A8WjBtdx/wBWMmsFLeM76d8fhSAoilXCAoeEKgFJzarugoiwhDBjciJuf2JIyHpwqVNTtPDBwFxtI7BzihzYAcZzEnpd1h7DUoiHM/PNucRatfqAv72FDD2KO7SuVGiuCRrfu0JrD8Vd8Sw5SHdBpf6WWevLeUmG+rCMAZbkW48lrFzpRZX3VJONNGanL9T5/lFobcOKo84HhtJ2eCt2mHGoBMZ8CXqvn8xYJ2hlnEQfxNuk/elcmXNnb7whXz6H6hD1VD5DRtO1GqTmJg53+D1yyVN794n+J8FiZCAV1b/xJw9uWh4wj4tTs/9Q/8q8pQXVaJhXI4uKY5ceLEvr43ixb3wrz4bAEiCFhKktDabg5CoNj/xXO84xbvVYDoJToeIJuLE3kir9eqT43uuwUc4F0BRiCIgS1entpX8kB7XR9AlNZAkxherjPRp0+PuAgiRoy8JY/mgopZrSwbNlj6FfHv1wxRcxtyEnZJ6bX9sbQV92Xk80kcVV7hqa4urh9JlctzXFG3v7h4nhIGiz5Ds9u/R6QJAUaFi4n6iVdBTQCVAZ1DtfchAmXl0ANLqMOa3kSv64Vp0ppSJQ7MT/YYgayZJsUqe3RG9h603TKdSrqm5Q9rLKrRAmkIRIOJc6SZEO4RO6Z3G8uxUCXWRps9g1cQ8Q3i2iTMRw5IbShLWirUw3egoyf2m25vaR3iUrw7AlBkw2ic//IBRlR7cAIMOeaotYaW5crPIW6H+R8bImNTnctqb/gbr9asoxjoM5BboNBi6KmrlPg4LsyUWMa5Dfw9iQnwPETsdX/zCnu/ZXrbUt0whauU++QSwwg0iP15kvjcu/v9sq9Yka4NVcI1cSv6gwYpISHpv1LNb8hul2pp7DJtRrj0Xfmjb0tn7/Ulu3yJrDUmiUXC9QxyFrSktILlAwbPB4vtDzK3fc04AvXDD1wf3g7I7X1nTqlnmVbq44G46i/y7RRy+Ny1HsjNikMvtHNDZfkEpIrew/ayzv/jMLrgW2v2/jCOgM28z0uxOTIio7yBly7zV4UKWz06FQcmVwVk6erOgmSY+3u30eb11VUeXZPeHHnuPyOu3T3dMvb3ml0i34vCURUrKX8rxn2Lp6hWJbgVsnU7lmPOoflNhi1Og8yyD7P5wIuvL0YmlCTs0aiBz9wyyacCdU1IB1KPBdfaLctwc7J/qMyDgLE2P1oWOAqxMw5yo1R150mUgDa//Fkcm7We6Pr+21YkroHtPL9PiTRLAaupHhzfAJE9NzBvRDXTX9I76RdYESdQ/V7NyQzNz2ZBSBAHtAe/KJvkGBfNnHxJDGFMVyZ/4ysIUrj1t6US6OQPYq70kCD8SfYoZ4p7HFBuxi32mXppXRZrFquzuWG2UGjZkmfdEhVg6gVP3EWZrqvumImtBfHFNvEXJnqsB0FnDaHAqlL/LmiN1yvBWEnVJC+SHvmsr6+s02ppxjcmGdrV85iEXsuwBZBAxiWdjcSaS+YQPsOgeKDerzVScCY+NXIYLpS7qJcZ4D4DOBG97o4XMkgQQLjjrX8uDs8p3IE0A1apYPEHtZWM8JQeMrpATVQwkgZGcoaEAo+mWKOFXDTDxTOjuVrKbW25M3PDfecZQlP0mOqLeyLzcfrceRdy9fttDawoN47AkLdus0caJQfEa+94xqOghism1ymTCgu1JmsGCQzhCHoB0TSbO71UvRAQcS5QH0FhUC3aMIRQ5RSJ0zpF9mWfRylmTHxWONYYWoU8aVDPoC7l8XwnPT5/QrwmHWhCEf/Fkq0Kol3KWqjd6gFyxlhR5y8eCnSVkG/xUhiV66Ji71gEGtpPOpKqp1vpGHiLexrxoDtIA9Ftby25bmfFJsxLebJOamYXl7WBKfywHpUPPLObOT+nlhSUMIyT+aK6YyAFJgnfw1Ytn5tMCu30e3eutr8JtpoUvhcxR361jJeeTIxnd0uC+OZxdATD/wtDtT45bcvaDv94Si+88Suwb/JoRj+4+ObYiPJCur/R3QVswc2okwgXBwmylAwlYmXhK/LaEUmskSkJBcEP5pbiDs2UDzr5SFCIc8g00Mz8KHWDIbXgu5HXIjdYupv4hwwH6A3D1jOrDVka2y0UyuYsZ1W9F4oCJzQuyYzIB4iN/r+jRYCBMSlkjUnwCfi6FjbJoIH+f3D4jBXu6fpj3JJuB0X+QUWAoBNFbk8Y805gXM+fZuQYWzeYIfjXTG14Sydz/3b6941AgyIpOCYF4Al6Plb1E1b6GBXC0KRRWQgXFjn3snjz2If6jr23lIS2pCpk8OhFArDogLyFwPC/ij/iese60kT2nSlt/ADED527ZAB10L4lA7fZw1l8e0dlgnZk69Vl/ak7ZUD+hEBGJdZTnaONboGWjJAvUUWpVyT2g+r21Z/lSWPSYkr11ggTd4cRwK5Y8U2a4CQKLgjvym5BSPrhPmEC0wYYNVhlI8TC4z0VgcGH5hQiJfIrfrMmvRhW2AFwZRAlmpWcFO02AugNPYw7Na2eSblqd4tvNV41sDzXZ+Wjc4HITdPKVOB2yfgoXRa0pdS0/N0yt/2VNAQpx8YILjuaVOYV/CnDv9NRBt7c2CakgThWR/OsiNlrRr7T6DArB514vlRX6yDvVvzFeejE2yB7wc08ZxSeh8dt0mXqSX7ynwf31Zns8nk+XcKavZpnP51G89csMpfkuR/+Y05UbMEfM5QeFQwMBYkMVHd4/KwNDCWiDmrIVDPAqaXFCZXV3mD2dd7aHgX74xuF1Se31TpvXgKhPUMkKn2RRX8SkoLUOe0mZJfszTEQoeaDGJwr1Lkv/C6RFKTHajDJ7dJPCH4yp4YaD8FKZNBgimvPQwZXWG8eJSFPMrqN2i3jeqjMuMzxhTqAny1xfO/MhYN1pwy+yHwMRQ9P0fhZlMw0XOnTkVYFVl4WXLKmOIIxDAiB8GEqM2geB66T+zfBHRcziM2Aap47ZsCqSt0r6VHAYFc8M7x/3fRzxZl/syl4NSwopULrIWp8zzTW3fHMT0GUp5qRUyPllpTt0Bb1VqRUDDkjmYWkYR5UGdi5WKjac3IJWtcB0AdSt1K3dalg86Nhyoh/1c2y1B3KmSWqeXUld//Oak7b2v4mCZVWxFK2ZaWfZDWTl3lary/AlgRs/kExkpj7K3zTsPObdUaYRQWGZL7iqwgeYAb0YHMWOJkVYBcm7mEHGCeBcN2e6Y+8gq3WACzNpAt55bdZYqSyg4RFvSlbJ0UFmttsn4WBLkyy/ZTN36rTJCroqG7lIRPM2PS/7TLM5bYXBa83c0fpzWa6TMvtrFz8QXa5XqUz+MFzmEbznBjeCzSusId7GZg4AeYrQN6GoXPXfYDe3SFCvDZEAWayUbE4u70V5BHJO/RADRY1NDcNR0ZKdGnyJd6gdBx4/IKj4l4yiy5wRxPeZCt3ReOgb/SQLbBe3wq/ziytugasOwBPSIhoFHSxsQbn2NtTZsVGkeycJ8oSPRANfX8dSLZLx+KMBIDFj6Jky0JCj1WX7c6AYxCOv2q4Tc0IZEdqRJfijb4YWniAb4st6R+2faDfJFoOGJqcyjbfYHhUkXhcuz0CRUTQIadraUZRsV3pojp7k5nozQwyZ3Jeyca0oYJIo4aj1oifjZ2HPA20S7/UVX3MNOLcilU9uKGU1lhaZ+Nqx4zU6baeiBAIcTbvr1L4GMDd1BIGByMEIBGrIHDiTe/GgnMVXucblVVgesajfoRVcWd1KToCPXYiewXiEsWwHnwrCWUyQGfwrINe4m9SAgO8OhjWBYkDQIyFaVS6Jddv5MGE5ki7db8OkirqfGDVIAYaMh+y+YNxiC0P/DA8VNbcess+Mrw5vGqawrJ6Yoz6b1+RIYytYWZUJHpM1o91IdDmfom+XuyU4D6mvlBPgE5Qs9jHwpwRDZl8LzcAgkA1hYuiRd6ROOLWbUCTGDqu3H3BTkNdTYhOMvgvxFJQsCDE3W+SEdb0EGeSONiYPB5K6caeSzfnNQ0FBn+C5cresKJmz6fTIktmjW4QIhz5FgBiZH6TxVrJopm/nrIobW9ZOkpTltFbXFXt1rcajefnRHlnsn3Lvr1MREF3cNnhzrWJutnnJr83NcI2GO8djZZY1VE9qPskVg8ejuLYXMTjhyhn6YNMuGRltmWP+zPoo4Vvc2Bsn4qevxxBUal9obnqsxtnC7o0NGgI977CKQekqpMuGFbfIMWvWKwfDEZS/qCZOXYL+czGd+S2RBd30hA1+2iPygneYGyEHwVaYggI9HWIfmVSe1d7Iy3WnnXXkiZTxphhDnOWc7CWmkKjfCLhTzMSxYljvTXL9FdLccrI2TFFl5m6oEODgBLoVlN89AUnuNLPFZPTdoVu9W/mhAZFgkxZbgHhdEpT1K85DvYetJ1X1lEBfe1MHs8jeM2SmLe37x2WTDqZd0i1i+rp+4pSUOubuz6Ydwkn/lZ/WAob53I04lTQMKuYPVxbrPBfFD3hWhN203yJqzrTbiSJah/36+ZKMSWhUuccjbCIH+AbGxYmGf2Bp/TvVSUhX5vgH6Ynt62TnhWEqZ19QJetzzC8qSkA7HgAlorsqsagbIvS9V07QAFcORTUC3wT1Yi32kPyNO6L5UDXKzxJ0pdx+4U+qpzMstxIXc0hKPwDOFhsxyrioy+PywGiEUZPajql0PjwSzMs6TYTP09e0xSdchRWCm3LjEa58/xtDGFcz1J7q6LOhKGSSBVtKugxVsFMP/aypE8oaAHi9uGMKwOexWQhoYlCq8TboNKxGgWUkV3qhPEhLk/vqXefewR+sGdvg3QMpZqQ27iSd1Qm/Y2XIM0FcB+FuOwbcUcPzC9JDbIR3Tv/M+tGxLVbCM2EhDFM7p/wpL2vzYCGqyRxmvyOe6MFdMClHNA3XDn8OoRUPrF3eKVMU1cymWWLVEYtl/Pmdsn55MpPDkONh2QlToUPzXrVKNGgiNwitr/jMLtm481iJUhXUBw6Bg9d3LgiCuA80DaxH47vxUvafXcJD6V/iMPHZfN/lzGTc7vk1EBwpwRbXZyj9I2ZD1Arqmq1A1rD9AhI3t6LxlxxNZHwKAVGzTsZi56Y/QTgNigqfVkYa7Wwxf65v+KvASDwMPK/muXUfJ2TP5evzdzUJwIHlF3/5uS6LIwyL8VcWLPvLDmwNVW9G3KYg+WLOQdyVYw7WrP51bcyqgzclQcyn3MRY9SeafwTWr6xHeCuzKvka568Y503wBlp8xxCQHsJLmOqItTi/V8HZ3O2wdyRNVPDtNahlgeoqN+ynSV79srICvFd7Q2apsm/mBsDV6MZJXTi4GVWkg5BDoLHE7yTyG7B1oo0/+K05YKDOKO2y5dfj8aheNU7zrIgqygpEzu4GEAOlylJYk9DJQ9RaVZMRYtrbQYVdZ0gYG+Zr6KiYCsEdO0rT3DoL8ZSgfC5oDcRyKh0UIWSiGUH7IxqSh59r+VD89hLK/XU19mCGQN/J69ivywp5a3XlB0zcirq8S+TOIAJjvBV3h6TVhaRzPXLtupyxnvI02I3gKF07N91ZSfl8rUJTKFhK2dZ2RDb7VHYmoUlnbDxhWGCZmmt5iB3VfnDihArbhaJwYSTmwnwrQYOLFteo4/GU1QL7Eo9UfeY1OjQulS6s+AwSZervyt08ic7YjaHgiEpeX2e9CHLsPjpnHDsv6F6ZwylHhJuVM8fiICzfyIA5Von71M3bUgfTj8GxYmEXljRb7XSqzvkwZfYEC02hIiFXVTi7M4AiCkNuQxaV0+i5wa5boYjDoh9xa3dyLLCEp40n2011XSXeKIQlUQ2s9ph/mBCqkXt29gefjXc/j/u835qPDfIhZ2NCNCGQwsqXuw2cVwgvNcsfhM0x+qjYRSsJXMyc/4ehtsK/rgSQrtqsxmX7rHenTuhYVQBAiJqsO5oWvOcZ+Kk13t1+ABNgGIGfOyIEHULK5fBQn6J7keegWA5joSedUjKt0xgiGvJlME6EO5nA9IJZGJRWEFlON7I4q8A9liA4rKeOfJHCCXkQ1tXEVXRz6/JGbiU+HO8k5juzaWQ7W2S1CV+5FAxdRQnvu6RLmUyauGgfeh6QxhVilc/UTSv8Al1wbV7d69H2IuyWtUEMczMYIhwMPIwCN0E7zYaF7EtmUDxVMNCq8M8Cc+ItMBJ2uOtud/MuRusWApdwt6BcMwMU1ZO6LUXswhsfyBzvQvqBZDdoD6KCBeK1JamqMbVtY0vuDuIotNiVkvxY69Bx3R3h4W6d3j0wdncdLXjYLtMnENrkVZA6Uv0pYOLdOk5cSxk33QSZpzrv0fyHHTbOt/1YC7mhGpTKgezR9rU70KXXxTMP5BdKa9GK1dmqedDuvDMHtuwf6Hfmpq4ox0ejx5+JPbrr7PyZvMcd9Tya0jXUjoXNWMxCoQ6gpckEO9SD0soFqpBs6roHH5i/s8UHFm2fDvABTdRNcWjS7Jzs1mCcn8pEJiQ5v2lL01vS4WQtozxXyRJYf3MWHCeqICHLvfQ9UUaWNBrgMRM3OpkATtu8Zg0WvIzAtYuYLY9C19cQcPM7/6890/T2TTzqVTtRycYUdKwKye5765617Y+rQESAo4aAxk7IX86Ds1T0QAADt37sBtDa4EE8M0vE1yo/wVrBle+4bClLULKiqiBnCSOJtuK0AKOqkbnpIY79/7qO1gpQXuLGUYuyHjW24fzgRs9HP9kDBHW+/yQ0i1/RBTG1Rgox3j1U+A+3aRtTIrM6QezbCQrKzdxiMrBrUXeF8/NU41sEOoPb+hv+SIkbP8/g5W0eeztRYQtzu1gTicqX91NMxfDFhLzczD1NliPGWraS94wbuoIX0zGLPCi2gYmdmgXlW1JYwPhghBxbfiVJ979SW83igk9rCyezv9IedHocJn9iIZPKJ6Fz4NKcQAiji9z5KoJHprykPH99euL1t0OQJCOpEgILtGOMAvdMe8ONvfaCvCHGAAYhfTHmnje9eqmyKkJblv+KSIahSZdI+FTMo2F42jDtLcudZvgQRCVfVGR5yfq6FxQarqr39mx1VZt77ndpPaTic5xjb4N5iPIYzoAFJkJsbRoeoTAZeC6RSNwbPwA1t6JPkkhNzhds0EAn5kkAECf3A5rjAgLLh2w0kAcXSX2p3b+2EbF6zDs0yyAbFUkWl6jEa9ftfQgmXiPY68+AaFRFNyZB6BAyKX7UTbvLgFr8TShZ0VBSNYFiGnJ5IVB5fUGzql2+avET/Ca81Nbid2rtN13L5IY/k2d76rIrwWZAI/UQ6S2Ix+msqwaZNHvkARNb3uxFruJidSJIhl/R3CAkzb3eDN8nYalFDSKxGkBTKj/744vg5tMBizWlcjdbFz0mVgwSn5FUy3+PItRTapE0YxOOI+XGcHpiiOya9GO6OEIL2XQsfBLtGv+Wfl1IZda/ttyBTv1rp2/AZbPaUrrnIHAKmJBOTk1vxHKJAbWLYF/WG1Hqg0CZ441vPt3YKzjDsIp7rYE+G7/YolrAX9dQ3sR6+RsXUOlxQ1IiW76RX4q6K72k+wKAygtvJFkrmK+jK13jo0xU2uZE52ctwMAu/27s2BzfzPLwC6F8hXhiFZztvqPvBEI2fp04X/C167tNQBhOn9TMstWZU2f+ZaBwvfS+7GOKQolIEp4CWt5OZKo7d9woPUxGBzVwB+p/GPNCg7lMyoQL2EMh9fFbE9qUo9QjkX4otae94HGU/tlc9Lkkf2AddEBN52O4hpoTe+fKBkPJuiWkPDsmA6WWkphrjNlKqQxpllWHuk5vr3NtzpgFwmj9KUiEC0rr86f9HZHoH6ochR4YDPlWwtRDACF6LjJpufUrsIJnuDA6TImW5U5LmzrcEQvHGdiVGLD9/CZqWDdPDRUr8oXvlZm6CQK10ENIRWy6cCC21QtVi530oJojBcRL2ILwmWRjhAdrSAwY/sX0ljPYgFQF+pE5gppKN1Q8Us7K3ZItxEIP9DNKUuaB/oFnBcK4hzi7hrrlwJca2W5cuXFiTs/IB5tkKnC515XXTx/c6fOXiUzrpoBY6pxVHU4SA5CEXSxFdkA0l+Q9AOFjcie5X0p++9itfpkVILXpapnFD9EQcx6i7uD7XrNC9ynDFRiXDxdtRh9/noRz2P3Yf2O88NTG2GBm8MFeOze6VmvyoVKpzTJKQSupG7BhoR8necQ3VcGh8m67CIj2kUjAYVoAAvJugOYNTgDQRZ/JwKodDs8ITwgjT5Go6mWyreNDHcC4USCl4VLnQ3/9J57mm+6yXhdsAOisx9qsDa5fo9THMO9cxliwC9HDOs1vhCN6fcsDWQWv5zz2sbS71fUEPE/siaL8qun5rq1n/rWxt04WoCQvNT5iaU22BOmsGn73RZnbiWzM/gBgUga7spUmPeJWISVnv+xccGNj78PuWRM6iMYRkByTte2uWyPUTH/9k+WJKVpa+XPkODHHGXDGyQpeHv1JgfL/62vui3OPoFWsqoxH1cosO4NMl9koe0RCYG9OYIWz22AGY1MJ77bYUR+f+/Ge5nHSQse/EA3qgRVfdSJEX18haDzVtKk2F2A04RcFsshSkn0ZdtIT0wNMSur/7eki1XckhaDGppAs4Kdt0N10XBIJ5Y4NYlRVM7IqYqN+RqHaNE9bHHZyZsbwFT/ajz9aNc1OEuSQlxSW9/ybylKouBrfwwW1QDdq6yMJs4p8Uy1TRmQLWPprXQI7IaA8aHspqvYDMWXu804oj44fAxxERgrN8OBHbht9Fm+HqN9+iRPJKYZZG1+SSdMVY/fX35j+8uUKV6A/AUfHXXQc6CjWU4dKAc9Gs9D5ODVb3nqbaIDBbjkkgIODVb99vyGL9VnRIYGrfbT7kWmrL/Hp5wBUneGAtnanafOPIzzFsC/EC8ZchhJP9ESQ4MjbhBj0invKN7LbIBRw0UhbT2c3vg2Y0Vwlf/um8Yi9AxySlepsz0NWAc8K8XOTt8a+NFaeE70ijZVVMKsfE2NwGP3VbULNV9G3uj5wsX86hf57qqTT9YUn9XBXIRJVbfACGX5NM23T5kWF8l9P9cxvBqauQBF0fUAILGgm71pVfhEAn/uXBOet3u6TdHyojF9/UIT61xPJQMlIoTLWig44i1D+F9v4v+NAAW023D8ioxhJcQXphruDwjbB7tqGLNSTQojEs4TnGFOfmeJX6A8GeNXj3yxkCoQZcKRFF/07my1UD1NKNQcNcyXOiMlBRVcVUXQ/OU/QrJi/rLRDE/5uF3S3pYnoLaAmgg+IwXfAuVPtgu/V9d+0wzV8io8toC0rRPA7z2MWyxRegcXybZNmK6hohe8A7XC0CHLsE01/TRz9d4uT84gFLU15srnpED+QxM+ZAgnx154u5c6zFf2OGkd9F6Pnlb3C3hzMko4NDxp6l5kcgj/m4ayhJ+bDIccwV5raSWX0J2VTOSEW9uiHcYoBeu/VQZ7SeQOxJPc5iQRpWQO2N2vykXeS4H6t2e4qah48laVf2u1x7V0uhKxQodKddIHB3MkJKOyB5X18p3SwYfp01iF6pXDykysAzSCpH37TYQ5aGC0lG6RTqZ/8oo6CCIyCzcCysz4Rua7qKixK7ilZUcM60KPQmoJSs30t8D8QVHYdBXQ03SR7+xwBLRjvnVnWiRhBCCqxceG7UyrXw70X2cW0m5gd39+6HXN2UJZL3SjfEzDHk0pM+jFMxiWScRhmbHXeRBV/GWdsqLwR8TYLLosSIFssUJR1cslcD97rbXzVwItwymgK3j1CY62nvdLTu1jV0lFbJd4oyxCET2NOnwFtnYZMkEIhtL8bJbSODh9qUFKFmce5bSxOxmj86j2vtCx86fp0SmZWcdD3A50sdWp+JydErQFMaMJ7q9K37wpktPx03fo5PZuMYkeEOmo6Q3qSZPCJVTRJDmE0+oAv19TEO3s5eDJf946fPGY7mkYVntb9BkrQKyRD5zy9+tOcLMrph4w16gtEOtnmp7Bvfs0xjXW7CBFaVE8whQeWBabJgCk6JsrMCcYYgNjWIpznkC5+qHRX3e3s7G52mCFq9Qn3amkNJqmA0oyg6jooUp67e2vMsg+UaM9Csn/zb8pBTgO5bV0NiBvUphYyu5P+cycHwqlI6QFDynFVUt3qwbX1grDcU7d0FzCXb3VyINSe9uRzaQO2NPWiz9FYz8aGqsXFKtfElK1XuL7elPcqxKN4ZutQtP2BbHqnSz+UVlSK8pjrtqeA/1+dk4Mrpzh/nxI73F2nChctQpTaFxIR7WfvSuQ640u9JGrum9FKuBwm53CtdUCLbFUN3IIIWekiWKCRcstNpcq7O5kfYE6T/Tlyx5HO25+JHGqcml0uFfjJLbgAh7BLdsAC06z6LwvnBdIq4v0qDsTl1A7/niEU7GtpFJrEh55AXeH+GxJWDSiXN1ix+F7Ea5h/+wImt4XhSgiOcBQioB9sMhpuGIFB1qZkgzA1dCAfFmxDuQ9p+1aFmnGbiEGecxfsSd3TMy9xM/7dqB5Ures6nU8MMLrAimp0F6iJg832Z3H5uxwINqMcZ42LMkZeIjjBvt/GWoRv71imR29QNGUo+FY0l7ZlL1e1ixXdKR3HFSeJ5mpMl7bUY/IBUn5Zj4ERJi9shB9fqFCCcgdBe3gG6gSes0EGpcnw9ErjG1rU3/p7VQJnvgOhQvVQFzlvukhgTHQLxDVpl0Hnlh5muGIoUk9kq/HBYECme5K1ax4BjLWbYqcwNGGYVgwRBihZrqysCpq6UmrbDl9wpwTi7jaIHN/a9fsViYBq/lMS/MJvldMz+FmIYPZt0DR3rF9REqsWGmZFfPqe0VH7qWn6X8AXiDLEJMnLgFngE7048TAMqFf1YqRZk3+5m2fAw3ixtv/MP9op5eNEK/8OedCnv3BDpzOWRFP4SHqtQz67f9P2sPj8kKZiSaKS7qhLmmIzwBlU007PlksjI/SmTFtmbAfye4vHpKmSCgFwyNzoFNjaC2Y7GZRxCBXWHs6MTrF4fP0kaNV3l3qhTndZdlM42JdI+wcIqxRucGiSyVL70FcKiKB1Sx58NXhDY3pPce2FsuLRAJW63nU9uTpDrhZ+blgMURl9bpEY4CgY2ptjIEcXLC/4mLumEhcpd/sd0q3Ww3CLwD2YMCro1ZxlINeNT1nPJFBtrOuSzhk3lVHzwjefMGgA5++Y7xiZGxMUtEOlcFUQIyhmbE3l2ZICupbjRv/E1xVlr88v2HzOQpZIMq4Qzv5812/iY1vOEKM0eP/YjYoejXLeNTccnQVvTIyGxd5qW5O49VuOkFKEljfGpc1BaBDD5+38R8UxopHdXr0PGvqmgO614Mwr/a7VfuCod/Kmt17wrAXDtaI23gS6dvKr5WQf2Gsoy0dLfauULj8MEONuRXN57F6LOEVM9qw+uOintPxw9XF2r8wZOenV3KdvXSyMDR42ZxugK0jnk3USq0N6TlYHB2ejkm/rIZ3aHFcFhMsvICAZ09vdRi50HQPjPV+1mEuvGRH0SWkSigxFnJZrfD8bYqSRrooqxSVgOSS+k44qOe025G3RvF0oYTjLr3/+duyfFn5Chsy1jUsAjYrTVQhEIMtxfXbpNBmhExFyQyODpXTAhOQPh8J9DFAu2wnEUoLSv6Ya8OvMA/bM+tsq9namdIkUyDG6K4B8YnaP0xggmxrEMm197C4YdW1iC899cbbZ0niMb74/JFrAfk7qIcuXCkvWPbl7JIXH0Q23dZtvsKCuohXVUC8cslhXNTUD9K6wwXZm3R3TxWQgvr2tkSmPZTccXb0do9evqkcx9XEsEmRHKpI7zyJ2iiL6mIE1priQ6pOdx3/6IO6lf4dP8JGym0Nzes0mFR1iDL1HVWWGZDZbup+XwcaIHPfJ6+bmrKWy2wSANJlUqHF+zzPvxPJvTpMwKs5zfiNcI/I+y+QzoPoNuGYEhRR2xAx1FHCaIXUAz3aWAM+wj44tyDGpLHCRY32yRUQxcQzRqN046w8eUwlCIphqHYo2bcUSh8M7E6arn1QTWCDneuFHLM1FufYlmE7E08SRcXux1TSlhaqSDR9rKx8625BgLTaWID4mtDkuXb31N0w8amb78oXq73c0kElmaPrXLirX1BunkuECMmCSCGKd/5TN/21XqPV98KJb9bQ3L0bfVjJc1cr6nv3Au/kbStBgSZW2VqREEAH9Rm7XFUVrXJSb8wgBtEcNwx2QXX3vw10IARS9EE6UEcn8XaDk2i2VFOpSVgUAvqdpHYjnyAhFrL/6eXpX+XhtYiY3wdJ8GX/P5uJmBtIiBJOB9+nxF9WDwS/uLNYcIS2pkayV1LHOUW3O69OYeit0Jj/LsAHhy0ka6mFPB8C8DF8ecYExQ1Eejz87mkc1J48Kmy9ZLn8e0WFP9wMT0avyBDvMKh+eBJhw5u6V8SSMrURR1znlN641suiUHpFH5jslMNMu/8UMCn8a2LWKhLS1UNFrzhoDus9/F8eleuxwgSTvm6pvPeuVX+UR+sHHcLor6n6YTxL49bsKREvmeKbhO8lXXfXUL7rjDiQ2RiCoAFPG+hBINYztVpooqyGlgja9JRQErnPevcARVqq5sbEOqqJ+44yYD4viZp0KXP2zPFByyLiLHB+PcrbwLx4sQRVsLbMt1bvoCWjhT0+ZNHfZ9Rjh9nhGGKYnN6H5vkr5YZWnR9esIPS+1/xV3rrF2S6zaK+p8VRJfEamLzm35zAq9YpbycVDsB12N7mAzkUcdNczrwYk1J2q05bjb/u59SUMec0D7Gy+9lFHX/alF1qN9S7mvVt0RRO8z1idrg+6WdcKMBrcE4elxQ7/oBeDKf2PnlPVFgcTR/Y+BHRzQUqf5yrlWfNKoycfFnKer23wOYySNzP7cqh2urK85u8UbBo78iUj6OUHXtmuukhpi01w8YQ5KO2OFHJ6knSHjEk7kJsCylAcDRS888dI9CY7LQsHRcSyiSZp+YQBYinFMCh+DJ+ofH42h07Zb1RqyJnQgKl5ALAUif6Jbrq/SY5XNx33Ndw4OxT3nsKt4AhjGYZqcARyMmZZ7u9HOQL8gFUL/uWo5pp3YRoGluyOGcmZAajLSfZNv1+nhbUbYJbrOqIiUk4fXBPkS106XrbSTsVm+yc4fFSJ20A06JKqxAuIbGk7DQlwaY4rCDIr0HywtNAFaQQignpU1xwIO8U8IbRB2bbGLkgmIkm7tde38H6gvbx49JTLwosCXlI95LhJTPecZpedYB8YXdLE0Oc6EuJ6ldrG5b46GjFa9a3vkrCjTK1c2VRdlEBUIImPm4A7Xpov4Hxdu7EGKbweHM6x92hrGU15rH0FG2AE6aQ7K1q5CT2c2N5PEWhkmoTneCATdDDL1vK+VShQGywUqhHkxdrvdftDOlNxZsqayg5AXViB6IKAPHOEbS/tvmIMUCgjYfDh5eZsn/ERb2XIqS5FKDzNXMcIMdOMeYYDey4IQKPuu20V0EiBk1p7KU70+kZLMzacoMOrcgN3jMtReQstZLa9/YQQZz8obUas6tVzwHITq82TaokUcnwUwCR56BEOUlI1SyAcs/fiy8iJcN/d115H2Cf3rR0x2uchAM0oMFmVmFDe+1yo1p0B8VXekRob7dDDAwiV+aZxgJPqG0s133Nd7s6eVfk/36toPwaB3B3UN0ckbRCU6xapBM/AHHTV9FsMCdB63EpVeQOI7IkQzykfbXasYwdWwKHQ6M2zp4jsj8zhNAoCwur31jf0yfelQD5irL7e2oKhSwj/fp/IRQXqDRlmbDFOds1nS7o5rz8lveaVw2hdsV0iZsGpPhVXpYj1cW+4EJdsNRqrZjAKTweOfVeqsGjrjfukbpE96Y7SqOg9r/JUgxwv0Z0Oo02EmXGE5rG+63hhcOYjsmeyzFPGe/hoTSwa51UfptZ9ozSJ+5pYmR51J+49yfRft6kbyHGJ0fHBceOd/3ythzLMyG/UaSLFN1f92j5kTsZrVywwtiGhAqP1v3yfPzzAuq87xk/yAT+ZO1an91LhVulI9jimrK7HJu6Q75XEf62DytVLnH+kydiXiUvbM/cobHPDMz3lDMxQ7ohnBbyDtXhAobZ4nPYQ6b+ML69xG/2F8AO/bjPqMKoUdxLnuTEppXynSDBJh1hstaMpoDIWheTyC9lyuMUq7ZvF887+o+L94jqNkfRaD6HYzaEDtQg3uVMcd0ZBAqS4aq2fWIGc3rBIeqm6cR360/zAFrGfD22ZEtB4pZ9gXNdz2Uz1bxUPRCF5GD3mgydO9myejLGqD5bKxY2lUeT8FeVxBgTY9IJCOaNm2sdgMnDZwLKjh/y0LS129s+A9cF2NwGjCQ6mB7+8uSjraEArZnrBh8dWrufscjq0ZGGH7J2JNCKHoCDazECHAZsktnVMfgsTJj4zZi6YVnvolqmrayCzHwTnXUYShv4z5NS94bAu6vrCGavvmwQ/Fit2qTUWMAVQZrzf2PjyW/AZTnikCKTgFRKEn6DplSUtnOVy9/l8SeQOc0SX2epAGhLLXCH5TvGMy1rcDqHLizHXX8L1DwWHXvJTgQ0AyWgRiIJnvEI5b8Hpo4r+n92NTjg4cYV3eDIM6z6xbE/7uoGJqfjGBvqbFHnmkzAFsPCFPPCf9vsyBoSmE2keeJJIC+HZnzfrVh1rw39qiWTKAjbm15fG+pJyozHMxrjnS3Vx8C07pnZbMT13yp1E8+E86Re0cdn7u6e5QbEzW3krdFPNzIXEXwJWEgoboglOvS+74/AanQiS+k03QoPhduus1ZunH083W/AVZ0J+5db7f1p9XVv4/L7Bu8AIjqDWVpjhcATJFewyE9qCQOWpp6iHJVb5PbgvaLrhRObuhmHTsx0HCFYOdXgvbvLCgbtVFuCnu9Atm40bESY2ufmisWhmHZt6mGzvspGnMnyNEJ7H+EvdvZciWBYN+sFcYr7wy+fJlyMLBcbU7VgOVYXoLz2NmUiMHietkp0PQ8AyW6Bj3lZhUJlC7XlX585QwOytX0oOgXXvI9icIfVD2yS7vdiVHwraHITc/UuBqmmUXZ67ZvisH48Hlv8oScYpM1AMyVs1AjKLhNVV7CVCyhE/+h7bppGD4hByprluckEsMJQg723l4D7kplhwcY+6UZNgC7m4nfKYunkoLIZApjhiS9EPRpdqxONnjJ03Nrh03PH1HbK4hizfFO7eIr+SFXts/gd7chkRvKv+pTfK9JqFHB28Z6psWsaPlv1svD8pPzKR0spCTNkUsl215rG4hmLw+mXCRgyDE+ItrulObu5Sr41B9L0d++/2mMULFQ0s2D4XVpQRfn4RJ4n9oo+JKS1rYk1dZJ2ORbCol6al/7Xcp2WLO/KQciUqkcMVcdXKpMlsJbzehAqPH8dsUaEgEqAPKYMMDieg/yVlzjYe0d69cFmzhHtOqgvi3bYSvaqTBgKObDnuZvKQmQga5D4OQrvKFadpPs4bXCaPMNW3vxp8as5MIIwYW5B5li9hQd/jwoXV5uK435UjhBf58Hr1XYWqOCce1mWfB7bECkGnAeS1MvN12f4ej4Akli52cNsA7nJqPe92ryF0x7iOghT5oRRTo/5HzApYDKAoiGRXXZNTaJoJUKZQts1b3hrUW9jbsScGK8yOiARU3WhU6AGqZChWIwELG4VUn/bpzEZ3VACAfoBsB+WMZNPMVZrYITJJPuewt5TB0+dMM4YmSbxqbvKR1f+LspvjSWR5Fy5FNLvMEVcmUWBXO2B1aK17HQa/6Dgq9gjqYbhMnLbkyUiK3lOkIarQcoYajUbOIrBL7HyqCsXf3F9luY+aL9hnv1LoIocMCCm1HvYnXMA1NXZelnXxcNImYhWAh94jL4iLYO4F8IFLIvNbJ+5LIaWzKwuiA45K1EM2oK63t9cylNtm9DbKaXMhFcvqm5+UvC10zKhM2g4aaI7dx00Uc4En7QTl7xOp1I6pzdJutV2bKy25TDdBqJdCIWIPasE/h2fb3yorrs29++EtRQZqGi160D8YuyOvIP0wfsoEGG6Tr13VrVjDJrkJCAsCe0zP/zTDvLCvJACC/ha0xiZCiAmlKZ5DgScZczggdU+aYv3tSDekNQQOWa2QQqtBujRnl1Ake96vlClsPRNFNi8eqlatr+ZsG4mBC/4eFKcdvddx+V3ORJS9o6dGVT9GzC8VE9puXF6MM9ZaTrFafz1jZ1qFY2yCRJCQ8l1j13IqwDOhps8A9W7SVIotelyj9bdxiDye8QonUnsZx23vtPDFexpgHyXMqZWg4YsQn0vI9Qj9TLSoqXRyt0z7HV+tpUTqgRv48Yn8oJE3XMWaiEIqEMHK08/Iz+oyCGkL4pYiCgznkr9DNOBcSFpHGfnC4kOIilIwj1jMi9P76wdHdD/zIu/1Mz198OXjbPLlZ2HZoe0zWrF9Zus0SJ1I++uv5e9gUmu9SHJuMlEppyxqDuQiCZSCnzAYpMdjH7SuKGrjxKTcCC/BlQhcI7Dcd7OtyvwwJlZoB1/rDrtXFd362EtX98HvEREfYuW4iV2PKLA4X63pHwjuEVfgCUP+/RxBL79QNAlXtLzQFuYn7Cz33tCTP1rvEkHaPiH7QRMWJKsVC7Yy1Jlp/F8SCDdLYudYCGmj5sTDfDaxynQM1COfxnUcqzM5iGa8Y+e4jYbSdW4FAMlcpsZ9MOEgYlKzzrEzktS5KB96qCmMzGyp72xtXDH3MoqRFFCf3zQKJfwlduofbPYkWlqs4N3e9qp90kALzoX1T8go9FepVyEaDIIUiz/Cx3KFrsGHgpDjGoTa619tsH+qL60WPt/biRbZkPP5GJrnQxDBi+hXF1QxFLTtgmjxIKhCu5Om5kstqFBN34oonfU7tCO5kCzrnbDloQ56sCgGSEwWYz+C1PNA9Pfim+jiZVoSkWyEJrgrybGB2r4pAhG5yK5qU5IgDRwbG2FHMi18c4O7BZKwfUKCOWwV/DTW4s9gKtmNJ958XcVzGpu+B7jHDdG+/fFat8K3WZwf/1AWn6gTsRBQkbqZJtcHaXrWSn/DMeLTymXICpSTuj7QgKeSNixTZJboSTIPwX9UgLhaLbA67ZQ7z7DKMTtGcDmbGO5azv/jki7RG9IyTC6l9LhNnXV+1QyP26CadGPp+DdOnF/M8eUkq9G/uvSHoJGBDEO/pZxPngzLrR1wvf2O+/s30oEYV19h2iGhoZVUE7CJjtFkiTB2JBDZMxTdwQpi859ikjG6VwW4tXKM9e9Fe4o4xl8ynY6Fa7vY28MLdomQE5grMo/R9EkQNxl5XhaXpV98QGASM54CB9mB/iJqUJ0B4iuV0A2byGxkw9/TgDZEeVnocn6xF4HkDWQzR0vvTHvYVGwvFyabTB7Xlya9mMtvcRndbqtb/r+Jmd9H45XqXaJk0oG1NDfqM/ZIXjCId7qbXg0CE840oQaR9DL8Sy1JxFa3sOFFcUZPc6IUl1jBYK+eXgyMcsaVmxRHApw/O9wGmb2wTGX2d8qh7PtC/QoPK8kRiWMMxe9xdbrkpLzZsQSbDCHqOWLBYA9fJerM26GgKd+Bar7Vbp3ABm/R7fePyP6hRKee+qlj8N8gjCVlvefrPKQkmuPX+M59EWihzOIHxgDVKCW4Yfdo5QgxpfLVJUKxsmJP4wxlrIeJ5tzcrLqZcvByvliSMz14A7RfJQ/r9JWEDznGfCOcOzALNh0h2y8ZVa47FJ1OgP27FDYZWmMbiVTycINCeuDIAA0nXXbciHV2OPy4fYYvLN49xPRcgRuH5dLWRoxJrowmGE0ArLZ7LSV6rlqZpNCCjYHiuLuN0tuonAvQYKqrrJKGA/d6fEbVy96trDkfgbbNemVjYJUOnSBcmGtyxq6asL+ZNwuwykNS/U8sEOXanJmDQE4oudwxFc1Eh6cRLkqnEIPaiDyz4MRlkmHD/zyXK7k71ie7VVu73Wz48F6aKqXljmirBTNZABbXnvo2pXj7/R325osrWbqON6DlMNdN5DfjOrNtP+DqBDKhf4fp/tuZ0mXsEbp05o7/eb3ss1EygdMFN8jqn3CUR7VY7ifBEOc8Fr6QDkilFKhRTcEBK6hsxhYRmg2qomrGtRMQx75JyLXRti14KJ+hBT9uCSbOYz69kYEmLqC6y+w3Cfcc+EzqUcrzdgnOcL4D7+Jowrep+KkzVh+RCt7OzYntmR2HfdfT3VCo/TEleyZTWEWO8ZmvPBGu6QEeWn6OgLx/vg+5Gp1CkbliB8l36/lNiRlmBnIJjRTJMkubpzCYoa+MwhdhyG2d8ys73MaycrmxHdnDJKDzXfJ2HxanKcs73qwLSkCMXJ6v5SEQ14WAN2DEj4TDnQ9Bp8NCnEeUwVFjtbVXteyamujybw89LLaWftAo6NIFCPajBHdguKjq/s5or+hLhS5ZVN9JdfYu/XRhG99a9k/T6H3AeUamCLXmZzAj+LTAVUfr0o3V2RSnyNAJPsRT0wKKnTAGkLxURwBXCDMaLuZXum8uefMEhhq/g6Co1JfIWRFqFWmlScK50kM6742D1jH1YUhxD5smUPa0qVyKCusO/9bYflfp+n1bNexCRsjjaXEiVEOHOafReK3e/W+0UNjAB0jBbxv77UtHsJlCstmfCMFI1mn2SNQbHXuq7apsmmOXTPjrZBIvx5O5QwQKgLWXAZftoxuvMj77oRr6LGjn8MkLf8QguVBQoeJULqh2m1bRuJlMc/eMGCcMNv3KBb28md4vHlP9EKbnvga1EfCS3MfrQM0efPWmh+crg/i41VXqL7eSb9WRbJ2XDTHeZkF8g0Z8oyU19t3/C+LdQww47TbOe1DFzre6zSYwzANUMaoypNBEitbnuz/ClQ0b+kPyxlfM7Haca1JZiF7Zp9ib8X3R6n0v5SuyDDQHIg7F2X7ik62V9GPrht6FBr2dDlcUgNk+OOiwpBYg9LFPi/KhhjTRKYpcLb/EoVgNAuENTRXkkcLt44siXc98xJUMJLU4mpD8eR0+QG5SghF7lRtJNspxZNYl8xAo7xBT05TfxM0/zigkuZiD44Bk2m+gwyLtKqn+ma63ynPzN9gwJQanpp9Br/cKcjy2jmEpi88UEETgZcZcfuctzUo+n5Tm29tHAHXzWJrQmqqUnt+BwXZsaaUGBr88LeDovnQGwVpOIknnFwOSPZ4u9ufv37Q3MjrtpJNhyjhXjGZJy7yOP0U+vwxJnKLVkpXjjB7uPzhpzY768+8KKzzms2KJylW0QPmZDC1vZg6Tg0Sx8L/5dr56zWf/gMPPQVMd80o0b8DdcbnUoNWL2G07JZVCtC3FUAdnJVDWKzuWIgzykuUbp0tOoprk8zHGt09ksftw327+KAYl7wAij52Z6HR7NKbvhz0oQmXKLBA0GtdhlRtCrJ+XBkLZpDnS+sNIaRexOpBHIyP+NtPWYhtODOiIdYIFRKRmjtaR8FjHqHv3R06toq+OHDNQyKhm6tqGC9qFjnFsrirRhsPoEe9hKEnc0yRy+j6Hc5gTlp7XlT5iAC6j4VS1J+IZ27lgKh+cxayoN/bq1WCj+FSWRpNtuVH1nIndvhkq7weKpuMaqJ/e8ptpXQCXBAjB+BIaxRzjz/moK5Us7oINc1i8aSUsZZW5JYMQH35+Mhdxm5IrA7cWt2RiTTqeQPSf6xeViqsAnTw8sE7IDSK+AGfP5k4VeZEfVaAlBAGCHy1+D9eItF9UOBGPz1nWqTzR/wYzaeSzwCDcrJwILCBzoxPOXOGKoTzQlE+rDgi3SLxk4YvigZ8RDjp17FRvAIvwIc9wvjI9OdITPpngkCBLtPf1RLuNWg3ZNbrHiSKDW2FnGOiXgrcZXHbt9ThZcIiYVjC0pGbZTpUQjpQt+sZtfnZoJaHmdeuZK+7aEnRvqhWmtYvknrujeMBh+eMfMQRW1lOKFVgfmbmKIonGjStxOVh8ZsfsdKqU6+YFg8xrTGKBQxXvXzAo+dsLy8/sL3q+Xutn8GAet4d/fzRbVXZhCNInOfR0pM+bLwNxGJoK+CyBGmpflJ68Fg6GERQOwc0eIIdn4mbjWy40TG/i7wyGZl8ug2vFNghU417C1Q3Jxr5YE/lsWIz0MCQu1xxNWk0/Yk/IzvjNNobJX6ziCr527yoVWIcbLO9YqYCLM5niaGcx+dU5spMqpr2z8smsfHC+SDkfknDVIINZQTHdc4ZZk7RkANtF45FA1R1ZAk1zWS/czX0lRbWfBr1yU0112iELcxmZfQ792jFzjmFwqNqI02nbAylKUwJR7p9AaQN3gIHzg6o+U43tjJsCj+IxmPMoosqgSXeoUdSxfd3pBVV2sS8N/v7YRkB9pm/XbpXJ/Qj/KL0+jOO0zzvJ38NfoGke8e2lJ80jBzNuRm/juueWyhLPtnYHGpf042SH1/OCeXURt2NvjjQEyFSwR+qRM04o4PifUnWr9+eZcJEIghCFL7BV/toQO9hve0L5OAYTMdsKnlBaXi12LeHLAl3Osgu5bIYiKlFtogeS0bSKo+FP9icOQ2oT8McUhmrvPzhYN/H+/j2VWgpkpRDnALBkjXzidrG+rCx55qv0tkBosXFsMqWQFWbw2bYxjjjc6HzBI6t+PZMFbOO8ZncV2WdfOBnwGsuL7DkdXkTBgHxzoB+va1lghmKydggjkjuwWSSzVIpEByF5HbI1AwG79b7ycvEHODkkreyLETDEeUloEQV2zFoI1XmV4x3icwHsW//c7BDrMAR9wxHGA7uD9JZZpkRSrP8E5rVrehEiM2CpNkHXqP6w3LE8EesxN6ItS/AaLkUJ9yZ19ec6EZxe/RaFWI2mDEyAuYmhGs2+T4lYP3xc/CzmSEoQyE2QJFrOOJTqOxxrlXndMwgL9mz5IoDpbC127gg2fYqtFChdJhtXHT2dEJF63x+go3+BoznuPv3l901YhgP7UTHIWqcu8ZQmDpc8Tm8a6SCzS2ADYsQNkEjdG4V1Xc+LRanXstGlJK+QxDQbJ9tzbVIG978VCjeObZcn41dLglcVnxiR0ZiEThe54Ai95izfMIuVIrl9VekAEOPNS/PO+wcsHulU1si4fCU6zrG2Jd+HTLxPNaXy/vAC8CbR3k59uJeIAtCk1xS6IcC4BCodAFlIdjIed7iCvv0zZR5Kpdf18/aR01oIE6ly0oLR88peSj4DLQmkvIQCIcf4U47KbtvOB+eCagx+shRm6d1H2Ii2rGIysJuZ0Qu+w3Ve5p51MGxhyJ0YGeDNscp55O2icY/A17Jzz7kAlBnvbBPFPwTYNtk+tRZxiXIKVqoVoI1XcUyUTqbbw3DQAxvanD45ADd5xZTuOIZUWiWv1YeXcyvTCG67aCxjtmP4ed4ZX5r9RR/GyxuvifK/R0S5Zwiv+4OKAJYYSVt7WmWxNDMYZ1lgOezBs6NZLy91XNBfZ8ZtCC4JkrYbE=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="http://www.wshunli.com/posts/4e05997a.html"/>
    <id>http://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-04-28T04:09:43.403Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎您访问我的博客，请输入密码查看本文." />    <label for="pass">欢迎您访问我的博客，请输入密码查看本文.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+eWAy8tOd52ZafZvFSxP7QYR6Yt+e3gIlfznT6HavkhMSHNt4fJCcrA3VLalYhWWCij3E8ISje4lrfme8iTSh7VdXD1RW4v9uhmNEKo8aoigt6DI6omjrh876U3/yjrTM0mN0Qtb72F+C9WjSe/tq10KW6CVD4rLcNRiq9vPtMT6AVdy1LxutFjA2vjwJaTP3LqMikuFkN01BnG7EH0vTZ4StKraXUD0+IJ3wXaqcxoKbRPNwceUfCKBJmf91+oK416h6BWbzodIwUPTtzxxHh+nP/jKEJCmh3NAsaSVOFYQrBMGl9/Im/DM36Vmd0SLxmSjdfbLaZ1Fx0H2PkZXMlgOnA1XBUxf99U9mcmmRLOQiByPwXfbmXoCYO+RiW81s3kd4/e6oFBkEkpCdYNLXcJiLPuBRyIwyKiv4YWh/iKWnWdAOPVqahxyk2Yk2djSmU7xM5E8+SKhBfk5Nd2FVmqA/jnQE9d9UinjW2gZ9YkZHGC0IFRA2ixJ7mKmnmC5/Cuvd3PETpmPa67s4CL8dCEOFgUfZ63w+0tfzjfQjSVuw4MUgK8jqAQtY6rFMe7sKGxQU8WeiUQDed8BZmxvBNW1do9xW7qkVSR2riMQEHn5OlQBoQ2jmbVU5la6/1s1GdkAMIVCdoSzkUOOuQw2LH7mZ97QhfxAeroB4rcmPLTY1hjT0WiHtCiFxECrn1LDihTyT8sZpPKNBZarXgX0EU653ivZajHN78r5XRLxVuP36jVcRNZ7HWKe4qlmx9FVsak53Ko0pXi47nS0f2blgHAPU4i+9p4qlza73fuVFRVWd7vTQwuhMKwsD+Zlc1AOr1yKYR+3nWnzQqXAUMpDS7p7dpsiWcm00eFp8Pfm4nJZUQRnjd0hF98lGLtmG63dEtFEB4CRwxs+SGWWpEM/eG0zAWxDDFijpVFHkrOu+bmWC/VrHiZ4Stu+vFkw5q4koiR2et9blEs+vOKxLBHmfFzADoHQ/cvuDacsl7vzzlKfFTZrTskLVaKmhPqend8CZuBQPfKbIz4ifutNhrNTqKm3PZBwNkCni015OZ7x9KwHaq+BNiQtpwnvTGySFNEK/jOEa6ekBw4PXhrMjZ/I11deytEQT6OPod/ZtV+R7v7mWjoho3vWVZ0aWes1eY3mDIzXbCeyq7QvgXYsfu7vTNATawNN3u3rUsdh5IeUL2qLYYG/JDsZRE+785wmBQu/+VLHt/kMvCmVoPgj3nMU3KfG8PBbdXg5Qx6shrLyY8z2olC8/NnvTIKUPTQ/FHTVd9ELLO4RohbUATstT47h0PAAfZlB+O0Ut+/CE8CaSKEEVCgh+Lp7QWK9Nza6RnC7ZaOZz5OnOk8y6gKMCdha2s0QgxZ3nfvpWhrvCaDlwnKQ97TC9QapVie0N3+oWoEs1pIdnBc0KDLxvQIgI9Ju92GsPfqnSkTr0m166x8iK44krz2yH1N8GM5kEiqza4f5om/VETZtn4u73Hhs/YmOcP73YSuytT0qf1EsJa+Z+rhQNf/SMk7yh198XCsmKZjG/MkSccCv5wXNR+kaXFQfifBR59Yc3TmlSYkWFNmMiqTKREqnIP73v0CUbHtg+s+W1iqAI6Qowje/NXiT3yBTiKkGki80aC4atfPDbNlzV5oXLfSXUVb/wyDIAbqU52BvaG1IDNwXC/4iP22R8B8ZDOCZ28L4KqwyMvvQeIymsDTZaVuosIJ2uPQKsbCvCT/41rF5fIH52KRDQtCr6zaDB1XoagEnNBSz6QqBZqfEtsXsTdXrEBFVmXIF3QaM9kLe2CW7s6fflIOYbpCgGuRZXHJqGTJvZYfbSjmrMaMCtPbrFOSRxru0c1/G/q6VxADQMpuXTpux604ZnamOO4+DUWxae3bhU33KugNj67qS30pmFIS1TRexxujEIm6Geu6xXyQz0N6xG1v5YK++dFDszCiJiaowjzRgAZ3uInti7ObNNpRNlwbYnhmpkh3NyqZqYNp50Z3WtVZzn5a+Sa4cXDYmzldIvX+b5uj51JBNR/8GID18LlWfTEB8E1Z/txm5LAaKreUUFXDImSiHsYZEmh18iS0KB//riTHgohFzKC9Tf06R5EbDyLxEpuNG28Ml1zL7b2qq5ma2uhEWVL3jfJPolB82hCJTrOCuRYr87bMVHBwGTv93IaspTCdayE9QpALcts8sZjJ+dgIG5Psln2K7wXGBynBKW/GNKPkG2x6NKtxPfMwCdu4nLjMmh2fE+ONOvwTGt2xqTH13yZosfVlUnT52yjWCeaOOkKdMX4FPx/JhqMHNRnK+2QgFdjVXzu2C6uZKC6/7KHruR4Hh4rraq6YT7MvzAE/GtyHZ8pbb94QgGVcER4qLWt1XaDDdtkdu53XLnvflyGpwA+wbAu4qhOK16Nr5Kw5zsKdrGtR3cmdwmFRmGrRdScNwYxApyOFMElzuh8jzPorOSMFyZr0QGcC58E4Z0YVLW0DyJ3mEBLCkrCBAui2pao1wTrhif16xgfT+6RFedOfUswfZWt4a2Ku18z150D6GD6/LatlJYP8mMU+KmiAwE1NLIYvDSrVPfPKDRMOf7FbGsdHWMlOaiWmftPMZI3GlNy5z4fgQlul6QTX/2SelI2Pj06SFc5shHNyCgb+lnLgFsFiruef5dW4/aoGmwBHK+8peO4mWO//guQQXpuDgIZN/qFsRB8o0A/zyz1tW9E6g7Rb6neyVzWVW6acoYBfZAHPtqmXKkM79kgNZdJFUb3c/VzFQf+HndGLqnaUN13z+Vt/AfTMH9RRRLWIbydIHgUJAoEO7DtbnppajrUhtXbDr+dCVbkXCwexuV1rzh8JJRCVU5I5gAI3Ljc6w/XZaPtdf8jiJgBw0Ob6UXlfD3p6a0XZ8fay+7id9jD5awK8F/gNIQcanMxBTqxIxNb908jKzuo8CrFQF+0xhorM9ozzzJMxhuDRgFOvgACttQy6UMWF3mIqP7dL/DlcRPMe0IOVLYZBVtyoW7F3gn7O2/m/WVGx8siD3eLNfFiHso9O9qxhjJAeC+fE6M93+dKb61H2kWt2+Xjszrj3iRLePKomzufzfQZdEab1a8JaFsCeDwEighSF40MFr7ws+D/8odmbDzJnxPRoRLlXH5U1Ml/J/E0nZgl9VnjDqqaiwas1KmsGzYkMsZNzaO5P1wu6pzcBuldVYxzNsYSY0PkgPPv52zJJh9jYE7dd+uPwaC2KYwHi+EKkBFhKKIOtqGt6KH0ACFT1reHlls+0DGXHf65mFk811sjqMCksV+2ntDVu2MjPrMr/ukupBYJeW/VEtyB+o66xbsCYqQ7oAkJtd4kUZquLA/aBsufyly/fw==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="http://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>http://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-04-28T04:09:43.403Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="http://www.wshunli.com/posts/96840e7.html"/>
    <id>http://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-04-28T04:09:43.399Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="http://www.wshunli.com/posts/4e57ccd.html"/>
    <id>http://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-04-28T04:09:43.399Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="http://www.wshunli.com/posts/91672bd7.html"/>
    <id>http://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-04-28T04:09:43.399Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="http://www.wshunli.com/posts/84f52548.html"/>
    <id>http://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-04-28T04:09:43.403Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="http://www.wshunli.com/posts/b4e3c990.html"/>
    <id>http://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-04-28T04:09:43.403Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（六）</title>
    <link href="http://www.wshunli.com/posts/9c05eee5.html"/>
    <id>http://www.wshunli.com/posts/9c05eee5.html</id>
    <published>2018-01-22T02:44:25.000Z</published>
    <updated>2018-04-28T04:09:43.403Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="欢迎您访问我的博客，请输入密码查看本文." />    <label for="pass">欢迎您访问我的博客，请输入密码查看本文.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】生活是一条路，走走停停，停停走走
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK 开发入门</title>
    <link href="http://www.wshunli.com/posts/3eae2406.html"/>
    <id>http://www.wshunli.com/posts/3eae2406.html</id>
    <published>2018-01-19T13:00:14.000Z</published>
    <updated>2018-04-28T04:09:43.395Z</updated>
    
    <content type="html"><![CDATA[<p>Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。<a id="more"></a>在开发某些类型应用时，这有助于您重复使用以这些语言编写的代码库。</p><p>那我们为什么要使用 NDK 呢?</p><ul><li>代码的保护。由于 apk 的 Java 层代码很容易被反编译，而 C/C++ 库反汇难度较大。</li><li>可以方便地使用现存的开源库。大部分现存的开源库都是 用C/C++ 代码编写的。</li><li>提高程序的执行效率。将要求高性能的应用逻辑使用 C 开发，从而提高应用程序的执行效率。</li><li>便于移植。用 C/C++ 写得库可以方便在其他的嵌入式平台上再次使用。</li></ul><p>上述文字致谢 <a href="http://www.cnblogs.com/devinzhang/archive/2012/02/29/2373729.html" rel="external nofollow noopener noreferrer" target="_blank">Devin Zhang</a> 提供理论支持</p><p>本文默认已配置好 Android 开发环境，<br>关于 Android 开发环境配置可参考：<a href="http://www.wshunli.com/posts/f6977dbb.html">http://www.wshunli.com/posts/f6977dbb.html</a></p><h1 id="NDK-环境配置"><a href="#NDK-环境配置" class="headerlink" title="NDK 环境配置"></a>NDK 环境配置</h1><p>1、首先应该下载 NDK</p><p>官方指定的下载地址：<a href="https://developer.android.google.cn/ndk/downloads/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.google.cn/ndk/downloads/index.html</a></p><p>可能因为网络原因打不开，而且我们也不要那么新的。</p><p>本文以 Android NDK r10e 版本为例：</p><p>下载地址：<a href="https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip" rel="external nofollow noopener noreferrer" target="_blank">https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip</a></p><p>下载好之后，解压即可，我们解压到：<code>D:\Android\android-ndk-r10e</code></p><p>2、和配置 Android 环境类似，配置 NDK 环境</p><p>新建变量：<code>ANDROID_NDK</code></p><pre><code class="TXT">D:\Android\android-ndk-r10e</code></pre><p>在 <code>Path</code> 中添加</p><pre><code class="TXT">%ANDROID_NDK%</code></pre><p>3、验证 NDK 环境</p><p>在 命令控制符 中输入 <code>ndk-build -version</code> 存在输出即可。</p><h1 id="第一个-Android-NDK-项目"><a href="#第一个-Android-NDK-项目" class="headerlink" title="第一个 Android NDK 项目"></a>第一个 Android NDK 项目</h1><p>在 Android Studio 中新建 Android NDK 项目特别简单，</p><p>只需在新建项目时，勾选 <code>include C++ support</code> 即可：</p><p><img src="https://img.wshunli.com/Android/NDK/1.新建NDK项目.png" alt="1.新建NDK项目.png"></p><p>点击运行即可看到效果：</p><p><img src="https://img.wshunli.com/Android/NDK/1.Screenshot_1516414188.png-hexo.png" alt="1.Screenshot_1516414188.png"></p><h1 id="向现有项目添加-C-C-代码"><a href="#向现有项目添加-C-C-代码" class="headerlink" title="向现有项目添加 C/C++ 代码"></a>向现有项目添加 C/C++ 代码</h1><p>如果您希望向现有项目添加原生代码，请执行以下步骤：</p><p>1、<a href="#创建新的原生源文件">创建新的原生源文件</a>并将其添加到您的 Android Studio 项目中。</p><p>如果您已经拥有原生代码或想要导入预构建的原生库，则可以跳过此步骤。</p><p>2、<a href="#创建CMake构建脚本">创建 CMake 构建脚本</a>，将您的原生源代码构建到库中。如果导入和关联预构建库或平台库，您也需要此构建脚本。</p><p>如果您的现有原生库已经拥有 <code>CMakeLists.txt</code> 构建脚本或者使用 ndk-build 并包含 Android.mk 构建脚本，则可以跳过此步骤。</p><p>3、提供一个指向您的 CMake 或 ndk-build 脚本文件的路径，<a href="#将Gradle关联到您的原生库">将 Gradle 关联到您的原生库</a>。Gradle 使用构建脚本将源代码导入您的 Android Studio 项目并将原生库（SO 文件）打包到 APK 中。</p><h2 id="创建新的原生源文件"><a href="#创建新的原生源文件" class="headerlink" title="创建新的原生源文件"></a>创建新的原生源文件</h2><p>1、选择 Project 视图，在 main 目录下，新建 cpp 文件夹；</p><p>2、在 cpp 文件夹下新建 C/C++ Source File ，本文以 <code>native-lib</code> 为例。</p><p><img src="https://img.wshunli.com/Android/NDK/1.创建新的原生源文件.png" alt="1.创建新的原生源文件.png"></p><h2 id="创建CMake构建脚本"><a href="#创建CMake构建脚本" class="headerlink" title="创建CMake构建脚本"></a>创建CMake构建脚本</h2><p>CMake 构建脚本是一个纯文本文件，您必须将其命名为 CMakeLists.txt。</p><p>在 Android 视图下，在 app 模块下右键，新建 File，文件名为 <code>CMakeLists.txt</code>。</p><p>文件内容如下：</p><pre><code class="TXT"># For more information about using CMake with Android Studio, read the# documentation: https://d.android.com/studio/projects/add-native-code.html# Sets the minimum version of CMake required to build the native library.cmake_minimum_required(VERSION 3.4.1)# 指示 CMake 从原生源代码创建一个原生库add_library( # Sets the name of the library.             native-lib             # Sets the library as a shared library.             SHARED             # Provides a relative path to your source file(s).             src/main/cpp/native-lib.cpp )# 添加引用 NDK 库find_library( # Sets the name of the path variable.              log-lib              # Specifies the name of the NDK library that              # you want CMake to locate.              log )# 关联 NDK 库target_link_libraries( # Specifies the target library.                       native-lib                       # Links the target library to the log library                       # included in the NDK.                       ${log-lib} )</code></pre><h2 id="将Gradle关联到您的原生库"><a href="#将Gradle关联到您的原生库" class="headerlink" title="将Gradle关联到您的原生库"></a>将Gradle关联到您的原生库</h2><p>在 Android 视图下，右键点击您想要关联到原生库的模块（例如 app 模块），并从菜单中选择 <code>Link C++ Project with Gradle</code>。</p><p><img src="https://img.wshunli.com/Android/NDK/1.将Gradle关联到您的原生库.png" alt="1.将Gradle关联到您的原生库.png"></p><p>或者手动配置：</p><pre><code class="Gradle">android {  ...  defaultConfig {...}  buildTypes {...}  // Encapsulates your external native build configurations.  externalNativeBuild {    // Encapsulates your CMake build configurations.    cmake {      // Provides a relative path to your CMake build script.      path &quot;CMakeLists.txt&quot;    }  }}</code></pre><p>可选配置，可以包裹一些特定的示例代码：</p><pre><code class="Gradle">android {    compileSdkVersion 26    defaultConfig {        ···        externalNativeBuild {            cmake {                cppFlags &quot;-frtti -fexceptions&quot;            }        }        ndk {            // Specifies the ABI configurations of your native            // libraries Gradle should build and package with your APK.            abiFilters &#39;x86&#39;, &#39;x86_64&#39;, &#39;armeabi&#39;, &#39;armeabi-v7a&#39;, &#39;arm64-v8a&#39;        }    }</code></pre><p>最后运行即可，效果是一样的。</p><h1 id="添加-native-方法流程"><a href="#添加-native-方法流程" class="headerlink" title="添加 native 方法流程"></a>添加 native 方法流程</h1><p>在 <code>MainActivity</code> 中添加 native 方法：</p><pre><code class="Java">    public native void printLog();</code></pre><p>在 <code>native-lib.cpp</code> 中添加头文件及宏定义</p><pre><code class="C">#include &lt;android/log.h&gt;#define TAG &quot;native-lib&quot;#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, TAG, __VA_ARGS__)</code></pre><p>实现 native 方法，我们这里打印个日志：</p><pre><code class="C">extern &quot;C&quot;JNIEXPORT void JNICALLJava_com_wshunli_android_ndk_demo_MainActivity_printLog(JNIEnv *env, jobject instance) {    LOGV(&quot;log from native&quot;);}</code></pre><p>这个方法可以自动生成，在 native 方法下 <code>Alt + Enter</code> 即可。</p><p>本文源码：<a href="https://github.com/wshunli/android-ndk-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/android-ndk-demo</a></p><blockquote><p>参考资料<br>1、Android NDK | Android Developers<br><a href="https://developer.android.com/ndk/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/ndk/index.html</a><br>2、Android-NDK入门-慕课网<br><a href="https://www.imooc.com/learn/411" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/411</a><br>3、Android-NDK进阶-慕课网<br><a href="https://www.imooc.com/learn/918" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/918</a><br>4、Android NDK开发(一) 入门 - 简书<br><a href="https://www.jianshu.com/p/0261e6cceb3e" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0261e6cceb3e</a><br>5、向您的项目添加 C 和 C++ 代码 | Android Studio<br><a href="https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="NDK" scheme="http://www.wshunli.com/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Android图片加载框架Glide简单使用</title>
    <link href="http://www.wshunli.com/posts/d82d8606.html"/>
    <id>http://www.wshunli.com/posts/d82d8606.html</id>
    <published>2018-01-19T12:14:17.000Z</published>
    <updated>2018-04-28T04:09:43.395Z</updated>
    
    <content type="html"><![CDATA[<p>Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。<a id="more"></a>Glide 提供了易用的 API，高性能、可扩展的图片解码管道（decode pipeline），以及自动的资源池技术。</p><h1 id="Glide-介绍"><a href="#Glide-介绍" class="headerlink" title="Glide 介绍"></a>Glide 介绍</h1><p>Glide 支持拉取，解码和展示视频快照，图片，和GIF动画。Glide的Api是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide使用的是一个定制化的基于HttpUrlConnection的栈，但同时也提供了与Google Volley和Square OkHttp快速集成的工具库。</p><p>虽然Glide 的主要目标是让任何形式的图片列表的滚动尽可能地变得更快、更平滑，但实际上，Glide几乎能满足你对远程图片的拉取/缩放/显示的一切需求。</p><h1 id="Glide-简单使用"><a href="#Glide-简单使用" class="headerlink" title="Glide 简单使用"></a>Glide 简单使用</h1><p>0、添加 Glide 依赖</p><pre><code class="gradle">dependencies {  implementation &#39;com.github.bumptech.glide:glide:4.5.0&#39;  annotationProcessor &#39;com.github.bumptech.glide:compiler:4.5.0&#39;}</code></pre><p>1、准备图片容器</p><p>我们在布局文件中添加 ImageView 控件：</p><pre><code class="XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;    android:background=&quot;#8f8f8f&quot;    tools:context=&quot;com.wshunli.glidedemo.MainActivity&quot;&gt;    &lt;Button        android:id=&quot;@+id/bt&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;@string/app_name&quot; /&gt;    &lt;ImageView        android:id=&quot;@+id/img&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt;</code></pre><p>2、加载图片</p><p>我们以加载 <a href="https://img.wshunli.com/Android/Glide/Glide.min.png" rel="external nofollow noopener noreferrer" target="_blank">https://img.wshunli.com/Android/Glide/Glide.min.png</a> 为例。</p><pre><code class="Java">Glide.with(MainActivity.this)        .load(&quot;https://img.wshunli.com/Android/Glide/Glide.min.png&quot;)        .into(img);</code></pre><p>真的超级简单。</p><p>MainActivity 完整代码如下：</p><pre><code class="Java">package com.wshunli.glidedemo;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.Button;import android.widget.ImageView;import com.bumptech.glide.Glide;public class MainActivity extends AppCompatActivity {    private ImageView img;    private Button bt;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        img = findViewById(R.id.img);        bt = findViewById(R.id.bt);        bt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Glide.with(MainActivity.this)                        .load(&quot;https://img.wshunli.com/Android/Glide/Glide.min.png&quot;)                        .into(img);            }        });    }}</code></pre><p>注意别忘了声明权限：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code></pre><p>3、取消加载图片</p><pre><code class="Java">Glide.with(MainActivity.this).clear(img);</code></pre><p>取消加载也超级简单。</p><p>4、最终加载效果</p><p><img src="https://img.wshunli.com/Android/Glide/Screenshot_1516366180.png-hexo.png" alt="Glide加载图图片"></p><h1 id="ProGuard-混淆规则"><a href="#ProGuard-混淆规则" class="headerlink" title="ProGuard 混淆规则"></a>ProGuard 混淆规则</h1><pre><code class="gradle">-keep public class * implements com.bumptech.glide.module.GlideModule-keep public class * extends com.bumptech.glide.module.AppGlideModule-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {  **[] $VALUES;  public *;}# for DexGuard only-keepresourcexmlelements manifest/application/meta-data@value=GlideModule</code></pre><blockquote><p>参考资料<br>1、bumptech/glide: An image loading and caching library for Android focused on smooth scrolling<br><a href="https://github.com/bumptech/glide" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/bumptech/glide</a><br>2、Android图片加载框架最全解析（一），Glide的基本用法 - 郭霖的专栏 - CSDN博客<br><a href="http://blog.csdn.net/guolin_blog/article/details/53759439" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/guolin_blog/article/details/53759439</a><br>3、Glide v4 : 快速高效的Android图片加载库<br><a href="https://muyangmin.github.io/glide-docs-cn/" rel="external nofollow noopener noreferrer" target="_blank">https://muyangmin.github.io/glide-docs-cn/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="Glide" scheme="http://www.wshunli.com/tags/Glide/"/>
    
  </entry>
  
  <entry>
    <title>Android注入框架Butter Knife使用入门</title>
    <link href="http://www.wshunli.com/posts/896cb4b5.html"/>
    <id>http://www.wshunli.com/posts/896cb4b5.html</id>
    <published>2018-01-18T04:54:15.000Z</published>
    <updated>2018-04-28T04:09:43.395Z</updated>
    
    <content type="html"><![CDATA[<p>Butter Knife 是一个专注于 Android 系统的 View 注入框架<a id="more"></a>，可以减少大量的 findViewById 以及 setOnClickListener 代码，可视化一键生成。</p><h1 id="Butter-Knife-概述"><a href="#Butter-Knife-概述" class="headerlink" title="Butter Knife 概述"></a>Butter Knife 概述</h1><p>1.强大的View绑定和Click事件处理功能，简化代码，提升开发效率<br>2.方便的处理Adapter里的ViewHolder绑定问题<br>3.运行时不会影响APP效率，使用配置方便<br>4.代码清晰，可读性强</p><h1 id="Butter-Knife-上手使用"><a href="#Butter-Knife-上手使用" class="headerlink" title="Butter Knife 上手使用"></a>Butter Knife 上手使用</h1><p>0、首先为项目添加 Butter Knife 依赖：</p><pre><code class="gradle">dependencies {  compile &#39;com.jakewharton:butterknife:8.8.1&#39;  annotationProcessor &#39;com.jakewharton:butterknife-compiler:8.8.1&#39;}</code></pre><p>1、简单使用示例:</p><p>首先在 onCreate 绑定 Activity 实例。</p><pre><code class="Java">package com.wshunli.butterknifedemo;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.widget.Button;import android.widget.Toast;import butterknife.BindString;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;public class MainActivity extends AppCompatActivity {    @BindView(R.id.button)    Button button;    @BindString(R.string.app_name)    String appName;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        ButterKnife.bind(this);    }    @OnClick(R.id.button)    void clickButton() {        Toast.makeText(this, appName, Toast.LENGTH_LONG).show();    }}</code></pre><p>其中：<code>@BindView</code> 根据控件 id 绑定；<code>@BindString</code> 绑定资源中的字符串；<code>@OnClick</code> 绑定按钮的单击事件。</p><p>3、最终效果：</p><p>点击按钮，显示app名称。</p><p><img src="https://img.wshunli.com/Android/ButterKnife/Screenshot_1516251143.png-hexo.png" alt="最终效果"></p><h1 id="Butter-Knife-方法详解"><a href="#Butter-Knife-方法详解" class="headerlink" title="Butter Knife 方法详解"></a>Butter Knife 方法详解</h1><p>1、绑定 Activity 和 Fragment</p><p>在 onCreate 中绑定 Activity</p><pre><code class="Java">@Override public void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.simple_activity);    ButterKnife.bind(this);    // TODO Use fields...  }</code></pre><p>在 onCreateView 中绑定 Fragment</p><pre><code class="Java"> @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {    View view = inflater.inflate(R.layout.fancy_fragment, container, false);    ButterKnife.bind(this, view);    // TODO Use fields...    return view;  }</code></pre><p>2、绑定布局中的 View</p><pre><code class="Java">  @BindView(R.id.title) TextView title;  @BindView(R.id.subtitle) TextView subtitle;  @BindView(R.id.footer) TextView footer;</code></pre><p>3、在 Adapter ViewHolder 中绑定 View</p><pre><code class="Java">  static class ViewHolder {    @BindView(R.id.title) TextView name;    @BindView(R.id.job_title) TextView jobTitle;    public ViewHolder(View view) {      ButterKnife.bind(this, view);    }  }</code></pre><p>4、绑定资源</p><pre><code class="Java">  @BindString(R.string.title) String title;  @BindDrawable(R.drawable.graphic) Drawable graphic;  @BindColor(R.color.red) int red; // int or ColorStateList field  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field  // ...</code></pre><p>5、绑定方法</p><pre><code class="Java">@OnClick(R.id.submit)public void submit() {  // TODO submit data to server...}</code></pre><p>或者</p><pre><code class="Java">@OnClick(R.id.submit)public void submit(View view) {  // TODO submit data to server...}</code></pre><p>甚至自动类型转换：</p><pre><code class="Java">@OnClick(R.id.submit)public void sayHi(Button button) {  button.setText(&quot;Hello!&quot;);}</code></pre><p>多个 View 绑定同一个事件：</p><pre><code class="Java">@OnClick({ R.id.door1, R.id.door2, R.id.door3 })public void pickDoor(DoorView door) {  if (door.hasPrizeBehind()) {    Toast.makeText(this, &quot;You win!&quot;, LENGTH_SHORT).show();  } else {    Toast.makeText(this, &quot;Try again&quot;, LENGTH_SHORT).show();  }}</code></pre><p>本文内容基于 Butter Knife 8.8.1 ，时间原因部分方法可能过时，最新版可参考 <a href="http://jakewharton.github.io/butterknife/" rel="external nofollow noopener noreferrer" target="_blank">http://jakewharton.github.io/butterknife/</a></p><blockquote><p>参考资料<br>1、JakeWharton/butterknife: Bind Android views and callbacks to fields and methods.<br><a href="https://github.com/JakeWharton/butterknife" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/JakeWharton/butterknife</a><br>2、ButterKnife使用详解 - ITjianghuxiaoxiong的专栏 - CSDN博客<br><a href="http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Butter Knife 是一个专注于 Android 系统的 View 注入框架
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="ButterKnife" scheme="http://www.wshunli.com/tags/ButterKnife/"/>
    
  </entry>
  
  <entry>
    <title>Android事件总线EventBus使用总结</title>
    <link href="http://www.wshunli.com/posts/6a115a99.html"/>
    <id>http://www.wshunli.com/posts/6a115a99.html</id>
    <published>2018-01-17T04:36:06.000Z</published>
    <updated>2018-04-28T04:09:43.395Z</updated>
    
    <content type="html"><![CDATA[<p>EventBus是一款针对Android优化的<strong>发布/订阅</strong>事件总线<a id="more"></a>，简化了应用程序内各组件间、组件与后台线程间的通信。</p><p><img src="https://img.wshunli.com/Android/EventBus/EventBus-Publish-Subscribe.min.png" alt="EventBus 发布订阅模式"></p><p>主要是替代 handler BroadCast 在 Fragment 、Activity 、Service 线程之间传递消息。</p><h1 id="EventBus-概述"><a href="#EventBus-概述" class="headerlink" title="EventBus 概述"></a>EventBus 概述</h1><p>1、EventBus 有三个主要的元素：</p><ul><li>Event：事件，可以是任意类型的对象。</li><li>Subscriber：事件订阅者，<del>在EventBus3.0之前消息处理的方法只能限定于onEvent、onEventMainThread、onEventBackgroundThread和onEventAsync，他们分别代表四种线程模型</del>。而在EventBus3.0之后，事件处理的方法可以随便取名，但是需要添加一个注解@Subscribe，并且要指定线程模型（默认为POSTING），四种线程模型下面会讲到。</li><li>Publisher：事件发布者，可以在任意线程任意位置发送事件，直接调用EventBus的post(Object)方法。可以自己实例化EventBus对象，但一般使用EventBus.getDefault()就好了，根据post函数参数的类型，会自动调用订阅相应类型事件的函数。</li></ul><p>2、EventBus3.0有以下四种ThreadMode（线程模型）：</p><ul><li>POSTING（默认）：<strong>发布事件和接收事件在同一个线程</strong>，也就是说该事件在哪个线程发布出来的，事件处理函数就会在这个线程中运行。</li><li>MAIN: 事件的处理<strong>总是在UI线程</strong>中执行。</li><li>ASYNC：无论事件在哪个线程发布，该事件处理函数<strong>总是在新建的子线程</strong>中执行，同样，此事件处理函数中禁止进行UI更新操作。</li><li>BACKGROUND：如果事件是在UI线程中发布出来的，那么该事件处理函数就会在新的线程中运行，如果事件本来就是子线程中发布出来的，那么该事件处理函数直接在发布事件的线程中执行。</li></ul><h1 id="EventBus-快速入门"><a href="#EventBus-快速入门" class="headerlink" title="EventBus 快速入门"></a>EventBus 快速入门</h1><p>0、首先为项目添加 EventBus 依赖：</p><pre><code class="gradle">compile &#39;org.greenrobot:eventbus:3.1.1&#39;</code></pre><p>1、定义事件类:</p><pre><code class="java">public static class MessageEvent { /* Additional fields if needed */ }</code></pre><p>2、准备订阅者:</p><pre><code class="java">@Subscribe(threadMode = ThreadMode.MAIN)public void onMessageEvent(MessageEvent event) {/* Do something */};</code></pre><p>3、发送事件:</p><pre><code class="java">EventBus.getDefault().post(new MessageEvent());</code></pre><h1 id="EventBus-实际应用"><a href="#EventBus-实际应用" class="headerlink" title="EventBus 实际应用"></a>EventBus 实际应用</h1><p>这里举例子具体介绍 EventBus 的用法，实现Activity之间传值。</p><p>1、定义消息事件类</p><pre><code class="java">package com.wshunli.eventbusdemo;public class MessageEvent {    private String message;    public MessageEvent(String message) {        this.message = message;    }    public String getMessage() {        return message;    }    public void setMessage(String message) {        this.message = message;    }    @Override    public String toString() {        return &quot;MessageEvent{&quot; +                &quot;message=&#39;&quot; + message + &#39;\&#39;&#39; +                &#39;}&#39;;    }}</code></pre><p>2、注册和取消订阅事件</p><p>根据组件的声明周期，在 MainActivity.java 中注册/取消订阅事件。</p><pre><code class="java">package com.wshunli.eventbusdemo;import android.content.Intent;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import android.widget.TextView;import android.widget.Toast;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;public class MainActivity extends AppCompatActivity {    private TextView textView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        // 注册订阅事件        EventBus.getDefault().register(this);        // 跳转到 SecondActivity        findViewById(R.id.bt).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                startActivity(new Intent(MainActivity.this, SecondActivity.class));            }        });        textView = findViewById(R.id.text);    }    @Override    protected void onDestroy() {        super.onDestroy();        // 取消订阅事件        EventBus.getDefault().unregister(this);    }}</code></pre><p>3、添加消息处理函数</p><p>在 MainActivity.java 中添加事件的处理函数：</p><pre><code class="java">    @Subscribe(threadMode = ThreadMode.MAIN)    public void onMessageEvent(MessageEvent event) {        textView.setText(String.format(&quot;接收到发送的事件：%s&quot;, event.getMessage()));    }</code></pre><p>我们选择 <code>threadMode = ThreadMode.MAIN</code> 表示总是在 <strong>主线程</strong> 中执行。</p><p>4、发布事件</p><p>在 SecondActivity 中发布事件：</p><pre><code class="java">package com.wshunli.eventbusdemo;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import org.greenrobot.eventbus.EventBus;public class SecondActivity extends AppCompatActivity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_second);        findViewById(R.id.bt).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                EventBus.getDefault().post(new MessageEvent(&quot;来自SecondActivity的消息&quot;));                finish();            }        });    }}</code></pre><p>5、接收到消息</p><p>在 MainActivity 接受到来自 SecondActivity 中发送的消息：</p><p><img src="https://img.wshunli.com/Android/EventBus/Screenshot_1516247350.png-hexo.png" alt="EventBus消息"></p><h1 id="ProGuard-混淆规则"><a href="#ProGuard-混淆规则" class="headerlink" title="ProGuard 混淆规则"></a>ProGuard 混淆规则</h1><pre><code class="gradle">-keepattributes *Annotation*-keepclassmembers class ** {    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;}-keep enum org.greenrobot.eventbus.ThreadMode { *; }# Only required if you use AsyncExecutor-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {    &lt;init&gt;(java.lang.Throwable);}</code></pre><blockquote><p>参考资料<br>1、greenrobot/EventBus: Event bus for Android and Java that simplifies communication between Activities, Fragments, Threads, Services, etc. Less code, better quality.<br><a href="https://github.com/greenrobot/EventBus" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/greenrobot/EventBus</a><br>2、Android事件总线（一）EventBus3.0用法全解析 - 刘望舒的专栏 - CSDN博客<br><a href="http://blog.csdn.net/itachi85/article/details/52205464" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/itachi85/article/details/52205464</a><br>3、EventBus 3.0的用法详解（一） - neu - SegmentFault<br><a href="https://segmentfault.com/a/1190000004279679" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000004279679</a><br>4、Android事件分发库的使用-慕课网<br><a href="https://www.imooc.com/learn/871" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/871</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EventBus是一款针对Android优化的&lt;strong&gt;发布/订阅&lt;/strong&gt;事件总线
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="EventBus" scheme="http://www.wshunli.com/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>ClassNotFoundException</title>
    <link href="http://www.wshunli.com/posts/774f73e1.html"/>
    <id>http://www.wshunli.com/posts/774f73e1.html</id>
    <published>2018-01-10T12:23:30.000Z</published>
    <updated>2018-04-28T04:09:43.395Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ClassNotFoundException</strong> 是 java.lang.ClassNotFoundException 的简称<a id="more"></a>，是 Java 语言中的一个异常类，位于 java.lang 包中，父类是 java.lang.ReflectiveOperationException ，该异常指找不到指定的 Class。</p><p>常见的场景就是：</p><p>1 调用class的forName方法时，找不到指定的类。<br>2 ClassLoader 中的 findSystemClass() 方法时，找不到指定的类。<br>3 ClassLoader 中的 loadClass() 方法时，找不到指定的类。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ClassNotFoundException&lt;/strong&gt; 是 java.lang.ClassNotFoundException 的简称
    
    </summary>
    
      <category term="技术分享" scheme="http://www.wshunli.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="ClassNotFoundException" scheme="http://www.wshunli.com/tags/ClassNotFoundException/"/>
    
  </entry>
  
</feed>
