<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  <subtitle>wshunli`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-07-29T15:23:22.320Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>沉迷学术，不可自拔（十一）</title>
    <link href="https://www.wshunli.com/posts/a7e2fd51.html"/>
    <id>https://www.wshunli.com/posts/a7e2fd51.html</id>
    <published>2018-07-27T06:41:47.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】算是人生的第一份工作吧
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins安装Java代码质量分析工具</title>
    <link href="https://www.wshunli.com/posts/57f40b04.html"/>
    <id>https://www.wshunli.com/posts/57f40b04.html</id>
    <published>2018-07-25T01:15:32.000Z</published>
    <updated>2018-07-29T15:23:22.308Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Checkstyle、PMD、FindBugs 三款主流的 Java 静态分析工具，以及 SourceMonitor 代码度量工具，Simian 代码重复检查工具等。</p><h1 id="Jenkins-安装-Java-代码质量分析工具"><a href="#Jenkins-安装-Java-代码质量分析工具" class="headerlink" title="Jenkins 安装 Java 代码质量分析工具"></a>Jenkins 安装 Java 代码质量分析工具</h1><p>在 Java 世界中，Checkstyle、PMD、FindBugs 插件是三款主流的静态分析工具。</p><p>1、Checkstyle 擅长检查编码标准和约定，编码行为以及其他的一些质量指标（如代码复杂度）。</p><p>Checkstyle（<a href="http://checkstyle.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">http://checkstyle.sourceforge.net/</a> ） 是 SourceForge 下的一个项目，提供了一个帮助 JAVA 开发人员遵守某些编码规范的工具。</p><p>CheckStyle 检验的主要内容包括：Javadoc 注释、命名约定、标题、Import 语句、体积大小、空白、修饰符、块、代码问题、类设计和混合检查（包括一些有用的比如非必须的 System.out 和 printstackTrace）。</p><p>在 Jenkins 中安装 CheckStyle 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;        &lt;version&gt;2.16&lt;/version&gt;        &lt;configuration&gt;            &lt;configLocation&gt;checkstyle.xml&lt;/configLocation&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>checkstyle:checkstyle</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/Checkstyle+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Checkstyle+Plugin</a></p><p>2、PMD 类似于 Checkstyle ，它更加专注于编码和设计实践。</p><p>PMD（<a href="https://pmd.github.io/" rel="external nofollow noopener noreferrer" target="_blank">https://pmd.github.io/</a> ） An extensible cross-language static code analyzer.</p><p>专注于潜在的编码问题，比如未使用或者次优化的代码，代码大小和复杂性，以及良好的编码行为。</p><p>PMD 也附带了 CPD ，以支持探测重复或者近似重复代码。</p><p>在 Jenkins 中安装 PMD 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;        &lt;version&gt;3.5&lt;/version&gt;    &lt;/plugin&gt;            ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>pmd:pmd</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/PMD+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/PMD+Plugin</a></p><p>3、FindBugs 专注于识别潜在的危险和错误的代码。</p><p>FindBugs（<a href="http://findbugs.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">http://findbugs.sourceforge.net/</a> ） 检查应用程序的字节码来找出潜在的 bug 、性能问题或者差的编码行为。</p><p>在 Jenkins 中安装 FindBugs 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;        &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.5.2&lt;/version&gt;        &lt;configuration&gt;            &lt;findbugsXmlOutput&gt;true&lt;/findbugsXmlOutput&gt;            &lt;findbugsXmlWithMessages&gt;true&lt;/findbugsXmlWithMessages&gt;            &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>findbugs:findbugs</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/FindBugs+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/FindBugs+Plugin</a></p><p>4、Static Analysis Collector 插件汇总静态分析结果</p><p>插件地址：<a href="https://wiki.jenkins.io/display/JENKINS/Analysis+Collector+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Analysis+Collector+Plugin</a></p><h1 id="Jenkins-安装-SourceMonitor-代码度量工具"><a href="#Jenkins-安装-SourceMonitor-代码度量工具" class="headerlink" title="Jenkins 安装 SourceMonitor 代码度量工具"></a>Jenkins 安装 SourceMonitor 代码度量工具</h1><p>SourceMonitor（<a href="http://www.campwoodsw.com/sourcemonitor.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.campwoodsw.com/sourcemonitor.html</a> ） 允许查看软件源代码内部，以了解项目拥有的代码量，并确定模块的相对复杂度。</p><p>在 Jenkins 中也有 SourceMonitor（<a href="https://github.com/jenkinsci/sourcemonitor-plugin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jenkinsci/sourcemonitor-plugin</a> ）插件，但是好久没更新了，也存在一些问题（<a href="https://issues.jenkins-ci.org/browse/JENKINS-5741" rel="external nofollow noopener noreferrer" target="_blank">https://issues.jenkins-ci.org/browse/JENKINS-5741</a> ）。</p><p>报错如下：</p><pre><code class="TXT">Parsing sourcemonitor resultshudson.AbortException: Parsing file error    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorParser.invoke(SourceMonitorParser.java:70)    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorParser.invoke(SourceMonitorParser.java:45)    at hudson.FilePath.act(FilePath.java:1047)    at hudson.FilePath.act(FilePath.java:1025)    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorPublisher.perform(SourceMonitorPublisher.java:80)    at hudson.tasks.BuildStepMonitor$3.perform(BuildStepMonitor.java:45)    at hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)    at hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:690)    at hudson.model.Build$BuildExecution.post2(Build.java:186)    at hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:635)    at hudson.model.Run.execute(Run.java:1819)    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)    at hudson.model.ResourceController.execute(ResourceController.java:97)    at hudson.model.Executor.run(Executor.java:429)Build step &#39;Publish SourceMonitor results&#39; changed build result to FAILUREBuild step &#39;Publish SourceMonitor results&#39; marked build as failureFinished: FAILURE</code></pre><p>原因是在构建的时候需要添加 <code>sourcemonitor:sourcemonitor</code> 参数。</p><p>SourceMonitor 插件地址：<a href="https://plugins.jenkins.io/sourcemonitor" rel="external nofollow noopener noreferrer" target="_blank">https://plugins.jenkins.io/sourcemonitor</a></p><p>这里可以安装公司内部的 <code>hwSourceMonitor.hpi</code> 插件</p><p>参考资料：<br>1、<a href="http://3ms.huawei.com/km/blogs/details/2503631" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/km/blogs/details/2503631</a><br>2、<a href="http://3ms.huawei.com/hi/group/2033815/wiki_4496373.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/hi/group/2033815/wiki_4496373.html</a></p><p><del>也可以使用 HTML Publisher 插件解析 SourceMonitor 输出的 xml 结果。</del></p><p>0、准备 SourceMonitor 并安装 Jenkins Server 上。</p><p>本文安装在 <code>C:\Program Files (x86)\SourceMonitor\SourceMonitor.exe</code> 目录。</p><p>1、安装 HTML Publisher 插件。</p><p>HTML Publisher Plugin 用来把 SourceMonitor 检测的结果可视化。</p><p>2、在构建后添加 Windows 批处理命令。</p><pre><code class="Shell">&quot;C:\Program Files (x86)\SourceMonitor\SourceMonitor.exe&quot; /C &quot;C:\CI_Tools\SourceMonitorCommand.xml&quot;&quot;C:\CI_Tools\msxsl.exe&quot; SourceMonitorReport.xml &quot;C:\CI_Tools\SourceMonitorSummaryGeneration.xsl&quot; -o SourceMonitorSummaryGeneration.xml&quot;C:\CI_Tools\msxsl.exe&quot; SourceMonitorSummaryGeneration.xml &quot;C:\CI_Tools\SourceMonitor.xsl&quot; -o SourceMonitorResult.html</code></pre><p>其中 <code>SourceMonitorCommand.xml</code> 来自</p><p><code>C:\Program Files (x86)\SourceMonitor\Samples\sample_commands.xml</code></p><pre><code class="XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;sourcemonitor_commands&gt;    &lt;write_log&gt;true&lt;/write_log&gt;    &lt;command&gt;        &lt;project_file&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\target/sourcemonitor\project.smp&lt;/project_file&gt;        &lt;project_language&gt;Java&lt;/project_language&gt;        &lt;source_directory&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\src\main\java&lt;/source_directory&gt;        &lt;parse_utf8_files&gt;true&lt;/parse_utf8_files&gt;        &lt;file_extensions&gt;*.java&lt;/file_extensions&gt;        &lt;include_subdirectories&gt;true&lt;/include_subdirectories&gt;        &lt;export&gt;            &lt;export_file&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\target/sourcemonitor\sourcemonitor.xml&lt;/export_file&gt;            &lt;export_type&gt;2 (project details as XML)&lt;/export_type&gt;            &lt;export_option&gt;Include method metrics: option 3&lt;/export_option&gt;        &lt;/export&gt;    &lt;/command&gt;&lt;/sourcemonitor_commands&gt;</code></pre><p>需要下载 <code>msxsl</code> 工具（<a href="http://www.microsoft.com/en-us/download/details.aspx?id=21714" rel="external nofollow noopener noreferrer" target="_blank">http://www.microsoft.com/en-us/download/details.aspx?id=21714</a> ）并放置到 <code>C:\CI_Tools</code> 目录下。</p><p>3、最后添加 Publish HTML reports 即可。</p><p>不过我没有配置成功，总是提示找不到 <code>SourceMonitorReport.xml</code> 文件。</p><p>如果使用 SourceMonitor 插件遇到如下 OutOfMemoryError 错误。</p><pre><code class="TXT">FATAL: Java heap spacejava.lang.OutOfMemoryError: Java heap space</code></pre><p>解决办法：<a href="https://wiki.jenkins.io/display/JENKINS/Builds+failing+with+OutOfMemoryErrors" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Builds+failing+with+OutOfMemoryErrors</a></p><h1 id="Jenkins-安装-Simian-代码重复检查工具"><a href="#Jenkins-安装-Simian-代码重复检查工具" class="headerlink" title="Jenkins 安装 Simian 代码重复检查工具"></a>Jenkins 安装 Simian 代码重复检查工具</h1><p>Simian（<a href="http://www.harukizaemon.com/simian/" rel="external nofollow noopener noreferrer" target="_blank">http://www.harukizaemon.com/simian/</a> ） 是一个检查重复代码的工具。</p><p>这里可以使用公司内部的插件</p><p><a href="http://3ms.huawei.com/hi/group/2964/wiki_4145693.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/hi/group/2964/wiki_4145693.html</a></p><h1 id="Jenkins-安装-Cobertura-代码测试覆盖率工具"><a href="#Jenkins-安装-Cobertura-代码测试覆盖率工具" class="headerlink" title="Jenkins 安装 Cobertura 代码测试覆盖率工具"></a>Jenkins 安装 Cobertura 代码测试覆盖率工具</h1><p>Cobertura（<a href="https://sourceforge.net/projects/cobertura/" rel="external nofollow noopener noreferrer" target="_blank">https://sourceforge.net/projects/cobertura/</a> ） 一项衡量是否所有代码都被测到的工具。</p><p>在 Jenkins 中安装 Cobertura 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;        &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.6&lt;/version&gt;        &lt;configuration&gt;            &lt;instrumentation&gt;                &lt;ignoreTrivial&gt;false&lt;/ignoreTrivial&gt;            &lt;/instrumentation&gt;            &lt;formats&gt;                &lt;format&gt;html&lt;/format&gt;                &lt;format&gt;xml&lt;/format&gt;            &lt;/formats&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>cobertura:cobertura</code> 参数。</p><p><code>compile -D cobertura.report.format=xml clean compile cobertura:cobertura</code></p><p>这里注意添加 <code>-D cobertura.report.format=xml</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/Cobertura+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Cobertura+Plugin</a></p><blockquote><p>参考资料<br>1、jenkins+maven配置Checkstyle+FindBugs+PMD - 简书<br><a href="https://www.jianshu.com/p/03b9e38d03b2" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/03b9e38d03b2</a><br>2、CheckStyle提高代码质量 - CSDN博客<br><a href="https://blog.csdn.net/lx_yoyo/article/details/73332590" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lx_yoyo/article/details/73332590</a><br>3、Jenkins+maven+checkstyle对java代码进行静态代码分析 - CSDN博客<br><a href="https://blog.csdn.net/hwhua1986/article/details/48339545" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hwhua1986/article/details/48339545</a><br>4、Jenkins+maven+pmd对java代码进行静态代码分析 - CSDN博客<br><a href="https://blog.csdn.net/hwhua1986/article/details/48342745" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hwhua1986/article/details/48342745</a><br>5、[Jenkins]持续集成环境下fingbug插件的安装使用与配置 - Amberly - 博客园<br><a href="https://www.cnblogs.com/amberly/p/7201041.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/amberly/p/7201041.html</a><br>6、静态检查——SourceMonitor的学习和使用 - CSDN博客<br><a href="https://blog.csdn.net/yf210yf/article/details/17535713" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yf210yf/article/details/17535713</a><br>7、[料理佳餚] Jenkins 增加 SourceMonitor Plugin | 軟體主廚的程式料理廚房 - 點部落<br><a href="https://dotblogs.com.tw/supershowwei/2015/10/14/153562" rel="external nofollow noopener noreferrer" target="_blank">https://dotblogs.com.tw/supershowwei/2015/10/14/153562</a><br>8、CI Server 16 - 整合程式碼複雜度及深度報表 (Source Monitor) - iT 邦幫忙<br><a href="https://ithelp.ithome.com.tw/articles/10107051" rel="external nofollow noopener noreferrer" target="_blank">https://ithelp.ithome.com.tw/articles/10107051</a><br>8、重复代码检查工具simian的基本用法 | 知行一<br><a href="http://purecpp.org/?p=92" rel="external nofollow noopener noreferrer" target="_blank">http://purecpp.org/?p=92</a><br>9、Jenkins集成Simian插件_百度经验<br><a href="https://jingyan.baidu.com/article/c45ad29ccbfd3a051653e272.html" rel="external nofollow noopener noreferrer" target="_blank">https://jingyan.baidu.com/article/c45ad29ccbfd3a051653e272.html</a><br>10、[料理佳餚] Jenkins 增加 Simian Plugin | 軟體主廚的程式料理廚房 - 點部落<br><a href="https://dotblogs.com.tw/supershowwei/2015/10/14/153561" rel="external nofollow noopener noreferrer" target="_blank">https://dotblogs.com.tw/supershowwei/2015/10/14/153561</a><br>11、代码测试覆盖率Cobertura使用 - CSDN博客<br><a href="https://blog.csdn.net/cathy_sunshine/article/details/75258298" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cathy_sunshine/article/details/75258298</a><br>12、jenkins集成cobertura，调用显示cobertura的report - CSDN博客<br><a href="https://blog.csdn.net/yaominhua/article/details/40684647" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yaominhua/article/details/40684647</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Checkstyle、PMD、FindBugs 三款主流的 Java 静态分析工具，以及 SourceMonitor 代码度量工具，Simian 代码重复检查工具等。&lt;/p&gt;&lt;h1 id=&quot;Jenkins-安装-Java-代码质量分析工具&quot;&gt;&lt;a href=&quot;#J
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins服务搭建及环境配置</title>
    <link href="https://www.wshunli.com/posts/5d09cdc2.html"/>
    <id>https://www.wshunli.com/posts/5d09cdc2.html</id>
    <published>2018-07-24T11:16:40.000Z</published>
    <updated>2018-07-29T15:23:22.308Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 是一款优秀的开源自动化服务器，允许持续集成和持续交付。Jenkins 支持数百个插件，以支持项目的构建、部署和自动化。</p><p>Jenkins 官网：<a href="https://jenkins.io/" rel="external nofollow noopener noreferrer" target="_blank">https://jenkins.io/</a></p><p>「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」这三个概念的解释。</p><p><strong>持续集成</strong> 强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p><p><strong>持续交付</strong> 在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。</p><p><strong>持续部署</strong> 则是在持续交付的基础上，把部署到生产环境的过程自动化。</p><h2 id="Jenkins-基础环境"><a href="#Jenkins-基础环境" class="headerlink" title="Jenkins 基础环境"></a>Jenkins 基础环境</h2><p>Jenkins 使用 Java 编写，支持所有主流操作系统。</p><p>本文仅介绍在 Windows 操作系统下 Jenkins 单机本地部署。</p><p>首先应配置 Java 环境，然后部署 Tomcat 服务。</p><p>然后即可安装 Jenkins 应用。</p><p>安装步骤可参考：<a href="https://www.cnblogs.com/hdwang/p/6081994.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/hdwang/p/6081994.html</a></p><p>最后推荐安装一些工具包括：</p><p>1、Apache Maven 软件（特别是Java软件）项目管理及自动构建工具。</p><p>推荐 Maven 配置镜像。</p><pre><code class="XML">&lt;mirror&gt;    &lt;!--This sends everything else to /public --&gt;    &lt;id&gt;nexus-aliyun&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Nexus aliyun&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>Maven 仓库阿里云镜像配置 - CSDN博客<br><a href="https://blog.csdn.net/cwenyifan/article/details/54864504" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cwenyifan/article/details/54864504</a></p><p>在公司内部推荐使用</p><pre><code class="XML">&lt;mirror&gt;&lt;id&gt;rnd-huawei&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Maven China Mirror&lt;/name&gt;      &lt;url&gt;http://rnd-mirrors.huawei.com/maven/&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>参考链接：MAVEN公司内部镜像配置&amp;Intellij IDEA MAVEN配置 - CE中间件与系统集成 - 3ms知识管理社区<br><a href="http://3ms.huawei.com/hi/group/2027489/wiki_4781465.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/hi/group/2027489/wiki_4781465.html</a></p><p>2、Git SVN 源代码版本控制工具。</p><p>具体安装配置操作可参考资料。</p><h2 id="Jenkins-全局工具配置"><a href="#Jenkins-全局工具配置" class="headerlink" title="Jenkins 全局工具配置"></a>Jenkins 全局工具配置</h2><p>JDK 配置 JAVA_HOME 目录即可</p><p>比如 <code>C:\Program Files\Java\jdk1.8.0_171</code></p><p>Git 配置 git.exe 文件即可</p><p>比如 <code>C:\Program Files\Git\bin\git.exe</code></p><p>Maven 配置 MAVEN_HOME 目录即可</p><p>比如 <code>D:\apache-maven\</code></p><h2 id="Jenkins-插件管理高级配置"><a href="#Jenkins-插件管理高级配置" class="headerlink" title="Jenkins 插件管理高级配置"></a>Jenkins 插件管理高级配置</h2><p>推荐配置 <strong>升级站点</strong></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json" rel="external nofollow noopener noreferrer" target="_blank">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json</a></p><p>公司内部推荐使用</p><p><a href="http://cmc-cd-mirror.rnd.huawei.com/jenkins-updates/update-center.json" rel="external nofollow noopener noreferrer" target="_blank">http://cmc-cd-mirror.rnd.huawei.com/jenkins-updates/update-center.json</a></p><p>参考链接：公司Jenkins插件中心上线啦，只需两步，免代理配置和漫长等待，轻松实现Jenkins插件在线自动安装和升级 - 刘珍珍的博客<br><a href="http://3ms.huawei.com/km/blogs/details/5544279" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/km/blogs/details/5544279</a></p><blockquote><p>参考资料<br>1、jenkins详解 - CSDN博客<br><a href="https://blog.csdn.net/qq_26848099/article/details/78901240" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_26848099/article/details/78901240</a><br>2、如何理解持续集成、持续交付、持续部署？ - 知乎<br><a href="https://www.zhihu.com/question/23444990" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/23444990</a><br>3、使用jekins自动构建部署java maven项目（jdk1.7+tomcat7.0+jenkins2.19.3） - 追极 - 博客园<br><a href="https://www.cnblogs.com/hdwang/p/6081994.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/hdwang/p/6081994.html</a><br>4、Jenkins：插件安装失败问题 - 简书<br><a href="https://www.jianshu.com/p/2b7288e77ff8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/2b7288e77ff8</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jenkins 是一款优秀的开源自动化服务器，允许持续集成和持续交付。Jenkins 支持数百个插件，以支持项目的构建、部署和自动化。&lt;/p&gt;&lt;p&gt;Jenkins 官网：&lt;a href=&quot;https://jenkins.io/&quot; rel=&quot;external nofollow
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>在线直播技术解决方案及其实现方法（移动端）</title>
    <link href="https://www.wshunli.com/posts/8aeeab4a.html"/>
    <id>https://www.wshunli.com/posts/8aeeab4a.html</id>
    <published>2018-07-04T13:40:33.000Z</published>
    <updated>2018-07-29T15:23:22.316Z</updated>
    
    <content type="html"><![CDATA[<p>简单地记录下 Android 移动端直播技术实现方法。</p><p>目前对移动端直播技术实现方法了解还不够全面，本文仅介绍一种基于 RTMP 协议的在线直播实现方法。</p><p>直播系统可以简单地分为三部分：服务端、推流端、拉流端。</p><h1 id="简单的直播系统"><a href="#简单的直播系统" class="headerlink" title="简单的直播系统"></a>简单的直播系统</h1><p>1、服务端：SRS</p><p>SRS定位是运营级的互联网直播服务器集群，追求更好的概念完整性和最简单实现的代码。</p><p>源代码：<a href="https://github.com/ossrs/srs" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ossrs/srs</a></p><p>部署方法：<a href="https://github.com/ossrs/srs/wiki/v1_CN_SampleRTMP" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ossrs/srs/wiki/v1_CN_SampleRTMP</a></p><p>2、推流端：OBS Studio</p><p>OBS Studio 是一款优秀的开源直播推流软件，支持 Windows, Mac or Linux 操作系统。</p><p>官网：<a href="https://obsproject.com/" rel="external nofollow noopener noreferrer" target="_blank">https://obsproject.com/</a></p><p>3、拉流端：VLC media player</p><p>VLC 是一款自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及 DVD、音频 CD、VCD 及各类流媒体协议。</p><p>官网：<a href="http://www.videolan.org/vlc/" rel="external nofollow noopener noreferrer" target="_blank">http://www.videolan.org/vlc/</a></p><p>其实这里好多视频播放器都支持的。</p><h1 id="移动端实现方法"><a href="#移动端实现方法" class="headerlink" title="移动端实现方法"></a>移动端实现方法</h1><p>1、服务端 SRS</p><p>服务端同样使用 SRS</p><p>2、推流端 yasea</p><p>yasea 是一个优秀的 RTMP 直播流推流库。</p><p>代码仓库：<a href="https://github.com/begeekmyfriend/yasea" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/begeekmyfriend/yasea</a></p><p>3、拉流端 ijkplayer</p><p>使用方法：<a href="https://www.wshunli.com/posts/2f3bf23c.html">https://www.wshunli.com/posts/2f3bf23c.html</a></p><p>源码编译：<a href="https://www.wshunli.com/posts/45f072c2.html">https://www.wshunli.com/posts/45f072c2.html</a></p><p>本文内容比较简单，后面有机会再深入了解。</p><blockquote><p>参考资料<br>1、Android手机直播（一）总览 - 简书<br><a href="https://www.jianshu.com/p/7ebbcc0c5df7" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/7ebbcc0c5df7</a><br>2、轻松入门Android直播相关技术 从0搭建直播系统 - CSDN博客<br><a href="https://blog.csdn.net/lmj623565791/article/details/77937483" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lmj623565791/article/details/77937483</a><br>3、Android直播实现（一）Android端推流、播放 - CSDN博客<br><a href="https://blog.csdn.net/mr_sk/article/details/71083366" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/mr_sk/article/details/71083366</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单地记录下 Android 移动端直播技术实现方法。&lt;/p&gt;&lt;p&gt;目前对移动端直播技术实现方法了解还不够全面，本文仅介绍一种基于 RTMP 协议的在线直播实现方法。&lt;/p&gt;&lt;p&gt;直播系统可以简单地分为三部分：服务端、推流端、拉流端。&lt;/p&gt;&lt;h1 id=&quot;简单的直播系统&quot;
      
    
    </summary>
    
      <category term="前端技术" scheme="https://www.wshunli.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="视频" scheme="https://www.wshunli.com/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="直播" scheme="https://www.wshunli.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="前端" scheme="https://www.wshunli.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（十）</title>
    <link href="https://www.wshunli.com/posts/4691b5a2.html"/>
    <id>https://www.wshunli.com/posts/4691b5a2.html</id>
    <published>2018-07-03T11:43:13.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】希望我的坚持，让我走得更高、看得更远
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android视频播放器ijkplayer源码编译</title>
    <link href="https://www.wshunli.com/posts/45f072c2.html"/>
    <id>https://www.wshunli.com/posts/45f072c2.html</id>
    <published>2018-06-26T06:55:55.000Z</published>
    <updated>2018-07-29T15:23:22.308Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 16.04 LTS 系统下编译 ijkplayer Android 源码。</p><p>前面介绍过 ijkplayer 的使用，要想支持更多的特性，还是需要编译下源码的。</p><p>本文编译源码的主要目的是支持更多的格式，以及支持 HTTPS 链接。</p><p>NDK 版本：android-ndk-r10e</p><p>ijkplayer 仓库地址 <a href="https://github.com/Bilibili/ijkplayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer</a></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>0、最好还是在 Ubuntu 环境下编译，在 Windows 下编译可以参考</p><p><a href="https://blog.csdn.net/u010072711/article/details/51354834" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010072711/article/details/51354834</a></p><p>并不推荐此方法。</p><p>1、然后需要有 Java 及 Android 环境，可参考</p><p><a href="https://www.wshunli.com/posts/80d94eb7.html">https://www.wshunli.com/posts/80d94eb7.html</a></p><p>2、编译之前，还要准备一些工具</p><pre><code class="Shell">sudo apt-get updatesudo apt-get install gitsudo apt-get install yasm</code></pre><h1 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h1><p>1、从 GitHub 拉取源码，并打开源码目录</p><pre><code class="Shell">git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-androidcd ijkplayer-android</code></pre><p>2、切换到指定版本，可在源码仓库查看</p><pre><code class="Shell">git checkout -B latest k0.8.8</code></pre><p>3、配置参数（可选操作，为了支持更多格式）</p><p>参数配置一共有三种方式，选择一种即可。</p><p>(1) 为支持更多的格式，我们选这种</p><pre><code class="Shell">cd configrm module.shln -s module-default.sh module.shcd ..</code></pre><p>(2) 支持 hevc 功能，而且精简后的库</p><pre><code class="Shell">cd configrm module.shln -s module-lite-hevc.sh module.shcd ..</code></pre><p>(3) 精简后的库，默认是这种配置</p><pre><code class="Shell">cd configrm module.shln -s module-lite.sh module.shcd ..</code></pre><p>4、初始化，主要是拉取 ijkplayer 的依赖等，输入命令</p><pre><code class="Shell">./init-android.sh</code></pre><p>初始化 openssl （可选操作，为了支持 HTTPS ）</p><pre><code class="Shell">./init-android-openssl.sh</code></pre><p>5、打开 <code>ijkplayer-android/android/contrib/</code> 目录，Android 下编译脚本就放在该目录下</p><pre><code class="Shell">cd android/contrib</code></pre><p>6、清理并编译 openssl 依赖（可选操作，为了支持 HTTPS ）</p><pre><code class="Shell">./compile-openssl.sh clean./compile-openssl.sh all</code></pre><p>7、清理并编译 ffmpeg 软解码库依赖</p><pre><code class="Shell">./compile-ffmpeg.sh clean./compile-ffmpeg.sh all</code></pre><p>如果遇到问题 <code>fatal error: linux/perf_event.h: No such file or directory</code></p><p>可参考：<a href="https://github.com/Bilibili/ijkplayer/issues/4125" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer/issues/4125</a></p><p>在 module-default.sh、module-lite-hevc.sh 中添加如下一行配置即可。</p><pre><code class="Shell">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --disable-linux-perf&quot;</code></pre><p>8、然后返回上级到 <code>ijkplayer-android/android/</code> 目录，编译源码</p><pre><code class="Shell">cd .../compile-ijk.sh all</code></pre><p>等待编译完成即可。</p><h1 id="导入使用"><a href="#导入使用" class="headerlink" title="导入使用"></a>导入使用</h1><p>打开 Android Studio 并导入 <code>ijkplayer-android/android/ijkplayer/</code> 即可。</p><p><img src="https://img.wshunli.com/Android/ijkplayer/ijkplayer-build.png" alt="ijkplayer-build"></p><p>在这个项目中 module 比较多，大多数是针对不同 CPU 架构的包。</p><blockquote><p>参考资料<br>1、Android 超好用的播放器——ijkplayer - 简书<br><a href="https://www.jianshu.com/p/c5d972ab0309" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c5d972ab0309</a><br>2、IJKPlayer初识-编译与使用 - 简书<br><a href="https://www.jianshu.com/p/a425ee1c2aec" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/a425ee1c2aec</a><br>3、在ubuntu下编译ijkplayer-android - CSDN博客<br><a href="https://blog.csdn.net/u010072711/article/details/51438871" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010072711/article/details/51438871</a><br>4、Android集成IjkPlayer - 简书<br><a href="https://www.jianshu.com/p/79b434b2d5c8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/79b434b2d5c8</a><br>5、Ubuntu编译ijkplayer支持https和更多视频格式 - CSDN博客<br><a href="https://blog.csdn.net/DyncKathline/article/details/78223972" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/DyncKathline/article/details/78223972</a><br>6、Android，ijkplayer增加https协议支持，编译运行ijkplayer - CSDN博客<br><a href="https://blog.csdn.net/linchaolong/article/details/52805666" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/linchaolong/article/details/52805666</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu 16.04 LTS 系统下编译 ijkplayer Android 源码。&lt;/p&gt;&lt;p&gt;前面介绍过 ijkplayer 的使用，要想支持更多的特性，还是需要编译下源码的。&lt;/p&gt;&lt;p&gt;本文编译源码的主要目的是支持更多的格式，以及支持 HTTPS 链接。&lt;/p&gt;
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="ijkplayer" scheme="https://www.wshunli.com/tags/ijkplayer/"/>
    
  </entry>
  
  <entry>
    <title>Android视频播放器ExoPlayer使用入门</title>
    <link href="https://www.wshunli.com/posts/11deb252.html"/>
    <id>https://www.wshunli.com/posts/11deb252.html</id>
    <published>2018-06-23T11:02:59.000Z</published>
    <updated>2018-07-29T15:23:22.308Z</updated>
    
    <content type="html"><![CDATA[<p>EXOPlayer 是Google 官方开源的一款 Android 播放器，支持本地或者网络的音频和视频播放，支持 DASH、HLS 等流媒体协议，但是不支持 rtsp、rtmp 协议。</p><p>EXOPlayer 仓库地址：<a href="https://github.com/google/ExoPlayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/google/ExoPlayer</a></p><p>Google 的亲儿子，还是要学习下啊。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>引入依赖可以一次性全部引入所有依赖：</p><pre><code class="gradle">dependencies {    implementation &#39;com.google.android.exoplayer:exoplayer:2.X.X&#39;}</code></pre><p>也可以根据需要引入不同模块。</p><pre><code class="gradle">dependencies {    implementation &#39;com.google.android.exoplayer:exoplayer-core:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-dash:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-hls:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-smoothstreaming:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-ui:2.X.X&#39;}</code></pre><h1 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h1><p>EXOPlayer 使用是非常简单的，首先添加播放器控件。</p><pre><code class="XML">&lt;com.google.android.exoplayer2.ui.SimpleExoPlayerView    android:id=&quot;@+id/exoView&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot; /&gt;</code></pre><p>然后初始化播放器。</p><pre><code class="Java">private void initPlayer() {    //1. 创建一个默认的 TrackSelector    BandwidthMeter bandwidthMeter = new DefaultBandwidthMeter();    TrackSelection.Factory videoTackSelectionFactory =            new AdaptiveTrackSelection.Factory(bandwidthMeter);    TrackSelector trackSelector =            new DefaultTrackSelector(videoTackSelectionFactory);    //2.创建ExoPlayer    simpleExoPlayer = ExoPlayerFactory.newSimpleInstance(this, trackSelector);    //3.创建SimpleExoPlayerView    simpleExoPlayerView = (SimpleExoPlayerView) findViewById(R.id.exoView);    //4.为SimpleExoPlayer设置播放器    simpleExoPlayerView.setPlayer(simpleExoPlayer);    simpleExoPlayer.setPlayWhenReady(true);}</code></pre><p>最后添加视频资源就可以播放了。</p><pre><code class="Java">DataSource.Factory mediaDataSourceFactory = new DefaultDataSourceFactory(this,        Util.getUserAgent(this, &quot;ExoPlayerDemo&quot;));MediaSource mediaSource = new ExtractorMediaSource.Factory(mediaDataSourceFactory).createMediaSource(Uri.parse(&quot;http://streams.wshunli.com/videos/dyys_x264.mp4&quot;));simpleExoPlayer.prepare(mediaSource);</code></pre><p>注意添加网络权限，最终效果：</p><p><img src="https://img.wshunli.com/Android/ExoPlayer/exoplayer-result.min.jpg" alt="exoplayer-result"></p><blockquote><p>参考资料<br>1、EXOPlayer简要学习及应用 - CSDN博客<br><a href="https://blog.csdn.net/s1991721/article/details/77587308" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/s1991721/article/details/77587308</a><br>2、ExoPlayer开发指南（官方文档翻译） - CSDN博客<br><a href="https://blog.csdn.net/u014606081/article/details/76181049" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u014606081/article/details/76181049</a><br>3、Google Exoplayer 之全面认识 - Android - 掘金<br><a href="https://juejin.im/entry/5884061f128fe1006c34ea43" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/entry/5884061f128fe1006c34ea43</a><br>4、ExoPlayer2.5 的简单使用 - 简书<br><a href="https://www.jianshu.com/p/c9b136fc16c7" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c9b136fc16c7</a><br>6、ExoPlayer的使用介绍 - 简书<br><a href="https://www.jianshu.com/p/628481250b59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/628481250b59</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;EXOPlayer 是Google 官方开源的一款 Android 播放器，支持本地或者网络的音频和视频播放，支持 DASH、HLS 等流媒体协议，但是不支持 rtsp、rtmp 协议。&lt;/p&gt;&lt;p&gt;EXOPlayer 仓库地址：&lt;a href=&quot;https://githu
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="ExoPlayer" scheme="https://www.wshunli.com/tags/ExoPlayer/"/>
    
  </entry>
  
  <entry>
    <title>Android视频播放器ijkplayer使用入门</title>
    <link href="https://www.wshunli.com/posts/2f3bf23c.html"/>
    <id>https://www.wshunli.com/posts/2f3bf23c.html</id>
    <published>2018-06-23T08:26:20.000Z</published>
    <updated>2018-07-29T15:23:22.308Z</updated>
    
    <content type="html"><![CDATA[<p>ijkplayer 是 Bilibili 基于 ffmpeg 开发并开源的轻量级视频播放器，支持播放本地网络视频，也支持流媒体播放。</p><p>支持 Android 和 iOS 操作系统，所以文章起名还是有点瑕疵的，哈哈哈 。</p><p>ijkplayer 仓库地址：<a href="https://github.com/Bilibili/ijkplayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer</a></p><p>目前 Android 主流的视频播放器是 ijkplayer、ExoPlayer、MediaPlayer。</p><p>其中 MediaPlayer 在前面介绍过了：《第一行代码》读书笔记（七） | CirGIS<br><a href="https://www.wshunli.com/posts/941f84ed.html">https://www.wshunli.com/posts/941f84ed.html</a></p><p>接下来两篇文章会分别介绍 ijkplayer 和 ExoPlayer 的使用，也为移动端直播技术打下基础。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>根据需要引入依赖，根据建议引入 java 、 armv7a 两种兼容性基本满足要求。</p><pre><code class="gradle">dependencies {    # required, enough for most devices.    compile &#39;tv.danmaku.ijk.media:ijkplayer-java:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8&#39;    # Other ABIs: optional    compile &#39;tv.danmaku.ijk.media:ijkplayer-armv5:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-arm64:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-x86:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-x86_64:0.8.8&#39;    # ExoPlayer as IMediaPlayer: optional, experimental    compile &#39;tv.danmaku.ijk.media:ijkplayer-exo:0.8.8&#39;}</code></pre><h1 id="添加播放控件"><a href="#添加播放控件" class="headerlink" title="添加播放控件"></a>添加播放控件</h1><p>本身 ijkplayer 是没有播放控件的，这里我们采用示例代码的播放控件。</p><p>\ijkplayer\android\ijkplayer\ijkplayer-example\src\main\java\tv\danmaku\ijk\media\example\widget\media</p><p>将其代码复制到合适位置，还有 string 键值对，以及 Manifest 配置。</p><p><img src="https://img.wshunli.com/Android/ijkplayer/ijkplayer-widget.png" alt="ijkplayer-widget"></p><p>其中 Manifest 需要配置权限及声明服务。</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;···&lt;service    android:name=&quot;com.wshunli.ijkplayer.demo.services.MediaPlayerService&quot;    android:enabled=&quot;false&quot;    android:exported=&quot;false&quot;    android:icon=&quot;@mipmap/ic_launcher&quot;    android:label=&quot;@string/app_name&quot; /&gt;</code></pre><p>可能会出现 NullPointerException 错误，删除不必要的代码即可。</p><p><a href="https://github.com/Bilibili/ijkplayer/issues/3969" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer/issues/3969</a></p><h1 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h1><p>在布局中添加播放控件。</p><pre><code class="XML">&lt;com.wshunli.ijkplayer.demo.widget.IjkVideoView    android:id=&quot;@+id/ijkvideoview&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;&gt;&lt;/com.wshunli.ijkplayer.demo.widget.IjkVideoView&gt;</code></pre><p>然后在 Activity 中使用就可以了。</p><pre><code class="Java">IjkVideoView ijkVideoView;···ijkVideoView = findViewById(R.id.ijkvideoview);ijkVideoView.setVideoURI(Uri.parse(&quot;http://streams.wshunli.com/videos/dyys2_x264.mp4&quot;));//  ijkVideoView.setVideoURI(Uri.parse(&quot;http://streams.wshunli.com/x36xhzz/x36xhzz.m3u8&quot;));ijkVideoView.start();</code></pre><p>默认是支持 m3u8 直播视频流的，挺意外的。</p><p><img src="https://img.wshunli.com/Android/ijkplayer/ijkplayer-livevideo.min.jpg" alt="ijkplayer-livevideo"></p><p>其他还有很多基于或者封装的播放库，这里列举出来就不多介绍了。</p><p>1、支持浮动和全屏的视频播放器。<br><a href="https://github.com/lipangit/JiaoZiVideoPlayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/lipangit/JiaoZiVideoPlayer</a></p><p>2、基于IJKPlayer（兼容系统MediaPlayer与EXOPlayer2），实现了多功能的视频播放器。<br><a href="https://github.com/CarGuo/GSYVideoPlayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/CarGuo/GSYVideoPlayer</a></p><p>3、Android播放器基础库，专注于播放视图组件的高复用性和组件间的低耦合，轻松处理复杂业务。<br><a href="https://github.com/jiajunhui/PlayerBase" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jiajunhui/PlayerBase</a></p><blockquote><p>参考资料<br>1、Android ijkplayer的使用解析 - CSDN博客<br><a href="https://blog.csdn.net/huaxun66/article/details/53401231" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/huaxun66/article/details/53401231</a><br>2、Android ijkplayer的使用解析及播放器的制作 - CSDN博客<br><a href="https://blog.csdn.net/github_2011/article/details/77385498" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/github_2011/article/details/77385498</a><br>3、Android 超好用的播放器——ijkplayer - 简书<br><a href="https://www.jianshu.com/p/c5d972ab0309" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c5d972ab0309</a><br>4、Android集成IjkPlayer - 简书<br><a href="https://www.jianshu.com/p/79b434b2d5c8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/79b434b2d5c8</a><br>5、视频直播技术（四）：使用Ijkplayer播放直播视频 - 灰色飘零 - 博客园<br><a href="http://www.cnblogs.com/renhui/p/6420140.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/renhui/p/6420140.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ijkplayer 是 Bilibili 基于 ffmpeg 开发并开源的轻量级视频播放器，支持播放本地网络视频，也支持流媒体播放。&lt;/p&gt;&lt;p&gt;支持 Android 和 iOS 操作系统，所以文章起名还是有点瑕疵的，哈哈哈 。&lt;/p&gt;&lt;p&gt;ijkplayer 仓库地址：&lt;
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="ijkplayer" scheme="https://www.wshunli.com/tags/ijkplayer/"/>
    
  </entry>
  
  <entry>
    <title>在线直播技术及其实时视频流可视化方法（前端）</title>
    <link href="https://www.wshunli.com/posts/b4d6e25d.html"/>
    <id>https://www.wshunli.com/posts/b4d6e25d.html</id>
    <published>2018-06-23T04:23:34.000Z</published>
    <updated>2018-07-29T15:23:22.316Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开，非常抱歉。 " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开，非常抱歉。 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录在线直播技术及其实时视频流可视化方法（前端）。
    
    </summary>
    
      <category term="前端技术" scheme="https://www.wshunli.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="视频" scheme="https://www.wshunli.com/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="直播" scheme="https://www.wshunli.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="前端" scheme="https://www.wshunli.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android View 体系（一）Android View 体系基础</title>
    <link href="https://www.wshunli.com/posts/f6f583a.html"/>
    <id>https://www.wshunli.com/posts/f6f583a.html</id>
    <published>2018-06-20T02:33:59.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>有很多人觉得自己比较菜，就会称自己为 Android UI 工程师，非常有意思。</p><p>其实 Android UI 体系内容也是比较多的，不仅仅是指 UI 控件的使用，那也太基础了。</p><p>本文主要介绍 Android View 基础，内容可能后面会逐步完善。</p><h1 id="View-介绍"><a href="#View-介绍" class="headerlink" title="View 介绍"></a>View 介绍</h1><p>View 是 Android 中所有控件的基类，同时 ViewGroup 也继承自 View 。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/ViewGroup介绍.jpg" alt="ViewGroup介绍"></p><p>所以 View 本身可以是一个控件也可以是多个控件，基本上我们平常用到控件都继承自 View ，是一种树状结构。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View介绍.min.png" alt="View介绍"></p><h1 id="View-的位置参数"><a href="#View-的位置参数" class="headerlink" title="View 的位置参数"></a>View 的位置参数</h1><p>在 Android 中有两种类型的坐标系，分别是 Android 坐标系和视图坐标系。其实是相对而言的，</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View坐标系.png" alt="View坐标系"></p><p>Android 坐标系是相对屏幕原点（左上角）而言，视图坐标系是相对父类容器（ViewGroup）而言的。</p><p>在 Android 中，View 的位置由 top、left、right、bottom 四个属性确定，注意都是相对父容器而言。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View位置API.png" alt="View位置API"></p><p>View 提供的 API 分别获取对应的数值。</p><ul><li>getTop()：获取 View 顶边到其父布局顶边的距离</li><li>getLeft()：获取 View 左边到其父布局左边的距离</li><li>getRight()：获取 View 右边到其父布局左边的距离</li><li>getBottom()：获取 View 底边到其父布局顶边的距离</li></ul><p>MotionEvent 也提供了一些获取点击位置的方法。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/MotionEvent位置API.png" alt="MotionEvent位置API"></p><p>其中红点位置为点击位置。</p><ul><li>getX()：获取点击位置离View左边的距离</li><li>getY()：获取点击位置离View顶边的距离</li><li>getRawX()：获取点击位置离屏幕左边的距离</li><li>getRawY()：获取点击位置离屏幕顶边的距离</li></ul><p>其实感觉看懂了下面这张图，也就基本可以理解View的坐标系了。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View位置.min.png" alt="View位置"></p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 3.1 View 基础知识<br>2、《Android群英传》 – 第三章 Android 控件架构与自定义控件详解<br>3、Android View体系（一）视图坐标系 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/view/1-coordinate-system.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/view/1-coordinate-system.html</a><br>4、View | Android Developers<br><a href="https://developer.android.com/reference/android/view/View" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/reference/android/view/View</a><br>5、View与ViewGroup的概念 | 菜鸟教程<br><a href="http://www.runoob.com/w3cnote/android-tutorial-view-viewgroup-intro.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/w3cnote/android-tutorial-view-viewgroup-intro.html</a><br>6、Android 坐标系与视图坐标系图解 - CSDN博客<br><a href="https://blog.csdn.net/zhuwentao2150/article/details/52434104" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/zhuwentao2150/article/details/52434104</a><br>7、Android应用坐标系统全面详解 - CSDN博客<br><a href="https://blog.csdn.net/yanbober/article/details/50419117" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yanbober/article/details/50419117</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有很多人觉得自己比较菜，就会称自己为 Android UI 工程师，非常有意思。&lt;/p&gt;&lt;p&gt;其实 Android UI 体系内容也是比较多的，不仅仅是指 UI 控件的使用，那也太基础了。&lt;/p&gt;&lt;p&gt;本文主要介绍 Android View 基础，内容可能后面会逐步完善。&lt;
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
      <category term="View体系" scheme="https://www.wshunli.com/tags/View%E4%BD%93%E7%B3%BB/"/>
    
      <category term="《Android群英传》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E7%BE%A4%E8%8B%B1%E4%BC%A0%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（九）</title>
    <link href="https://www.wshunli.com/posts/c3a39066.html"/>
    <id>https://www.wshunli.com/posts/c3a39066.html</id>
    <published>2018-06-09T08:48:00.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】都6月份了，一直拖到现在，也是6得不行
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>那些年，我们用过的地图下载器</title>
    <link href="https://www.wshunli.com/posts/73256148.html"/>
    <id>https://www.wshunli.com/posts/73256148.html</id>
    <published>2018-06-09T01:46:27.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>作为地信、遥感等专业的同学，下载线划图、遥感影像应该都接触过，以前很多群发广告都看不惯，借这次下载高程数据的机会，总结下地图下载器，收费部分的搜索下就懂了。。</p><p><strong>本文仅介绍平常接触到的地图下载器，用作学习和研究目的，不提供收费软件破解文件下载</strong>。</p><p><strong>本文标题来源</strong>：那些年，我们用过的地图下载器 - 我也是个傻瓜 - 博客园<br><a href="https://www.cnblogs.com/liweis/p/4575656.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/liweis/p/4575656.html</a></p><p>1、晟兴地球 SXEarth 是一款永久免费的 3DGIS 平台软件。</p><p>支持在线 Google Earth 卫星影像（无水印无偏移）下载，支持拼接为tif，支持模拟飞行，支持场景编辑。</p><p><img src="https://img.wshunli.com/瞎推荐/地图下载器/SXEarth.png" alt="SXEarth"></p><p>下载地址：<a href="http://www.sxsim.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.sxsim.com/</a></p><p>支持的在线地图特别多，平常基本上用这个就够了。</p><p>2、LocaSpace Viewer 免费、开放的三维数字地球</p><p>多种互联网地图集成、影像、地形数据下载、倾斜数据极速浏览、二三维地理、模型数据、量测和空间分析、软件特色应用。</p><p><img src="https://img.wshunli.com/瞎推荐/地图下载器/LocaSpaceViewer.png" alt="LocaSpaceViewer"></p><p>下载地址：<a href="http://www.locaspace.cn/LSV.jsp" rel="external nofollow noopener noreferrer" target="_blank">http://www.locaspace.cn/LSV.jsp</a></p><p>支持的在线底图不是很多，但是在三维场景尤其是倾斜摄影方面很有优势。</p><p>其他收费的在参考资料，这里就先不介绍了。</p><blockquote><p>参考资料<br>1、那些年，我们用过的地图下载器 - 我也是个傻瓜 - 博客园<br><a href="https://www.cnblogs.com/liweis/p/4575656.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/liweis/p/4575656.html</a><br>2、奉上我收藏的地图下载器（低调使用，你懂的），还各个群一个良好的群环境（别再因为苦于找不到下载器而转发广告了） - ThinkGIS<br><a href="http://www.thinkgis.cn/topic/555ac3911cf2f372004ef9ac" rel="external nofollow noopener noreferrer" target="_blank">http://www.thinkgis.cn/topic/555ac3911cf2f372004ef9ac</a><br>3、SXEarth-超强的GIS数据下载利器 | 麻辣GIS<br><a href="https://malagis.com/sxearth-super-gis-data-downloader.html" rel="external nofollow noopener noreferrer" target="_blank">https://malagis.com/sxearth-super-gis-data-downloader.html</a><br>4、只要三步下载GIS数据（亲测可用/免费/无需转发5个群） | 麻辣GIS<br><a href="https://malagis.com/downlod-gis-data-by-3-steps.html" rel="external nofollow noopener noreferrer" target="_blank">https://malagis.com/downlod-gis-data-by-3-steps.html</a><br>5、北京晟兴科技有限公司 官网首页<br><a href="http://www.sxsim.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.sxsim.com/</a><br>6、LocaSpace Viewer 三维数字地球<br><a href="http://www.locaspace.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.locaspace.cn/</a><br>7、太乐地图官网 - 让地理信息应用更简单<br><a href="http://www.arctiler.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.arctiler.com/</a><br>8、谷歌卫星地图下载器-谷歌地图高清卫星地图2018-北斗卫星地图-水经注万能地图下载器-水经注软件<br><a href="http://www.rivermap.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.rivermap.cn/</a><br>9、91卫图助手，Google Earth影像高程历史影像下载专家<br><a href="http://www.91weitu.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.91weitu.com/</a><br>10、谷歌地图高清卫星地图2018_北斗卫星地图_3d地形图-BIGEMAP<br><a href="http://www.bigemap.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.bigemap.com/</a><br>11、谷歌卫星地图下载器<br><a href="http://www.wolfmap.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.wolfmap.cn/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为地信、遥感等专业的同学，下载线划图、遥感影像应该都接触过，以前很多群发广告都看不惯，借这次下载高程数据的机会，总结下地图下载器，收费部分的搜索下就懂了。。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;本文仅介绍平常接触到的地图下载器，用作学习和研究目的，不提供收费软件破解文件下载&lt;/s
      
    
    </summary>
    
      <category term="瞎推荐" scheme="https://www.wshunli.com/categories/%E7%9E%8E%E6%8E%A8%E8%8D%90/"/>
    
    
      <category term="GIS" scheme="https://www.wshunli.com/tags/GIS/"/>
    
      <category term="地图下载器" scheme="https://www.wshunli.com/tags/%E5%9C%B0%E5%9B%BE%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（八）使用 Socket 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/c9a2416c.html"/>
    <id>https://www.wshunli.com/posts/c9a2416c.html</id>
    <published>2018-06-08T12:46:26.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>Socket 也称为 “嵌套字”，是计算机网络中的概念，分为流式嵌套字（TCP）和用户数据报嵌套字（UDP）。</p><p>不同用户进程通过 Socket 进行通信也是一种 IPC 方式。</p><p>在使用 Socket 通信前应在 AndroidManifest 中声明权限：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</code></pre><p>1、服务端</p><p>我们需要一个 Service 作为服务端，声明如下：</p><pre><code class="XML">&lt;service    android:name=&quot;.socket.SocketService&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p>Socket 服务端在 Service 启动时，会建立 TCP 连接并监听 8688 端口。</p><pre><code class="Java">public class SocketService extends Service {    private static final String TAG = &quot;SocketService&quot;;    private boolean isDestroyed = false;    private String[] messages = new String[]{            &quot;你好啊，哈哈&quot;,            &quot;请问你叫什么名字呀？&quot;,            &quot;今天北京天气不错啊&quot;,            &quot;你知道吗？我可是可以和多个人同时聊天的哦&quot;,            &quot;给你讲个笑话吧：据说爱笑的人运气不会太差，不知道真假。&quot;    };    public SocketService() {    }    @Override    public void onCreate() {        super.onCreate();        new Thread(new TCPServer()).start();    }    @Override    public IBinder onBind(Intent intent) {        return null;    }    @Override    public void onDestroy() {        isDestroyed = true;        super.onDestroy();    }    private class TCPServer implements Runnable {        @Override        public void run() {            ServerSocket serverSocket = null;            try {                serverSocket = new ServerSocket(8688);            } catch (IOException e) {                e.printStackTrace();            }            while (!isDestroyed) {                try {                    final Socket client = serverSocket.accept();                    Log.d(TAG, &quot;accept&quot;);                    new Thread() {                        @Override                        public void run() {                            responseClient(client);                        }                    }.start();                } catch (IOException e) {                    e.printStackTrace();                }            }        }        private void responseClient(Socket client) {            try {                // 接收客户端消息                BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));                // 响应客户端消息                PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(client.getOutputStream())), true);                Log.d(TAG, &quot;欢迎来到聊天室！&quot;);                out.println(&quot;欢迎来到聊天室！&quot;);                while (!isDestroyed) {                    String line = in.readLine();                    Log.d(TAG, &quot;message from Client: &quot; + line);                    if (line == null) break;                    int i = new Random().nextInt(messages.length);                    String message = messages[i];                    out.println(message);                    Log.d(TAG, &quot;response to Client: &quot; + message);                }                out.close();                in.close();                client.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }}</code></pre><p>当与客户端建立连接后，新建 Socket 客户端，接收消息并作出响应。</p><p>2、客户端</p><p>客户端部分首先启动 Socket 服务，并且在连接失败后会不断重新尝试连接。</p><pre><code class="Java">public class SocketActivity extends AppCompatActivity {    private static final String TAG = &quot;SocketActivity&quot;;    private Button bt_send;    private EditText et_receive;    private TextView tv_message;    private PrintWriter mPrintWriter;    private Socket mClientSocket;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_socket);        initView();        Intent service = new Intent(this, SocketService.class);        startService(service);        new Thread() {            @Override            public void run() {                connectSocketServer();            }        }.start();    }    private void initView() {        et_receive = findViewById(R.id.et_receive);        bt_send = findViewById(R.id.bt_send);        tv_message = findViewById(R.id.tv_message);        bt_send.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                final String msg = et_receive.getText().toString();                //向服务器发送信息                if (!TextUtils.isEmpty(msg) &amp;&amp; mPrintWriter != null) {                    Log.d(TAG, &quot;onClick: &quot; + msg);                    new Thread(new Runnable() {                        @Override                        public void run() {                            mPrintWriter.println(msg);                        }                    }).start();                    tv_message.setText(tv_message.getText() + &quot;\n&quot; + &quot;客户端：&quot; + msg);                    et_receive.setText(&quot;&quot;);                }            }        });    }    private void connectSocketServer() {        Socket socket = null;        while (socket == null) {            try {                //选择和服务器相同的端口8688                socket = new Socket(&quot;localhost&quot;, 8688);                mClientSocket = socket;                mPrintWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);            } catch (IOException e) {                SystemClock.sleep(1000);            }        }        try {            // 接收服务器端的消息            BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));            while (!isFinishing()) {                final String msg = br.readLine();                if (msg != null) {                    runOnUiThread(                            new Runnable() {                                @Override                                public void run() {                                    tv_message.setText(tv_message.getText() + &quot;\n&quot; + &quot;服务端：&quot; + msg);                                }                            }                    );                }            }            mPrintWriter.close();            br.close();            socket.close();        } catch (IOException e) {            e.printStackTrace();        }    }    @Override    protected void onDestroy() {        if (mClientSocket != null) {            try {                mClientSocket.shutdownInput();                mClientSocket.close();            } catch (IOException e) {                e.printStackTrace();            }        }        super.onDestroy();    }}</code></pre><p>主要使用 socket.getOutputStream() 和 socket.getInputStream() 方法分别发送、接收服务端消息。</p><p>打印日志如下：</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/8.Socket日志.png" alt="8.Socket日志"></p><p>最终效果如下：</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/8.Socket进程间通信.png" alt="8.Socket进程间通信"></p><p>到这里把 Android IPC 通信的几种实现方式基本看了一遍，但是在 Binder 机制原理方面还有欠缺，后面再深入学习。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.6 使用 Socket<br>2、Android IPC机制（五）用Socket实现跨进程聊天程序 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/5-socket.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/5-socket.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Socket 也称为 “嵌套字”，是计算机网络中的概念，分为流式嵌套字（TCP）和用户数据报嵌套字（UDP）。&lt;/p&gt;&lt;p&gt;不同用户进程通过 Socket 进行通信也是一种 IPC 方式。&lt;/p&gt;&lt;p&gt;在使用 Socket 通信前应在 AndroidManifest 中声明
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（七）使用 ContentProvider 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/b68f7dd9.html"/>
    <id>https://www.wshunli.com/posts/b68f7dd9.html</id>
    <published>2018-06-08T11:32:34.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>ContentProvider 是 Andorid 中专门用于不同应用间进行数据共享的方式，底层实现也是 Binder 。</p><p>前面在 <a href="https://www.wshunli.com/posts/2311b8ab.html">《第一行代码》读书笔记（五）– 应用组件之 ContentProvider</a> 介绍过，这里就不再详细记录了。</p><p>首先继承 ContentProvider 类实现自己的 Provider ：</p><pre><code class="Java">public class BookProvider extends ContentProvider {    private static final String TAG = &quot;BookProvider&quot;;    public static final String AUTHORITY = &quot;com.wshunli.ipc.demo.book.provider&quot;;    public static final Uri BOOK_CONTENT_URI = Uri.parse(&quot;content://&quot;            + AUTHORITY + &quot;/book&quot;);    public static final Uri USER_CONTENT_URI = Uri.parse(&quot;content://&quot;            + AUTHORITY + &quot;/user&quot;);    public static final int BOOK_URI_CODE = 0;    public static final int USER_URI_CODE = 1;    private static final UriMatcher sUriMatcher = new UriMatcher(            UriMatcher.NO_MATCH);    static {        sUriMatcher.addURI(AUTHORITY, &quot;book&quot;, BOOK_URI_CODE);        sUriMatcher.addURI(AUTHORITY, &quot;user&quot;, USER_URI_CODE);    }    private Context context;    private SQLiteDatabase db;    public BookProvider() {    }    @Override    public boolean onCreate() {        context = getContext();        initProviderData();        return true;    }    private void initProviderData() {        db = new DBHelper(context).getWritableDatabase();        db.execSQL(&quot;delete from &quot; + DBHelper.BOOK_TABLE_NAME);        db.execSQL(&quot;delete from &quot; + DBHelper.USER_TALBE_NAME);        db.execSQL(&quot;insert into book values(3,&#39;Android&#39;);&quot;);        db.execSQL(&quot;insert into book values(4,&#39;Ios&#39;);&quot;);        db.execSQL(&quot;insert into book values(5,&#39;Html5&#39;);&quot;);        db.execSQL(&quot;insert into user values(1,&#39;jake&#39;,1);&quot;);        db.execSQL(&quot;insert into user values(2,&#39;jasmine&#39;,0);&quot;);    }    @Override    public String getType(Uri uri) {        Log.d(TAG, &quot;getType: &quot;);        return null;    }    @Override    public Uri insert(Uri uri, ContentValues values) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        db.insert(table, null, values);        context.getContentResolver().notifyChange(uri, null);        return uri;    }    @Override    public Cursor query(Uri uri, String[] projection, String selection,                        String[] selectionArgs, String sortOrder) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        return db.query(table, projection, selection, selectionArgs, null, null, sortOrder, null);    }    @Override    public int update(Uri uri, ContentValues values, String selection,                      String[] selectionArgs) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        int row = db.update(table, values, selection, selectionArgs);        if (row &gt; 0) {            context.getContentResolver().notifyChange(uri, null);        }        return row;    }    @Override    public int delete(Uri uri, String selection, String[] selectionArgs) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        int count = db.delete(table, selection, selectionArgs);        if (count &gt; 0) {            context.getContentResolver().notifyChange(uri, null);        }        return count;    }    private String getTableName(Uri uri) {        String tableName = null;        switch (sUriMatcher.match(uri)) {            case BOOK_URI_CODE:                tableName = DBHelper.BOOK_TABLE_NAME;                break;            case USER_URI_CODE:                tableName = DBHelper.USER_TALBE_NAME;                break;            default:                break;        }        return tableName;    }}</code></pre><p>记得在 AndroidManifest 中声明：</p><pre><code class="XML">&lt;provider    android:name=&quot;.content.BookProvider&quot;    android:authorities=&quot;com.wshunli.ipc.demo.book.provider&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;    android:permission=&quot;com.wshunli.ipc.demo.PROVIDER&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p>其中 DBHelper 为数据库帮助类，代码如下：</p><pre><code class="Java">public class DBHelper extends SQLiteOpenHelper {    private static final String DB_NAME = &quot;book_provider.db&quot;;    public static final String BOOK_TABLE_NAME = &quot;book&quot;;    public static final String USER_TALBE_NAME = &quot;user&quot;;    private static final int DB_VERSION = 3;    private String CREATE_BOOK_TABLE = &quot;CREATE TABLE IF NOT EXISTS &quot;            + BOOK_TABLE_NAME + &quot;(_id INTEGER PRIMARY KEY,&quot; + &quot;name TEXT)&quot;;    private String CREATE_USER_TABLE = &quot;CREATE TABLE IF NOT EXISTS &quot;            + USER_TALBE_NAME + &quot;(_id INTEGER PRIMARY KEY,&quot; + &quot;name TEXT,&quot;            + &quot;sex INT)&quot;;    public DBHelper(Context context) {        super(context, DB_NAME, null, DB_VERSION);    }    @Override    public void onCreate(SQLiteDatabase db) {        db.execSQL(CREATE_BOOK_TABLE);        db.execSQL(CREATE_USER_TABLE);    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {    }}</code></pre><p>然后就是使用了，新建 Activity ：</p><pre><code class="Java">public class ProviderActivity extends AppCompatActivity {    private static final String TAG = &quot;ProviderActivity&quot;;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_provider);//        Uri uri = Uri.parse(&quot;content://com.wshunli.ipc.demo.book.provider&quot;);//        getContentResolver().query(uri, null, null, null, null);        Uri bookUri = Uri.parse(&quot;content://com.wshunli.ipc.demo.book.provider/book&quot;);        ContentValues values = new ContentValues();        values.put(&quot;_id&quot;, 6);        values.put(&quot;name&quot;, &quot;程序设计的艺术&quot;);        getContentResolver().insert(bookUri, values);        Cursor bookCursor = getContentResolver().query(bookUri, new String[]{&quot;_id&quot;, &quot;name&quot;}, null, null, null);        while (bookCursor.moveToNext()) {            Book book = new Book();            book.bookId = bookCursor.getInt(0);            book.bookName = bookCursor.getString(1);            Log.d(TAG, &quot;query book:&quot; + book.toString());        }        bookCursor.close();        Uri userUri = Uri.parse(&quot;content://com.wshunli.ipc.demo.book.provider/user&quot;);        Cursor userCursor = getContentResolver().query(userUri, new String[]{&quot;_id&quot;, &quot;name&quot;, &quot;sex&quot;}, null, null, null);        while (userCursor.moveToNext()) {            User user = new User();            user.userId = userCursor.getInt(0);            user.userName = userCursor.getString(1);            user.isMale = userCursor.getInt(2) == 1;            Log.d(TAG, &quot;query user:&quot; + user.toString());        }        userCursor.close();    }}</code></pre><p>日志结果如下：</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/7.ContentProvider进程间通信.png" alt="7.ContentProvider进程间通信"></p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.5 使用 ContentProvider</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ContentProvider 是 Andorid 中专门用于不同应用间进行数据共享的方式，底层实现也是 Binder 。&lt;/p&gt;&lt;p&gt;前面在 &lt;a href=&quot;https://www.wshunli.com/posts/2311b8ab.html&quot;&gt;《第一行代码》读书笔记
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（六）使用 AIDL 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/75f6d3a2.html"/>
    <id>https://www.wshunli.com/posts/75f6d3a2.html</id>
    <published>2018-06-08T06:43:53.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>AIDL（Android Interface Definition Language ，Android 接口定义语言），定义客户端与服务使用进程间通信 (IPC) 进行相互通信时都认可的编程接口。</p><p>只有允许不同应用的客户端用 IPC 方式访问服务，并且想要在服务中处理多线程时，才有必要使用 AIDL。</p><p>如果不需要执行跨越不同应用的并发 IPC，就应该通过实现一个 Binder 创建接口；或者，如果想执行 IPC，但根本不需要处理多线程，则使用 Messenger 类来实现接口。</p><p>1、创建 AIDL 文件</p><p>首先在 java 同级目录 aidl 文件夹，然后创建 .aidl 文件。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/6.AIDL文件.png" alt="6.AIDL文件"></p><pre><code class="Java">// IBookManager.aidlpackage com.wshunli.ipc.demo;// Declare any non-default types here with import statementsimport com.wshunli.ipc.demo.Book;interface IBookManager {    List&lt;Book&gt; getBookList();    void addBook(in Book book);    /**     * Demonstrates some basic types that you can use as parameters     * and return values in AIDL.     */    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,            double aDouble, String aString);}</code></pre><p>在 <code>.aidl</code> 文件中支持的数据类型包括：</p><ul><li>基本数据类型</li><li>String 和 CharSequence</li><li>List:只支持 ArrayList , 里面的元素都必须被 AIDL 支持</li><li>Map:只支持 HashMap , 里面的元素必须被 AIDL 支持</li><li>实现 Parcelable 接口的对象</li><li>所有 AIDL 接口</li></ul><p>然后创建实现了 Parcelable 的类：</p><pre><code class="Java">public class Book implements Parcelable {    public String name;    public Book(String name) {        this.name = name;    }    @Override    public int describeContents() {        return 0;    }    @Override    public void writeToParcel(Parcel dest, int flags) {        dest.writeString(name);    }    public static Creator&lt;Book&gt; CREATOR = new Creator&lt;Book&gt;() {        @Override        public Book createFromParcel(Parcel source) {            return new Book(source);        }        @Override        public Book[] newArray(int size) {            return new Book[size];        }    };    private Book(Parcel source) {        name = source.readString();    }    @Override    public String toString() {        return &quot;Book{&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &#39;}&#39;;    }}</code></pre><p>创建 Book.aidl 文件：</p><pre><code class="Java">// Book.aidlpackage com.wshunli.ipc.demo;// Declare any non-default types here with import statementsparcelable Book;</code></pre><p>这时候重新编译程序，工程就会自动生成 <code>BookManager.aidl</code> 接口对应的文件。</p><p>app\build\generated\source\aidl\debug\com\wshunli\ipc\demoIBookManager.java</p><p>2、创建服务端</p><p>服务端使用 IBookManager.Stub() 方法创建 Binder 实例并在 onBind() 方法中返回。</p><pre><code class="Java">public class BookManagerService extends Service {    private static final String TAG = &quot;BookManagerService&quot;;    private CopyOnWriteArrayList&lt;Book&gt; mBookList = new CopyOnWriteArrayList&lt;&gt;();    private Binder mBinder = new IBookManager.Stub(){        @Override        public List&lt;Book&gt; getBookList() throws RemoteException {            return mBookList;        }        @Override        public void addBook(Book book) throws RemoteException {            mBookList.add(book);        }        @Override        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {        }    };    public BookManagerService() {    }    @Override    public void onCreate() {        super.onCreate();        mBookList.add(new Book(&quot;android&quot;));        mBookList.add(new Book(&quot;ios&quot;));    }    @Override    public IBinder onBind(Intent intent) {        return mBinder;    }}</code></pre><p>其中 onCreate() 方法中填充了数据。</p><p>当然在 AndroidManife 文件中要配置 Service</p><pre><code class="XML">&lt;service    android:name=&quot;com.wshunli.ipc.demo.BookManagerService&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p>3、客户端</p><p>客户端还是使用 bindService() 方法绑定服务。</p><pre><code class="Java">public class BookManagerActivity extends AppCompatActivity {    private static final String TAG = &quot;BookManagerActivity&quot;;    private ServiceConnection connection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName name, IBinder service) {            IBookManager bookManager = IBookManager.Stub.asInterface(service);            try {                List&lt;Book&gt; bookList = bookManager.getBookList();                Log.d(TAG, &quot;onServiceConnected: &quot; + bookList.toString());            } catch (RemoteException e) {                e.printStackTrace();            }        }        @Override        public void onServiceDisconnected(ComponentName name) {        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_book_manager);        Intent intent = new Intent(BookManagerActivity.this, BookManagerService.class);        bindService(intent, connection, BIND_AUTO_CREATE);    }    @Override    protected void onDestroy() {        unbindService(connection);        super.onDestroy();    }}</code></pre><p>其中 IBookManager 对象来调用具体服务器方法，获取数据。</p><p>AIDL 的功能远不止这些，后面再深入研究。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.4 使用 AIDL<br>2、Android 接口定义语言 (AIDL) | Android Developers<br><a href="https://developer.android.com/guide/components/aidl" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/aidl</a><br>3、Android IPC机制（三）在Android Studio中使用AIDL实现跨进程方法调用 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/3-aidl.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/3-aidl.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AIDL（Android Interface Definition Language ，Android 接口定义语言），定义客户端与服务使用进程间通信 (IPC) 进行相互通信时都认可的编程接口。&lt;/p&gt;&lt;p&gt;只有允许不同应用的客户端用 IPC 方式访问服务，并且想要在服务
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（五）使用 Messenger 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/9da3d2db.html"/>
    <id>https://www.wshunli.com/posts/9da3d2db.html</id>
    <published>2018-06-07T11:05:00.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Messenger 可以在不同进程之间传递 Message 对象，是一种轻量级的 IPC 方案。</p><p>首先看 Messenger 的构造方法：</p><pre><code class="Java">public Messenger(Handler target) {    mTarget = target.getIMessenger();}public Messenger(IBinder target) {    mTarget = IMessenger.Stub.asInterface(target);}</code></pre><p>实质上还是底层还是基于 AIDL 的。</p><p>对于 Message 对象可以存储传递的数据：</p><pre><code class="Java">public int what; // 消息标识public int arg1; // 整型数据public int arg2; // 整型数据public Object obj;public Messenger replyTo;/*package*/ Bundle data;public void setData(Bundle data) {    this.data = data;}</code></pre><p>其中 obj 只能传输系统中实现了 Parcelable 接口的对象。</p><p>对于 <strong>客户端</strong> 发送消息主要使用 bindService 方法绑定另一个进程的 Service 。</p><pre><code class="Java">public class MessengerActivity extends AppCompatActivity {    private static final String TAG = &quot;MessengerActivity&quot;;    private Messenger messenger;    private ServiceConnection connection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName name, IBinder service) {            // 请求服务端            messenger = new Messenger(service);            Message message = Message.obtain(null, MConstants.MSG_FROM_CLIENT);            Bundle bundle = new Bundle();            Log.d(TAG, &quot;这里是客户端，向服务端发送消息&quot;);            bundle.putString(&quot;msg&quot;, &quot;客户端发送内容&quot;);            message.setData(bundle);            // 注意设置 replyTo            message.replyTo = getReplyMessenger;            try {                messenger.send(message);            } catch (RemoteException e) {                e.printStackTrace();            }        }        @Override        public void onServiceDisconnected(ComponentName name) {        }    };    private static class MessageHandler extends Handler {        @Override        public void handleMessage(Message msg) {            Log.d(TAG, &quot;这里是客户端，接收服务端响应&quot;);            switch (msg.what) {                case MConstants.MSG_FROM_SERVICE:                    // 接收服务端响应                    Log.d(TAG, &quot;客户端接收到: &quot; + msg.getData().get(&quot;reply&quot;));                    break;                default:                    super.handleMessage(msg);            }        }    }    private Messenger getReplyMessenger = new Messenger(new MessageHandler());    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_messenger);        Intent intent = new Intent(this, MessengerService.class);        bindService(intent, connection, Context.BIND_AUTO_CREATE);    }    @Override    protected void onDestroy() {        unbindService(connection);        super.onDestroy();    }}</code></pre><p>如果需要接收服务端返回的消息，注意在发送 Message 字段 replyTo 关联处理消息的 Messenger 对象。</p><p>对于 <strong>服务端</strong> ，首先 Messenger 对象关联接收消息的 Handler ，然后在服务端 onBind 中调用 getBinder() 方法得到 Binder 对象。</p><p>其中 MessageHandler 继承 Handler 并重写 handleMessage 方法。</p><pre><code class="Java">public class MessengerService extends Service {    private static final String TAG = &quot;MessengerService&quot;;    private static class MessageHandler extends Handler {        @Override        public void handleMessage(Message msg) {            Log.d(TAG, &quot;这里是服务端，响应客户端消息&quot;);            switch (msg.what) {                case MConstants.MSG_FROM_CLIENT:                    Log.d(TAG, &quot;服务端接收到: &quot; + msg.getData().get(&quot;msg&quot;));                    // 响应客户端请求                    Messenger replyTo = msg.replyTo;                    Message replyMessage = Message.obtain(null, MConstants.MSG_FROM_SERVICE);                    Bundle bundle = new Bundle();                    bundle.putString(&quot;reply&quot;,&quot;服务端响应内容&quot;);                    replyMessage.setData(bundle);                    try {                        replyTo.send(replyMessage);                    } catch (RemoteException e) {                        e.printStackTrace();                    }                    break;                default:                    super.handleMessage(msg);            }        }    }    private final Messenger messenger = new Messenger(new MessageHandler());    @Nullable    @Override    public IBinder onBind(Intent intent) {        return messenger.getBinder();    }}</code></pre><p>如果需要响应客户端请求，使用 replyTo 字段获取 Messenger 实例再发送消息即可。</p><p>最后注意在 Manifest 中注册 Service 组件。</p><pre><code class="XML">&lt;service    android:name=&quot;com.wshunli.ipc.demo.message.MessengerService&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/5.Messenger进程间通信.png" alt="Messenger进程间通信"></p><p>Messenger 进程间通信在服务端是以串行的方式逐个处理的，所以有大量并发请求时使用 Messenger 不太合适。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.3 使用 Messenger<br>2、Android IPC机制（二）用Messenger进行进程间通信 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/2-messenger.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/2-messenger.html</a><br>3、Android 基于Message的进程间通信 Messenger完全解析 - CSDN博客<br><a href="https://blog.csdn.net/lmj623565791/article/details/47017485" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lmj623565791/article/details/47017485</a><br>4、Handler之Message详解 - 简书<br><a href="https://www.jianshu.com/p/a6c01dd2efdc" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/a6c01dd2efdc</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过 Messenger 可以在不同进程之间传递 Message 对象，是一种轻量级的 IPC 方案。&lt;/p&gt;&lt;p&gt;首先看 Messenger 的构造方法：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;Java&quot;&gt;public Messenger(Handler target
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（四）使用文件共享实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/60bbb7ec.html"/>
    <id>https://www.wshunli.com/posts/60bbb7ec.html</id>
    <published>2018-06-07T09:09:28.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>使用文件共享也是不错的进程间通信方式，两个进程通过读/写同一个文件来交换数据。</p><p>在 Windows 系统，文件会被加排斥锁导致其他线程无法对其访问，而 Android 是基于 Linux 系统，所以并发读写文件没有限制。</p><pre><code class="Java">// 序列化private void persistToFile() {    new Thread(new Runnable() {        @Override        public void run() {            User user = new User(1, &quot;wshunli&quot;, true);            File dir = new File(getApplicationContext().getCacheDir().getPath() + &quot;/user/&quot;);            if (!dir.exists()) {                dir.mkdirs();            }            File cachedFile = new File(dir.getPath() + &quot;/usercache&quot;);            ObjectOutputStream objectOutputStream = null;            try {                objectOutputStream = new ObjectOutputStream(                        new FileOutputStream(cachedFile));                objectOutputStream.writeObject(user);                Log.d(TAG, &quot;persist user:&quot; + user);            } catch (IOException e) {                e.printStackTrace();            } finally {                try {                    if (objectOutputStream != null) {                        objectOutputStream.close();                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }).start();}// 反序列化private void recoverFromFile() {    new Thread(new Runnable() {        @Override        public void run() {            User user = null;            File dir = new File(getApplicationContext().getCacheDir().getPath() + &quot;/user/&quot;);            File cachedFile = new File(dir.getPath() + &quot;/usercache&quot;);            if (cachedFile.exists()) {                ObjectInputStream objectInputStream = null;                try {                    objectInputStream = new ObjectInputStream(                            new FileInputStream(cachedFile));                    user = (User) objectInputStream.readObject();                    Log.d(TAG, &quot;recover user:&quot; + user);                } catch (IOException e) {                    e.printStackTrace();                } catch (ClassNotFoundException e) {                    e.printStackTrace();                } finally {                    try {                        if (objectInputStream != null) {                            objectInputStream.close();                        }                    } catch (IOException e) {                        e.printStackTrace();                    }                }            }        }    }).start();}</code></pre><p>这样对共享文件格式没有要求，但是在多线程情况下可能导致读出的内容不是最新的。<br>所以文件共享适合对数据同步要求不高的进程间进行通信，并妥善地处理好并发读/写问题。</p><p>而对于 SharedPreferences 有一定的读/写缓存策略，在内存中会有一份缓存，因此在多进程情况下，系统对其的读/写就变得不可靠，所以在进程间通信时，一般不用 SharedPreferences 。</p><blockquote><p>参考资料<br>《Android开发艺术探索》 – 2.4.2 使用文件共享</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用文件共享也是不错的进程间通信方式，两个进程通过读/写同一个文件来交换数据。&lt;/p&gt;&lt;p&gt;在 Windows 系统，文件会被加排斥锁导致其他线程无法对其访问，而 Android 是基于 Linux 系统，所以并发读写文件没有限制。&lt;/p&gt;&lt;pre&gt;&lt;code class=
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（三）使用 Bundle 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/f0f2eaec.html"/>
    <id>https://www.wshunli.com/posts/f0f2eaec.html</id>
    <published>2018-06-07T07:40:59.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 四大组件中 Activity、Service、Receiver 都支持在 Intent 中附加传递 Bundle 数据。</p><p>Bundle 是以键值对的形式存储数据，支持基本数据类型、数组、实现 Serializable 或 Parcelable 接口的对象以及一些 Android 支持的特殊对象。</p><pre><code class="Java">// 发送数据Intent intent = new Intent(MainActivity.this, SecondActivity.class);Bundle bundle = new Bundle();bundle.putString(&quot;userName&quot;, &quot;wshunli&quot;);intent.putExtras(bundle);startActivity(intent);// 接收数据Bundle bundle = getIntent().getExtras();String userName = null;if (bundle != null) {    userName = bundle.getString(&quot;userName&quot;);}Log.d(TAG, &quot;userName: &quot; + userName);</code></pre><p>使用 Bundle 的 put 与 get 方法族将数据保存至 bundle 对象，调用 Intent 的 putExtras 方法即可。</p><p>Bundle 源码分析，Bundle 继承自 BaseBundle 并实现了 Cloneable 和 Parcelable 接口。</p><p>以 Boolean 类型数据存取为例：</p><pre><code class="Java">ArrayMap&lt;String, Object&gt; mMap = null;public void putBoolean(@Nullable String key, boolean value) {    unparcel();    mMap.put(key, value);}public boolean getBoolean(String key, boolean defaultValue) {    unparcel();    Object o = mMap.get(key);    if (o == null) {        return defaultValue;    }    try {        return (Boolean) o;    } catch (ClassCastException e) {        typeWarning(key, o, &quot;Boolean&quot;, defaultValue, e);        return defaultValue;    }}</code></pre><p>根据源码可知数据存取都是在 ArrayMap 对象中。</p><p>其中 unparcel() 方法源码如下：</p><pre><code class="Java">/** If mParcelledData is non-null, then mMap will be null and the* data are stored as a Parcel containing a Bundle.  When the data* are unparcelled, mParcelledData willbe set to null.*/Parcel mParcelledData = null;/* package */ void unparcel() {    synchronized (this) {        final Parcel source = mParcelledData;        if (source != null) {            initializeFromParcelLocked(source, /*recycleParcel=*/ true);        } else {            if (DEBUG) {                Log.d(TAG, &quot;unparcel &quot;                        + Integer.toHexString(System.identityHashCode(this))                        + &quot;: no parcelled data&quot;);            }        }    }}private void initializeFromParcelLocked(@NonNull Parcel parcelledData, boolean recycleParcel) {    if (LOG_DEFUSABLE &amp;&amp; sShouldDefuse &amp;&amp; (mFlags &amp; FLAG_DEFUSABLE) == 0) {        Slog.wtf(TAG, &quot;Attempting to unparcel a Bundle while in transit; this may &quot;                + &quot;clobber all data inside!&quot;, new Throwable());    }    if (isEmptyParcel(parcelledData)) {        if (DEBUG) {            Log.d(TAG, &quot;unparcel &quot;                    + Integer.toHexString(System.identityHashCode(this)) + &quot;: empty&quot;);        }        if (mMap == null) {            mMap = new ArrayMap&lt;&gt;(1);        } else {            mMap.erase();        }        mParcelledData = null;        return;    }    final int count = parcelledData.readInt();    if (DEBUG) {        Log.d(TAG, &quot;unparcel &quot; + Integer.toHexString(System.identityHashCode(this))                + &quot;: reading &quot; + count + &quot; maps&quot;);    }    if (count &lt; 0) {        return;    }    ArrayMap&lt;String, Object&gt; map = mMap;    if (map == null) {        map = new ArrayMap&lt;&gt;(count);    } else {        map.erase();        map.ensureCapacity(count);    }    try {        parcelledData.readArrayMapInternal(map, count, mClassLoader);    } catch (BadParcelableException e) {        if (sShouldDefuse) {            Log.w(TAG, &quot;Failed to parse Bundle, but defusing quietly&quot;, e);            map.erase();        } else {            throw e;        }    } finally {        mMap = map;        if (recycleParcel) {            recycleParcel(parcelledData);        }        mParcelledData = null;    }    if (DEBUG) {        Log.d(TAG, &quot;unparcel &quot; + Integer.toHexString(System.identityHashCode(this))                + &quot; final map: &quot; + mMap);    }}</code></pre><p>只有使用 Bundle 构造函数实例化 Bundle 对象时，才会给 mParcelledData 赋值，其他大部分情况下 mParcelledData 都是 null 。</p><pre><code class="Java">BaseBundle(Parcel parcelledData) {    readFromParcelInner(parcelledData);}void readFromParcelInner(Parcel parcel) {    // Keep implementation in sync with readFromParcel() in    // frameworks/native/libs/binder/PersistableBundle.cpp.    int length = parcel.readInt();    readFromParcelInner(parcel, length);}private void readFromParcelInner(Parcel parcel, int length) {    if (length &lt; 0) {        throw new RuntimeException(&quot;Bad length in parcel: &quot; + length);    } else if (length == 0) {        // Empty Bundle or end of data.        mParcelledData = NoImagePreloadHolder.EMPTY_PARCEL;        return;    }    final int magic = parcel.readInt();    if (magic != BUNDLE_MAGIC) {        throw new IllegalStateException(&quot;Bad magic number for Bundle: 0x&quot;                + Integer.toHexString(magic));    }    if (parcel.hasReadWriteHelper()) {        // If the parcel has a read-write helper, then we can&#39;t lazily-unparcel it, so just        // unparcel right away.        synchronized (this) {            initializeFromParcelLocked(parcel, /*recycleParcel=*/ false);        }        return;    }    // Advance within this Parcel    int offset = parcel.dataPosition();    parcel.setDataPosition(MathUtils.addOrThrow(offset, length));    Parcel p = Parcel.obtain();    p.setDataPosition(0);    p.appendFrom(parcel, offset, length);    p.adoptClassCookies(parcel);    if (DEBUG) Log.d(TAG, &quot;Retrieving &quot;  + Integer.toHexString(System.identityHashCode(this))            + &quot;: &quot; + length + &quot; bundle bytes starting at &quot; + offset);    p.setDataPosition(0);    mParcelledData = p;}</code></pre><p>从上述代码片段可以知道 mParcelledData 的取值有3种情况：</p><pre><code class="Java">mParcelledData = nullmParcelledData = NoImagePreloadHolder.EMPTY_PARCELmParcelledData = Parcel.obtain()</code></pre><p>在 unparcel() 方法中分别对这三种情况进行了处理，如果为 null 不进行任何操作返回；如果为 EMPTY_PARCEL 则使用 <code>mMap = new ArrayMap&lt;&gt;(1)</code> 创建长度为 1 的 ArrayMap 对象；如果为 Parcel.obtain() 则实例化 ArrayMap 对象并存储数据。</p><blockquote><p>参考资料<br>1、Android Bundle详解 - CSDN博客<br><a href="https://blog.csdn.net/cswhale/article/details/39053411" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cswhale/article/details/39053411</a><br>2、Android Bundle总结 - CSDN博客<br><a href="https://blog.csdn.net/ylyg050518/article/details/72638852" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/ylyg050518/article/details/72638852</a><br>3、Android细节问题 —— 有了Intent，为什么还要有Bundle？ - 简书<br><a href="https://www.jianshu.com/p/e9db0797293b" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/e9db0797293b</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Android 四大组件中 Activity、Service、Receiver 都支持在 Intent 中附加传递 Bundle 数据。&lt;/p&gt;&lt;p&gt;Bundle 是以键值对的形式存储数据，支持基本数据类型、数组、实现 Serializable 或 Parcelable
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（二）Android 中的多进程模式</title>
    <link href="https://www.wshunli.com/posts/4662fa2f.html"/>
    <id>https://www.wshunli.com/posts/4662fa2f.html</id>
    <published>2018-06-05T14:09:30.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 中多进程指单个应用存在多个进程的情况。</p><h1 id="开启多进程模式"><a href="#开启多进程模式" class="headerlink" title="开启多进程模式"></a>开启多进程模式</h1><p>在 Android 中开启多线程只有一种方法，即在 AndroidManifest.xml 中指定 <code>android:process</code> 属性。</p><pre><code class="XML">&lt;activity android:name=&quot;.MainActivity&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;    &lt;/intent-filter&gt;&lt;/activity&gt;&lt;activity    android:name=&quot;.SecondActivity&quot;    android:process=&quot;:remote&quot; /&gt;&lt;activity    android:name=&quot;.ThirdActivity&quot;    android:process=&quot;com.wshunli.ipc.demo.remote&quot; /&gt;</code></pre><p>MainActivity 没有指定 process 属性，则运行在默认进程中，进程名为包名。</p><p>当启动 SecondActivity 或者 ThirdActivity 时，系统会为他们单独创建进程，<br>进程名分别为 <code>com.wshunli.ipc.demo:remote</code> 和 <code>com.wshunli.ipc.demo.remote</code> .</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/2.开启多进程模式.png" alt="开启多进程模式"></p><p>对于二者的区别，<br>前者 <code>com.wshunli.ipc.demo:remote</code> 代表应用私有进程，其他应用的组件不可与其在同一进程中。<br>后者 <code>com.wshunli.ipc.demo.remote</code> 代表全局进程，其他应用可通过 ShareUID 方式与其在统一进程中。</p><p>Android 系统会为每个应用分配一个唯一的 UID ，具有相同的 UID 应用才能共享数据。</p><p>两个应用通过 ShareUID 跑在同一进程中也是有要求的，需要两个应用有相同的 ShareUID 并且签名相同。<br>在这种情况下，可以互相访问对方的私有数据，看起来像一个应用的两部分。</p><h1 id="多进程模式的运行机制"><a href="#多进程模式的运行机制" class="headerlink" title="多进程模式的运行机制"></a>多进程模式的运行机制</h1><p>Android 系统为每个应用（或者说每个进程）分配一个独立虚拟机，在内存分配上也有不同的地址空间。</p><p>我们新建一个 UserManager 类，然后写一个静态变量。</p><pre><code class="Java">public class UserManager {    public static int wshunli = 1;}</code></pre><p>在 MainActivity 中将静态变量赋值为 2 ，然后在 SecondActivity 和 ThirdActivity 中打印出来，发现其值仍然是 1 。</p><p>所有运行在不同进程中的四大组件，只要它们之间需要通过内存来共享数据，都会共享失败，这也是多进程所带来的主要影响。</p><p>一般来说，使用多进程会造成如下几方面的问题：</p><p>(1) 静态成员和单例模式完全失效（不同的虚拟机）。<br>(2) 线程同步机制完全失效（不是同一块内存空间）。<br>(3) SharePreferences 的可靠性下降（底层通过 XML 执行操作，并发读/写都有可能出问题）。<br>(4) Application 会多次创建（启动新进程其实就是启动一个应用的过程，自然会创建新的 Application ）。</p><pre><code class="Java">public class MApplication extends Application {    private static final String TAG = &quot;MApplication&quot;;    @Override    public void onCreate() {        super.onCreate();        int pid = Process.myPid();        Log.d(TAG, &quot;pid: &quot; + pid);    }}</code></pre><p>同一个应用的多线程相当于不同应用采用 ShareUID 模式。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.2 Android 中的多进程模式<br>2、Android 接口定义语言 (AIDL) | Android Developers<br><a href="https://developer.android.com/guide/components/aidl" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/aidl</a><br>3、Android IPC机制（一）开启多进程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/1-process-start.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/1-process-start.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Android 中多进程指单个应用存在多个进程的情况。&lt;/p&gt;&lt;h1 id=&quot;开启多进程模式&quot;&gt;&lt;a href=&quot;#开启多进程模式&quot; class=&quot;headerlink&quot; title=&quot;开启多进程模式&quot;&gt;&lt;/a&gt;开启多进程模式&lt;/h1&gt;&lt;p&gt;在 Android 中开启多
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（一）Android IPC 简介</title>
    <link href="https://www.wshunli.com/posts/4ff64590.html"/>
    <id>https://www.wshunli.com/posts/4ff64590.html</id>
    <published>2018-06-05T11:58:49.000Z</published>
    <updated>2018-07-29T15:23:22.320Z</updated>
    
    <content type="html"><![CDATA[<p>IPC（Inter-Process Communication，进程间通信）指两进程间进行数据交换的过程。</p><p>IPC 并不是 Android 独有的，Windows 上可通过剪切板、管道和油槽等来进行进程间通信；Linux 可通过命名管道、共享内存和信号量等实现进程间通信。</p><p>虽然 Android 是基于 Linux 内核的操作系统，但是它有自己的进程间通信方式。</p><p>在 Android 中，通过 Binder 可以实现进程间通信，还有 Socket 、ContentProvider 等等。</p><p>IPC 使用场景，一是应用的自身原因需要使用多进程实现；另一个是通过多进程获得更多内存空间。</p><p>我们需要通过 Intent 和 Binder 传输数据时，需要用到 <strong>Serializable</strong> 或者 <strong>Parcelable</strong> 接口完成对象的序列化。</p><p>1、Serializable 接口</p><p>Serializable 是 Java 提供的一个序列化接口，是一个空接口。</p><pre><code class="Java">public class User implements Serializable {    private static final long serialVersionUID = 8929979969779835719L;    public int userId;    public String userName;    public boolean isMale;    ···}</code></pre><p>只需实现 Serializable 接口，一般应该手动指定 serialVersionUID ，当版本升级时能最大限度恢复数据。</p><pre><code class="Java">// 序列化User user = new User(0, &quot;wshunli&quot;, true);try {    ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;cache.text&quot;));    out.writeObject(user);    out.close();} catch (IOException e) {    e.printStackTrace();}// 反序列化try {    ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;cache.text&quot;));    User newUser = (User) in.readObject();    Log.d(TAG, &quot;onCreate: &quot; + newUser.toString());    in.close();} catch (IOException e) {    e.printStackTrace();} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>序列化：把对象转换为字节序列的过程称为对象的序列化。<br>反序列化：把字节序列恢复为对象的过程称为对象的反序列化。</p><p>2、Parcelable 接口</p><p>Parcelable 接口是 Android 系统提供的序列化接口。</p><pre><code class="Java">public class User implements Parcelable {    public int userId;    public String userName;    public boolean isMale;    public Book book;    public User(int userId, String userName, boolean isMale, Book book) {        this.userId = userId;        this.userName = userName;        this.isMale = isMale;        this.book = book;    }    // 内容描述    @Override    public int describeContents() {        return 0;    }    // 序列化    @Override    public void writeToParcel(Parcel dest, int flags) {        dest.writeInt(userId);        dest.writeString(userName);        dest.writeInt(isMale ? 1 : 0);        dest.writeParcelable(book, 0);    }    // 反序列化    public static final Parcelable.Creator&lt;User&gt; CREATOR = new Parcelable.Creator&lt;User&gt;(){        @Override        public User createFromParcel(Parcel source) {            return new User(source);        }        @Override        public User[] newArray(int size) {            return new User[size];        }    };    private User(Parcel source) {        userId = source.readInt();        userName = source.readString();        isMale = source.readInt() == 1;        book = source.readParcelable(Thread.currentThread().getContextClassLoader());    }}</code></pre><p>使用 Parcelable 序列化还是有点麻烦的，不过思路清晰。</p><p>Serializable 和 Parcelable 比较：</p><p>Serializable 是 Java 的序列化接口，需要大量 I/O 操作，开销比较大；<br>Parcelable 是 Android 中的序列化接口，效率更高，因此首选。</p><p>但是在将对象序列化到存储设备或者将对象序列化后的通过网络传输，建议使用 Serializable 接口。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.1 Android IPC 简介、2.3 IPC 基础概念介绍<br>2、Android IPC机制详解（一） - 简书<br><a href="https://www.jianshu.com/p/b9b3051a4ff6" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/b9b3051a4ff6</a><br>3、Android 中的IPC机制 - CSDN博客<br><a href="https://blog.csdn.net/a565102223/article/details/70186070" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/a565102223/article/details/70186070</a><br>4、Java 之 Serializable 序列化和反序列化的概念,作用的通俗易懂的解释 - CSDN博客<br><a href="https://blog.csdn.net/qq_27093465/article/details/78544505" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_27093465/article/details/78544505</a><br>5、详细介绍Android中Parcelable的原理和使用方法 - CSDN博客<br><a href="https://blog.csdn.net/justin_1107/article/details/72903006" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/justin_1107/article/details/72903006</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IPC（Inter-Process Communication，进程间通信）指两进程间进行数据交换的过程。&lt;/p&gt;&lt;p&gt;IPC 并不是 Android 独有的，Windows 上可通过剪切板、管道和油槽等来进行进程间通信；Linux 可通过命名管道、共享内存和信号量等实现进
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
</feed>
