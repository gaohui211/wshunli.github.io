<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  <subtitle>wshunli`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-07-27T08:08:03.923Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>沉迷学术，不可自拔（十一）</title>
    <link href="https://www.wshunli.com/posts/a7e2fd51.html"/>
    <id>https://www.wshunli.com/posts/a7e2fd51.html</id>
    <published>2018-07-27T06:41:47.000Z</published>
    <updated>2018-07-27T08:08:03.923Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】算是人生的第一份工作吧
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins安装Java代码质量分析工具</title>
    <link href="https://www.wshunli.com/posts/57f40b04.html"/>
    <id>https://www.wshunli.com/posts/57f40b04.html</id>
    <published>2018-07-25T01:15:32.000Z</published>
    <updated>2018-07-27T08:08:03.919Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Checkstyle、PMD、FindBugs 三款主流的 Java 静态分析工具，以及 SourceMonitor 代码度量工具，Simian 代码重复检查工具等。</p><h1 id="Jenkins-安装-Java-代码质量分析工具"><a href="#Jenkins-安装-Java-代码质量分析工具" class="headerlink" title="Jenkins 安装 Java 代码质量分析工具"></a>Jenkins 安装 Java 代码质量分析工具</h1><p>在 Java 世界中，Checkstyle、PMD、FindBugs 插件是三款主流的静态分析工具。</p><p>1、Checkstyle 擅长检查编码标准和约定，编码行为以及其他的一些质量指标（如代码复杂度）。</p><p>Checkstyle（<a href="http://checkstyle.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">http://checkstyle.sourceforge.net/</a> ） 是 SourceForge 下的一个项目，提供了一个帮助 JAVA 开发人员遵守某些编码规范的工具。</p><p>CheckStyle 检验的主要内容包括：Javadoc 注释、命名约定、标题、Import 语句、体积大小、空白、修饰符、块、代码问题、类设计和混合检查（包括一些有用的比如非必须的 System.out 和 printstackTrace）。</p><p>在 Jenkins 中安装 CheckStyle 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;        &lt;version&gt;2.16&lt;/version&gt;        &lt;configuration&gt;            &lt;configLocation&gt;checkstyle.xml&lt;/configLocation&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>checkstyle:checkstyle</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/Checkstyle+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Checkstyle+Plugin</a></p><p>2、PMD 类似于 Checkstyle ，它更加专注于编码和设计实践。</p><p>PMD（<a href="https://pmd.github.io/" rel="external nofollow noopener noreferrer" target="_blank">https://pmd.github.io/</a> ） An extensible cross-language static code analyzer.</p><p>专注于潜在的编码问题，比如未使用或者次优化的代码，代码大小和复杂性，以及良好的编码行为。</p><p>PMD 也附带了 CPD ，以支持探测重复或者近似重复代码。</p><p>在 Jenkins 中安装 PMD 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;        &lt;version&gt;3.5&lt;/version&gt;    &lt;/plugin&gt;            ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>pmd:pmd</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/PMD+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/PMD+Plugin</a></p><p>3、FindBugs 专注于识别潜在的危险和错误的代码。</p><p>FindBugs（<a href="http://findbugs.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">http://findbugs.sourceforge.net/</a> ） 检查应用程序的字节码来找出潜在的 bug 、性能问题或者差的编码行为。</p><p>在 Jenkins 中安装 FindBugs 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;        &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.5.2&lt;/version&gt;        &lt;configuration&gt;            &lt;findbugsXmlOutput&gt;true&lt;/findbugsXmlOutput&gt;            &lt;findbugsXmlWithMessages&gt;true&lt;/findbugsXmlWithMessages&gt;            &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>findbugs:findbugs</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/FindBugs+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/FindBugs+Plugin</a></p><p>4、Static Analysis Collector 插件汇总静态分析结果</p><p>插件地址：<a href="https://wiki.jenkins.io/display/JENKINS/Analysis+Collector+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Analysis+Collector+Plugin</a></p><h1 id="Jenkins-安装-SourceMonitor-代码度量工具"><a href="#Jenkins-安装-SourceMonitor-代码度量工具" class="headerlink" title="Jenkins 安装 SourceMonitor 代码度量工具"></a>Jenkins 安装 SourceMonitor 代码度量工具</h1><p>SourceMonitor（<a href="http://www.campwoodsw.com/sourcemonitor.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.campwoodsw.com/sourcemonitor.html</a> ） 允许查看软件源代码内部，以了解项目拥有的代码量，并确定模块的相对复杂度。</p><p>在 Jenkins 中也有 SourceMonitor（<a href="https://github.com/jenkinsci/sourcemonitor-plugin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jenkinsci/sourcemonitor-plugin</a> ）插件，但是好久没更新了，也存在一些问题（<a href="https://issues.jenkins-ci.org/browse/JENKINS-5741" rel="external nofollow noopener noreferrer" target="_blank">https://issues.jenkins-ci.org/browse/JENKINS-5741</a> ）。</p><p>报错如下：</p><pre><code class="TXT">Parsing sourcemonitor resultshudson.AbortException: Parsing file error    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorParser.invoke(SourceMonitorParser.java:70)    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorParser.invoke(SourceMonitorParser.java:45)    at hudson.FilePath.act(FilePath.java:1047)    at hudson.FilePath.act(FilePath.java:1025)    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorPublisher.perform(SourceMonitorPublisher.java:80)    at hudson.tasks.BuildStepMonitor$3.perform(BuildStepMonitor.java:45)    at hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)    at hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:690)    at hudson.model.Build$BuildExecution.post2(Build.java:186)    at hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:635)    at hudson.model.Run.execute(Run.java:1819)    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)    at hudson.model.ResourceController.execute(ResourceController.java:97)    at hudson.model.Executor.run(Executor.java:429)Build step &#39;Publish SourceMonitor results&#39; changed build result to FAILUREBuild step &#39;Publish SourceMonitor results&#39; marked build as failureFinished: FAILURE</code></pre><p>原因是在构建的时候需要添加 <code>sourcemonitor:sourcemonitor</code> 参数。</p><p>SourceMonitor 插件地址：<a href="https://plugins.jenkins.io/sourcemonitor" rel="external nofollow noopener noreferrer" target="_blank">https://plugins.jenkins.io/sourcemonitor</a></p><p>这里可以安装公司内部的 <code>hwSourceMonitor.hpi</code> 插件</p><p>参考资料：<br>1、<a href="http://3ms.huawei.com/km/blogs/details/2503631" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/km/blogs/details/2503631</a><br>2、<a href="http://3ms.huawei.com/hi/group/2033815/wiki_4496373.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/hi/group/2033815/wiki_4496373.html</a></p><p><del>也可以使用 HTML Publisher 插件解析 SourceMonitor 输出的 xml 结果。</del></p><p>0、准备 SourceMonitor 并安装 Jenkins Server 上。</p><p>本文安装在 <code>C:\Program Files (x86)\SourceMonitor\SourceMonitor.exe</code> 目录。</p><p>1、安装 HTML Publisher 插件。</p><p>HTML Publisher Plugin 用来把 SourceMonitor 检测的结果可视化。</p><p>2、在构建后添加 Windows 批处理命令。</p><pre><code class="Shell">&quot;C:\Program Files (x86)\SourceMonitor\SourceMonitor.exe&quot; /C &quot;C:\CI_Tools\SourceMonitorCommand.xml&quot;&quot;C:\CI_Tools\msxsl.exe&quot; SourceMonitorReport.xml &quot;C:\CI_Tools\SourceMonitorSummaryGeneration.xsl&quot; -o SourceMonitorSummaryGeneration.xml&quot;C:\CI_Tools\msxsl.exe&quot; SourceMonitorSummaryGeneration.xml &quot;C:\CI_Tools\SourceMonitor.xsl&quot; -o SourceMonitorResult.html</code></pre><p>其中 <code>SourceMonitorCommand.xml</code> 来自</p><p><code>C:\Program Files (x86)\SourceMonitor\Samples\sample_commands.xml</code></p><pre><code class="XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;sourcemonitor_commands&gt;    &lt;write_log&gt;true&lt;/write_log&gt;    &lt;command&gt;        &lt;project_file&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\target/sourcemonitor\project.smp&lt;/project_file&gt;        &lt;project_language&gt;Java&lt;/project_language&gt;        &lt;source_directory&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\src\main\java&lt;/source_directory&gt;        &lt;parse_utf8_files&gt;true&lt;/parse_utf8_files&gt;        &lt;file_extensions&gt;*.java&lt;/file_extensions&gt;        &lt;include_subdirectories&gt;true&lt;/include_subdirectories&gt;        &lt;export&gt;            &lt;export_file&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\target/sourcemonitor\sourcemonitor.xml&lt;/export_file&gt;            &lt;export_type&gt;2 (project details as XML)&lt;/export_type&gt;            &lt;export_option&gt;Include method metrics: option 3&lt;/export_option&gt;        &lt;/export&gt;    &lt;/command&gt;&lt;/sourcemonitor_commands&gt;</code></pre><p>需要下载 <code>msxsl</code> 工具（<a href="http://www.microsoft.com/en-us/download/details.aspx?id=21714" rel="external nofollow noopener noreferrer" target="_blank">http://www.microsoft.com/en-us/download/details.aspx?id=21714</a> ）并放置到 <code>C:\CI_Tools</code> 目录下。</p><p>3、最后添加 Publish HTML reports 即可。</p><p>不过我没有配置成功，总是提示找不到 <code>SourceMonitorReport.xml</code> 文件。</p><p>如果使用 SourceMonitor 插件遇到如下 OutOfMemoryError 错误。</p><pre><code class="TXT">FATAL: Java heap spacejava.lang.OutOfMemoryError: Java heap space</code></pre><p>解决办法：<a href="https://wiki.jenkins.io/display/JENKINS/Builds+failing+with+OutOfMemoryErrors" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Builds+failing+with+OutOfMemoryErrors</a></p><h1 id="Jenkins-安装-Simian-代码重复检查工具"><a href="#Jenkins-安装-Simian-代码重复检查工具" class="headerlink" title="Jenkins 安装 Simian 代码重复检查工具"></a>Jenkins 安装 Simian 代码重复检查工具</h1><p>Simian（<a href="http://www.harukizaemon.com/simian/" rel="external nofollow noopener noreferrer" target="_blank">http://www.harukizaemon.com/simian/</a> ） 是一个检查重复代码的工具。</p><p>这里可以使用公司内部的插件</p><p><a href="http://3ms.huawei.com/hi/group/2964/wiki_4145693.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/hi/group/2964/wiki_4145693.html</a></p><h1 id="Jenkins-安装-Cobertura-代码测试覆盖率工具"><a href="#Jenkins-安装-Cobertura-代码测试覆盖率工具" class="headerlink" title="Jenkins 安装 Cobertura 代码测试覆盖率工具"></a>Jenkins 安装 Cobertura 代码测试覆盖率工具</h1><p>Cobertura（<a href="https://sourceforge.net/projects/cobertura/" rel="external nofollow noopener noreferrer" target="_blank">https://sourceforge.net/projects/cobertura/</a> ） 一项衡量是否所有代码都被测到的工具。</p><p>在 Jenkins 中安装 Cobertura 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;        &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.6&lt;/version&gt;        &lt;configuration&gt;            &lt;instrumentation&gt;                &lt;ignoreTrivial&gt;false&lt;/ignoreTrivial&gt;            &lt;/instrumentation&gt;            &lt;formats&gt;                &lt;format&gt;html&lt;/format&gt;                &lt;format&gt;xml&lt;/format&gt;            &lt;/formats&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>cobertura:cobertura</code> 参数。</p><p><code>compile -D cobertura.report.format=xml clean compile cobertura:cobertura</code></p><p>这里注意添加 <code>-D cobertura.report.format=xml</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/Cobertura+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Cobertura+Plugin</a></p><blockquote><p>参考资料<br>1、jenkins+maven配置Checkstyle+FindBugs+PMD - 简书<br><a href="https://www.jianshu.com/p/03b9e38d03b2" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/03b9e38d03b2</a><br>2、CheckStyle提高代码质量 - CSDN博客<br><a href="https://blog.csdn.net/lx_yoyo/article/details/73332590" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lx_yoyo/article/details/73332590</a><br>3、Jenkins+maven+checkstyle对java代码进行静态代码分析 - CSDN博客<br><a href="https://blog.csdn.net/hwhua1986/article/details/48339545" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hwhua1986/article/details/48339545</a><br>4、Jenkins+maven+pmd对java代码进行静态代码分析 - CSDN博客<br><a href="https://blog.csdn.net/hwhua1986/article/details/48342745" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hwhua1986/article/details/48342745</a><br>5、[Jenkins]持续集成环境下fingbug插件的安装使用与配置 - Amberly - 博客园<br><a href="https://www.cnblogs.com/amberly/p/7201041.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/amberly/p/7201041.html</a><br>6、静态检查——SourceMonitor的学习和使用 - CSDN博客<br><a href="https://blog.csdn.net/yf210yf/article/details/17535713" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yf210yf/article/details/17535713</a><br>7、[料理佳餚] Jenkins 增加 SourceMonitor Plugin | 軟體主廚的程式料理廚房 - 點部落<br><a href="https://dotblogs.com.tw/supershowwei/2015/10/14/153562" rel="external nofollow noopener noreferrer" target="_blank">https://dotblogs.com.tw/supershowwei/2015/10/14/153562</a><br>8、CI Server 16 - 整合程式碼複雜度及深度報表 (Source Monitor) - iT 邦幫忙<br><a href="https://ithelp.ithome.com.tw/articles/10107051" rel="external nofollow noopener noreferrer" target="_blank">https://ithelp.ithome.com.tw/articles/10107051</a><br>8、重复代码检查工具simian的基本用法 | 知行一<br><a href="http://purecpp.org/?p=92" rel="external nofollow noopener noreferrer" target="_blank">http://purecpp.org/?p=92</a><br>9、Jenkins集成Simian插件_百度经验<br><a href="https://jingyan.baidu.com/article/c45ad29ccbfd3a051653e272.html" rel="external nofollow noopener noreferrer" target="_blank">https://jingyan.baidu.com/article/c45ad29ccbfd3a051653e272.html</a><br>10、[料理佳餚] Jenkins 增加 Simian Plugin | 軟體主廚的程式料理廚房 - 點部落<br><a href="https://dotblogs.com.tw/supershowwei/2015/10/14/153561" rel="external nofollow noopener noreferrer" target="_blank">https://dotblogs.com.tw/supershowwei/2015/10/14/153561</a><br>11、代码测试覆盖率Cobertura使用 - CSDN博客<br><a href="https://blog.csdn.net/cathy_sunshine/article/details/75258298" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cathy_sunshine/article/details/75258298</a><br>12、jenkins集成cobertura，调用显示cobertura的report - CSDN博客<br><a href="https://blog.csdn.net/yaominhua/article/details/40684647" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yaominhua/article/details/40684647</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Checkstyle、PMD、FindBugs 三款主流的 Java 静态分析工具，以及 SourceMonitor 代码度量工具，Simian 代码重复检查工具等。&lt;/p&gt;&lt;h1 id=&quot;Jenkins-安装-Java-代码质量分析工具&quot;&gt;&lt;a href=&quot;#J
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins服务搭建及环境配置</title>
    <link href="https://www.wshunli.com/posts/5d09cdc2.html"/>
    <id>https://www.wshunli.com/posts/5d09cdc2.html</id>
    <published>2018-07-24T11:16:40.000Z</published>
    <updated>2018-07-27T08:08:03.919Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 是一款优秀的开源自动化服务器，允许持续集成和持续交付。Jenkins 支持数百个插件，以支持项目的构建、部署和自动化。</p><p>Jenkins 官网：<a href="https://jenkins.io/" rel="external nofollow noopener noreferrer" target="_blank">https://jenkins.io/</a></p><p>「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」这三个概念的解释。</p><p><strong>持续集成</strong> 强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p><p><strong>持续交付</strong> 在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。</p><p><strong>持续部署</strong> 则是在持续交付的基础上，把部署到生产环境的过程自动化。</p><h2 id="Jenkins-基础环境"><a href="#Jenkins-基础环境" class="headerlink" title="Jenkins 基础环境"></a>Jenkins 基础环境</h2><p>Jenkins 使用 Java 编写，支持所有主流操作系统。</p><p>本文仅介绍在 Windows 操作系统下 Jenkins 单机本地部署。</p><p>首先应配置 Java 环境，然后部署 Tomcat 服务。</p><p>然后即可安装 Jenkins 应用。</p><p>安装步骤可参考：<a href="https://www.cnblogs.com/hdwang/p/6081994.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/hdwang/p/6081994.html</a></p><p>最后推荐安装一些工具包括：</p><p>1、Apache Maven 软件（特别是Java软件）项目管理及自动构建工具。</p><p>推荐 Maven 配置镜像。</p><pre><code class="XML">&lt;mirror&gt;    &lt;!--This sends everything else to /public --&gt;    &lt;id&gt;nexus-aliyun&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Nexus aliyun&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>Maven 仓库阿里云镜像配置 - CSDN博客<br><a href="https://blog.csdn.net/cwenyifan/article/details/54864504" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cwenyifan/article/details/54864504</a></p><p>在公司内部推荐使用</p><pre><code class="XML">&lt;mirror&gt;&lt;id&gt;rnd-huawei&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Maven China Mirror&lt;/name&gt;      &lt;url&gt;http://rnd-mirrors.huawei.com/maven/&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>参考链接：MAVEN公司内部镜像配置&amp;Intellij IDEA MAVEN配置 - CE中间件与系统集成 - 3ms知识管理社区<br><a href="http://3ms.huawei.com/hi/group/2027489/wiki_4781465.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/hi/group/2027489/wiki_4781465.html</a></p><p>2、Git SVN 源代码版本控制工具。</p><p>具体安装配置操作可参考资料。</p><h2 id="Jenkins-全局工具配置"><a href="#Jenkins-全局工具配置" class="headerlink" title="Jenkins 全局工具配置"></a>Jenkins 全局工具配置</h2><p>JDK 配置 JAVA_HOME 目录即可</p><p>比如 <code>C:\Program Files\Java\jdk1.8.0_171</code></p><p>Git 配置 git.exe 文件即可</p><p>比如 <code>C:\Program Files\Git\bin\git.exe</code></p><p>Maven 配置 MAVEN_HOME 目录即可</p><p>比如 <code>D:\apache-maven\</code></p><h2 id="Jenkins-插件管理高级配置"><a href="#Jenkins-插件管理高级配置" class="headerlink" title="Jenkins 插件管理高级配置"></a>Jenkins 插件管理高级配置</h2><p>推荐配置 <strong>升级站点</strong></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json" rel="external nofollow noopener noreferrer" target="_blank">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json</a></p><p>公司内部推荐使用</p><p><a href="http://cmc-cd-mirror.rnd.huawei.com/jenkins-updates/update-center.json" rel="external nofollow noopener noreferrer" target="_blank">http://cmc-cd-mirror.rnd.huawei.com/jenkins-updates/update-center.json</a></p><p>参考链接：公司Jenkins插件中心上线啦，只需两步，免代理配置和漫长等待，轻松实现Jenkins插件在线自动安装和升级 - 刘珍珍的博客<br><a href="http://3ms.huawei.com/km/blogs/details/5544279" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/km/blogs/details/5544279</a></p><blockquote><p>参考资料<br>1、jenkins详解 - CSDN博客<br><a href="https://blog.csdn.net/qq_26848099/article/details/78901240" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_26848099/article/details/78901240</a><br>2、如何理解持续集成、持续交付、持续部署？ - 知乎<br><a href="https://www.zhihu.com/question/23444990" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/23444990</a><br>3、使用jekins自动构建部署java maven项目（jdk1.7+tomcat7.0+jenkins2.19.3） - 追极 - 博客园<br><a href="https://www.cnblogs.com/hdwang/p/6081994.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/hdwang/p/6081994.html</a><br>4、Jenkins：插件安装失败问题 - 简书<br><a href="https://www.jianshu.com/p/2b7288e77ff8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/2b7288e77ff8</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jenkins 是一款优秀的开源自动化服务器，允许持续集成和持续交付。Jenkins 支持数百个插件，以支持项目的构建、部署和自动化。&lt;/p&gt;&lt;p&gt;Jenkins 官网：&lt;a href=&quot;https://jenkins.io/&quot; rel=&quot;external nofollow
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>在线直播技术解决方案及其实现方法（移动端）</title>
    <link href="https://www.wshunli.com/posts/8aeeab4a.html"/>
    <id>https://www.wshunli.com/posts/8aeeab4a.html</id>
    <published>2018-07-04T13:40:33.000Z</published>
    <updated>2018-07-27T08:08:03.923Z</updated>
    
    <content type="html"><![CDATA[<p>简单地记录下 Android 移动端直播技术实现方法。</p><p>目前对移动端直播技术实现方法了解还不够全面，本文仅介绍一种基于 RTMP 协议的在线直播实现方法。</p><p>直播系统可以简单地分为三部分：服务端、推流端、拉流端。</p><h1 id="简单的直播系统"><a href="#简单的直播系统" class="headerlink" title="简单的直播系统"></a>简单的直播系统</h1><p>1、服务端：SRS</p><p>SRS定位是运营级的互联网直播服务器集群，追求更好的概念完整性和最简单实现的代码。</p><p>源代码：<a href="https://github.com/ossrs/srs" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ossrs/srs</a></p><p>部署方法：<a href="https://github.com/ossrs/srs/wiki/v1_CN_SampleRTMP" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ossrs/srs/wiki/v1_CN_SampleRTMP</a></p><p>2、推流端：OBS Studio</p><p>OBS Studio 是一款优秀的开源直播推流软件，支持 Windows, Mac or Linux 操作系统。</p><p>官网：<a href="https://obsproject.com/" rel="external nofollow noopener noreferrer" target="_blank">https://obsproject.com/</a></p><p>3、拉流端：VLC media player</p><p>VLC 是一款自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及 DVD、音频 CD、VCD 及各类流媒体协议。</p><p>官网：<a href="http://www.videolan.org/vlc/" rel="external nofollow noopener noreferrer" target="_blank">http://www.videolan.org/vlc/</a></p><p>其实这里好多视频播放器都支持的。</p><h1 id="移动端实现方法"><a href="#移动端实现方法" class="headerlink" title="移动端实现方法"></a>移动端实现方法</h1><p>1、服务端 SRS</p><p>服务端同样使用 SRS</p><p>2、推流端 yasea</p><p>yasea 是一个优秀的 RTMP 直播流推流库。</p><p>代码仓库：<a href="https://github.com/begeekmyfriend/yasea" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/begeekmyfriend/yasea</a></p><p>3、拉流端 ijkplayer</p><p>使用方法：<a href="https://www.wshunli.com/posts/2f3bf23c.html">https://www.wshunli.com/posts/2f3bf23c.html</a></p><p>源码编译：<a href="https://www.wshunli.com/posts/45f072c2.html">https://www.wshunli.com/posts/45f072c2.html</a></p><p>本文内容比较简单，后面有机会再深入了解。</p><blockquote><p>参考资料<br>1、Android手机直播（一）总览 - 简书<br><a href="https://www.jianshu.com/p/7ebbcc0c5df7" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/7ebbcc0c5df7</a><br>2、轻松入门Android直播相关技术 从0搭建直播系统 - CSDN博客<br><a href="https://blog.csdn.net/lmj623565791/article/details/77937483" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lmj623565791/article/details/77937483</a><br>3、Android直播实现（一）Android端推流、播放 - CSDN博客<br><a href="https://blog.csdn.net/mr_sk/article/details/71083366" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/mr_sk/article/details/71083366</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单地记录下 Android 移动端直播技术实现方法。&lt;/p&gt;&lt;p&gt;目前对移动端直播技术实现方法了解还不够全面，本文仅介绍一种基于 RTMP 协议的在线直播实现方法。&lt;/p&gt;&lt;p&gt;直播系统可以简单地分为三部分：服务端、推流端、拉流端。&lt;/p&gt;&lt;h1 id=&quot;简单的直播系统&quot;
      
    
    </summary>
    
      <category term="前端技术" scheme="https://www.wshunli.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="视频" scheme="https://www.wshunli.com/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="直播" scheme="https://www.wshunli.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="前端" scheme="https://www.wshunli.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（十）</title>
    <link href="https://www.wshunli.com/posts/4691b5a2.html"/>
    <id>https://www.wshunli.com/posts/4691b5a2.html</id>
    <published>2018-07-03T11:43:13.000Z</published>
    <updated>2018-07-27T08:08:03.923Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】希望我的坚持，让我走得更高、看得更远
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android视频播放器ijkplayer源码编译</title>
    <link href="https://www.wshunli.com/posts/45f072c2.html"/>
    <id>https://www.wshunli.com/posts/45f072c2.html</id>
    <published>2018-06-26T06:55:55.000Z</published>
    <updated>2018-07-27T08:08:03.915Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 16.04 LTS 系统下编译 ijkplayer Android 源码。</p><p>前面介绍过 ijkplayer 的使用，要想支持更多的特性，还是需要编译下源码的。</p><p>本文编译源码的主要目的是支持更多的格式，以及支持 HTTPS 链接。</p><p>NDK 版本：android-ndk-r10e</p><p>ijkplayer 仓库地址 <a href="https://github.com/Bilibili/ijkplayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer</a></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>0、最好还是在 Ubuntu 环境下编译，在 Windows 下编译可以参考</p><p><a href="https://blog.csdn.net/u010072711/article/details/51354834" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010072711/article/details/51354834</a></p><p>并不推荐此方法。</p><p>1、然后需要有 Java 及 Android 环境，可参考</p><p><a href="https://www.wshunli.com/posts/80d94eb7.html">https://www.wshunli.com/posts/80d94eb7.html</a></p><p>2、编译之前，还要准备一些工具</p><pre><code class="Shell">sudo apt-get updatesudo apt-get install gitsudo apt-get install yasm</code></pre><h1 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h1><p>1、从 GitHub 拉取源码，并打开源码目录</p><pre><code class="Shell">git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-androidcd ijkplayer-android</code></pre><p>2、切换到指定版本，可在源码仓库查看</p><pre><code class="Shell">git checkout -B latest k0.8.8</code></pre><p>3、配置参数（可选操作，为了支持更多格式）</p><p>参数配置一共有三种方式，选择一种即可。</p><p>(1) 为支持更多的格式，我们选这种</p><pre><code class="Shell">cd configrm module.shln -s module-default.sh module.shcd ..</code></pre><p>(2) 支持 hevc 功能，而且精简后的库</p><pre><code class="Shell">cd configrm module.shln -s module-lite-hevc.sh module.shcd ..</code></pre><p>(3) 精简后的库，默认是这种配置</p><pre><code class="Shell">cd configrm module.shln -s module-lite.sh module.shcd ..</code></pre><p>4、初始化，主要是拉取 ijkplayer 的依赖等，输入命令</p><pre><code class="Shell">./init-android.sh</code></pre><p>初始化 openssl （可选操作，为了支持 HTTPS ）</p><pre><code class="Shell">./init-android-openssl.sh</code></pre><p>5、打开 <code>ijkplayer-android/android/contrib/</code> 目录，Android 下编译脚本就放在该目录下</p><pre><code class="Shell">cd android/contrib</code></pre><p>6、清理并编译 openssl 依赖（可选操作，为了支持 HTTPS ）</p><pre><code class="Shell">./compile-openssl.sh clean./compile-openssl.sh all</code></pre><p>7、清理并编译 ffmpeg 软解码库依赖</p><pre><code class="Shell">./compile-ffmpeg.sh clean./compile-ffmpeg.sh all</code></pre><p>如果遇到问题 <code>fatal error: linux/perf_event.h: No such file or directory</code></p><p>可参考：<a href="https://github.com/Bilibili/ijkplayer/issues/4125" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer/issues/4125</a></p><p>在 module-default.sh、module-lite-hevc.sh 中添加如下一行配置即可。</p><pre><code class="Shell">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --disable-linux-perf&quot;</code></pre><p>8、然后返回上级到 <code>ijkplayer-android/android/</code> 目录，编译源码</p><pre><code class="Shell">cd .../compile-ijk.sh all</code></pre><p>等待编译完成即可。</p><h1 id="导入使用"><a href="#导入使用" class="headerlink" title="导入使用"></a>导入使用</h1><p>打开 Android Studio 并导入 <code>ijkplayer-android/android/ijkplayer/</code> 即可。</p><p><img src="https://img.wshunli.com/Android/ijkplayer/ijkplayer-build.png" alt="ijkplayer-build"></p><p>在这个项目中 module 比较多，大多数是针对不同 CPU 架构的包。</p><blockquote><p>参考资料<br>1、Android 超好用的播放器——ijkplayer - 简书<br><a href="https://www.jianshu.com/p/c5d972ab0309" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c5d972ab0309</a><br>2、IJKPlayer初识-编译与使用 - 简书<br><a href="https://www.jianshu.com/p/a425ee1c2aec" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/a425ee1c2aec</a><br>3、在ubuntu下编译ijkplayer-android - CSDN博客<br><a href="https://blog.csdn.net/u010072711/article/details/51438871" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010072711/article/details/51438871</a><br>4、Android集成IjkPlayer - 简书<br><a href="https://www.jianshu.com/p/79b434b2d5c8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/79b434b2d5c8</a><br>5、Ubuntu编译ijkplayer支持https和更多视频格式 - CSDN博客<br><a href="https://blog.csdn.net/DyncKathline/article/details/78223972" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/DyncKathline/article/details/78223972</a><br>6、Android，ijkplayer增加https协议支持，编译运行ijkplayer - CSDN博客<br><a href="https://blog.csdn.net/linchaolong/article/details/52805666" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/linchaolong/article/details/52805666</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu 16.04 LTS 系统下编译 ijkplayer Android 源码。&lt;/p&gt;&lt;p&gt;前面介绍过 ijkplayer 的使用，要想支持更多的特性，还是需要编译下源码的。&lt;/p&gt;&lt;p&gt;本文编译源码的主要目的是支持更多的格式，以及支持 HTTPS 链接。&lt;/p&gt;
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="ijkplayer" scheme="https://www.wshunli.com/tags/ijkplayer/"/>
    
  </entry>
  
  <entry>
    <title>Android视频播放器ExoPlayer使用入门</title>
    <link href="https://www.wshunli.com/posts/11deb252.html"/>
    <id>https://www.wshunli.com/posts/11deb252.html</id>
    <published>2018-06-23T11:02:59.000Z</published>
    <updated>2018-07-27T08:08:03.915Z</updated>
    
    <content type="html"><![CDATA[<p>EXOPlayer 是Google 官方开源的一款 Android 播放器，支持本地或者网络的音频和视频播放，支持 DASH、HLS 等流媒体协议，但是不支持 rtsp、rtmp 协议。</p><p>EXOPlayer 仓库地址：<a href="https://github.com/google/ExoPlayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/google/ExoPlayer</a></p><p>Google 的亲儿子，还是要学习下啊。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>引入依赖可以一次性全部引入所有依赖：</p><pre><code class="gradle">dependencies {    implementation &#39;com.google.android.exoplayer:exoplayer:2.X.X&#39;}</code></pre><p>也可以根据需要引入不同模块。</p><pre><code class="gradle">dependencies {    implementation &#39;com.google.android.exoplayer:exoplayer-core:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-dash:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-hls:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-smoothstreaming:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-ui:2.X.X&#39;}</code></pre><h1 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h1><p>EXOPlayer 使用是非常简单的，首先添加播放器控件。</p><pre><code class="XML">&lt;com.google.android.exoplayer2.ui.SimpleExoPlayerView    android:id=&quot;@+id/exoView&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot; /&gt;</code></pre><p>然后初始化播放器。</p><pre><code class="Java">private void initPlayer() {    //1. 创建一个默认的 TrackSelector    BandwidthMeter bandwidthMeter = new DefaultBandwidthMeter();    TrackSelection.Factory videoTackSelectionFactory =            new AdaptiveTrackSelection.Factory(bandwidthMeter);    TrackSelector trackSelector =            new DefaultTrackSelector(videoTackSelectionFactory);    //2.创建ExoPlayer    simpleExoPlayer = ExoPlayerFactory.newSimpleInstance(this, trackSelector);    //3.创建SimpleExoPlayerView    simpleExoPlayerView = (SimpleExoPlayerView) findViewById(R.id.exoView);    //4.为SimpleExoPlayer设置播放器    simpleExoPlayerView.setPlayer(simpleExoPlayer);    simpleExoPlayer.setPlayWhenReady(true);}</code></pre><p>最后添加视频资源就可以播放了。</p><pre><code class="Java">DataSource.Factory mediaDataSourceFactory = new DefaultDataSourceFactory(this,        Util.getUserAgent(this, &quot;ExoPlayerDemo&quot;));MediaSource mediaSource = new ExtractorMediaSource.Factory(mediaDataSourceFactory).createMediaSource(Uri.parse(&quot;http://streams.wshunli.com/videos/dyys_x264.mp4&quot;));simpleExoPlayer.prepare(mediaSource);</code></pre><p>注意添加网络权限，最终效果：</p><p><img src="https://img.wshunli.com/Android/ExoPlayer/exoplayer-result.min.jpg" alt="exoplayer-result"></p><blockquote><p>参考资料<br>1、EXOPlayer简要学习及应用 - CSDN博客<br><a href="https://blog.csdn.net/s1991721/article/details/77587308" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/s1991721/article/details/77587308</a><br>2、ExoPlayer开发指南（官方文档翻译） - CSDN博客<br><a href="https://blog.csdn.net/u014606081/article/details/76181049" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u014606081/article/details/76181049</a><br>3、Google Exoplayer 之全面认识 - Android - 掘金<br><a href="https://juejin.im/entry/5884061f128fe1006c34ea43" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/entry/5884061f128fe1006c34ea43</a><br>4、ExoPlayer2.5 的简单使用 - 简书<br><a href="https://www.jianshu.com/p/c9b136fc16c7" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c9b136fc16c7</a><br>6、ExoPlayer的使用介绍 - 简书<br><a href="https://www.jianshu.com/p/628481250b59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/628481250b59</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;EXOPlayer 是Google 官方开源的一款 Android 播放器，支持本地或者网络的音频和视频播放，支持 DASH、HLS 等流媒体协议，但是不支持 rtsp、rtmp 协议。&lt;/p&gt;&lt;p&gt;EXOPlayer 仓库地址：&lt;a href=&quot;https://githu
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="ExoPlayer" scheme="https://www.wshunli.com/tags/ExoPlayer/"/>
    
  </entry>
  
  <entry>
    <title>Android视频播放器ijkplayer使用入门</title>
    <link href="https://www.wshunli.com/posts/2f3bf23c.html"/>
    <id>https://www.wshunli.com/posts/2f3bf23c.html</id>
    <published>2018-06-23T08:26:20.000Z</published>
    <updated>2018-07-27T08:08:03.915Z</updated>
    
    <content type="html"><![CDATA[<p>ijkplayer 是 Bilibili 基于 ffmpeg 开发并开源的轻量级视频播放器，支持播放本地网络视频，也支持流媒体播放。</p><p>支持 Android 和 iOS 操作系统，所以文章起名还是有点瑕疵的，哈哈哈 。</p><p>ijkplayer 仓库地址：<a href="https://github.com/Bilibili/ijkplayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer</a></p><p>目前 Android 主流的视频播放器是 ijkplayer、ExoPlayer、MediaPlayer。</p><p>其中 MediaPlayer 在前面介绍过了：《第一行代码》读书笔记（七） | CirGIS<br><a href="https://www.wshunli.com/posts/941f84ed.html">https://www.wshunli.com/posts/941f84ed.html</a></p><p>接下来两篇文章会分别介绍 ijkplayer 和 ExoPlayer 的使用，也为移动端直播技术打下基础。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>根据需要引入依赖，根据建议引入 java 、 armv7a 两种兼容性基本满足要求。</p><pre><code class="gradle">dependencies {    # required, enough for most devices.    compile &#39;tv.danmaku.ijk.media:ijkplayer-java:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8&#39;    # Other ABIs: optional    compile &#39;tv.danmaku.ijk.media:ijkplayer-armv5:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-arm64:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-x86:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-x86_64:0.8.8&#39;    # ExoPlayer as IMediaPlayer: optional, experimental    compile &#39;tv.danmaku.ijk.media:ijkplayer-exo:0.8.8&#39;}</code></pre><h1 id="添加播放控件"><a href="#添加播放控件" class="headerlink" title="添加播放控件"></a>添加播放控件</h1><p>本身 ijkplayer 是没有播放控件的，这里我们采用示例代码的播放控件。</p><p>\ijkplayer\android\ijkplayer\ijkplayer-example\src\main\java\tv\danmaku\ijk\media\example\widget\media</p><p>将其代码复制到合适位置，还有 string 键值对，以及 Manifest 配置。</p><p><img src="https://img.wshunli.com/Android/ijkplayer/ijkplayer-widget.png" alt="ijkplayer-widget"></p><p>其中 Manifest 需要配置权限及声明服务。</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;···&lt;service    android:name=&quot;com.wshunli.ijkplayer.demo.services.MediaPlayerService&quot;    android:enabled=&quot;false&quot;    android:exported=&quot;false&quot;    android:icon=&quot;@mipmap/ic_launcher&quot;    android:label=&quot;@string/app_name&quot; /&gt;</code></pre><p>可能会出现 NullPointerException 错误，删除不必要的代码即可。</p><p><a href="https://github.com/Bilibili/ijkplayer/issues/3969" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer/issues/3969</a></p><h1 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h1><p>在布局中添加播放控件。</p><pre><code class="XML">&lt;com.wshunli.ijkplayer.demo.widget.IjkVideoView    android:id=&quot;@+id/ijkvideoview&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;&gt;&lt;/com.wshunli.ijkplayer.demo.widget.IjkVideoView&gt;</code></pre><p>然后在 Activity 中使用就可以了。</p><pre><code class="Java">IjkVideoView ijkVideoView;···ijkVideoView = findViewById(R.id.ijkvideoview);ijkVideoView.setVideoURI(Uri.parse(&quot;http://streams.wshunli.com/videos/dyys2_x264.mp4&quot;));//  ijkVideoView.setVideoURI(Uri.parse(&quot;http://streams.wshunli.com/x36xhzz/x36xhzz.m3u8&quot;));ijkVideoView.start();</code></pre><p>默认是支持 m3u8 直播视频流的，挺意外的。</p><p><img src="https://img.wshunli.com/Android/ijkplayer/ijkplayer-livevideo.min.jpg" alt="ijkplayer-livevideo"></p><p>其他还有很多基于或者封装的播放库，这里列举出来就不多介绍了。</p><p>1、支持浮动和全屏的视频播放器。<br><a href="https://github.com/lipangit/JiaoZiVideoPlayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/lipangit/JiaoZiVideoPlayer</a></p><p>2、基于IJKPlayer（兼容系统MediaPlayer与EXOPlayer2），实现了多功能的视频播放器。<br><a href="https://github.com/CarGuo/GSYVideoPlayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/CarGuo/GSYVideoPlayer</a></p><p>3、Android播放器基础库，专注于播放视图组件的高复用性和组件间的低耦合，轻松处理复杂业务。<br><a href="https://github.com/jiajunhui/PlayerBase" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jiajunhui/PlayerBase</a></p><blockquote><p>参考资料<br>1、Android ijkplayer的使用解析 - CSDN博客<br><a href="https://blog.csdn.net/huaxun66/article/details/53401231" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/huaxun66/article/details/53401231</a><br>2、Android ijkplayer的使用解析及播放器的制作 - CSDN博客<br><a href="https://blog.csdn.net/github_2011/article/details/77385498" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/github_2011/article/details/77385498</a><br>3、Android 超好用的播放器——ijkplayer - 简书<br><a href="https://www.jianshu.com/p/c5d972ab0309" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c5d972ab0309</a><br>4、Android集成IjkPlayer - 简书<br><a href="https://www.jianshu.com/p/79b434b2d5c8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/79b434b2d5c8</a><br>5、视频直播技术（四）：使用Ijkplayer播放直播视频 - 灰色飘零 - 博客园<br><a href="http://www.cnblogs.com/renhui/p/6420140.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/renhui/p/6420140.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ijkplayer 是 Bilibili 基于 ffmpeg 开发并开源的轻量级视频播放器，支持播放本地网络视频，也支持流媒体播放。&lt;/p&gt;&lt;p&gt;支持 Android 和 iOS 操作系统，所以文章起名还是有点瑕疵的，哈哈哈 。&lt;/p&gt;&lt;p&gt;ijkplayer 仓库地址：&lt;
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="ijkplayer" scheme="https://www.wshunli.com/tags/ijkplayer/"/>
    
  </entry>
  
  <entry>
    <title>在线直播技术及其实时视频流可视化方法（前端）</title>
    <link href="https://www.wshunli.com/posts/b4d6e25d.html"/>
    <id>https://www.wshunli.com/posts/b4d6e25d.html</id>
    <published>2018-06-23T04:23:34.000Z</published>
    <updated>2018-07-27T08:08:03.923Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开，非常抱歉。 " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开，非常抱歉。 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录在线直播技术及其实时视频流可视化方法（前端）。
    
    </summary>
    
      <category term="前端技术" scheme="https://www.wshunli.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="视频" scheme="https://www.wshunli.com/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="直播" scheme="https://www.wshunli.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="前端" scheme="https://www.wshunli.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android View 体系（一）Android View 体系基础</title>
    <link href="https://www.wshunli.com/posts/f6f583a.html"/>
    <id>https://www.wshunli.com/posts/f6f583a.html</id>
    <published>2018-06-20T02:33:59.000Z</published>
    <updated>2018-07-27T08:08:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>有很多人觉得自己比较菜，就会称自己为 Android UI 工程师，非常有意思。</p><p>其实 Android UI 体系内容也是比较多的，不仅仅是指 UI 控件的使用，那也太基础了。</p><p>本文主要介绍 Android View 基础，内容可能后面会逐步完善。</p><h1 id="View-介绍"><a href="#View-介绍" class="headerlink" title="View 介绍"></a>View 介绍</h1><p>View 是 Android 中所有控件的基类，同时 ViewGroup 也继承自 View 。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/ViewGroup介绍.jpg" alt="ViewGroup介绍"></p><p>所以 View 本身可以是一个控件也可以是多个控件，基本上我们平常用到控件都继承自 View ，是一种树状结构。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View介绍.min.png" alt="View介绍"></p><h1 id="View-的位置参数"><a href="#View-的位置参数" class="headerlink" title="View 的位置参数"></a>View 的位置参数</h1><p>在 Android 中有两种类型的坐标系，分别是 Android 坐标系和视图坐标系。其实是相对而言的，</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View坐标系.png" alt="View坐标系"></p><p>Android 坐标系是相对屏幕原点（左上角）而言，视图坐标系是相对父类容器（ViewGroup）而言的。</p><p>在 Android 中，View 的位置由 top、left、right、bottom 四个属性确定，注意都是相对父容器而言。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View位置API.png" alt="View位置API"></p><p>View 提供的 API 分别获取对应的数值。</p><ul><li>getTop()：获取 View 顶边到其父布局顶边的距离</li><li>getLeft()：获取 View 左边到其父布局左边的距离</li><li>getRight()：获取 View 右边到其父布局左边的距离</li><li>getBottom()：获取 View 底边到其父布局顶边的距离</li></ul><p>MotionEvent 也提供了一些获取点击位置的方法。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/MotionEvent位置API.png" alt="MotionEvent位置API"></p><p>其中红点位置为点击位置。</p><ul><li>getX()：获取点击位置离View左边的距离</li><li>getY()：获取点击位置离View顶边的距离</li><li>getRawX()：获取点击位置离屏幕左边的距离</li><li>getRawY()：获取点击位置离屏幕顶边的距离</li></ul><p>其实感觉看懂了下面这张图，也就基本可以理解View的坐标系了。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View位置.min.png" alt="View位置"></p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 3.1 View 基础知识<br>2、《Android群英传》 – 第三章 Android 控件架构与自定义控件详解<br>3、Android View体系（一）视图坐标系 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/view/1-coordinate-system.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/view/1-coordinate-system.html</a><br>4、View | Android Developers<br><a href="https://developer.android.com/reference/android/view/View" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/reference/android/view/View</a><br>5、View与ViewGroup的概念 | 菜鸟教程<br><a href="http://www.runoob.com/w3cnote/android-tutorial-view-viewgroup-intro.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/w3cnote/android-tutorial-view-viewgroup-intro.html</a><br>6、Android 坐标系与视图坐标系图解 - CSDN博客<br><a href="https://blog.csdn.net/zhuwentao2150/article/details/52434104" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/zhuwentao2150/article/details/52434104</a><br>7、Android应用坐标系统全面详解 - CSDN博客<br><a href="https://blog.csdn.net/yanbober/article/details/50419117" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yanbober/article/details/50419117</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有很多人觉得自己比较菜，就会称自己为 Android UI 工程师，非常有意思。&lt;/p&gt;&lt;p&gt;其实 Android UI 体系内容也是比较多的，不仅仅是指 UI 控件的使用，那也太基础了。&lt;/p&gt;&lt;p&gt;本文主要介绍 Android View 基础，内容可能后面会逐步完善。&lt;
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
      <category term="View体系" scheme="https://www.wshunli.com/tags/View%E4%BD%93%E7%B3%BB/"/>
    
      <category term="《Android群英传》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E7%BE%A4%E8%8B%B1%E4%BC%A0%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（九）</title>
    <link href="https://www.wshunli.com/posts/c3a39066.html"/>
    <id>https://www.wshunli.com/posts/c3a39066.html</id>
    <published>2018-06-09T08:48:00.000Z</published>
    <updated>2018-07-27T08:08:03.923Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】都6月份了，一直拖到现在，也是6得不行
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>那些年，我们用过的地图下载器</title>
    <link href="https://www.wshunli.com/posts/73256148.html"/>
    <id>https://www.wshunli.com/posts/73256148.html</id>
    <published>2018-06-09T01:46:27.000Z</published>
    <updated>2018-07-27T08:08:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>作为地信、遥感等专业的同学，下载线划图、遥感影像应该都接触过，以前很多群发广告都看不惯，借这次下载高程数据的机会，总结下地图下载器，收费部分的搜索下就懂了。。</p><p><strong>本文仅介绍平常接触到的地图下载器，用作学习和研究目的，不提供收费软件破解文件下载</strong>。</p><p><strong>本文标题来源</strong>：那些年，我们用过的地图下载器 - 我也是个傻瓜 - 博客园<br><a href="https://www.cnblogs.com/liweis/p/4575656.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/liweis/p/4575656.html</a></p><p>1、晟兴地球 SXEarth 是一款永久免费的 3DGIS 平台软件。</p><p>支持在线 Google Earth 卫星影像（无水印无偏移）下载，支持拼接为tif，支持模拟飞行，支持场景编辑。</p><p><img src="https://img.wshunli.com/瞎推荐/地图下载器/SXEarth.png" alt="SXEarth"></p><p>下载地址：<a href="http://www.sxsim.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.sxsim.com/</a></p><p>支持的在线地图特别多，平常基本上用这个就够了。</p><p>2、LocaSpace Viewer 免费、开放的三维数字地球</p><p>多种互联网地图集成、影像、地形数据下载、倾斜数据极速浏览、二三维地理、模型数据、量测和空间分析、软件特色应用。</p><p><img src="https://img.wshunli.com/瞎推荐/地图下载器/LocaSpaceViewer.png" alt="LocaSpaceViewer"></p><p>下载地址：<a href="http://www.locaspace.cn/LSV.jsp" rel="external nofollow noopener noreferrer" target="_blank">http://www.locaspace.cn/LSV.jsp</a></p><p>支持的在线底图不是很多，但是在三维场景尤其是倾斜摄影方面很有优势。</p><p>其他收费的在参考资料，这里就先不介绍了。</p><blockquote><p>参考资料<br>1、那些年，我们用过的地图下载器 - 我也是个傻瓜 - 博客园<br><a href="https://www.cnblogs.com/liweis/p/4575656.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/liweis/p/4575656.html</a><br>2、奉上我收藏的地图下载器（低调使用，你懂的），还各个群一个良好的群环境（别再因为苦于找不到下载器而转发广告了） - ThinkGIS<br><a href="http://www.thinkgis.cn/topic/555ac3911cf2f372004ef9ac" rel="external nofollow noopener noreferrer" target="_blank">http://www.thinkgis.cn/topic/555ac3911cf2f372004ef9ac</a><br>3、SXEarth-超强的GIS数据下载利器 | 麻辣GIS<br><a href="https://malagis.com/sxearth-super-gis-data-downloader.html" rel="external nofollow noopener noreferrer" target="_blank">https://malagis.com/sxearth-super-gis-data-downloader.html</a><br>4、只要三步下载GIS数据（亲测可用/免费/无需转发5个群） | 麻辣GIS<br><a href="https://malagis.com/downlod-gis-data-by-3-steps.html" rel="external nofollow noopener noreferrer" target="_blank">https://malagis.com/downlod-gis-data-by-3-steps.html</a><br>5、北京晟兴科技有限公司 官网首页<br><a href="http://www.sxsim.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.sxsim.com/</a><br>6、LocaSpace Viewer 三维数字地球<br><a href="http://www.locaspace.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.locaspace.cn/</a><br>7、太乐地图官网 - 让地理信息应用更简单<br><a href="http://www.arctiler.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.arctiler.com/</a><br>8、谷歌卫星地图下载器-谷歌地图高清卫星地图2018-北斗卫星地图-水经注万能地图下载器-水经注软件<br><a href="http://www.rivermap.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.rivermap.cn/</a><br>9、91卫图助手，Google Earth影像高程历史影像下载专家<br><a href="http://www.91weitu.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.91weitu.com/</a><br>10、谷歌地图高清卫星地图2018_北斗卫星地图_3d地形图-BIGEMAP<br><a href="http://www.bigemap.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.bigemap.com/</a><br>11、谷歌卫星地图下载器<br><a href="http://www.wolfmap.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.wolfmap.cn/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为地信、遥感等专业的同学，下载线划图、遥感影像应该都接触过，以前很多群发广告都看不惯，借这次下载高程数据的机会，总结下地图下载器，收费部分的搜索下就懂了。。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;本文仅介绍平常接触到的地图下载器，用作学习和研究目的，不提供收费软件破解文件下载&lt;/s
      
    
    </summary>
    
      <category term="瞎推荐" scheme="https://www.wshunli.com/categories/%E7%9E%8E%E6%8E%A8%E8%8D%90/"/>
    
    
      <category term="GIS" scheme="https://www.wshunli.com/tags/GIS/"/>
    
      <category term="地图下载器" scheme="https://www.wshunli.com/tags/%E5%9C%B0%E5%9B%BE%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（八）使用 Socket 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/c9a2416c.html"/>
    <id>https://www.wshunli.com/posts/c9a2416c.html</id>
    <published>2018-06-08T12:46:26.000Z</published>
    <updated>2018-07-27T08:08:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>Socket 也称为 “嵌套字”，是计算机网络中的概念，分为流式嵌套字（TCP）和用户数据报嵌套字（UDP）。</p><p>不同用户进程通过 Socket 进行通信也是一种 IPC 方式。</p><p>在使用 Socket 通信前应在 AndroidManifest 中声明权限：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</code></pre><p>1、服务端</p><p>我们需要一个 Service 作为服务端，声明如下：</p><pre><code class="XML">&lt;service    android:name=&quot;.socket.SocketService&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p>Socket 服务端在 Service 启动时，会建立 TCP 连接并监听 8688 端口。</p><pre><code class="Java">public class SocketService extends Service {    private static final String TAG = &quot;SocketService&quot;;    private boolean isDestroyed = false;    private String[] messages = new String[]{            &quot;你好啊，哈哈&quot;,            &quot;请问你叫什么名字呀？&quot;,            &quot;今天北京天气不错啊&quot;,            &quot;你知道吗？我可是可以和多个人同时聊天的哦&quot;,            &quot;给你讲个笑话吧：据说爱笑的人运气不会太差，不知道真假。&quot;    };    public SocketService() {    }    @Override    public void onCreate() {        super.onCreate();        new Thread(new TCPServer()).start();    }    @Override    public IBinder onBind(Intent intent) {        return null;    }    @Override    public void onDestroy() {        isDestroyed = true;        super.onDestroy();    }    private class TCPServer implements Runnable {        @Override        public void run() {            ServerSocket serverSocket = null;            try {                serverSocket = new ServerSocket(8688);            } catch (IOException e) {                e.printStackTrace();            }            while (!isDestroyed) {                try {                    final Socket client = serverSocket.accept();                    Log.d(TAG, &quot;accept&quot;);                    new Thread() {                        @Override                        public void run() {                            responseClient(client);                        }                    }.start();                } catch (IOException e) {                    e.printStackTrace();                }            }        }        private void responseClient(Socket client) {            try {                // 接收客户端消息                BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));                // 响应客户端消息                PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(client.getOutputStream())), true);                Log.d(TAG, &quot;欢迎来到聊天室！&quot;);                out.println(&quot;欢迎来到聊天室！&quot;);                while (!isDestroyed) {                    String line = in.readLine();                    Log.d(TAG, &quot;message from Client: &quot; + line);                    if (line == null) break;                    int i = new Random().nextInt(messages.length);                    String message = messages[i];                    out.println(message);                    Log.d(TAG, &quot;response to Client: &quot; + message);                }                out.close();                in.close();                client.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }}</code></pre><p>当与客户端建立连接后，新建 Socket 客户端，接收消息并作出响应。</p><p>2、客户端</p><p>客户端部分首先启动 Socket 服务，并且在连接失败后会不断重新尝试连接。</p><pre><code class="Java">public class SocketActivity extends AppCompatActivity {    private static final String TAG = &quot;SocketActivity&quot;;    private Button bt_send;    private EditText et_receive;    private TextView tv_message;    private PrintWriter mPrintWriter;    private Socket mClientSocket;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_socket);        initView();        Intent service = new Intent(this, SocketService.class);        startService(service);        new Thread() {            @Override            public void run() {                connectSocketServer();            }        }.start();    }    private void initView() {        et_receive = findViewById(R.id.et_receive);        bt_send = findViewById(R.id.bt_send);        tv_message = findViewById(R.id.tv_message);        bt_send.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                final String msg = et_receive.getText().toString();                //向服务器发送信息                if (!TextUtils.isEmpty(msg) &amp;&amp; mPrintWriter != null) {                    Log.d(TAG, &quot;onClick: &quot; + msg);                    new Thread(new Runnable() {                        @Override                        public void run() {                            mPrintWriter.println(msg);                        }                    }).start();                    tv_message.setText(tv_message.getText() + &quot;\n&quot; + &quot;客户端：&quot; + msg);                    et_receive.setText(&quot;&quot;);                }            }        });    }    private void connectSocketServer() {        Socket socket = null;        while (socket == null) {            try {                //选择和服务器相同的端口8688                socket = new Socket(&quot;localhost&quot;, 8688);                mClientSocket = socket;                mPrintWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);            } catch (IOException e) {                SystemClock.sleep(1000);            }        }        try {            // 接收服务器端的消息            BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));            while (!isFinishing()) {                final String msg = br.readLine();                if (msg != null) {                    runOnUiThread(                            new Runnable() {                                @Override                                public void run() {                                    tv_message.setText(tv_message.getText() + &quot;\n&quot; + &quot;服务端：&quot; + msg);                                }                            }                    );                }            }            mPrintWriter.close();            br.close();            socket.close();        } catch (IOException e) {            e.printStackTrace();        }    }    @Override    protected void onDestroy() {        if (mClientSocket != null) {            try {                mClientSocket.shutdownInput();                mClientSocket.close();            } catch (IOException e) {                e.printStackTrace();            }        }        super.onDestroy();    }}</code></pre><p>主要使用 socket.getOutputStream() 和 socket.getInputStream() 方法分别发送、接收服务端消息。</p><p>打印日志如下：</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/8.Socket日志.png" alt="8.Socket日志"></p><p>最终效果如下：</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/8.Socket进程间通信.png" alt="8.Socket进程间通信"></p><p>到这里把 Android IPC 通信的几种实现方式基本看了一遍，但是在 Binder 机制原理方面还有欠缺，后面再深入学习。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.6 使用 Socket<br>2、Android IPC机制（五）用Socket实现跨进程聊天程序 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/5-socket.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/5-socket.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Socket 也称为 “嵌套字”，是计算机网络中的概念，分为流式嵌套字（TCP）和用户数据报嵌套字（UDP）。&lt;/p&gt;&lt;p&gt;不同用户进程通过 Socket 进行通信也是一种 IPC 方式。&lt;/p&gt;&lt;p&gt;在使用 Socket 通信前应在 AndroidManifest 中声明
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（七）使用 ContentProvider 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/b68f7dd9.html"/>
    <id>https://www.wshunli.com/posts/b68f7dd9.html</id>
    <published>2018-06-08T11:32:34.000Z</published>
    <updated>2018-07-27T08:08:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>ContentProvider 是 Andorid 中专门用于不同应用间进行数据共享的方式，底层实现也是 Binder 。</p><p>前面在 <a href="https://www.wshunli.com/posts/2311b8ab.html">《第一行代码》读书笔记（五）– 应用组件之 ContentProvider</a> 介绍过，这里就不再详细记录了。</p><p>首先继承 ContentProvider 类实现自己的 Provider ：</p><pre><code class="Java">public class BookProvider extends ContentProvider {    private static final String TAG = &quot;BookProvider&quot;;    public static final String AUTHORITY = &quot;com.wshunli.ipc.demo.book.provider&quot;;    public static final Uri BOOK_CONTENT_URI = Uri.parse(&quot;content://&quot;            + AUTHORITY + &quot;/book&quot;);    public static final Uri USER_CONTENT_URI = Uri.parse(&quot;content://&quot;            + AUTHORITY + &quot;/user&quot;);    public static final int BOOK_URI_CODE = 0;    public static final int USER_URI_CODE = 1;    private static final UriMatcher sUriMatcher = new UriMatcher(            UriMatcher.NO_MATCH);    static {        sUriMatcher.addURI(AUTHORITY, &quot;book&quot;, BOOK_URI_CODE);        sUriMatcher.addURI(AUTHORITY, &quot;user&quot;, USER_URI_CODE);    }    private Context context;    private SQLiteDatabase db;    public BookProvider() {    }    @Override    public boolean onCreate() {        context = getContext();        initProviderData();        return true;    }    private void initProviderData() {        db = new DBHelper(context).getWritableDatabase();        db.execSQL(&quot;delete from &quot; + DBHelper.BOOK_TABLE_NAME);        db.execSQL(&quot;delete from &quot; + DBHelper.USER_TALBE_NAME);        db.execSQL(&quot;insert into book values(3,&#39;Android&#39;);&quot;);        db.execSQL(&quot;insert into book values(4,&#39;Ios&#39;);&quot;);        db.execSQL(&quot;insert into book values(5,&#39;Html5&#39;);&quot;);        db.execSQL(&quot;insert into user values(1,&#39;jake&#39;,1);&quot;);        db.execSQL(&quot;insert into user values(2,&#39;jasmine&#39;,0);&quot;);    }    @Override    public String getType(Uri uri) {        Log.d(TAG, &quot;getType: &quot;);        return null;    }    @Override    public Uri insert(Uri uri, ContentValues values) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        db.insert(table, null, values);        context.getContentResolver().notifyChange(uri, null);        return uri;    }    @Override    public Cursor query(Uri uri, String[] projection, String selection,                        String[] selectionArgs, String sortOrder) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        return db.query(table, projection, selection, selectionArgs, null, null, sortOrder, null);    }    @Override    public int update(Uri uri, ContentValues values, String selection,                      String[] selectionArgs) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        int row = db.update(table, values, selection, selectionArgs);        if (row &gt; 0) {            context.getContentResolver().notifyChange(uri, null);        }        return row;    }    @Override    public int delete(Uri uri, String selection, String[] selectionArgs) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        int count = db.delete(table, selection, selectionArgs);        if (count &gt; 0) {            context.getContentResolver().notifyChange(uri, null);        }        return count;    }    private String getTableName(Uri uri) {        String tableName = null;        switch (sUriMatcher.match(uri)) {            case BOOK_URI_CODE:                tableName = DBHelper.BOOK_TABLE_NAME;                break;            case USER_URI_CODE:                tableName = DBHelper.USER_TALBE_NAME;                break;            default:                break;        }        return tableName;    }}</code></pre><p>记得在 AndroidManifest 中声明：</p><pre><code class="XML">&lt;provider    android:name=&quot;.content.BookProvider&quot;    android:authorities=&quot;com.wshunli.ipc.demo.book.provider&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;    android:permission=&quot;com.wshunli.ipc.demo.PROVIDER&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p>其中 DBHelper 为数据库帮助类，代码如下：</p><pre><code class="Java">public class DBHelper extends SQLiteOpenHelper {    private static final String DB_NAME = &quot;book_provider.db&quot;;    public static final String BOOK_TABLE_NAME = &quot;book&quot;;    public static final String USER_TALBE_NAME = &quot;user&quot;;    private static final int DB_VERSION = 3;    private String CREATE_BOOK_TABLE = &quot;CREATE TABLE IF NOT EXISTS &quot;            + BOOK_TABLE_NAME + &quot;(_id INTEGER PRIMARY KEY,&quot; + &quot;name TEXT)&quot;;    private String CREATE_USER_TABLE = &quot;CREATE TABLE IF NOT EXISTS &quot;            + USER_TALBE_NAME + &quot;(_id INTEGER PRIMARY KEY,&quot; + &quot;name TEXT,&quot;            + &quot;sex INT)&quot;;    public DBHelper(Context context) {        super(context, DB_NAME, null, DB_VERSION);    }    @Override    public void onCreate(SQLiteDatabase db) {        db.execSQL(CREATE_BOOK_TABLE);        db.execSQL(CREATE_USER_TABLE);    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {    }}</code></pre><p>然后就是使用了，新建 Activity ：</p><pre><code class="Java">public class ProviderActivity extends AppCompatActivity {    private static final String TAG = &quot;ProviderActivity&quot;;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_provider);//        Uri uri = Uri.parse(&quot;content://com.wshunli.ipc.demo.book.provider&quot;);//        getContentResolver().query(uri, null, null, null, null);        Uri bookUri = Uri.parse(&quot;content://com.wshunli.ipc.demo.book.provider/book&quot;);        ContentValues values = new ContentValues();        values.put(&quot;_id&quot;, 6);        values.put(&quot;name&quot;, &quot;程序设计的艺术&quot;);        getContentResolver().insert(bookUri, values);        Cursor bookCursor = getContentResolver().query(bookUri, new String[]{&quot;_id&quot;, &quot;name&quot;}, null, null, null);        while (bookCursor.moveToNext()) {            Book book = new Book();            book.bookId = bookCursor.getInt(0);            book.bookName = bookCursor.getString(1);            Log.d(TAG, &quot;query book:&quot; + book.toString());        }        bookCursor.close();        Uri userUri = Uri.parse(&quot;content://com.wshunli.ipc.demo.book.provider/user&quot;);        Cursor userCursor = getContentResolver().query(userUri, new String[]{&quot;_id&quot;, &quot;name&quot;, &quot;sex&quot;}, null, null, null);        while (userCursor.moveToNext()) {            User user = new User();            user.userId = userCursor.getInt(0);            user.userName = userCursor.getString(1);            user.isMale = userCursor.getInt(2) == 1;            Log.d(TAG, &quot;query user:&quot; + user.toString());        }        userCursor.close();    }}</code></pre><p>日志结果如下：</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/7.ContentProvider进程间通信.png" alt="7.ContentProvider进程间通信"></p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.5 使用 ContentProvider</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ContentProvider 是 Andorid 中专门用于不同应用间进行数据共享的方式，底层实现也是 Binder 。&lt;/p&gt;&lt;p&gt;前面在 &lt;a href=&quot;https://www.wshunli.com/posts/2311b8ab.html&quot;&gt;《第一行代码》读书笔记
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（六）使用 AIDL 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/75f6d3a2.html"/>
    <id>https://www.wshunli.com/posts/75f6d3a2.html</id>
    <published>2018-06-08T06:43:53.000Z</published>
    <updated>2018-07-27T08:08:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>AIDL（Android Interface Definition Language ，Android 接口定义语言），定义客户端与服务使用进程间通信 (IPC) 进行相互通信时都认可的编程接口。</p><p>只有允许不同应用的客户端用 IPC 方式访问服务，并且想要在服务中处理多线程时，才有必要使用 AIDL。</p><p>如果不需要执行跨越不同应用的并发 IPC，就应该通过实现一个 Binder 创建接口；或者，如果想执行 IPC，但根本不需要处理多线程，则使用 Messenger 类来实现接口。</p><p>1、创建 AIDL 文件</p><p>首先在 java 同级目录 aidl 文件夹，然后创建 .aidl 文件。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/6.AIDL文件.png" alt="6.AIDL文件"></p><pre><code class="Java">// IBookManager.aidlpackage com.wshunli.ipc.demo;// Declare any non-default types here with import statementsimport com.wshunli.ipc.demo.Book;interface IBookManager {    List&lt;Book&gt; getBookList();    void addBook(in Book book);    /**     * Demonstrates some basic types that you can use as parameters     * and return values in AIDL.     */    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,            double aDouble, String aString);}</code></pre><p>在 <code>.aidl</code> 文件中支持的数据类型包括：</p><ul><li>基本数据类型</li><li>String 和 CharSequence</li><li>List:只支持 ArrayList , 里面的元素都必须被 AIDL 支持</li><li>Map:只支持 HashMap , 里面的元素必须被 AIDL 支持</li><li>实现 Parcelable 接口的对象</li><li>所有 AIDL 接口</li></ul><p>然后创建实现了 Parcelable 的类：</p><pre><code class="Java">public class Book implements Parcelable {    public String name;    public Book(String name) {        this.name = name;    }    @Override    public int describeContents() {        return 0;    }    @Override    public void writeToParcel(Parcel dest, int flags) {        dest.writeString(name);    }    public static Creator&lt;Book&gt; CREATOR = new Creator&lt;Book&gt;() {        @Override        public Book createFromParcel(Parcel source) {            return new Book(source);        }        @Override        public Book[] newArray(int size) {            return new Book[size];        }    };    private Book(Parcel source) {        name = source.readString();    }    @Override    public String toString() {        return &quot;Book{&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &#39;}&#39;;    }}</code></pre><p>创建 Book.aidl 文件：</p><pre><code class="Java">// Book.aidlpackage com.wshunli.ipc.demo;// Declare any non-default types here with import statementsparcelable Book;</code></pre><p>这时候重新编译程序，工程就会自动生成 <code>BookManager.aidl</code> 接口对应的文件。</p><p>app\build\generated\source\aidl\debug\com\wshunli\ipc\demoIBookManager.java</p><p>2、创建服务端</p><p>服务端使用 IBookManager.Stub() 方法创建 Binder 实例并在 onBind() 方法中返回。</p><pre><code class="Java">public class BookManagerService extends Service {    private static final String TAG = &quot;BookManagerService&quot;;    private CopyOnWriteArrayList&lt;Book&gt; mBookList = new CopyOnWriteArrayList&lt;&gt;();    private Binder mBinder = new IBookManager.Stub(){        @Override        public List&lt;Book&gt; getBookList() throws RemoteException {            return mBookList;        }        @Override        public void addBook(Book book) throws RemoteException {            mBookList.add(book);        }        @Override        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {        }    };    public BookManagerService() {    }    @Override    public void onCreate() {        super.onCreate();        mBookList.add(new Book(&quot;android&quot;));        mBookList.add(new Book(&quot;ios&quot;));    }    @Override    public IBinder onBind(Intent intent) {        return mBinder;    }}</code></pre><p>其中 onCreate() 方法中填充了数据。</p><p>当然在 AndroidManife 文件中要配置 Service</p><pre><code class="XML">&lt;service    android:name=&quot;com.wshunli.ipc.demo.BookManagerService&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p>3、客户端</p><p>客户端还是使用 bindService() 方法绑定服务。</p><pre><code class="Java">public class BookManagerActivity extends AppCompatActivity {    private static final String TAG = &quot;BookManagerActivity&quot;;    private ServiceConnection connection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName name, IBinder service) {            IBookManager bookManager = IBookManager.Stub.asInterface(service);            try {                List&lt;Book&gt; bookList = bookManager.getBookList();                Log.d(TAG, &quot;onServiceConnected: &quot; + bookList.toString());            } catch (RemoteException e) {                e.printStackTrace();            }        }        @Override        public void onServiceDisconnected(ComponentName name) {        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_book_manager);        Intent intent = new Intent(BookManagerActivity.this, BookManagerService.class);        bindService(intent, connection, BIND_AUTO_CREATE);    }    @Override    protected void onDestroy() {        unbindService(connection);        super.onDestroy();    }}</code></pre><p>其中 IBookManager 对象来调用具体服务器方法，获取数据。</p><p>AIDL 的功能远不止这些，后面再深入研究。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.4 使用 AIDL<br>2、Android 接口定义语言 (AIDL) | Android Developers<br><a href="https://developer.android.com/guide/components/aidl" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/aidl</a><br>3、Android IPC机制（三）在Android Studio中使用AIDL实现跨进程方法调用 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/3-aidl.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/3-aidl.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AIDL（Android Interface Definition Language ，Android 接口定义语言），定义客户端与服务使用进程间通信 (IPC) 进行相互通信时都认可的编程接口。&lt;/p&gt;&lt;p&gt;只有允许不同应用的客户端用 IPC 方式访问服务，并且想要在服务
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（五）使用 Messenger 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/9da3d2db.html"/>
    <id>https://www.wshunli.com/posts/9da3d2db.html</id>
    <published>2018-06-07T11:05:00.000Z</published>
    <updated>2018-07-27T08:08:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Messenger 可以在不同进程之间传递 Message 对象，是一种轻量级的 IPC 方案。</p><p>首先看 Messenger 的构造方法：</p><pre><code class="Java">public Messenger(Handler target) {    mTarget = target.getIMessenger();}public Messenger(IBinder target) {    mTarget = IMessenger.Stub.asInterface(target);}</code></pre><p>实质上还是底层还是基于 AIDL 的。</p><p>对于 Message 对象可以存储传递的数据：</p><pre><code class="Java">public int what; // 消息标识public int arg1; // 整型数据public int arg2; // 整型数据public Object obj;public Messenger replyTo;/*package*/ Bundle data;public void setData(Bundle data) {    this.data = data;}</code></pre><p>其中 obj 只能传输系统中实现了 Parcelable 接口的对象。</p><p>对于 <strong>客户端</strong> 发送消息主要使用 bindService 方法绑定另一个进程的 Service 。</p><pre><code class="Java">public class MessengerActivity extends AppCompatActivity {    private static final String TAG = &quot;MessengerActivity&quot;;    private Messenger messenger;    private ServiceConnection connection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName name, IBinder service) {            // 请求服务端            messenger = new Messenger(service);            Message message = Message.obtain(null, MConstants.MSG_FROM_CLIENT);            Bundle bundle = new Bundle();            Log.d(TAG, &quot;这里是客户端，向服务端发送消息&quot;);            bundle.putString(&quot;msg&quot;, &quot;客户端发送内容&quot;);            message.setData(bundle);            // 注意设置 replyTo            message.replyTo = getReplyMessenger;            try {                messenger.send(message);            } catch (RemoteException e) {                e.printStackTrace();            }        }        @Override        public void onServiceDisconnected(ComponentName name) {        }    };    private static class MessageHandler extends Handler {        @Override        public void handleMessage(Message msg) {            Log.d(TAG, &quot;这里是客户端，接收服务端响应&quot;);            switch (msg.what) {                case MConstants.MSG_FROM_SERVICE:                    // 接收服务端响应                    Log.d(TAG, &quot;客户端接收到: &quot; + msg.getData().get(&quot;reply&quot;));                    break;                default:                    super.handleMessage(msg);            }        }    }    private Messenger getReplyMessenger = new Messenger(new MessageHandler());    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_messenger);        Intent intent = new Intent(this, MessengerService.class);        bindService(intent, connection, Context.BIND_AUTO_CREATE);    }    @Override    protected void onDestroy() {        unbindService(connection);        super.onDestroy();    }}</code></pre><p>如果需要接收服务端返回的消息，注意在发送 Message 字段 replyTo 关联处理消息的 Messenger 对象。</p><p>对于 <strong>服务端</strong> ，首先 Messenger 对象关联接收消息的 Handler ，然后在服务端 onBind 中调用 getBinder() 方法得到 Binder 对象。</p><p>其中 MessageHandler 继承 Handler 并重写 handleMessage 方法。</p><pre><code class="Java">public class MessengerService extends Service {    private static final String TAG = &quot;MessengerService&quot;;    private static class MessageHandler extends Handler {        @Override        public void handleMessage(Message msg) {            Log.d(TAG, &quot;这里是服务端，响应客户端消息&quot;);            switch (msg.what) {                case MConstants.MSG_FROM_CLIENT:                    Log.d(TAG, &quot;服务端接收到: &quot; + msg.getData().get(&quot;msg&quot;));                    // 响应客户端请求                    Messenger replyTo = msg.replyTo;                    Message replyMessage = Message.obtain(null, MConstants.MSG_FROM_SERVICE);                    Bundle bundle = new Bundle();                    bundle.putString(&quot;reply&quot;,&quot;服务端响应内容&quot;);                    replyMessage.setData(bundle);                    try {                        replyTo.send(replyMessage);                    } catch (RemoteException e) {                        e.printStackTrace();                    }                    break;                default:                    super.handleMessage(msg);            }        }    }    private final Messenger messenger = new Messenger(new MessageHandler());    @Nullable    @Override    public IBinder onBind(Intent intent) {        return messenger.getBinder();    }}</code></pre><p>如果需要响应客户端请求，使用 replyTo 字段获取 Messenger 实例再发送消息即可。</p><p>最后注意在 Manifest 中注册 Service 组件。</p><pre><code class="XML">&lt;service    android:name=&quot;com.wshunli.ipc.demo.message.MessengerService&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/5.Messenger进程间通信.png" alt="Messenger进程间通信"></p><p>Messenger 进程间通信在服务端是以串行的方式逐个处理的，所以有大量并发请求时使用 Messenger 不太合适。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.3 使用 Messenger<br>2、Android IPC机制（二）用Messenger进行进程间通信 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/2-messenger.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/2-messenger.html</a><br>3、Android 基于Message的进程间通信 Messenger完全解析 - CSDN博客<br><a href="https://blog.csdn.net/lmj623565791/article/details/47017485" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lmj623565791/article/details/47017485</a><br>4、Handler之Message详解 - 简书<br><a href="https://www.jianshu.com/p/a6c01dd2efdc" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/a6c01dd2efdc</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过 Messenger 可以在不同进程之间传递 Message 对象，是一种轻量级的 IPC 方案。&lt;/p&gt;&lt;p&gt;首先看 Messenger 的构造方法：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;Java&quot;&gt;public Messenger(Handler target
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（四）使用文件共享实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/60bbb7ec.html"/>
    <id>https://www.wshunli.com/posts/60bbb7ec.html</id>
    <published>2018-06-07T09:09:28.000Z</published>
    <updated>2018-07-27T08:08:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>使用文件共享也是不错的进程间通信方式，两个进程通过读/写同一个文件来交换数据。</p><p>在 Windows 系统，文件会被加排斥锁导致其他线程无法对其访问，而 Android 是基于 Linux 系统，所以并发读写文件没有限制。</p><pre><code class="Java">// 序列化private void persistToFile() {    new Thread(new Runnable() {        @Override        public void run() {            User user = new User(1, &quot;wshunli&quot;, true);            File dir = new File(getApplicationContext().getCacheDir().getPath() + &quot;/user/&quot;);            if (!dir.exists()) {                dir.mkdirs();            }            File cachedFile = new File(dir.getPath() + &quot;/usercache&quot;);            ObjectOutputStream objectOutputStream = null;            try {                objectOutputStream = new ObjectOutputStream(                        new FileOutputStream(cachedFile));                objectOutputStream.writeObject(user);                Log.d(TAG, &quot;persist user:&quot; + user);            } catch (IOException e) {                e.printStackTrace();            } finally {                try {                    if (objectOutputStream != null) {                        objectOutputStream.close();                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }).start();}// 反序列化private void recoverFromFile() {    new Thread(new Runnable() {        @Override        public void run() {            User user = null;            File dir = new File(getApplicationContext().getCacheDir().getPath() + &quot;/user/&quot;);            File cachedFile = new File(dir.getPath() + &quot;/usercache&quot;);            if (cachedFile.exists()) {                ObjectInputStream objectInputStream = null;                try {                    objectInputStream = new ObjectInputStream(                            new FileInputStream(cachedFile));                    user = (User) objectInputStream.readObject();                    Log.d(TAG, &quot;recover user:&quot; + user);                } catch (IOException e) {                    e.printStackTrace();                } catch (ClassNotFoundException e) {                    e.printStackTrace();                } finally {                    try {                        if (objectInputStream != null) {                            objectInputStream.close();                        }                    } catch (IOException e) {                        e.printStackTrace();                    }                }            }        }    }).start();}</code></pre><p>这样对共享文件格式没有要求，但是在多线程情况下可能导致读出的内容不是最新的。<br>所以文件共享适合对数据同步要求不高的进程间进行通信，并妥善地处理好并发读/写问题。</p><p>而对于 SharedPreferences 有一定的读/写缓存策略，在内存中会有一份缓存，因此在多进程情况下，系统对其的读/写就变得不可靠，所以在进程间通信时，一般不用 SharedPreferences 。</p><blockquote><p>参考资料<br>《Android开发艺术探索》 – 2.4.2 使用文件共享</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用文件共享也是不错的进程间通信方式，两个进程通过读/写同一个文件来交换数据。&lt;/p&gt;&lt;p&gt;在 Windows 系统，文件会被加排斥锁导致其他线程无法对其访问，而 Android 是基于 Linux 系统，所以并发读写文件没有限制。&lt;/p&gt;&lt;pre&gt;&lt;code class=
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（三）使用 Bundle 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/f0f2eaec.html"/>
    <id>https://www.wshunli.com/posts/f0f2eaec.html</id>
    <published>2018-06-07T07:40:59.000Z</published>
    <updated>2018-07-27T08:08:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 四大组件中 Activity、Service、Receiver 都支持在 Intent 中附加传递 Bundle 数据。</p><p>Bundle 是以键值对的形式存储数据，支持基本数据类型、数组、实现 Serializable 或 Parcelable 接口的对象以及一些 Android 支持的特殊对象。</p><pre><code class="Java">// 发送数据Intent intent = new Intent(MainActivity.this, SecondActivity.class);Bundle bundle = new Bundle();bundle.putString(&quot;userName&quot;, &quot;wshunli&quot;);intent.putExtras(bundle);startActivity(intent);// 接收数据Bundle bundle = getIntent().getExtras();String userName = null;if (bundle != null) {    userName = bundle.getString(&quot;userName&quot;);}Log.d(TAG, &quot;userName: &quot; + userName);</code></pre><p>使用 Bundle 的 put 与 get 方法族将数据保存至 bundle 对象，调用 Intent 的 putExtras 方法即可。</p><p>Bundle 源码分析，Bundle 继承自 BaseBundle 并实现了 Cloneable 和 Parcelable 接口。</p><p>以 Boolean 类型数据存取为例：</p><pre><code class="Java">ArrayMap&lt;String, Object&gt; mMap = null;public void putBoolean(@Nullable String key, boolean value) {    unparcel();    mMap.put(key, value);}public boolean getBoolean(String key, boolean defaultValue) {    unparcel();    Object o = mMap.get(key);    if (o == null) {        return defaultValue;    }    try {        return (Boolean) o;    } catch (ClassCastException e) {        typeWarning(key, o, &quot;Boolean&quot;, defaultValue, e);        return defaultValue;    }}</code></pre><p>根据源码可知数据存取都是在 ArrayMap 对象中。</p><p>其中 unparcel() 方法源码如下：</p><pre><code class="Java">/** If mParcelledData is non-null, then mMap will be null and the* data are stored as a Parcel containing a Bundle.  When the data* are unparcelled, mParcelledData willbe set to null.*/Parcel mParcelledData = null;/* package */ void unparcel() {    synchronized (this) {        final Parcel source = mParcelledData;        if (source != null) {            initializeFromParcelLocked(source, /*recycleParcel=*/ true);        } else {            if (DEBUG) {                Log.d(TAG, &quot;unparcel &quot;                        + Integer.toHexString(System.identityHashCode(this))                        + &quot;: no parcelled data&quot;);            }        }    }}private void initializeFromParcelLocked(@NonNull Parcel parcelledData, boolean recycleParcel) {    if (LOG_DEFUSABLE &amp;&amp; sShouldDefuse &amp;&amp; (mFlags &amp; FLAG_DEFUSABLE) == 0) {        Slog.wtf(TAG, &quot;Attempting to unparcel a Bundle while in transit; this may &quot;                + &quot;clobber all data inside!&quot;, new Throwable());    }    if (isEmptyParcel(parcelledData)) {        if (DEBUG) {            Log.d(TAG, &quot;unparcel &quot;                    + Integer.toHexString(System.identityHashCode(this)) + &quot;: empty&quot;);        }        if (mMap == null) {            mMap = new ArrayMap&lt;&gt;(1);        } else {            mMap.erase();        }        mParcelledData = null;        return;    }    final int count = parcelledData.readInt();    if (DEBUG) {        Log.d(TAG, &quot;unparcel &quot; + Integer.toHexString(System.identityHashCode(this))                + &quot;: reading &quot; + count + &quot; maps&quot;);    }    if (count &lt; 0) {        return;    }    ArrayMap&lt;String, Object&gt; map = mMap;    if (map == null) {        map = new ArrayMap&lt;&gt;(count);    } else {        map.erase();        map.ensureCapacity(count);    }    try {        parcelledData.readArrayMapInternal(map, count, mClassLoader);    } catch (BadParcelableException e) {        if (sShouldDefuse) {            Log.w(TAG, &quot;Failed to parse Bundle, but defusing quietly&quot;, e);            map.erase();        } else {            throw e;        }    } finally {        mMap = map;        if (recycleParcel) {            recycleParcel(parcelledData);        }        mParcelledData = null;    }    if (DEBUG) {        Log.d(TAG, &quot;unparcel &quot; + Integer.toHexString(System.identityHashCode(this))                + &quot; final map: &quot; + mMap);    }}</code></pre><p>只有使用 Bundle 构造函数实例化 Bundle 对象时，才会给 mParcelledData 赋值，其他大部分情况下 mParcelledData 都是 null 。</p><pre><code class="Java">BaseBundle(Parcel parcelledData) {    readFromParcelInner(parcelledData);}void readFromParcelInner(Parcel parcel) {    // Keep implementation in sync with readFromParcel() in    // frameworks/native/libs/binder/PersistableBundle.cpp.    int length = parcel.readInt();    readFromParcelInner(parcel, length);}private void readFromParcelInner(Parcel parcel, int length) {    if (length &lt; 0) {        throw new RuntimeException(&quot;Bad length in parcel: &quot; + length);    } else if (length == 0) {        // Empty Bundle or end of data.        mParcelledData = NoImagePreloadHolder.EMPTY_PARCEL;        return;    }    final int magic = parcel.readInt();    if (magic != BUNDLE_MAGIC) {        throw new IllegalStateException(&quot;Bad magic number for Bundle: 0x&quot;                + Integer.toHexString(magic));    }    if (parcel.hasReadWriteHelper()) {        // If the parcel has a read-write helper, then we can&#39;t lazily-unparcel it, so just        // unparcel right away.        synchronized (this) {            initializeFromParcelLocked(parcel, /*recycleParcel=*/ false);        }        return;    }    // Advance within this Parcel    int offset = parcel.dataPosition();    parcel.setDataPosition(MathUtils.addOrThrow(offset, length));    Parcel p = Parcel.obtain();    p.setDataPosition(0);    p.appendFrom(parcel, offset, length);    p.adoptClassCookies(parcel);    if (DEBUG) Log.d(TAG, &quot;Retrieving &quot;  + Integer.toHexString(System.identityHashCode(this))            + &quot;: &quot; + length + &quot; bundle bytes starting at &quot; + offset);    p.setDataPosition(0);    mParcelledData = p;}</code></pre><p>从上述代码片段可以知道 mParcelledData 的取值有3种情况：</p><pre><code class="Java">mParcelledData = nullmParcelledData = NoImagePreloadHolder.EMPTY_PARCELmParcelledData = Parcel.obtain()</code></pre><p>在 unparcel() 方法中分别对这三种情况进行了处理，如果为 null 不进行任何操作返回；如果为 EMPTY_PARCEL 则使用 <code>mMap = new ArrayMap&lt;&gt;(1)</code> 创建长度为 1 的 ArrayMap 对象；如果为 Parcel.obtain() 则实例化 ArrayMap 对象并存储数据。</p><blockquote><p>参考资料<br>1、Android Bundle详解 - CSDN博客<br><a href="https://blog.csdn.net/cswhale/article/details/39053411" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cswhale/article/details/39053411</a><br>2、Android Bundle总结 - CSDN博客<br><a href="https://blog.csdn.net/ylyg050518/article/details/72638852" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/ylyg050518/article/details/72638852</a><br>3、Android细节问题 —— 有了Intent，为什么还要有Bundle？ - 简书<br><a href="https://www.jianshu.com/p/e9db0797293b" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/e9db0797293b</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Android 四大组件中 Activity、Service、Receiver 都支持在 Intent 中附加传递 Bundle 数据。&lt;/p&gt;&lt;p&gt;Bundle 是以键值对的形式存储数据，支持基本数据类型、数组、实现 Serializable 或 Parcelable
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（二）Android 中的多进程模式</title>
    <link href="https://www.wshunli.com/posts/4662fa2f.html"/>
    <id>https://www.wshunli.com/posts/4662fa2f.html</id>
    <published>2018-06-05T14:09:30.000Z</published>
    <updated>2018-07-27T08:08:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 中多进程指单个应用存在多个进程的情况。</p><h1 id="开启多进程模式"><a href="#开启多进程模式" class="headerlink" title="开启多进程模式"></a>开启多进程模式</h1><p>在 Android 中开启多线程只有一种方法，即在 AndroidManifest.xml 中指定 <code>android:process</code> 属性。</p><pre><code class="XML">&lt;activity android:name=&quot;.MainActivity&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;    &lt;/intent-filter&gt;&lt;/activity&gt;&lt;activity    android:name=&quot;.SecondActivity&quot;    android:process=&quot;:remote&quot; /&gt;&lt;activity    android:name=&quot;.ThirdActivity&quot;    android:process=&quot;com.wshunli.ipc.demo.remote&quot; /&gt;</code></pre><p>MainActivity 没有指定 process 属性，则运行在默认进程中，进程名为包名。</p><p>当启动 SecondActivity 或者 ThirdActivity 时，系统会为他们单独创建进程，<br>进程名分别为 <code>com.wshunli.ipc.demo:remote</code> 和 <code>com.wshunli.ipc.demo.remote</code> .</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/2.开启多进程模式.png" alt="开启多进程模式"></p><p>对于二者的区别，<br>前者 <code>com.wshunli.ipc.demo:remote</code> 代表应用私有进程，其他应用的组件不可与其在同一进程中。<br>后者 <code>com.wshunli.ipc.demo.remote</code> 代表全局进程，其他应用可通过 ShareUID 方式与其在统一进程中。</p><p>Android 系统会为每个应用分配一个唯一的 UID ，具有相同的 UID 应用才能共享数据。</p><p>两个应用通过 ShareUID 跑在同一进程中也是有要求的，需要两个应用有相同的 ShareUID 并且签名相同。<br>在这种情况下，可以互相访问对方的私有数据，看起来像一个应用的两部分。</p><h1 id="多进程模式的运行机制"><a href="#多进程模式的运行机制" class="headerlink" title="多进程模式的运行机制"></a>多进程模式的运行机制</h1><p>Android 系统为每个应用（或者说每个进程）分配一个独立虚拟机，在内存分配上也有不同的地址空间。</p><p>我们新建一个 UserManager 类，然后写一个静态变量。</p><pre><code class="Java">public class UserManager {    public static int wshunli = 1;}</code></pre><p>在 MainActivity 中将静态变量赋值为 2 ，然后在 SecondActivity 和 ThirdActivity 中打印出来，发现其值仍然是 1 。</p><p>所有运行在不同进程中的四大组件，只要它们之间需要通过内存来共享数据，都会共享失败，这也是多进程所带来的主要影响。</p><p>一般来说，使用多进程会造成如下几方面的问题：</p><p>(1) 静态成员和单例模式完全失效（不同的虚拟机）。<br>(2) 线程同步机制完全失效（不是同一块内存空间）。<br>(3) SharePreferences 的可靠性下降（底层通过 XML 执行操作，并发读/写都有可能出问题）。<br>(4) Application 会多次创建（启动新进程其实就是启动一个应用的过程，自然会创建新的 Application ）。</p><pre><code class="Java">public class MApplication extends Application {    private static final String TAG = &quot;MApplication&quot;;    @Override    public void onCreate() {        super.onCreate();        int pid = Process.myPid();        Log.d(TAG, &quot;pid: &quot; + pid);    }}</code></pre><p>同一个应用的多线程相当于不同应用采用 ShareUID 模式。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.2 Android 中的多进程模式<br>2、Android 接口定义语言 (AIDL) | Android Developers<br><a href="https://developer.android.com/guide/components/aidl" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/aidl</a><br>3、Android IPC机制（一）开启多进程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/1-process-start.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/1-process-start.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Android 中多进程指单个应用存在多个进程的情况。&lt;/p&gt;&lt;h1 id=&quot;开启多进程模式&quot;&gt;&lt;a href=&quot;#开启多进程模式&quot; class=&quot;headerlink&quot; title=&quot;开启多进程模式&quot;&gt;&lt;/a&gt;开启多进程模式&lt;/h1&gt;&lt;p&gt;在 Android 中开启多
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（一）Android IPC 简介</title>
    <link href="https://www.wshunli.com/posts/4ff64590.html"/>
    <id>https://www.wshunli.com/posts/4ff64590.html</id>
    <published>2018-06-05T11:58:49.000Z</published>
    <updated>2018-07-27T08:08:03.927Z</updated>
    
    <content type="html"><![CDATA[<p>IPC（Inter-Process Communication，进程间通信）指两进程间进行数据交换的过程。</p><p>IPC 并不是 Android 独有的，Windows 上可通过剪切板、管道和油槽等来进行进程间通信；Linux 可通过命名管道、共享内存和信号量等实现进程间通信。</p><p>虽然 Android 是基于 Linux 内核的操作系统，但是它有自己的进程间通信方式。</p><p>在 Android 中，通过 Binder 可以实现进程间通信，还有 Socket 、ContentProvider 等等。</p><p>IPC 使用场景，一是应用的自身原因需要使用多进程实现；另一个是通过多进程获得更多内存空间。</p><p>我们需要通过 Intent 和 Binder 传输数据时，需要用到 <strong>Serializable</strong> 或者 <strong>Parcelable</strong> 接口完成对象的序列化。</p><p>1、Serializable 接口</p><p>Serializable 是 Java 提供的一个序列化接口，是一个空接口。</p><pre><code class="Java">public class User implements Serializable {    private static final long serialVersionUID = 8929979969779835719L;    public int userId;    public String userName;    public boolean isMale;    ···}</code></pre><p>只需实现 Serializable 接口，一般应该手动指定 serialVersionUID ，当版本升级时能最大限度恢复数据。</p><pre><code class="Java">// 序列化User user = new User(0, &quot;wshunli&quot;, true);try {    ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;cache.text&quot;));    out.writeObject(user);    out.close();} catch (IOException e) {    e.printStackTrace();}// 反序列化try {    ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;cache.text&quot;));    User newUser = (User) in.readObject();    Log.d(TAG, &quot;onCreate: &quot; + newUser.toString());    in.close();} catch (IOException e) {    e.printStackTrace();} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>序列化：把对象转换为字节序列的过程称为对象的序列化。<br>反序列化：把字节序列恢复为对象的过程称为对象的反序列化。</p><p>2、Parcelable 接口</p><p>Parcelable 接口是 Android 系统提供的序列化接口。</p><pre><code class="Java">public class User implements Parcelable {    public int userId;    public String userName;    public boolean isMale;    public Book book;    public User(int userId, String userName, boolean isMale, Book book) {        this.userId = userId;        this.userName = userName;        this.isMale = isMale;        this.book = book;    }    // 内容描述    @Override    public int describeContents() {        return 0;    }    // 序列化    @Override    public void writeToParcel(Parcel dest, int flags) {        dest.writeInt(userId);        dest.writeString(userName);        dest.writeInt(isMale ? 1 : 0);        dest.writeParcelable(book, 0);    }    // 反序列化    public static final Parcelable.Creator&lt;User&gt; CREATOR = new Parcelable.Creator&lt;User&gt;(){        @Override        public User createFromParcel(Parcel source) {            return new User(source);        }        @Override        public User[] newArray(int size) {            return new User[size];        }    };    private User(Parcel source) {        userId = source.readInt();        userName = source.readString();        isMale = source.readInt() == 1;        book = source.readParcelable(Thread.currentThread().getContextClassLoader());    }}</code></pre><p>使用 Parcelable 序列化还是有点麻烦的，不过思路清晰。</p><p>Serializable 和 Parcelable 比较：</p><p>Serializable 是 Java 的序列化接口，需要大量 I/O 操作，开销比较大；<br>Parcelable 是 Android 中的序列化接口，效率更高，因此首选。</p><p>但是在将对象序列化到存储设备或者将对象序列化后的通过网络传输，建议使用 Serializable 接口。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.1 Android IPC 简介、2.3 IPC 基础概念介绍<br>2、Android IPC机制详解（一） - 简书<br><a href="https://www.jianshu.com/p/b9b3051a4ff6" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/b9b3051a4ff6</a><br>3、Android 中的IPC机制 - CSDN博客<br><a href="https://blog.csdn.net/a565102223/article/details/70186070" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/a565102223/article/details/70186070</a><br>4、Java 之 Serializable 序列化和反序列化的概念,作用的通俗易懂的解释 - CSDN博客<br><a href="https://blog.csdn.net/qq_27093465/article/details/78544505" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_27093465/article/details/78544505</a><br>5、详细介绍Android中Parcelable的原理和使用方法 - CSDN博客<br><a href="https://blog.csdn.net/justin_1107/article/details/72903006" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/justin_1107/article/details/72903006</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IPC（Inter-Process Communication，进程间通信）指两进程间进行数据交换的过程。&lt;/p&gt;&lt;p&gt;IPC 并不是 Android 独有的，Windows 上可通过剪切板、管道和油槽等来进行进程间通信；Linux 可通过命名管道、共享内存和信号量等实现进
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
</feed>
