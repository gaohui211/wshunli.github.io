<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wshunli.com/"/>
  <updated>2018-05-04T04:59:18.675Z</updated>
  <id>http://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="http://www.wshunli.com/posts/b96eb139.html"/>
    <id>http://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-05-04T04:59:18.675Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="http://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>http://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-04T04:59:18.667Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><a id="more"></a><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cesium" scheme="http://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="http://www.wshunli.com/posts/4cbab315.html"/>
    <id>http://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
    
      <category term="Cesium" scheme="http://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里巴巴实习生面试</title>
    <link href="http://www.wshunli.com/posts/b3a8426.html"/>
    <id>http://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="http://www.wshunli.com/posts/689a494.html"/>
    <id>http://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="http://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>http://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="http://www.wshunli.com/posts/3cb63fb.html"/>
    <id>http://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="http://www.wshunli.com/posts/25842bb5.html"/>
    <id>http://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="http://www.wshunli.com/posts/9c87288c.html"/>
    <id>http://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-04T04:59:18.671Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>  断言可以有两种形式：<br>  1.assert Expression1<br>  2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><h1 id="第十四章-并发"><a href="#第十四章-并发" class="headerlink" title="第十四章 并发"></a>第十四章 并发</h1><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="http://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>http://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（amap）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（amap）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="http://www.wshunli.com/posts/4e05997a.html"/>
    <id>http://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="http://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>http://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="http://www.wshunli.com/posts/96840e7.html"/>
    <id>http://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="http://www.wshunli.com/posts/4e57ccd.html"/>
    <id>http://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-05-04T04:59:18.671Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="http://www.wshunli.com/posts/91672bd7.html"/>
    <id>http://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-05-04T04:59:18.671Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="http://www.wshunli.com/posts/84f52548.html"/>
    <id>http://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="http://www.wshunli.com/posts/b4e3c990.html"/>
    <id>http://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容 <a id="more"></a>，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（六）</title>
    <link href="http://www.wshunli.com/posts/9c05eee5.html"/>
    <id>http://www.wshunli.com/posts/9c05eee5.html</id>
    <published>2018-01-22T02:44:25.000Z</published>
    <updated>2018-05-04T04:59:18.675Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】生活是一条路，走走停停，停停走走
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK 开发入门</title>
    <link href="http://www.wshunli.com/posts/3eae2406.html"/>
    <id>http://www.wshunli.com/posts/3eae2406.html</id>
    <published>2018-01-19T13:00:14.000Z</published>
    <updated>2018-05-04T04:59:18.667Z</updated>
    
    <content type="html"><![CDATA[<p>Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。<a id="more"></a>在开发某些类型应用时，这有助于您重复使用以这些语言编写的代码库。</p><p>那我们为什么要使用 NDK 呢?</p><ul><li>代码的保护。由于 apk 的 Java 层代码很容易被反编译，而 C/C++ 库反汇难度较大。</li><li>可以方便地使用现存的开源库。大部分现存的开源库都是 用C/C++ 代码编写的。</li><li>提高程序的执行效率。将要求高性能的应用逻辑使用 C 开发，从而提高应用程序的执行效率。</li><li>便于移植。用 C/C++ 写得库可以方便在其他的嵌入式平台上再次使用。</li></ul><p>上述文字致谢 <a href="http://www.cnblogs.com/devinzhang/archive/2012/02/29/2373729.html" rel="external nofollow noopener noreferrer" target="_blank">Devin Zhang</a> 提供理论支持</p><p>本文默认已配置好 Android 开发环境，<br>关于 Android 开发环境配置可参考：<a href="http://www.wshunli.com/posts/f6977dbb.html">http://www.wshunli.com/posts/f6977dbb.html</a></p><h1 id="NDK-环境配置"><a href="#NDK-环境配置" class="headerlink" title="NDK 环境配置"></a>NDK 环境配置</h1><p>1、首先应该下载 NDK</p><p>官方指定的下载地址：<a href="https://developer.android.google.cn/ndk/downloads/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.google.cn/ndk/downloads/index.html</a></p><p>可能因为网络原因打不开，而且我们也不要那么新的。</p><p>本文以 Android NDK r10e 版本为例：</p><p>下载地址：<a href="https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip" rel="external nofollow noopener noreferrer" target="_blank">https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip</a></p><p>下载好之后，解压即可，我们解压到：<code>D:\Android\android-ndk-r10e</code></p><p>2、和配置 Android 环境类似，配置 NDK 环境</p><p>新建变量：<code>ANDROID_NDK</code></p><pre><code class="TXT">D:\Android\android-ndk-r10e</code></pre><p>在 <code>Path</code> 中添加</p><pre><code class="TXT">%ANDROID_NDK%</code></pre><p>3、验证 NDK 环境</p><p>在 命令控制符 中输入 <code>ndk-build -version</code> 存在输出即可。</p><h1 id="第一个-Android-NDK-项目"><a href="#第一个-Android-NDK-项目" class="headerlink" title="第一个 Android NDK 项目"></a>第一个 Android NDK 项目</h1><p>在 Android Studio 中新建 Android NDK 项目特别简单，</p><p>只需在新建项目时，勾选 <code>include C++ support</code> 即可：</p><p><img src="https://img.wshunli.com/Android/NDK/1.新建NDK项目.png" alt="1.新建NDK项目.png"></p><p>点击运行即可看到效果：</p><p><img src="https://img.wshunli.com/Android/NDK/1.Screenshot_1516414188.png-hexo.png" alt="1.Screenshot_1516414188.png"></p><h1 id="向现有项目添加-C-C-代码"><a href="#向现有项目添加-C-C-代码" class="headerlink" title="向现有项目添加 C/C++ 代码"></a>向现有项目添加 C/C++ 代码</h1><p>如果您希望向现有项目添加原生代码，请执行以下步骤：</p><p>1、<a href="#创建新的原生源文件">创建新的原生源文件</a>并将其添加到您的 Android Studio 项目中。</p><p>如果您已经拥有原生代码或想要导入预构建的原生库，则可以跳过此步骤。</p><p>2、<a href="#创建CMake构建脚本">创建 CMake 构建脚本</a>，将您的原生源代码构建到库中。如果导入和关联预构建库或平台库，您也需要此构建脚本。</p><p>如果您的现有原生库已经拥有 <code>CMakeLists.txt</code> 构建脚本或者使用 ndk-build 并包含 Android.mk 构建脚本，则可以跳过此步骤。</p><p>3、提供一个指向您的 CMake 或 ndk-build 脚本文件的路径，<a href="#将Gradle关联到您的原生库">将 Gradle 关联到您的原生库</a>。Gradle 使用构建脚本将源代码导入您的 Android Studio 项目并将原生库（SO 文件）打包到 APK 中。</p><h2 id="创建新的原生源文件"><a href="#创建新的原生源文件" class="headerlink" title="创建新的原生源文件"></a>创建新的原生源文件</h2><p>1、选择 Project 视图，在 main 目录下，新建 cpp 文件夹；</p><p>2、在 cpp 文件夹下新建 C/C++ Source File ，本文以 <code>native-lib</code> 为例。</p><p><img src="https://img.wshunli.com/Android/NDK/1.创建新的原生源文件.png" alt="1.创建新的原生源文件.png"></p><h2 id="创建CMake构建脚本"><a href="#创建CMake构建脚本" class="headerlink" title="创建CMake构建脚本"></a>创建CMake构建脚本</h2><p>CMake 构建脚本是一个纯文本文件，您必须将其命名为 CMakeLists.txt。</p><p>在 Android 视图下，在 app 模块下右键，新建 File，文件名为 <code>CMakeLists.txt</code>。</p><p>文件内容如下：</p><pre><code class="TXT"># For more information about using CMake with Android Studio, read the# documentation: https://d.android.com/studio/projects/add-native-code.html# Sets the minimum version of CMake required to build the native library.cmake_minimum_required(VERSION 3.4.1)# 指示 CMake 从原生源代码创建一个原生库add_library( # Sets the name of the library.             native-lib             # Sets the library as a shared library.             SHARED             # Provides a relative path to your source file(s).             src/main/cpp/native-lib.cpp )# 添加引用 NDK 库find_library( # Sets the name of the path variable.              log-lib              # Specifies the name of the NDK library that              # you want CMake to locate.              log )# 关联 NDK 库target_link_libraries( # Specifies the target library.                       native-lib                       # Links the target library to the log library                       # included in the NDK.                       ${log-lib} )</code></pre><h2 id="将Gradle关联到您的原生库"><a href="#将Gradle关联到您的原生库" class="headerlink" title="将Gradle关联到您的原生库"></a>将Gradle关联到您的原生库</h2><p>在 Android 视图下，右键点击您想要关联到原生库的模块（例如 app 模块），并从菜单中选择 <code>Link C++ Project with Gradle</code>。</p><p><img src="https://img.wshunli.com/Android/NDK/1.将Gradle关联到您的原生库.png" alt="1.将Gradle关联到您的原生库.png"></p><p>或者手动配置：</p><pre><code class="Gradle">android {  ...  defaultConfig {...}  buildTypes {...}  // Encapsulates your external native build configurations.  externalNativeBuild {    // Encapsulates your CMake build configurations.    cmake {      // Provides a relative path to your CMake build script.      path &quot;CMakeLists.txt&quot;    }  }}</code></pre><p>可选配置，可以包裹一些特定的示例代码：</p><pre><code class="Gradle">android {    compileSdkVersion 26    defaultConfig {        ···        externalNativeBuild {            cmake {                cppFlags &quot;-frtti -fexceptions&quot;            }        }        ndk {            // Specifies the ABI configurations of your native            // libraries Gradle should build and package with your APK.            abiFilters &#39;x86&#39;, &#39;x86_64&#39;, &#39;armeabi&#39;, &#39;armeabi-v7a&#39;, &#39;arm64-v8a&#39;        }    }</code></pre><p>最后运行即可，效果是一样的。</p><h1 id="添加-native-方法流程"><a href="#添加-native-方法流程" class="headerlink" title="添加 native 方法流程"></a>添加 native 方法流程</h1><p>在 <code>MainActivity</code> 中添加 native 方法：</p><pre><code class="Java">    public native void printLog();</code></pre><p>在 <code>native-lib.cpp</code> 中添加头文件及宏定义</p><pre><code class="C">#include &lt;android/log.h&gt;#define TAG &quot;native-lib&quot;#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, TAG, __VA_ARGS__)</code></pre><p>实现 native 方法，我们这里打印个日志：</p><pre><code class="C">extern &quot;C&quot;JNIEXPORT void JNICALLJava_com_wshunli_android_ndk_demo_MainActivity_printLog(JNIEnv *env, jobject instance) {    LOGV(&quot;log from native&quot;);}</code></pre><p>这个方法可以自动生成，在 native 方法下 <code>Alt + Enter</code> 即可。</p><p>本文源码：<a href="https://github.com/wshunli/android-ndk-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/android-ndk-demo</a></p><blockquote><p>参考资料<br>1、Android NDK | Android Developers<br><a href="https://developer.android.com/ndk/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/ndk/index.html</a><br>2、Android-NDK入门-慕课网<br><a href="https://www.imooc.com/learn/411" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/411</a><br>3、Android-NDK进阶-慕课网<br><a href="https://www.imooc.com/learn/918" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/918</a><br>4、Android NDK开发(一)  入门 - 简书<br><a href="https://www.jianshu.com/p/0261e6cceb3e" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0261e6cceb3e</a><br>5、向您的项目添加 C 和 C++ 代码 | Android Studio<br><a href="https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="NDK" scheme="http://www.wshunli.com/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Android图片加载框架Glide简单使用</title>
    <link href="http://www.wshunli.com/posts/d82d8606.html"/>
    <id>http://www.wshunli.com/posts/d82d8606.html</id>
    <published>2018-01-19T12:14:17.000Z</published>
    <updated>2018-05-04T04:59:18.667Z</updated>
    
    <content type="html"><![CDATA[<p>Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。<a id="more"></a>Glide 提供了易用的 API，高性能、可扩展的图片解码管道（decode pipeline），以及自动的资源池技术。</p><h1 id="Glide-介绍"><a href="#Glide-介绍" class="headerlink" title="Glide 介绍"></a>Glide 介绍</h1><p>Glide 支持拉取，解码和展示视频快照，图片，和GIF动画。Glide的Api是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide使用的是一个定制化的基于HttpUrlConnection的栈，但同时也提供了与Google Volley和Square OkHttp快速集成的工具库。</p><p>虽然Glide 的主要目标是让任何形式的图片列表的滚动尽可能地变得更快、更平滑，但实际上，Glide几乎能满足你对远程图片的拉取/缩放/显示的一切需求。</p><h1 id="Glide-简单使用"><a href="#Glide-简单使用" class="headerlink" title="Glide 简单使用"></a>Glide 简单使用</h1><p>0、添加 Glide 依赖</p><pre><code class="gradle">dependencies {  implementation &#39;com.github.bumptech.glide:glide:4.5.0&#39;  annotationProcessor &#39;com.github.bumptech.glide:compiler:4.5.0&#39;}</code></pre><p>1、准备图片容器</p><p>我们在布局文件中添加 ImageView 控件：</p><pre><code class="XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;    android:background=&quot;#8f8f8f&quot;    tools:context=&quot;com.wshunli.glidedemo.MainActivity&quot;&gt;    &lt;Button        android:id=&quot;@+id/bt&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;@string/app_name&quot; /&gt;    &lt;ImageView        android:id=&quot;@+id/img&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt;</code></pre><p>2、加载图片</p><p>我们以加载 <a href="https://img.wshunli.com/Android/Glide/Glide.min.png" rel="external nofollow noopener noreferrer" target="_blank">https://img.wshunli.com/Android/Glide/Glide.min.png</a> 为例。</p><pre><code class="Java">Glide.with(MainActivity.this)        .load(&quot;https://img.wshunli.com/Android/Glide/Glide.min.png&quot;)        .into(img);</code></pre><p>真的超级简单。</p><p>MainActivity 完整代码如下：</p><pre><code class="Java">package com.wshunli.glidedemo;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.Button;import android.widget.ImageView;import com.bumptech.glide.Glide;public class MainActivity extends AppCompatActivity {    private ImageView img;    private Button bt;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        img = findViewById(R.id.img);        bt = findViewById(R.id.bt);        bt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Glide.with(MainActivity.this)                        .load(&quot;https://img.wshunli.com/Android/Glide/Glide.min.png&quot;)                        .into(img);            }        });    }}</code></pre><p>注意别忘了声明权限：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code></pre><p>3、取消加载图片</p><pre><code class="Java">Glide.with(MainActivity.this).clear(img);</code></pre><p>取消加载也超级简单。</p><p>4、最终加载效果</p><p><img src="https://img.wshunli.com/Android/Glide/Screenshot_1516366180.png-hexo.png" alt="Glide加载图图片"></p><h1 id="ProGuard-混淆规则"><a href="#ProGuard-混淆规则" class="headerlink" title="ProGuard 混淆规则"></a>ProGuard 混淆规则</h1><pre><code class="gradle">-keep public class * implements com.bumptech.glide.module.GlideModule-keep public class * extends com.bumptech.glide.module.AppGlideModule-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {  **[] $VALUES;  public *;}# for DexGuard only-keepresourcexmlelements manifest/application/meta-data@value=GlideModule</code></pre><blockquote><p>参考资料<br>1、bumptech/glide: An image loading and caching library for Android focused on smooth scrolling<br><a href="https://github.com/bumptech/glide" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/bumptech/glide</a><br>2、Android图片加载框架最全解析（一），Glide的基本用法 - 郭霖的专栏 - CSDN博客<br><a href="http://blog.csdn.net/guolin_blog/article/details/53759439" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/guolin_blog/article/details/53759439</a><br>3、Glide v4 : 快速高效的Android图片加载库<br><a href="https://muyangmin.github.io/glide-docs-cn/" rel="external nofollow noopener noreferrer" target="_blank">https://muyangmin.github.io/glide-docs-cn/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="Glide" scheme="http://www.wshunli.com/tags/Glide/"/>
    
  </entry>
  
</feed>
