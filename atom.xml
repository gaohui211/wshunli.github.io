<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wshunli.com/"/>
  <updated>2018-05-05T15:02:58.788Z</updated>
  <id>http://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Java多线程编程核心技术》读书笔记</title>
    <link href="http://www.wshunli.com/posts/4e70966b.html"/>
    <id>http://www.wshunli.com/posts/4e70966b.html</id>
    <published>2018-05-05T14:47:09.000Z</published>
    <updated>2018-05-05T15:02:58.788Z</updated>
    
    <content type="html"><![CDATA[<p>前面面试什么的多线程部分问的比较多，需要加强下<a id="more"></a> ，这里记录总结 《Java多线程编程核心技术》 读书情况。</p><h1 id="第一章-Java-多线程技能"><a href="#第一章-Java-多线程技能" class="headerlink" title="第一章 Java 多线程技能"></a>第一章 Java 多线程技能</h1><p>本章主要介绍了线程的核心方法。</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面面试什么的多线程部分问的比较多，需要加强下
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java多线程编程核心技术》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="http://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>http://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-05T15:02:58.784Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><a id="more"></a><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cesium" scheme="http://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="http://www.wshunli.com/posts/4cbab315.html"/>
    <id>http://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
    
      <category term="Cesium" scheme="http://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="http://www.wshunli.com/posts/b96eb139.html"/>
    <id>http://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-04-28T06:47:46.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+74lNpSpGsxty+gQbc0PszV4Uz2JmBlpRUZy02wGpZSz8AmcDrbzxm30a/+YPFa86k+tQCqf1ZMv6LsY/KuFC9wWhdKAbHCQ2/L0d5N86LpguwPRuGx1Ckt+4+8kYSy8Ja5ihcP7a8XFlusoUWLbg7K13g/YGjzF0oSE8N5SdnuP4G2LDutcOtbAccfHlc/f/udFePno3qPprOtZQZRJb9ULitz/5/cqwvDQVZ7MW2IyA1HTd9ra5Nnxqb83kgm1WNvEZFFBKlTguuQAAs76q58Ma10aXW/nFzRSQypP/s3+5gekxVr5znkLMVOXZXWLczbF9OagzievKwcpGr8i9zeZtsDb9cbM3XLa7RmAx/XC1af66tP/qTVYzxAhInpiq7KggGTdz5yw/QazuZw7GIaiEjrO9ttAkq3Vu8smyBnI4BkdPiHlFY8cDX1j9ctHS63xgTyPgYY4lGYGUB4EbczYySZjhmDZEW/ezDbY+y60OoN+dmkmBDkTEBVgefx6JYckZF1ggNhCt0Q08UppQhtq+fPBYKmLqBKzf696Cob32N4yR5cNXToxpgVGtiCtH20wv/2pHaU+4Qx+THWweSHoDimF7HPKt0susjiGgJ2bdA8e/UMfWm9bJnnNV/v4AfRHl/R60puldY3EKpFHPFmsPIOYGAVH6iwwVT/NIqASjeBDZyaEhhFx6g+Uk0Ob/2yy9bdAAh+hRPJqi1dCMbKqtXu5FMg4IvEYuYc/mBtx+AsHVr7hcV7GD+GNfoYtyJcQzHrptRbEOMsDksy0oj+9NeKnJ0XFNqA/jVO5vfdkNWgMvcCB0drp2DtCn09nNPTDlbRrDDtQ/4BdScEM33j0KN7c61UNYAlxcbytuMIAQXJAkFd2YweQHyjcGeW1cqpsGC89zfSQCO+IWgtH8fpHIsnNcZbEhQ2Lw7MFVaIP985meH1EmfDuy3c8WKBflKhTRRi4dBUFbQ5eIm+StebSvhftByQ2Re1eQW1lKu/DghVprkiY/UTgoA0SdYU4rv94eg94QiwGUAyTV4czblinKlTBEa2fugqZXwugo9qbmjcvoHUHMIFNCyvxVT/mhoIWNBa7G/G+Ks/7V7mKF12pxrx6r+qQF3KNHXj9tnB8vKbdTkg9RcxkqaYbYA/DWMPZxykC4SqIMymuiMwobIrUbE2cUAT1/+kLQQcXXBbNJoQwAxNmaNvOdv8j6DYhuMAi111JIJESAqKC8n/Xfsg8gTR2LsdndKF3nctd3MDcCa3BUKdsQdra9vD18/0f1H1xzUuZecdfYOFZRwX0EdlpTXYk4mKeGee1bOCYPmPLfhr+pVJI8pY7arnm18EdhB9uRKpP/t02VzNzVRU72cjUQboI0mqg3aZ/1BIyxnpgrDzpGtecLUGpx5fNb0usHLcR0n4YZBlGkT2+ecg0bN/9QR5Z7dFHKbXvGji5j5VjqxnZEGzzff9oa2qYqiLBeAPby0xj1wzYOdmkPgpfCmB36hCPOKLGdWEadgorAgYpQ/Eu/tECXVR8za5F7KJspXsrpLneMMXJcDLLt/EBBlcMeYU3ockc7KGGPeHJ96M+xYDp91Mu2JGlxMRf9/qrbmRsGhEqq3c22sI9mQ2NdEYCSwqt5VQsMksKegVgQI6Fr2lv0lgBGoB+JjkR5lP5C9rk6NT1A+OgYPWrlGYZpmxtRpLKMSSjHYe6NeOIZViasJvgUFB7xjd9LapRddko7JepRoqTFnl099p7cJwLVKycF6+kqDSzrIsXkNMSaIuABMMGSRfsS4uaTvl8qQrMiayGrkrJ6sLuX6eezdIlylnTcZ01P3ytGAwH7sq2XpNuijZ0Qrefi1dHHhwSiIJHvYGQV+jDi5AsHGLvRsXvRmcfilwAHw8TgR9nMjb9Ok5AE8LIwYOaBnP3O3e8E5x02IDPWsW2Bup3N1igpvILoqwHVnxEGRglxMC2FmQ/PiEecZrhW+EtpHb0H2mX8WC0Xjvfxp1JMSxlGKH30n5kvrPwc8WTgyRTVo8aT/tT7v5+gHIMJytkMT9kg+f8bRLuFTP/YXpdWWf9Us0S/imPTPFePoMWwgbprpDHBSGtXj4U8OIEWlgrmfgX1PsxEv/YNrtC6jUb5eL1+cFqWscdfOADTgDDgxQ4gyF+cX+PuenWlU3IfIZvQ6GQlx5iHtrHzPgEvzcAhfpS1D2Bk6hIHMnnxiR9OixnoW3REoz/Mxpd4MWWBku2HVKShB23iuVLmJjKoLY6Mm2RA5HExpgBtQPlBFcy2/LMTguPHAIGnoYzyEs4fFnYjhn3G0y/7032lTKAc56bkaQV5C11gyZYZKO6PFw2SKFGt2Be9mtYDy176smBGZSFVJ+9V+MpyJn9639ckEfWNg+TaMmmoGi0zc4lD1moIrIc1s33DfSH8sdzq58yOtjLUZqoIKHE2xZI5GijwIosuFkw== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里巴巴实习生面试</title>
    <link href="http://www.wshunli.com/posts/b3a8426.html"/>
    <id>http://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="http://www.wshunli.com/posts/689a494.html"/>
    <id>http://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="http://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>http://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="http://www.wshunli.com/posts/3cb63fb.html"/>
    <id>http://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="http://www.wshunli.com/posts/25842bb5.html"/>
    <id>http://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-05T15:02:58.788Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="http://www.wshunli.com/posts/9c87288c.html"/>
    <id>http://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-05T15:02:58.788Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><p>第十四章 并发</p><p>这部分大概地看了下，后面再看本书仔细学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="http://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>http://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（amap）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（amap）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
    
      <category term="面试" scheme="http://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="http://www.wshunli.com/posts/4e05997a.html"/>
    <id>http://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="http://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>http://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-05-05T15:02:58.788Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="http://www.wshunli.com/posts/96840e7.html"/>
    <id>http://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-05-05T15:02:58.788Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="http://www.wshunli.com/posts/4e57ccd.html"/>
    <id>http://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-05-05T15:02:58.784Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="http://www.wshunli.com/posts/91672bd7.html"/>
    <id>http://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-05-05T15:02:58.784Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="http://www.wshunli.com/posts/84f52548.html"/>
    <id>http://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="http://www.wshunli.com/posts/b4e3c990.html"/>
    <id>http://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（六）</title>
    <link href="http://www.wshunli.com/posts/9c05eee5.html"/>
    <id>http://www.wshunli.com/posts/9c05eee5.html</id>
    <published>2018-01-22T02:44:25.000Z</published>
    <updated>2018-05-05T15:02:58.792Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】生活是一条路，走走停停，停停走走
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK 开发入门</title>
    <link href="http://www.wshunli.com/posts/3eae2406.html"/>
    <id>http://www.wshunli.com/posts/3eae2406.html</id>
    <published>2018-01-19T13:00:14.000Z</published>
    <updated>2018-05-05T15:02:58.784Z</updated>
    
    <content type="html"><![CDATA[<p>Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。<a id="more"></a>在开发某些类型应用时，这有助于您重复使用以这些语言编写的代码库。</p><p>那我们为什么要使用 NDK 呢?</p><ul><li>代码的保护。由于 apk 的 Java 层代码很容易被反编译，而 C/C++ 库反汇难度较大。</li><li>可以方便地使用现存的开源库。大部分现存的开源库都是 用C/C++ 代码编写的。</li><li>提高程序的执行效率。将要求高性能的应用逻辑使用 C 开发，从而提高应用程序的执行效率。</li><li>便于移植。用 C/C++ 写得库可以方便在其他的嵌入式平台上再次使用。</li></ul><p>上述文字致谢 <a href="http://www.cnblogs.com/devinzhang/archive/2012/02/29/2373729.html" rel="external nofollow noopener noreferrer" target="_blank">Devin Zhang</a> 提供理论支持</p><p>本文默认已配置好 Android 开发环境，<br>关于 Android 开发环境配置可参考：<a href="http://www.wshunli.com/posts/f6977dbb.html">http://www.wshunli.com/posts/f6977dbb.html</a></p><h1 id="NDK-环境配置"><a href="#NDK-环境配置" class="headerlink" title="NDK 环境配置"></a>NDK 环境配置</h1><p>1、首先应该下载 NDK</p><p>官方指定的下载地址：<a href="https://developer.android.google.cn/ndk/downloads/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.google.cn/ndk/downloads/index.html</a></p><p>可能因为网络原因打不开，而且我们也不要那么新的。</p><p>本文以 Android NDK r10e 版本为例：</p><p>下载地址：<a href="https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip" rel="external nofollow noopener noreferrer" target="_blank">https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip</a></p><p>下载好之后，解压即可，我们解压到：<code>D:\Android\android-ndk-r10e</code></p><p>2、和配置 Android 环境类似，配置 NDK 环境</p><p>新建变量：<code>ANDROID_NDK</code></p><pre><code class="TXT">D:\Android\android-ndk-r10e</code></pre><p>在 <code>Path</code> 中添加</p><pre><code class="TXT">%ANDROID_NDK%</code></pre><p>3、验证 NDK 环境</p><p>在 命令控制符 中输入 <code>ndk-build -version</code> 存在输出即可。</p><h1 id="第一个-Android-NDK-项目"><a href="#第一个-Android-NDK-项目" class="headerlink" title="第一个 Android NDK 项目"></a>第一个 Android NDK 项目</h1><p>在 Android Studio 中新建 Android NDK 项目特别简单，</p><p>只需在新建项目时，勾选 <code>include C++ support</code> 即可：</p><p><img src="https://img.wshunli.com/Android/NDK/1.新建NDK项目.png" alt="1.新建NDK项目.png"></p><p>点击运行即可看到效果：</p><p><img src="https://img.wshunli.com/Android/NDK/1.Screenshot_1516414188.png-hexo.png" alt="1.Screenshot_1516414188.png"></p><h1 id="向现有项目添加-C-C-代码"><a href="#向现有项目添加-C-C-代码" class="headerlink" title="向现有项目添加 C/C++ 代码"></a>向现有项目添加 C/C++ 代码</h1><p>如果您希望向现有项目添加原生代码，请执行以下步骤：</p><p>1、<a href="#创建新的原生源文件">创建新的原生源文件</a>并将其添加到您的 Android Studio 项目中。</p><p>如果您已经拥有原生代码或想要导入预构建的原生库，则可以跳过此步骤。</p><p>2、<a href="#创建CMake构建脚本">创建 CMake 构建脚本</a>，将您的原生源代码构建到库中。如果导入和关联预构建库或平台库，您也需要此构建脚本。</p><p>如果您的现有原生库已经拥有 <code>CMakeLists.txt</code> 构建脚本或者使用 ndk-build 并包含 Android.mk 构建脚本，则可以跳过此步骤。</p><p>3、提供一个指向您的 CMake 或 ndk-build 脚本文件的路径，<a href="#将Gradle关联到您的原生库">将 Gradle 关联到您的原生库</a>。Gradle 使用构建脚本将源代码导入您的 Android Studio 项目并将原生库（SO 文件）打包到 APK 中。</p><h2 id="创建新的原生源文件"><a href="#创建新的原生源文件" class="headerlink" title="创建新的原生源文件"></a>创建新的原生源文件</h2><p>1、选择 Project 视图，在 main 目录下，新建 cpp 文件夹；</p><p>2、在 cpp 文件夹下新建 C/C++ Source File ，本文以 <code>native-lib</code> 为例。</p><p><img src="https://img.wshunli.com/Android/NDK/1.创建新的原生源文件.png" alt="1.创建新的原生源文件.png"></p><h2 id="创建CMake构建脚本"><a href="#创建CMake构建脚本" class="headerlink" title="创建CMake构建脚本"></a>创建CMake构建脚本</h2><p>CMake 构建脚本是一个纯文本文件，您必须将其命名为 CMakeLists.txt。</p><p>在 Android 视图下，在 app 模块下右键，新建 File，文件名为 <code>CMakeLists.txt</code>。</p><p>文件内容如下：</p><pre><code class="TXT"># For more information about using CMake with Android Studio, read the# documentation: https://d.android.com/studio/projects/add-native-code.html# Sets the minimum version of CMake required to build the native library.cmake_minimum_required(VERSION 3.4.1)# 指示 CMake 从原生源代码创建一个原生库add_library( # Sets the name of the library.             native-lib             # Sets the library as a shared library.             SHARED             # Provides a relative path to your source file(s).             src/main/cpp/native-lib.cpp )# 添加引用 NDK 库find_library( # Sets the name of the path variable.              log-lib              # Specifies the name of the NDK library that              # you want CMake to locate.              log )# 关联 NDK 库target_link_libraries( # Specifies the target library.                       native-lib                       # Links the target library to the log library                       # included in the NDK.                       ${log-lib} )</code></pre><h2 id="将Gradle关联到您的原生库"><a href="#将Gradle关联到您的原生库" class="headerlink" title="将Gradle关联到您的原生库"></a>将Gradle关联到您的原生库</h2><p>在 Android 视图下，右键点击您想要关联到原生库的模块（例如 app 模块），并从菜单中选择 <code>Link C++ Project with Gradle</code>。</p><p><img src="https://img.wshunli.com/Android/NDK/1.将Gradle关联到您的原生库.png" alt="1.将Gradle关联到您的原生库.png"></p><p>或者手动配置：</p><pre><code class="Gradle">android {  ...  defaultConfig {...}  buildTypes {...}  // Encapsulates your external native build configurations.  externalNativeBuild {    // Encapsulates your CMake build configurations.    cmake {      // Provides a relative path to your CMake build script.      path &quot;CMakeLists.txt&quot;    }  }}</code></pre><p>可选配置，可以包裹一些特定的示例代码：</p><pre><code class="Gradle">android {    compileSdkVersion 26    defaultConfig {        ···        externalNativeBuild {            cmake {                cppFlags &quot;-frtti -fexceptions&quot;            }        }        ndk {            // Specifies the ABI configurations of your native            // libraries Gradle should build and package with your APK.            abiFilters &#39;x86&#39;, &#39;x86_64&#39;, &#39;armeabi&#39;, &#39;armeabi-v7a&#39;, &#39;arm64-v8a&#39;        }    }</code></pre><p>最后运行即可，效果是一样的。</p><h1 id="添加-native-方法流程"><a href="#添加-native-方法流程" class="headerlink" title="添加 native 方法流程"></a>添加 native 方法流程</h1><p>在 <code>MainActivity</code> 中添加 native 方法：</p><pre><code class="Java">    public native void printLog();</code></pre><p>在 <code>native-lib.cpp</code> 中添加头文件及宏定义</p><pre><code class="C">#include &lt;android/log.h&gt;#define TAG &quot;native-lib&quot;#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, TAG, __VA_ARGS__)</code></pre><p>实现 native 方法，我们这里打印个日志：</p><pre><code class="C">extern &quot;C&quot;JNIEXPORT void JNICALLJava_com_wshunli_android_ndk_demo_MainActivity_printLog(JNIEnv *env, jobject instance) {    LOGV(&quot;log from native&quot;);}</code></pre><p>这个方法可以自动生成，在 native 方法下 <code>Alt + Enter</code> 即可。</p><p>本文源码：<a href="https://github.com/wshunli/android-ndk-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/android-ndk-demo</a></p><blockquote><p>参考资料<br>1、Android NDK | Android Developers<br><a href="https://developer.android.com/ndk/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/ndk/index.html</a><br>2、Android-NDK入门-慕课网<br><a href="https://www.imooc.com/learn/411" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/411</a><br>3、Android-NDK进阶-慕课网<br><a href="https://www.imooc.com/learn/918" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/918</a><br>4、Android NDK开发(一) 入门 - 简书<br><a href="https://www.jianshu.com/p/0261e6cceb3e" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0261e6cceb3e</a><br>5、向您的项目添加 C 和 C++ 代码 | Android Studio<br><a href="https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="NDK" scheme="http://www.wshunli.com/tags/NDK/"/>
    
  </entry>
  
</feed>
