<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  <subtitle>wshunli`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-09-10T09:09:30.582Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式（十一）组合模式</title>
    <link href="https://www.wshunli.com/posts/fb6e1df3.html"/>
    <id>https://www.wshunli.com/posts/fb6e1df3.html</id>
    <published>2018-09-10T08:40:17.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>组合模式(Composite Pattern)有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/11.Composite.png" title="组合模式" alt="组合模式"></div><p>组合模式的包含角色：</p><p>(1) Component 抽象构件角色，定义参加组合对象的共有方法和属性，可以定义一些默认的行为或属性。<br>(2) Leaf 叶子构件，叶子对象，其下再也没有其他的分支，也就是遍历的最小单位。<br>(3) Composite 树枝构件，树枝对象，它的作用是组合树枝节点和叶子节点形成一个树形结构。</p><p>1、抽象构件角色</p><pre><code class="lang-Java">public abstract class Component {    public void operation() {        System.out.println(&quot;Component.operation()&quot;);    }}</code></pre><p>2、树枝构件</p><pre><code class="lang-Java">public class Composite extends Component {    private ArrayList&lt;Component&gt; componentArrayList = new ArrayList&lt;&gt;();    public void add(Component component) {        componentArrayList.add(component);    }    public void remove(Component component) {        componentArrayList.remove(component);    }    public ArrayList&lt;Component&gt; getChildren() {        return this.componentArrayList;    }}</code></pre><p>3、树叶构件</p><pre><code class="lang-Java">public class Leaf extends Component {    @Override    public void operation() {        System.out.println(&quot;Leaf.operation()&quot;);    }}</code></pre><p>4、组合模式的使用</p><pre><code class="lang-Java">public class CompositeMain {    public static void main(String[] args) {        Composite root = new Composite();        root.operation();        Composite branch = new Composite();        root.add(branch);        Leaf leaf1 = new Leaf();        Leaf leaf2 = new Leaf();        branch.add(leaf1);        branch.add(leaf2);        display(root);    }    public static void display(Composite root) {        for (Component component : root.getChildren()) {            if (component instanceof Leaf) {                component.operation();            } else {                display((Composite) component);            }        }    }}</code></pre><p><strong>组合模式的优缺点</strong>：</p><p>优点：高层模块调用简单；节点自由增加。<br>缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch11" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch11</a></p><blockquote><p>参考资料<br>1、JAVA设计模式十七—Composite(组合模式) - CSDN博客<br><a href="https://blog.csdn.net/hfmbook/article/details/7693069" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hfmbook/article/details/7693069</a><br>2、Java设计模式—组合模式 - CSDN博客<br><a href="https://blog.csdn.net/qq_25827845/article/details/52496522" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_25827845/article/details/52496522</a><br>3、组合模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/composite-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/composite-pattern.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;组合模式(Composite Pattern)有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。&lt;/p&gt;&lt;h1 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十）代理模式</title>
    <link href="https://www.wshunli.com/posts/b4b3761.html"/>
    <id>https://www.wshunli.com/posts/b4b3761.html</id>
    <published>2018-09-10T08:12:52.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式(Proxy Pattern)给某一个对象提供一个代理，并由代理对象控制对原对象的引用。</p><p>代理模式的英文叫做 Proxy 或 Surrogate ，它是一种对象结构型模式。</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/10.Proxy.png" title="代理模式" alt="代理模式"></div><p>代理模式一般涉及到的角色有：</p><p>(1) 抽象角色：声明真实对象和代理对象的共同接口；<br>(2) 代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装；<br>(3) 真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p><p>1、抽象对象角色</p><pre><code class="lang-Java">public abstract class AbstractObject {    public abstract void operation();}</code></pre><p>2、目标对象角色</p><pre><code class="lang-Java">public class RealObject extends AbstractObject {    @Override    public void operation() {        System.out.println(&quot;RealObject.operation()&quot;);    }}</code></pre><p>3、代理对象角色</p><pre><code class="lang-Java">public class ProxyObject extends AbstractObject {    RealObject realObject = new RealObject();    @Override    public void operation() {        //调用目标对象之前可以做相关操作        System.out.println(&quot;before&quot;);        realObject.operation();        //调用目标对象之后可以做相关操作        System.out.println(&quot;after&quot;);    }}</code></pre><p>4、代理模式的使用</p><pre><code class="lang-Java">public class ProxyMain {    public static void main(String[] args) {        AbstractObject object = new ProxyObject();        object.operation();    }}</code></pre><p><strong>代理模式的优缺点</strong>：</p><p>优点：给对象增加了本地化的扩展性，增加了存取操作控制。<br>缺点：会产生多余的代理类。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch10" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch10</a></p><blockquote><p>参考资料<br>1、Java设计模式之代理模式(Proxy) - CSDN博客<br><a href="https://blog.csdn.net/liangbinny/article/details/18656791" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/liangbinny/article/details/18656791</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代理模式(Proxy Pattern)给某一个对象提供一个代理，并由代理对象控制对原对象的引用。&lt;/p&gt;&lt;p&gt;代理模式的英文叫做 Proxy 或 Surrogate ，它是一种对象结构型模式。&lt;/p&gt;&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（九）装饰者模式</title>
    <link href="https://www.wshunli.com/posts/d95b685e.html"/>
    <id>https://www.wshunli.com/posts/d95b685e.html</id>
    <published>2018-09-10T06:37:20.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>装饰者模式 (Decorator Pattern) 在不改变原类文件以及不使用继承的情况下，动态地将责任附加到对象上，从而实现动态拓展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p><h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><p>动态的给对象添加一些额外的属性或行为。相比于使用继承，装饰者模式更加灵活。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/9.Decorator.png" title="装饰者模式" alt="装饰者模式"></div><p>一般来说装饰者模式有下面几个参与者：</p><p>(1) Component：装饰者和被装饰者共同的父类，是一个接口或者抽象类，用来定义基本行为。<br>(2) ConcreteComponent：定义具体对象，即被装饰者。<br>(3) Decorator：抽象装饰者，继承自 Component ，从外类来扩展 ConcreteComponent 。对于 ConcreteComponent 来说，不需要知道 Decorator 的存在，Decorator 是一个接口或抽象类<br>(4) ConcreteDecorator：具体装饰者，用于扩展 ConcreteComponent 。</p><p>1、抽象构件角色 Component</p><pre><code class="lang-Java">public interface Component {    public void sampleOperation();}</code></pre><p>2、具体构件角色 ConcreteComponent</p><pre><code class="lang-Java">public class ConcreteComponent implements Component {    @Override    public void sampleOperation() {        System.out.println(&quot;ConcreteComponent.sampleOperation()&quot;);    }}</code></pre><p>3、装饰角色 Decorator</p><pre><code class="lang-Java">public class Decorator implements Component {    Component component;    public Decorator(Component component) {        this.component = component;    }    @Override    public void sampleOperation() {        // 委派给构件        component.sampleOperation();    }}</code></pre><p>4、具体装饰角色 ConcreteDecorator</p><pre><code class="lang-Java">public class ConcreteDecoratorA extends Decorator {    public ConcreteDecoratorA(Component component) {        super(component);    }    @Override    public void sampleOperation() {        System.out.println(&quot;ConcreteDecoratorA.sampleOperation() start&quot;);        super.sampleOperation();        System.out.println(&quot;ConcreteDecoratorA.sampleOperation() end&quot;);    }}public class ConcreteDecoratorB extends Decorator {    public ConcreteDecoratorB(Component component) {        super(component);    }    @Override    public void sampleOperation() {        System.out.println(&quot;ConcreteDecoratorB.sampleOperation() start&quot;);        super.sampleOperation();        System.out.println(&quot;ConcreteDecoratorB.sampleOperation() end&quot;);    }}</code></pre><p>5、装饰者模式的使用</p><pre><code class="lang-Java">public class DecoratorMain {    public static void main(String[] args) {        ConcreteComponent concreteComponent = new ConcreteComponent();        ConcreteDecoratorA concreteDecoratorA = new ConcreteDecoratorA(concreteComponent);        concreteDecoratorA.sampleOperation();        ConcreteDecoratorB concreteDecoratorB = new ConcreteDecoratorB(concreteComponent);        concreteDecoratorB.sampleOperation();    }}</code></pre><p><strong>装饰者模式的优缺点</strong>：</p><p>优点：装饰模式可以提供比继承更多的灵活性；通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。<br>缺点：使用装饰模式会产生比使用继承关系更多的对象。更多的对象会使得查错变得困难。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch09" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch09</a></p><blockquote><p>参考资料<br>1、学习、探究Java设计模式——装饰者模式 - CSDN博客<br><a href="https://blog.csdn.net/a553181867/article/details/52108423" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/a553181867/article/details/52108423</a><br>2、Java设计模式之装饰者模式(Decorator pattern) - 简书<br><a href="https://www.jianshu.com/p/c26b9b4a9d9e" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c26b9b4a9d9e</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;装饰者模式 (Decorator Pattern) 在不改变原类文件以及不使用继承的情况下，动态地将责任附加到对象上，从而实现动态拓展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。&lt;/p&gt;&lt;h1 id=&quot;装饰者模式&quot;&gt;&lt;a href=&quot;#装饰者模式&quot;
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（八）外观模式</title>
    <link href="https://www.wshunli.com/posts/82583d16.html"/>
    <id>https://www.wshunli.com/posts/82583d16.html</id>
    <published>2018-09-10T06:10:36.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>外观模式(Facade Pattern)通过引入一个外观角色来简化客户端与子系统之间的交互，为复杂的子系统调用提供一个统一的入口，降低子系统与客户端的耦合度，且客户端调用非常方便。外观模式又称为门面模式，它是一种对象结构型模式。</p><h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><p>为子系统中的一组接口提供一个一致的界面，Facade 模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/8.Facade.png" title="外观模式" alt="外观模式"></div><p>外观模式包含如下两个角色：</p><p>(1) Facade（外观角色）：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。</p><p>(2) SubSystem（子系统角色）：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。</p><p>1、创建子系统角色类</p><pre><code class="lang-Java">public class ModuleA {    public void testA() {        System.out.println(&quot;ModuleA.testA()&quot;);    }}public class ModuleB {    public void testB() {        System.out.println(&quot;ModuleB.testB()&quot;);    }}public class ModuleC {    public void testC() {        System.out.println(&quot;ModuleC.testC()&quot;);    }}</code></pre><p>2、创建外观角色类</p><pre><code class="lang-Java">public class Facade {    public void test() {        ModuleA a = new ModuleA();        a.testA();        ModuleB b = new ModuleB();        b.testB();        ModuleC c = new ModuleC();        c.testC();    }}</code></pre><p>3、外观模式使用</p><pre><code class="lang-Java">public class FacadeMain {    public static void main(String[] args) {        Facade facade = new Facade();        facade.test();    }}</code></pre><p>根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。</p><p><strong>外观模式的优缺点</strong>：</p><p>优点：客户代码将变得很简单，与之关联的对象也很少；降低了大型软件系统中的编译依赖性。<br>缺点：不能很好地限制客户使用子系统类；增加新的子系统可能需要修改外观类或客户端的源代码。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch08" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch08</a></p><blockquote><p>参考资料<br>1、深入浅出外观模式（一） · 设计模式Java版<br><a href="https://quanke.gitbooks.io/design-pattern-java/深入浅出外观模式（一）.html" rel="external nofollow noopener noreferrer" target="_blank">https://quanke.gitbooks.io/design-pattern-java/深入浅出外观模式（一）.html</a><br>2、浅谈JAVA设计模式之——外观模式(Facade) - CSDN博客<br><a href="https://blog.csdn.net/l1028386804/article/details/45568655" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/l1028386804/article/details/45568655</a><br>3、java中的外观模式（门面模式） - 简书<br><a href="https://www.jianshu.com/p/1424c90ca255" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/1424c90ca255</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;外观模式(Facade Pattern)通过引入一个外观角色来简化客户端与子系统之间的交互，为复杂的子系统调用提供一个统一的入口，降低子系统与客户端的耦合度，且客户端调用非常方便。外观模式又称为门面模式，它是一种对象结构型模式。&lt;/p&gt;&lt;h1 id=&quot;外观模式&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（七）适配器模式</title>
    <link href="https://www.wshunli.com/posts/69ceed63.html"/>
    <id>https://www.wshunli.com/posts/69ceed63.html</id>
    <published>2018-09-10T01:13:31.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>适配器模式（Adapter）把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>适配器提供客户类需要的接口，适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。也就是说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。因此，适配器可以使由于接口不兼容而不能交互的类可以一起工作。这就是适配器模式的模式动机。</p><p>适配器模式有 <strong>类的适配器模式和对象的适配器模式</strong> 两种不同的形式。</p><h2 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h2><p>类的适配器模式把适配的类的 API 转换成为目标类的 API 。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/7.ClassAdapter.png" title="适配器模式" alt="适配器模式"></div><p>在上图中可以看出，Adaptee 类并没有 sampleOperation2() 方法，而客户端则期待这个方法。</p><p>为使客户端能够使用 Adaptee 类，提供一个中间环节，即类 Adapter ，把 Adaptee 的 API 与 Target 类的 API 衔接起来。Adapter 与 Adaptee 是继承关系，这决定了这个适配器模式是类的。</p><p>模式所涉及的角色有：</p><p>(1)目标(Target)角色：这就是所期待得到的接口。注意：由于这里讨论的是类适配器模式，因此目标不可以是类。</p><p>(2)源(Adapee)角色：现在需要适配的接口。</p><p>(3)适配器(Adaper)角色：适配器类是本模式的核心。适配器把源接口转换成目标接口。显然，这一角色不可以是接口，而必须是具体类。</p><p>1、目标角色</p><pre><code class="lang-Java">public interface Target {    /**     * 这是源类Adaptee也有的方法     */    public void sampleOperation1();    /**     * 这是源类Adapteee没有的方法     */    public void sampleOperation2();}</code></pre><p>2、源角色</p><pre><code class="lang-Java">public class Adaptee {    public void sampleOperation1() {        System.out.println(&quot;Adaptee.sampleOperation1()&quot;);    }}</code></pre><p>3、适配器角色 ClassAdapter 扩展了 Adaptee ,同时又实现了目标(Target)接口。</p><pre><code class="lang-Java">public class ClassAdapter extends Adaptee implements Target {    /**     * 由于源类Adaptee没有方法sampleOperation2()     * 因此适配器补充上这个方法     */    @Override    public void sampleOperation2() {        System.out.println(&quot;ClassAdapter.sampleOperation2()&quot;);    }}</code></pre><h2 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h2><p>与类的适配器模式一样，对象的适配器模式把被适配的类的 API 转换成为目标类的 API。</p><p>与类的适配器模式不同的是，对象的适配器模式不是使用继承关系连接到 Adaptee 类，而是使用委派关系连接到 Adaptee 类。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/7.ObjectAdapter.png" title="适配器模式" alt="适配器模式"></div><p>在上图中可以看出，Adaptee 类并没有 sampleOperation2() 方法，而客户端则期待这个方法。</p><p>为使客户端能够使用 Adaptee 类，需要提供一个包装(Wrapper)类 Adapter。这个包装类包装了一个 Adaptee 的实例，从而此包装类能够把Adaptee 的 API 与 Target 类的 API 衔接起来。Adapter 与 Adaptee 是委派关系，这决定了适配器模式是对象的。</p><p>1、目标角色</p><pre><code class="lang-Java">public interface Target {    /**     * 这是源类Adaptee也有的方法     */    public void sampleOperation1();    /**     * 这是源类Adapteee没有的方法     */    public void sampleOperation2();}</code></pre><p>2、源角色</p><pre><code class="lang-Java">public class Adaptee {    public void sampleOperation1() {        System.out.println(&quot;Adaptee.sampleOperation1()&quot;);    }}</code></pre><p>3、适配器角色</p><pre><code class="lang-Java">public class ObjectAdapter {    private Adaptee adaptee;    public ObjectAdapter(Adaptee adaptee) {        this.adaptee = adaptee;    }    /**     * 源类Adaptee有方法sampleOperation1     * 因此适配器类直接委派即可     */    public void sampleOperation1() {        this.adaptee.sampleOperation1();    }    /**     * 源类Adaptee没有方法sampleOperation2     * 因此由适配器类需要补充此方法     */    public void sampleOperation2() {        System.out.println(&quot;ObjectAdapter.sampleOperation2()&quot;);    }}</code></pre><h2 id="类适配器和对象适配器的权衡"><a href="#类适配器和对象适配器的权衡" class="headerlink" title="类适配器和对象适配器的权衡"></a>类适配器和对象适配器的权衡</h2><p>类适配器使用对象继承的方式，是静态的定义方式；而对象适配器使用对象组合的方式，是动态组合的方式。</p><p>建议尽量使用对象适配器的实现方式，多用合成/聚合、少用继承。当然，具体问题具体分析，根据需要来选用实现方式，最适合的才是最好的。</p><p>在 Android 开发过程中, ListView 的 Adapter 是我们最为常见的类型之一。</p><p><strong>适配器模式的优缺点</strong>：</p><p>优点：更好的复用性、更好的扩展性。<br>缺点：过多的使用适配器，会让系统非常零乱，不易整体进行把握。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch07" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch07</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之适配器模式 - java_my_life - 博客园<br><a href="http://www.cnblogs.com/java-my-life/archive/2012/04/13/2442795.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/java-my-life/archive/2012/04/13/2442795.html</a><br>2、JAVA学习笔记—策略设计模式与适配器模式 - tongye - 博客园<br><a href="https://www.cnblogs.com/tongye/p/6676039.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/tongye/p/6676039.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;适配器模式（Adapter）把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。&lt;/p&gt;&lt;h1 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（六）原型模式</title>
    <link href="https://www.wshunli.com/posts/b7ba42b9.html"/>
    <id>https://www.wshunli.com/posts/b7ba42b9.html</id>
    <published>2018-09-07T14:31:45.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/6.Prototype.png" alt="原型模式"></p><p>原型模式的参与角色:</p><p>(1) 客户角色：客户类提出创建对象的请求。</p><p>(2) 抽象原型角色：这是一个抽象角色，通常由一个java接口或抽象类实现，具体原型都需要实现该接口。</p><p>(3) 具体原型角色：客户端所需要的被复制的对象。</p><p>1、创建抽象原型角色</p><pre><code class="lang-Java">public class Prototype implements Cloneable {    @Override    protected Object clone() throws CloneNotSupportedException {        return super.clone();    }}</code></pre><p>2、创建具体原型角色</p><pre><code class="lang-Java">public class ConcretePrototype1 extends Prototype {    public static int classFlag = 1;    @Override    protected ConcretePrototype1 clone() throws CloneNotSupportedException {        return (ConcretePrototype1) super.clone();    }}public class ConcretePrototype2 extends Prototype {    public static int classFlag = 2;    @Override    protected ConcretePrototype2 clone() throws CloneNotSupportedException {        return (ConcretePrototype2) super.clone();    }}</code></pre><p>3、原型模式的使用</p><pre><code class="lang-Java">public class PrototypePatternMain {    public static void main(String[] args) throws CloneNotSupportedException {        Prototype prototype1 = new ConcretePrototype1();        ConcretePrototype1 concretePrototype1 = (ConcretePrototype1) prototype1.clone();        System.out.println(concretePrototype1.classFlag);        Prototype prototype2 = new ConcretePrototype2();        ConcretePrototype2 concretePrototype2 = (ConcretePrototype2) prototype2.clone();        System.out.println(concretePrototype2.classFlag);    }}</code></pre><p>优点：1、性能提高。2、逃避构造函数的约束。</p><p>缺点：1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。2、必须实现 Cloneable 接口。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch06" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch06</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之原型模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/04/11/2439387.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/04/11/2439387.html</a><br>2、23种设计模式（5）：原型模式 - CSDN博客<br><a href="https://blog.csdn.net/zhengzhb/article/details/7393528" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/zhengzhb/article/details/7393528</a><br>3、java中的原型模式 - 简书<br><a href="https://www.jianshu.com/p/4e1f2d090f20" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/4e1f2d090f20</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;&lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（五）建造者模式</title>
    <link href="https://www.wshunli.com/posts/325f89c7.html"/>
    <id>https://www.wshunli.com/posts/325f89c7.html</id>
    <published>2018-09-07T10:07:47.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>建造者模式将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/5.Builder.png" alt="建造者模式"></p><p>建造者模式中的四个要素：</p><p>(1) 产品类：一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有比较多的代码量。在本类图中，产品类是一个具体的类，而非抽象类。实际编程中，产品类可以是由一个抽象类与它的不同实现组成，也可以是由多个抽象类与他们的实现组成。</p><p>(2) 抽象建造者：引入抽象建造者的目的，是为了将建造的具体过程交与它的子类来实现。这样更容易扩展。一般至少会有两个抽象方法，一个用来建造产品，一个是用来返回产品。</p><p>(3) 建造者：实现抽象类的所有未实现的方法，具体来说一般是两项任务：组建产品；返回组建好的产品。</p><p>(4) 导演类：负责调用适当的建造者来组建产品，导演类一般不与产品类发生依赖关系，与导演类直接交互的是建造者类。一般来说，导演类被用来封装程序中易变的部分。</p><p>1、构造产品实例类</p><pre><code class="lang-Java">public class Product {    private String name;    private String type;    private String size;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getType() {        return type;    }    public void setType(String type) {        this.type = type;    }    public String getSize() {        return size;    }    public void setSize(String size) {        this.size = size;    }    @Override    public String toString() {        return &quot;Product{&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, type=&#39;&quot; + type + &#39;\&#39;&#39; +                &quot;, size=&#39;&quot; + size + &#39;\&#39;&#39; +                &#39;}&#39;;    }    public void show() {        System.out.println(this.toString());    }}</code></pre><p>2、抽象建造者</p><pre><code class="lang-Java">public abstract class Builder {    public abstract void name(String name);    public abstract void type(String type);    public abstract void size(String size);    public abstract Product build();}</code></pre><p>3、建造者实例</p><pre><code class="lang-Java">public class ConcreteBuilder extends Builder {    private Product product = new Product();    @Override    public void name(String name) {        product.setName(name);    }    @Override    public void type(String type) {        product.setType(type);    }    @Override    public void size(String size) {        product.setSize(size);    }    public Product build() {        return product;    }}</code></pre><p>4、导演类</p><pre><code class="lang-Java">public class Director {    private Builder builder = new ConcreteBuilder();    public Product getAProduct() {        builder.name(&quot;Burger&quot;);        builder.type(&quot;Wrapper&quot;);        builder.size(&quot;big&quot;);        return builder.build();    }    public Product getBProduct() {        builder.name(&quot;Coke&quot;);        builder.type(&quot;Bottle&quot;);        builder.size(&quot;small&quot;);        return builder.build();    }}</code></pre><p>5、建造者模式的使用</p><pre><code class="lang-Java">public class BuilderPatternMain {    public static void main(String[] args) {        Director director = new Director();        Product aProduct = director.getAProduct();        aProduct.show();        Product bProduct = director.getBProduct();        bProduct.show();    }}</code></pre><p>优点：1、建造者独立，易扩展。2、便于控制细节风险。</p><p>缺点：1、产品必须有共同点，范围有限制。2、如内部变化复杂，会有很多的建造类。</p><p>使用场景：1、需要生成的对象具有复杂的内部结构。2、需要生成的对象内部属性本身相互依赖。</p><p>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch05" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch05</a></p><blockquote><p>参考资料<br>1、建造者模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/builder-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/builder-pattern.html</a><br>2、建造者模式（Builder Pattern）- 最易懂的设计模式解析 - CSDN博客<br><a href="https://blog.csdn.net/carson_ho/article/details/54910597" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/carson_ho/article/details/54910597</a><br>3、23种设计模式（4）：建造者模式 - CSDN博客<br><a href="https://blog.csdn.net/zhengzhb/article/details/7375966" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/zhengzhb/article/details/7375966</a><br>4、Java 设计模式 — 建造者模式 - 简书<br><a href="https://www.jianshu.com/p/7d16da4e61b8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/7d16da4e61b8</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;&lt;h1 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（四）抽象工厂模式</title>
    <link href="https://www.wshunli.com/posts/4e3be4ad.html"/>
    <id>https://www.wshunli.com/posts/4e3be4ad.html</id>
    <published>2018-09-07T07:45:07.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：</p><p>1）简单工厂模式（Simple Factory）<br>2）工厂方法模式（Factory Method）<br>3）抽象工厂模式（Abstract Factory）</p><p>本文及主要介绍抽象工厂模式。</p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式 (Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为 Kit 模式，属于对象创建型模式。</p><p>抽象工厂模式中，一个工厂可以提供多个不同种类产品对象，而不是单一种类的产品对象。</p><p>为了更清晰地理解工厂方法模式，需要先引入两个概念：</p><p><strong>产品等级结构</strong>： 产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</p><p><strong>产品族</strong>： 在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</p><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用抽象工厂模式。</p><p>抽象工厂模式与工厂方法模式最大的区别在于，<strong>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</strong>，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建 。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/4.AbstractFactory.png" alt="抽象工厂模式"></p><p>抽象工厂模式包含角色和工厂方法模式相同。</p><p>假设有一个移动终端工厂，可以制造苹果系列的移动产品和华为系列的移动产品。<br>这个工厂下有两个子厂，一个负责制造苹果系列的 Pad 和华为系列的 Pad ，另一个负责制造苹果系列的手机和华为系列的手机。这便是一个典型的抽象工厂的实例。</p><p>1、创建产品产品接口</p><pre><code class="lang-Java">// 苹果系列public interface Apple {    void AppleStyle();}// 华为系列public interface Huawei {    void HuaweiStyle();}</code></pre><p>2、实现具体产品角色</p><pre><code class="lang-Java">// 苹果系列产品public class iPhone implements Apple {    @Override    public void AppleStyle() {        System.out.println(&quot;Apple&#39;s style: iPhone!&quot;);    }}public class iPad implements Apple {    @Override    public void AppleStyle() {        System.out.println(&quot;Apple&#39;s style: iPad!&quot;);    }}// 华为系列产品public class Honor implements Huawei {    @Override    public void HuaweiStyle() {        System.out.println(&quot;Huawei&#39;s style: Honor!&quot;);    }}public class HuaweiPad implements Huawei {    @Override    public void HuaweiStyle() {        System.out.println(&quot;Huawei&#39;s style: HuaweiPad!&quot;);    }}</code></pre><p>3、创建抽象工厂接口</p><pre><code class="lang-Java">public interface Factory {    Apple createAppleProduct();    Huawei createHuaweiProduct();}</code></pre><p>4、实现具体工厂类，生成实例对象，和工厂方法模式的核心区别</p><pre><code class="lang-Java">// 手机工厂public class PhoneFactory implements Factory {    @Override    public Apple createAppleProduct() {        return new iPhone();    }    @Override    public Huawei createHuaweiProduct() {        return new Honor();    }}// 平板工厂public class PadFactory implements Factory {    @Override    public Apple createAppleProduct() {        return new iPad();    }    @Override    public Huawei createHuaweiProduct() {        return new HuaweiPad();    }}</code></pre><p>5、调用不同工厂的方法生成实例对象</p><pre><code class="lang-Java">public class AbstractFactoryMain {    public static void main(String[] args) {        Factory factory = new PhoneFactory();        Apple apple = factory.createAppleProduct();        apple.AppleStyle();        Huawei huawei = factory.createHuaweiProduct();        huawei.HuaweiStyle();        factory = new PadFactory();        apple = factory.createAppleProduct();        apple.AppleStyle();        huawei = factory.createHuaweiProduct();        huawei.HuaweiStyle();    }}</code></pre><p><strong>抽象工厂模式优缺点</strong>:</p><p>优点:<br>1、抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛的应用。<br>2、增加新的具体工厂和产品族很方便，因为一个具体的工厂实现代表的是一个产品族，无须修改已有系统，符合“开闭原则”。</p><p>缺点：<br>1、在添加新的产品对象（不同于现有的产品等级结构）时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。<br>2、开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</p><p><strong>适用环境</strong>：</p><p>1、一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。<br>2、系统中有多于一个的产品族，而每次只使用其中某一产品族。<strong>与工厂方法模式的区别</strong>。<br>3、属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。<br>4、系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch04" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch04</a></p><blockquote><p>参考资料<br>1、java中的工厂模式 - 简书<br><a href="https://www.jianshu.com/p/bf8341c75304" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/bf8341c75304</a><br>2、《JAVA与模式》之抽象工厂模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/03/28/2418836.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/03/28/2418836.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。&lt;/p&gt;&lt;p&gt;工厂模式可以分为三类：&lt;/p&gt;&lt;p&gt;1）简单工厂模式（Simple Factory）&lt;br&gt;2）工厂方法模式（Factory Method）&lt;br&gt;3）抽象工厂模
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（三）工厂方法模式</title>
    <link href="https://www.wshunli.com/posts/4982f93c.html"/>
    <id>https://www.wshunli.com/posts/4982f93c.html</id>
    <published>2018-09-07T07:40:09.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：</p><p>1）简单工厂模式（Simple Factory）<br>2）工厂方法模式（Factory Method）<br>3）抽象工厂模式（Abstract Factory）</p><p>本文及主要介绍工厂方法模式。</p><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>工厂方法模式 (Factory Method Pattern) 又称为工厂模式，也叫虚拟构造器 (Virtual Constructor) 模式或者多态工厂( Polymorphic Factory) 模式，它属于类创建型模式。</p><p>在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/3.FactoryMethod.png" alt="工厂方法模式"></p><p>工厂方法模式包含如下角色：</p><p>(1) Product：抽象产品，工厂方法模式所创建的对象的超类，也就是所有产品类的共同父类或共同拥有的接口。在实际的系统中，这个角色也常常使用抽象类实现。</p><p>(2) ConcreteProduct：具体产品，这个角色实现了抽象产品（Product）所声明的接口，工厂方法模式所创建的每一个对象都是某个具体产品的实例。</p><p>(3) Factory：抽象工厂，担任这个角色的是工厂方法模式的核心，任何在模式中创建对象的工厂类必须实现这个接口。在实际的系统中，这个角色也常常使用抽象类实现。</p><p>(4) ConcreteFactory：具体工厂，担任这个角色的是实现了抽象工厂接口的具体 Java 类。具体工厂角色含有与业务密切相关的逻辑，并且受到使用者的调用以创建具体产品对象。</p><p>1、创建抽象产品接口</p><pre><code class="lang-Java">public interface Shape {    void draw();}</code></pre><p>2、实现具体产品角色</p><pre><code class="lang-Java">public class Point implements Shape {    @Override    public void draw() {        System.out.println(&quot;Point.draw()&quot;);    }}public class Line implements Shape {    @Override    public void draw() {        System.out.println(&quot;Line.draw()&quot;);    }}public class Plane implements Shape {    @Override    public void draw() {        System.out.println(&quot;Plane.draw()&quot;);    }}</code></pre><p>以上内容和简单工厂模式相同。</p><p>3、创建抽象工厂接口</p><pre><code class="lang-Java">public interface ICreator {    Shape getShape();}</code></pre><p>4、实现具体工厂类，生成实例对象</p><pre><code class="lang-Java">public class PointCreator implements ICreator {    @Override    public Shape getShape() {        return new Point();    }}public class LineCreator implements ICreator {    @Override    public Shape getShape() {        return new Line();    }}public class PlaneCreator implements ICreator {    @Override    public Shape getShape() {        return new Plane();    }}</code></pre><p>5、调用不同工厂的方法生成实例对象</p><pre><code class="lang-Java">public class FactoryMethodMain {    public static void main(String[] args) {        ICreator creator = new PointCreator();        Shape shape = creator.getShape();        shape.draw();        creator = new LineCreator();        shape = creator.getShape();        shape.draw();        creator = new PlaneCreator();        shape = creator.getShape();        shape.draw();    }}</code></pre><p><strong>工厂方法模式的优缺点</strong>:</p><p>优点：<br>1、在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。<br>2、基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。<br>3、使用工厂方法模式的另一个优点是在系统中加入新产品时，只要添加一个具体工厂和具体产品就可以了。</p><p>缺点：<br>1、在添加新产品时，需要编写新的具体产品类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度。<br>2、由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</p><p><strong>适用场景</strong>：</p><p>1、一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。<br>2、一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。<br>3、将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch03" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch03</a></p><blockquote><p>参考资料<br>1、java中的工厂模式 - 简书<br><a href="https://www.jianshu.com/p/bf8341c75304" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/bf8341c75304</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。&lt;/p&gt;&lt;p&gt;工厂模式可以分为三类：&lt;/p&gt;&lt;p&gt;1）简单工厂模式（Simple Factory）&lt;br&gt;2）工厂方法模式（Factory Method）&lt;br&gt;3）抽象工厂模
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（二）简单工厂模式</title>
    <link href="https://www.wshunli.com/posts/6ae09785.html"/>
    <id>https://www.wshunli.com/posts/6ae09785.html</id>
    <published>2018-09-07T07:39:09.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：</p><p>1）简单工厂模式（Simple Factory）<br>2）工厂方法模式（Factory Method）<br>3）抽象工厂模式（Abstract Factory）</p><p>本文及主要介绍简单工厂模式。</p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。</p><p>在简单工厂模式中，可以根据参数的不同返回不同类的实例。</p><p>简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/2.SimpleFactory.png" alt="简单工厂模式"></p><p>简单工厂模式包含如下角色：</p><p>(1) Factory：工厂角色<br>工厂角色负责实现创建所有实例的内部逻辑。</p><p>(2) Product：抽象产品角色<br>抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的 <strong>公共接口</strong> 。</p><p>(3) ConcreteProduct：具体产品角色<br>具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</p><p>1、创建抽象产品接口</p><pre><code class="lang-Java">public interface Shape {    void draw();}</code></pre><p>2、实现具体产品角色</p><pre><code class="lang-Java">public class Point implements Shape {    @Override    public void draw() {        System.out.println(&quot;Point.draw()&quot;);    }}public class Line implements Shape {    @Override    public void draw() {        System.out.println(&quot;Line.draw()&quot;);    }}public class Plane implements Shape {    @Override    public void draw() {        System.out.println(&quot;Plane.draw()&quot;);    }}</code></pre><p>3、工厂角色，生成基于给定信息的实体类的对象</p><pre><code class="lang-Java">public class ShapeFactory {    // 使用 getShape 方法获取形状类型的对象    public Shape getShape(String shapeType) {        if (shapeType == null) {            return null;        }        if (shapeType.equalsIgnoreCase(&quot;POINT&quot;)) {            return new Point();        } else if (shapeType.equalsIgnoreCase(&quot;LINE&quot;)) {            return new Line();        } else if (shapeType.equalsIgnoreCase(&quot;PLANE&quot;)) {            return new Plane();        }        return null;    }}</code></pre><p>4、使用该工厂，通过传递类型信息来获取实体类的对象</p><pre><code class="lang-Java">public class SimpleFactoryMain {    public static void main(String[] args) {        ShapeFactory shapeFactory = new ShapeFactory();        //获取 Point 的对象，并调用它的 draw 方法        Shape shape1 = shapeFactory.getShape(&quot;POINT&quot;);        //调用 Point 的 draw 方法        shape1.draw();        //获取 Line 的对象，并调用它的 draw 方法        Shape shape2 = shapeFactory.getShape(&quot;LINE&quot;);        //调用 Line 的 draw 方法        shape2.draw();        //获取 Plane 的对象，并调用它的 draw 方法        Shape shape3 = shapeFactory.getShape(&quot;PLANE&quot;);        //调用 Plane 的 draw 方法        shape3.draw();    }}</code></pre><p><strong>简单工厂模式优缺点</strong>:</p><p>优点：<br>通过使用工厂类，外界不再需要关心如何创造各种具体的产品，只要提供一个产品的名称作为参数传给工厂，就可以直接得到一个想要的产品对象，并且可以按照接口规范来调用产品对象的所有功能（方法）。构造容易，逻辑简单。</p><p>缺点：<br>1、简单工厂模式中的 if else 判断非常多，当系统中的具体产品类不断增多时候，就要不断的修改工厂类，对系统的维护和扩展不利。<br>2、一个工厂类中集合了所有的类的实例创建逻辑，什么时候它不能工作了，整个系统都会受到影响。<br>3、简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</p><p><strong>适用场景</strong>：</p><p>1、工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。<br>2、客户端只知道传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch02" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch02</a></p><blockquote><p>参考资料<br>1、工厂模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/factory-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/factory-pattern.html</a><br>2、JAVA设计模式之工厂模式(简单工厂模式+工厂方法模式) - CSDN博客<br><a href="https://blog.csdn.net/jason0539/article/details/23020989" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/jason0539/article/details/23020989</a><br>3、java中的工厂模式 - 简书<br><a href="https://www.jianshu.com/p/bf8341c75304" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/bf8341c75304</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。&lt;/p&gt;&lt;p&gt;工厂模式可以分为三类：&lt;/p&gt;&lt;p&gt;1）简单工厂模式（Simple Factory）&lt;br&gt;2）工厂方法模式（Factory Method）&lt;br&gt;3）抽象工厂模
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘数字政通面试</title>
    <link href="https://www.wshunli.com/posts/93b729e9.html"/>
    <id>https://www.wshunli.com/posts/93b729e9.html</id>
    <published>2018-09-06T13:48:00.000Z</published>
    <updated>2018-09-10T09:09:30.590Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘数字政通面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘中海达面试</title>
    <link href="https://www.wshunli.com/posts/c783f06d.html"/>
    <id>https://www.wshunli.com/posts/c783f06d.html</id>
    <published>2018-09-06T02:43:04.000Z</published>
    <updated>2018-09-10T09:09:30.590Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘中海达面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（一）单例模式</title>
    <link href="https://www.wshunli.com/posts/d1c4534.html"/>
    <id>https://www.wshunli.com/posts/d1c4534.html</id>
    <published>2018-09-05T11:51:25.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式（Singleton Pattern）确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p><p><strong>特点</strong>：<br>单例类只能有一个实例。<br>单例类必须自己创建自己的唯一实例。<br>单例类必须给所有其他对象提供这一实例。</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式的其他几种实现方式：</p><p>1、饿汉模式，线程安全</p><pre><code class="lang-Java">public class Singleton {    private static final Singleton instance = new Singleton();    private Singleton() {    }    public static Singleton getInstance() {        return instance;    }}</code></pre><p>饿汉模式单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance() 方法。</p><p>2、懒汉模式，线程不安全</p><pre><code class="lang-Java">public class Singleton {    private static Singleton instance;    private Singleton() {    }    public static Singleton getInstance() {        if (instance == null) {            instance = new Singleton();        }        return instance;    }}</code></pre><p>当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p><p>3、懒汉模式、线程安全：</p><pre><code class="lang-Java">public class Singleton {    private static Singleton instance;    private Singleton() {    }    public static synchronized Singleton getInstance() {        if (instance == null) {            instance = new Singleton();        }        return instance;    }}</code></pre><p>虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。</p><p>因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。</p><p>4、双检锁/双重校验锁（DCL，即 double-checked locking）</p><pre><code class="lang-Java">public class Singleton {    private volatile static Singleton instance;    private Singleton() {    }    public static Singleton getInstance() {        if (instance == null) {            synchronized (Singleton.class) {                if (instance == null) {                    instance = new Singleton();                }            }        }        return instance;    }}</code></pre><p>5、静态内部类</p><pre><code class="lang-Java">public class Singleton {      private static class SingletonHolder {          private static final Singleton INSTANCE = new Singleton();      }      private Singleton (){}      public static final Singleton getInstance() {          return SingletonHolder.INSTANCE;     }  }</code></pre><p>6、枚举</p><pre><code class="lang-Java">public enum Singleton{    INSTANCE;}</code></pre><p><strong>总结</strong>：</p><p>一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。上述所说都是线程安全的实现，上文中第一种方式线程不安全，排除。</p><p>一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）倾向于使用静态内部类。如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。</p><blockquote><p>参考资料<br>1、单例模式 | 菜鸟教程：<br><a href="http://www.runoob.com/design-pattern/singleton-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/singleton-pattern.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单例模式（Singleton Pattern）确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：&lt;br&gt;单例类只能有一个实例。&lt;br&gt;单例类必须自己创建自己的唯一实例。&lt;br&gt;单例类必须给所有其他对象提供这
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（零）设计模式概述</title>
    <link href="https://www.wshunli.com/posts/af6d1ac0.html"/>
    <id>https://www.wshunli.com/posts/af6d1ac0.html</id>
    <published>2018-09-05T09:43:14.000Z</published>
    <updated>2018-09-10T09:09:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式也是比较欠缺的一方面，这次看的是 《设计模式之禅》 ，前面看了一点 《Head First 设计模式》感觉都是图片有点乱。</p><h1 id="第一部分-设计原则"><a href="#第一部分-设计原则" class="headerlink" title="第一部分 设计原则"></a>第一部分 设计原则</h1><p>单一职责原则：应该有且仅有一个原因引起类的变更，对于接口设计时要做到单一职责。</p><p>里氏替换原则：只要有父类出现的地方，替换为子类也不会产生任何问题或异常。<br>　　<br>依赖倒置原则：模块间的依赖关系是通过接口或抽象类产生的（面向接口编程）。</p><p>接口隔离原则：客户不应该依赖它不需要的接口；类间的依赖关系应建立在最小的接口上；尽量使用多个专门的接口。</p><p>迪米特法则：一个对象应对其他对象有最少的了解；只和直接朋友交流，朋友间也是有距离的；一个方法中尽量不引入类中不存在的对象；减少 public 方法和属性。</p><p>开闭原则：对扩展开放，对修改关闭；通过扩展来实现变化；不允许出现接口或抽象方法中不存在的 public 方法。</p><h1 id="第二部分-设计模式"><a href="#第二部分-设计模式" class="headerlink" title="第二部分 设计模式"></a>第二部分 设计模式</h1><p>设计模式根据目的可以分为三大类，分别是 <strong>创建型设计模式、行为型设计模式以及结构型设计模式</strong> 。</p><p>(一) <strong>创建型模式</strong> 涉及到将对象实例化，这类模式都提供一个方法，将客户从所需要实例化的对象中解藕。</p><p>创建型模式(Creational Pattern)对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。</p><p>创建型模式在创建什么(What)，由谁创建(Who)，何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。</p><p>1、单例模式(Singleton)</p><p><a href="https://www.wshunli.com/posts/d1c4534.html">https://www.wshunli.com/posts/d1c4534.html</a></p><p>2、简单工厂模式(Simple Factory)</p><p><a href="https://www.wshunli.com/posts/6ae09785.html">https://www.wshunli.com/posts/6ae09785.html</a></p><p>3、工厂方法模式(Factory Method)</p><p><a href="https://www.wshunli.com/posts/4982f93c.html">https://www.wshunli.com/posts/4982f93c.html</a></p><p>4、抽象工厂模式(Abstract Factory)</p><p><a href="https://www.wshunli.com/posts/4e3be4ad.html">https://www.wshunli.com/posts/4e3be4ad.html</a></p><p>5、建造者模式(Builder)</p><p><a href="https://www.wshunli.com/posts/325f89c7.html">https://www.wshunli.com/posts/325f89c7.html</a></p><p>6、原型模式(Prototype)</p><p><a href="https://www.wshunli.com/posts/b7ba42b9.html">https://www.wshunli.com/posts/b7ba42b9.html</a></p><p>(二) <strong>结构型模式</strong> 可以让你把类或对象组合到更大的结构中。</p><p>结构型模式(Structural Pattern)描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。</p><p>结构型模式可以分为 <strong>类结构型模式和对象结构型</strong> 模式：<br>(1) 类结构型模式关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在继承和实现关系。<br>(2) 对象结构型模式关心类与对象的组合，通过关联关系使得在一个类中定义另一个类的实例对象，然后通过该对象调用其方法。根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系，因此大部分结构型模式都是对象结构型模式。</p><p>7、适配器模式(Adapter)</p><p><a href="https://www.wshunli.com/posts/69ceed63.html">https://www.wshunli.com/posts/69ceed63.html</a></p><p>8、外观模式(Facade)</p><p><a href="https://www.wshunli.com/posts/82583d16.html">https://www.wshunli.com/posts/82583d16.html</a></p><p>9、装饰者模式(Decorator)</p><p><a href="https://www.wshunli.com/posts/d95b685e.html">https://www.wshunli.com/posts/d95b685e.html</a></p><p>10、代理模式(Proxy)</p><p><a href="https://www.wshunli.com/posts/b4b3761.html">https://www.wshunli.com/posts/b4b3761.html</a></p><p>11、组合模式(Composite)</p><p>12、桥连接模式(Bridge)</p><p>13、享元模式(Flyweight)</p><p>(三) <strong>行为型模式</strong> 涉及到类和对象如何交互及分配职责。</p><p>策略模式(Strategy)<br>状态模式(State)<br>责任链模式(Chain of Responsibility)<br>解释器模式(Interpreter)<br>命令模式(Command)<br>观察者模式(Observer)<br>备忘录模式(Memento)<br>迭代器模式(Iterator)<br>模板方法模式(Template Method)<br>访问者模式(Visitor)<br>中介者模式(Mediator)</p><blockquote><p>参考资料<br>1、图说设计模式 — Graphic Design Patterns<br><a href="https://design-patterns.readthedocs.io/zh_CN/latest/index.html#" rel="external nofollow noopener noreferrer" target="_blank">https://design-patterns.readthedocs.io/zh_CN/latest/index.html#</a><br>2、设计模式Java版<br><a href="https://quanke.gitbooks.io/design-pattern-java/" rel="external nofollow noopener noreferrer" target="_blank">https://quanke.gitbooks.io/design-pattern-java/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设计模式也是比较欠缺的一方面，这次看的是 《设计模式之禅》 ，前面看了一点 《Head First 设计模式》感觉都是图片有点乱。&lt;/p&gt;&lt;h1 id=&quot;第一部分-设计原则&quot;&gt;&lt;a href=&quot;#第一部分-设计原则&quot; class=&quot;headerlink&quot; title=&quot;第一
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>图解数据结构-算法部分（Java语言实现）</title>
    <link href="https://www.wshunli.com/posts/444e2c0f.html"/>
    <id>https://www.wshunli.com/posts/444e2c0f.html</id>
    <published>2018-09-04T06:48:13.000Z</published>
    <updated>2018-09-10T09:09:30.590Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。</p><p>前面一直学习的数据结构，下面排序、查找属于算法的范畴了。</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>所谓 “排序” (Sorting) 就是指将一组数据，按特定规则调换位置，使数据具有某种顺序关系（递增或递减）。</p><p><strong>排序分类</strong>，可分为内部（内存中）和外部（外部存储器）排序两大类。</p><p>常见的内部排序法有：冒泡排序法、选择排序法、插入排序法、合并排序法、快速排序 法、堆积排序法、希尔排序法、基数排序法等。 至于比较常见的外部排序法有：直接合并排序法、K 路合并法、多相合并法等。</p><p><strong>排序算法分析</strong>：算法是否稳定、时间复杂度、空间复杂度。</p><p>稳定的排序是指数据在经过排序后，两个相同键值的记录仍然保待原来的次序。</p><h2 id="内部排序法"><a href="#内部排序法" class="headerlink" title="内部排序法"></a>内部排序法</h2><p>内部排序法的时间复杂度及键值整理。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/内部排序法.png" alt="内部排序法"></p><p>1、<strong>冒泡排序法</strong></p><p>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/冒泡排序法.gif" alt="冒泡排序法"></p><p>实现算法：</p><pre><code class="lang-Java">int i, j, tmp;int data[] = {6, 5, 9, 7, 2, 8};    //原始数据for (i = 5; i &gt; 0; i--)             //扫描次数{    for (j = 0; j &lt; i; j++)         //比较、交换次数    {        // 比较相邻两数，如第一数较大则交换        if (data[j] &gt; data[j + 1]) {            tmp = data[j];            data[j] = data[j + 1];            data[j + 1] = tmp;        }    }}</code></pre><p>但是这样如论如何都会执行 $ n(n-1)/2 $ 次，我们可以加一个判断在没有可替换的数据时终止程序。</p><pre><code class="lang-Java">public void bubble() {    int i, j, tmp, flag;    for (i = 5; i &gt;= 0; i--) {        flag = 0;           //flag用来判断是否有执行交换的动作        for (j = 0; j &lt; i; j++) {            if (data[j + 1] &lt; data[j]) {                tmp = data[j];                data[j] = data[j + 1];                data[j + 1] = tmp;                flag++;    //如果有执行过交换，则flag不为0            }        }        //当执行完一次扫描就判断是否做过交换动作，如果没有交换过数据，        //表示此时数组已完成排序，故可直接跳出循环        if (flag == 0) {            break;        }    }</code></pre><p>冒泡排序是最容易实现的排序, 最坏的情况是每次都需要交换, 共需遍历并交换将近 n²/2 次, 时间复杂度为 O(n²) . 最佳的情况是内循环遍历一次后发现排序是对的, 因此退出循环, 时间复杂度为O(n).</p><p>平均来讲, 时间复杂度为O(n²). 由于冒泡排序中只有缓存的 temp 变量需要内存空间, 因此空间复杂度为常量O(1).</p><p>Tips: 由于冒泡排序只在相邻元素大小不符合要求时才调换他们的位置, 它并不改变相同元素之间的相对顺序, 因此它是稳定的排序算法.</p><p>2、<strong>选择排序法</strong></p><p>在未排序序列中找到最小（大）元素，存放到未排序序列的起始位置。</p><p>算法描述：</p><p>(1) 从待排序序列中，找到关键字最小的元素；<br>(2) 如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；<br>(3) 从余下的 N - 1 个元素中，找出关键字最小的元素，重复 (1)、(2) 步，直到排序结束。</p><pre><code class="lang-Java">void select() {    int i, j, tmp;    for (i = 0; i &lt; 5; i++) {            //扫描 5 次        for (j = i + 1; j &lt; 6; j++) {    //由 i+1 比较起，比较 5 次            if (data[i] &gt; data[j]) {     //比较第 i 及第 j 个元素                tmp = data[i];                data[i] = data[j];                data[j] = tmp;            }        }    }}</code></pre><p>选择排序的简单和直观名副其实，这也造就了它 “出了名的慢性子” ，无论是哪种情况，哪怕原数组已排序完成，它也将花费将近 n²/2 次遍历来确认一遍。即便是这样，它的排序结果也还是不稳定的。 唯一值得高兴的是，它并不耗费额外的内存空间。</p><p>3、<strong>插入排序法</strong></p><p>将数组中的所有元素依次跟前面已经排好的元素相比较，再将数组元素插入合适的位置。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/插入排序法.gif" alt="插入排序法"></p><p>实现算法：</p><pre><code class="lang-Java">void insert() {    int i;     // i 为扫描次数    int j;     // j 来定位比较的元素    int tmp;   // tmp 用来暂存数据    for (i = 1; i &lt; size; i++) {  // 扫描循环次数为 SIZE-1        tmp = data[i];        j = i - 1;        while (j &gt;= 0 &amp;&amp; tmp &lt; data[j]) {  // 如果第二元素小于第一元素            data[j + 1] = data[j]; // 就把所有元素往后推一个位置            j--;        }        data[j + 1] = tmp;       // 最小的元素放到第一个元素    }}</code></pre><p>Tips: 由于直接插入排序每次只移动一个元素的位，并不会改变值相同的元素之间的排序，因此它是一种稳定排序。</p><p>4、<strong>希尔排序法</strong></p><p>希尔排序是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录 “基本有序” 时，再对全体记录进行依次直接插入排序。</p><p>实现算法：</p><pre><code class="lang-Java">void shell() {    int i;        // i 为扫描次数    int j;        // j 来定位比较的元素    int k = 1;    // k 打印计数    int tmp;      // tmp 用来暂存数据    int jmp;      // 设定间隔位移量    jmp = size / 2;    while (jmp != 0) {        for (i = jmp; i &lt; size; i++) {            tmp = data[i];            j = i - jmp;            while (j &gt;= 0 &amp;&amp; tmp &lt; data[j])  //插入排序法            {                data[j + jmp] = data[j];                j = j - jmp;            }            data[jmp + j] = tmp;        }        jmp = jmp / 2;    //控制循环数    }}</code></pre><p>5、<strong>合并排序法</strong></p><p>合并排序算法是将两个（或两个以上）有序表合并成一个新的有序表；<br>即把待排序序列分为若干个子序列，每个子序列是有序的，然后再把有序子序列合并为整体有序序列。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/合并排序法.gif" alt="合并排序法"></p><p>6、<strong>快速排序法</strong></p><p>快速排序法又称分割交换排序法，是目前公认最佳的排序法。</p><p>它的原理和冒泡排序法一样都是用交换的方式，不过它会先在数据中找到一个虚拟的中间值，把小于中间值的数据放在左边，而大于中间值的数据放在右边，再以同样的方式分别处理左右两边的数据，直到完成为止。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/快速排序法.gif" alt="快速排序法"></p><p>7、<strong>堆积排序法</strong></p><p>堆排序的过程就是将待排序的序列构造成一个堆，选出堆中最大的移走，再把剩余的元素调整成堆，找出最大的再移走，重复直至有序。</p><p>8、<strong>基数排序法</strong></p><p>基数排序（Radix sort）是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><h2 id="外部排序法"><a href="#外部排序法" class="headerlink" title="外部排序法"></a>外部排序法</h2><p>直接合井排序法 (Direct Merge Sort) 是外部存储设备最常用的排序方法。</p><p>它可以分为两个步骤：<br>步骤1: 将要排序的文件分为几个大小可以加载到内存空间的小文件，再使用内部排序法将各文件内的数据排序。<br>步骤2: 将第一步所建立的小文件每两个合并成一个文件。两两合井后，把所有文件合并成一个文件后就可以完成排序了。</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>所谓查找，就是从数据文件中，寻找符合某特定条件的记录。而用来查找的条件就称为 “键值” 。</p><p>一般来说，如果数据在查找前经过排序，将可大幅减少查找的时间。至于查找技巧中比 较常见的方法有顺序法、二分查找法、斐波那契法、插值法、哈希法、m 路查找树、B-tree 等。</p><p>数据结构：<a href="https://www.wshunli.com/posts/850e5c53.html">https://www.wshunli.com/posts/850e5c53.html</a><br>算法：<a href="https://www.wshunli.com/posts/444e2c0f.html">https://www.wshunli.com/posts/444e2c0f.html</a></p><blockquote><p>参考资料<br>1、八大排序算法总结与java实现 | iTimeTraveler<br><a href="https://itimetraveler.github.io/2017/07/18/八大排序算法总结与java实现/" rel="external nofollow noopener noreferrer" target="_blank">https://itimetraveler.github.io/2017/07/18/八大排序算法总结与java实现/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。&lt;/p&gt;&lt;p&gt;前面一直学习的数据结构，下面排序、查找属于算法的范畴了。&lt;/p&gt;&lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="算法" scheme="https://www.wshunli.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘数文科技面试</title>
    <link href="https://www.wshunli.com/posts/244dd89b.html"/>
    <id>https://www.wshunli.com/posts/244dd89b.html</id>
    <published>2018-08-31T12:46:52.000Z</published>
    <updated>2018-09-10T09:09:30.590Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘数文科技面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘（GIS行业）</title>
    <link href="https://www.wshunli.com/posts/9aef7ef9.html"/>
    <id>https://www.wshunli.com/posts/9aef7ef9.html</id>
    <published>2018-08-31T09:10:41.000Z</published>
    <updated>2018-09-10T09:09:30.590Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季（2019届应届生）校园招聘（GIS行业）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图解数据结构（Java语言实现）</title>
    <link href="https://www.wshunli.com/posts/850e5c53.html"/>
    <id>https://www.wshunli.com/posts/850e5c53.html</id>
    <published>2018-08-29T12:41:03.000Z</published>
    <updated>2018-09-10T09:09:30.590Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。</p><p>这次选择看的书籍是 《图解数据结构-使用Java》 ，先入门，后面再深入学习。</p><p>算法的时间复杂度，用来度量算法的运行时间，记作: T(n) = O(f(n))。它表示随着 输入大小 n 的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。</p><p>线性表是 n 个元素的有限序列（n &gt;= 0），是计算机科学中一种相当基础的数据结构。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><strong>数组</strong> 其实是一排紧密相邻的可读内存，并提供一个能够 <strong>直接访问</strong> 单一数据内容的计算方法。</p><p>这样能够直接通过计算，并访问任一位置的数据，即所谓的数组的 <strong>随机读取</strong> 。</p><p>当 Java 数组声明时会在内存中分配一定的暂存空间，空间大小以数据类型和数组数量为依据。</p><p>一维数据、二维数组、三维数组、n 维数组。</p><p>数组可用于矩阵、多项式等的运算。</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><strong>链表</strong> 是由许多相同数据类型的元素按照特定顺序排列而成的线性表，其在内存中是不连续与随机存储的。</p><p>这样就不能像数组那样随机读取数据，而要 <strong>按照顺序</strong> 找到所需数据。</p><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p>单向链表是由节点组成，指针方向相同的链表。其中节点由数据字段和链接字段组成。</p><p>在 Java 中，声明节点：</p><pre><code class="lang-Java">public class Node {    int data;    Node next;    public Node(int data) {        this.data = data;        this.next = null;    }}</code></pre><p>而 Java 中没有指针的概念，我们声明两个对象分别指向第一个和最后一个节点：</p><pre><code class="lang-Java">public class LinkedList {    private Node first;    private Node last;    ...}</code></pre><p>1、<strong>单向链表的创建</strong></p><p>下面创建简单单向链表类：</p><pre><code class="lang-Java">public class LinkedList {    private Node first;    private Node last;    public boolean isEmpty() {        return first == null;    }    public void insert(int data) {        Node node = new Node(data);        if (this.isEmpty()) {            first = node;            last = node;        } else {            last.next = node;            last = node;        }    }    public void print() {        Node current = first;        while (current != null) {            System.out.println(&quot;current.data=&quot; + current.data);            current = current.next;        }    }}</code></pre><p>然后实例化链表对象即可：</p><pre><code class="lang-Java">public class Main {    public static void main(String[] args) {        LinkedList linkedList = new LinkedList();        linkedList.insert(99);        linkedList.insert(90);        linkedList.insert(95);        linkedList.print();    }}</code></pre><p>这样所有节点都知道下个节点在哪里，只要有首节点的存在，就可以对整个列表进行遍历、插入及删除节点等动作。</p><p>2、<strong>单向链表节点的删除</strong></p><p>将欲删除节点的前一个节点的指针指向欲删除节点的下一个节点即可。</p><p>如果删除 <strong>首节点</strong>，将首节点的下个节点设置为首节点；如果删除 <strong>末节点</strong>，将前一个节点指向 null 即可。</p><pre><code class="lang-Java">  public void delete(Node node) {      Node newNode;      Node temp;      if (first.data == node.data) {          first = first.next;      } else if (last.data == node.data) {          temp = first;          while (temp.next != last) {              temp = temp.next;          }          temp.next = last.next; // temp.next = null;          last = temp; // 设置末节点      } else {          newNode = first;          temp = first;          while (temp.data != node.data) {              newNode = temp;              temp = temp.next;          }          newNode.next = temp.next;      }  }</code></pre><p>这样删除有点弊端，根据 node 节点的值判断是否是同一节点，并且没有对节点是否存在做判断。</p><p>3、<strong>单向链表节点的添加</strong></p><p>添加节点和删除节点有点类似，将前一个节点指向新添加的节点，然后将新添加节点指向下一个节点即可。</p><p>如果添加为 <strong>首节点</strong> ，将欲添加节点指向首节点；如果添加为 <strong>末节点</strong> ，将原末节点指向新节点即可。</p><pre><code class="lang-Java">public void insert(Node node) {    Node newNode;    Node temp;    if (node.next == first) {        node.next = first;        first = node;    } else if (node.next == null) {        last.next = node;        node.next = null;    } else {        newNode = first;        temp = first;        while (node.next != newNode.next) {            temp = newNode;            newNode = newNode.next;        }        temp.next = node;        node.next = newNode;    }}</code></pre><p>这样在节点位置的判断上还是有弊端的。</p><p>4、<strong>单向链表的反转</strong></p><p>面试有时候会让手写这个代码。</p><p><strong>遍历法</strong>: 从链表头部开始，逐个反转节点。</p><pre><code class="lang-Java">public Node reverse(Node head) {    if (head == null) return null;      // 空链表    if (head.next == null) return head; // 一个元素的链表    Node preNode = null;    Node nowNode = head;    while (nowNode != null) {        Node nextNode = nowNode.next;   // 保存下一个结点        nowNode.next = preNode;         // 当前结点指向前一个结点        preNode = nowNode;              // 前任结点 到现任节点        nowNode = nextNode;             // 现任节点到下一结点    }    return preNode;}</code></pre><p><strong>递归法</strong>：从链表尾部开始，逐个反转节点。</p><pre><code class="lang-Java">public Node reverse(Node node) {    if (node == null || node.next == null) return node;    Node headNode = reverse(node.next);    node.next.next = node;    node.next = null;    return headNode;}</code></pre><p>以上算法都需要传入链表的头部节点，打印时需要注意头部和尾部节点引用。</p><p>5、<strong>单向链表的串联</strong></p><p>将列表的首位节点相连即可。</p><pre><code class="lang-Java">public LinkedList connect(LinkedList list1, LinkedList list2) {    LinkedList list = list1;//  while (list.last.next != null) {//     list.last = list.last.next;//  }    list.last.next = list2.first;    return list;}</code></pre><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p>我们把单向链表的尾部指向头部，整个链表就成为单向环形结构。</p><p>这里创建链表、插入节点、删除节点、链表串联都很类似。</p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>双向链表基本结构和单项连链表类似，至少一个节点存放数据，另外它有两个字段存放指针。</p><h1 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h1><p>堆栈是一种抽象的数据结构：只能从堆栈的 <strong>顶端</strong> 访问数据；数据访问符合 <strong>后进先出</strong> 的原则。</p><h2 id="堆栈的数组实现"><a href="#堆栈的数组实现" class="headerlink" title="堆栈的数组实现"></a>堆栈的数组实现</h2><pre><code class="lang-Java">class StackByArray { //以数组模拟堆栈的类声明    private int[] stack; //在类中声明数组    private int top;  //指向堆栈顶端的索引    //StackByArray类构造函数    public StackByArray(int stack_size) {        stack = new int[stack_size]; //建立数组        top = -1;    }    //类方法：push    //存放顶端数据，并更正新堆栈的内容    public boolean push(int data) {        if (top &gt;= stack.length) { //判断堆栈顶端的索引是否大于数组大小            System.out.println(&quot;堆栈已满，无法再加入&quot;);            return false;        } else {            stack[++top] = data; //将数据存入堆栈            return true;        }    }    //类方法：empty    //判断堆栈是否为空堆栈，是则返回true，不是则返回false    public boolean empty() {        if (top == -1) return true;        else return false;    }    //类方法：pop    //从堆栈取出数据    public int pop() {        if (empty()) //判断堆栈是否为空，如果是则返回-1值            return -1;        else            return stack[top--]; //先将数据取出后，再将堆栈指针往下移    }}</code></pre><h2 id="堆栈的链表实现"><a href="#堆栈的链表实现" class="headerlink" title="堆栈的链表实现"></a>堆栈的链表实现</h2><pre><code class="lang-Java">class Node //链接节点的声明{    int data;    Node next;    public Node(int data) {        this.data = data;        this.next = null;    }}class StackByLink {    public Node front; //指向堆栈底端的指针    public Node rear;  //指向堆栈顶端的指针    //类方法：isEmpty()    //判断堆栈如果为空堆栈,则front==null;    public boolean isEmpty() {        return front == null;    }    //打印堆栈内容    public void output_of_Stack() {        Node current = front;        while (current != null) {            System.out.print(&quot;[&quot; + current.data + &quot;]&quot;);            current = current.next;        }        System.out.println();    }    //在堆栈顶端加入数据    public void insert(int data) {        Node newNode = new Node(data);        if (this.isEmpty()) {            front = newNode;            rear = newNode;        } else {            rear.next = newNode;            rear = newNode;        }    }    //在堆栈顶端删除数据    public void pop() {        Node newNode;        if (this.isEmpty()) {            System.out.print(&quot;===目前为空堆栈===\n&quot;);            return;        }        newNode = front;        if (newNode == rear) {            front = null;            rear = null;            System.out.print(&quot;===目前为空堆栈===\n&quot;);        } else {            while (newNode.next != rear)                newNode = newNode.next;            newNode.next = rear.next;            rear = newNode;        }    }}</code></pre><h2 id="堆栈的应用"><a href="#堆栈的应用" class="headerlink" title="堆栈的应用"></a>堆栈的应用</h2><p>二叉树及森林的遍历；图形的深度优先遍历；递归程序的调用及返回等等。</p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列是一种抽象的数据结构：只能从队列的 <strong>两端</strong> 访问数据；数据访问符合 <strong>先进先出</strong> 的原则。</p><h2 id="队列的数组实现"><a href="#队列的数组实现" class="headerlink" title="队列的数组实现"></a>队列的数组实现</h2><pre><code class="lang-Java">public class ArrayQueue {    private int[] data;    private int size;//元素个数    private int front;//队列中第一个对象的位置    private int rear;//队列中当前对象的位置    public ArrayQueue() {        data = new int[10];        size = 0;        front = 0;        rear = 0;    }    public void add(int t) {        if (isFull()) {            resize();            front = 0;        }        rear = (front + size) % data.length;        System.out.println(rear);        data[rear] = t;        size++;    }    public int remove() {        if (isEmpty()) {            throw new RuntimeException(&quot;队列为空!&quot;);        }        int tempData = data[front];        data[front] = 0;        front = (front + 1) % (data.length);        size--;        return tempData;    }    public int size() {        return size;    }    public boolean isEmpty() {        return size == 0;    }    public boolean isFull() {        return size == data.length;    }    public void resize() {        /*注意重新扩容的时候并不需要去设置size         * 队列的大小并不能通过数组的大小直观的显示出来。         * 但是栈就可以直观的通过数组的大小显示出来*/        int[] tmp = new int[data.length * 2];        System.arraycopy(data, 0, tmp, 0, data.length);        data = tmp;        tmp = null;//引用置为空，便于gc处理      }}</code></pre><h2 id="队列的链表实现"><a href="#队列的链表实现" class="headerlink" title="队列的链表实现"></a>队列的链表实现</h2><pre><code class="lang-Java">class QueueNode                 // 队列节点类{    int data;                    // 节点数据    QueueNode next;              // 指向下一个节点    //构造函数    public QueueNode(int data) {        this.data = data;        next = null;    }}class Linked_List_Queue { //队列类    public QueueNode front; //队列的前端指针    public QueueNode rear;  //队列的尾端指针    //构造函数    public Linked_List_Queue() {        front = null;        rear = null;    }    //方法enqueue:队列数据的存入    public boolean enqueue(int value) {        QueueNode node = new QueueNode(value); //建立节点        //检查是否为空队列        if (rear == null)            front = node; //新建立的节点成为第一个节点        else            rear.next = node; //将节点加入到队列的尾端        rear = node; //将队列的尾端指针指向新加入的节点        return true;    }    //方法dequeue:队列数据的取出    public int dequeue() {        int value;        //检查队列是否为空队列        if (!(front == null)) {            if (front == rear) rear = null;            value = front.data; //将队列数据取出            front = front.next; //将队列的前端指针指向下一个            return value;        } else return -1;    }} //队列类声明结束</code></pre><p>环形队列、优先队列、双向队列</p><h1 id="树状结构"><a href="#树状结构" class="headerlink" title="树状结构"></a>树状结构</h1><p>树是一种用来表述有 <strong>分支</strong> 的数据结构，是由一个或者一个以上的节点组成的有限集合。</p><p><strong>树的专有名词</strong>：</p><p>结点度：结点子树的个数；树的度：树中最大的结点度。</p><p>叶子节点：没有子节点的节点，即度为 0 的节点。</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树最多有两个子节点，即度 &lt;= 2 的树。</p><p><strong>特殊的二叉树</strong>：</p><p>1、满二叉树，树的高度为 h 树的节点为 $2^h-1$ 我们称为满二叉树。</p><p>2、完全二叉树，树的高度为 h 树的节点小于 $2^h-1$ ，但是其节点和满二叉树从左到右，从上到下的顺序一一对应。</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/二叉树-特殊的二叉树.png" alt="特殊的二叉树"></p><p>3、歪二叉树，当一个二叉树完全没有右节点/左节点时。</p><p>4、严格二叉树，每个二叉树都有非空的左右子树。成为严格二叉树。</p><h2 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h2><p>1、<strong>数组表示法</strong></p><p>首先将二叉树想象为满二叉树，然后依次存放入数组中，空位为 null 即可。</p><blockquote><p>以数组建立二叉树，要求小于父节点的值放在左子节点，反之放在右边。</p></blockquote><pre><code class="lang-Java">public class CH06_01 {    public static void main(String args[]) throws IOException    {        int i, level;        int data[] = {6, 3, 5, 9, 7, 8, 4, 2}; /*原始数组*/        int btree[] = new int[16];        for (i = 0; i &lt; 16; i++) btree[i] = 0;        System.out.print(&quot;原始数组内容: \n&quot;);        for (i = 0; i &lt; 8; i++)            System.out.print(&quot;[&quot; + data[i] + &quot;] &quot;);        System.out.println();        for (i = 0; i &lt; 8; i++)                    /*把原始数组中的值逐一对比*/ {            for (level = 1; btree[level] != 0; )   /*比较树根及数组内的值*/ {                if (data[i] &gt; btree[level])        /*如果数组内的值大于树根，则往右子树比较*/                    level = level * 2 + 1;                else                               /*如果数组内的值小于或等于树根，则往左子树比较*/                    level = level * 2;            }                                      /*如果子树节点的值不为0，则再与数组内的值比较一次*/            btree[level] = data[i];                /*把数组值放入二叉树*/        }        System.out.print(&quot;二叉树内容：\n&quot;);        for (i = 1; i &lt; 16; i++)            System.out.print(&quot;[&quot; + btree[i] + &quot;] &quot;);        System.out.print(&quot;\n&quot;);    }}</code></pre><p>2、链表表示法</p><p>二叉链表结构主要由一个数据域和两个分别指向左、右孩子的结点组成，其结构如下：</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/二叉树-链表表示法.png" alt="链表表示法"></p><p>TreeNode 及 BinaryTree 声明如下：</p><pre><code class="lang-Java">class TreeNode {    int value;    TreeNode left_Node;    TreeNode right_Node;    // TreeNode构造函数    public TreeNode(int value) {        this.value = value;        this.left_Node = null;        this.right_Node = null;    }}//二叉树类声明class BinaryTree {    public TreeNode rootNode; //二叉树的根节点    //构造函数:利用传入一个数组的参数来建立二叉树    public BinaryTree(int[] data) {        for (int i = 0; i &lt; data.length; i++)            Add_Node_To_Tree(data[i]);    }    //将指定的值加入到二叉树中适当的节点    void Add_Node_To_Tree(int value) {        TreeNode currentNode = rootNode;        if (rootNode == null) { //建立树根            rootNode = new TreeNode(value);            return;        }        //建立二叉树        while (true) {            if (value &lt; currentNode.value) { //在左子树                if (currentNode.left_Node == null) {                    currentNode.left_Node = new TreeNode(value);                    return;                } else currentNode = currentNode.left_Node;            } else { //在右子树                if (currentNode.right_Node == null) {                    currentNode.right_Node = new TreeNode(value);                    return;                } else currentNode = currentNode.right_Node;            }        }    }}</code></pre><p>这样增删很容易，但是不容易找到父节点，除非增加字段。</p><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树的遍历：即“访问树中所有节点各一次”。按照二叉树特性，一律从左向右。</p><p>根据访问根节点的顺序，二叉树的遍历规则主要有四种，先根次序遍历，中根次序遍历，后根次序遍历以及层次遍历。</p><pre><code class="lang-Java">// 中序遍历public void InOrder(TreeNode node) {    if (node != null) {        InOrder(node.left_Node);        System.out.print(&quot;[&quot; + node.value + &quot;] &quot;);        InOrder(node.right_Node);    }}// 前序遍历public void PreOrder(TreeNode node) {    if (node != null) {        System.out.print(&quot;[&quot; + node.value + &quot;] &quot;);        PreOrder(node.left_Node);        PreOrder(node.right_Node);    }}// 后序遍历public void PostOrder(TreeNode node) {    if (node != null) {        PostOrder(node.left_Node);        PostOrder(node.right_Node);        System.out.print(&quot;[&quot; + node.value + &quot;] &quot;);    }}</code></pre><h1 id="图形结构"><a href="#图形结构" class="headerlink" title="图形结构"></a>图形结构</h1><p>图形结构是用来探讨两个顶点间是否相连的关系图，若在边上加权值，这类图成为“网络”。</p><h2 id="图形介绍"><a href="#图形介绍" class="headerlink" title="图形介绍"></a>图形介绍</h2><p>图形有两种：有向图、无向图。</p><p>图形的专业术语：</p><p>度：一个顶点所拥有边的总数。<br>入/出度：在有向图中，定点为箭头终点的边的个数为入度；出度为起点边的个数。</p><h2 id="图形的表示法"><a href="#图形的表示法" class="headerlink" title="图形的表示法"></a>图形的表示法</h2><p>1、邻接矩阵法/相邻表法</p><p>2、相邻多元列表法/索引表格法</p><h2 id="图形的遍历"><a href="#图形的遍历" class="headerlink" title="图形的遍历"></a>图形的遍历</h2><p>图形的遍历方法有两种：深度优先遍历、广度优先遍历。</p><p>1、深度优先使用递归与 <strong>堆栈</strong> 的技巧</p><p>从图形的某一顶点开始遍历，被访问过的顶点就做上已访问的记号，接着遍历此顶点的所有相邻且未访问过的顶点中的任意一个顶点，并做上已访问的记号，再以该点为新的起点继续进行先深后广的搜索。</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/图形-图的遍历.png" alt="图形-图的遍历"></p><p>（1）从起点 1 开始，将相邻的 2 3 放入堆栈</p><p>3 2</p><p>（2）将 2 取出，并将与 2 相邻且未访问的 4 5 放入堆栈</p><p>3 5 4</p><p>（3）将 4 取出，并将与 4 相邻且未访问的 8 放入堆栈</p><p>3 5 8</p><p>（4）将 8 取出，并将与 8 相邻且未访问的 5 放入堆栈</p><p>3 5 5</p><p>（5）将 5 取出，发现与 5 相邻的节点都访问过了，这里就舍去</p><p>3</p><p>（6）将 3 取出，并将与 3 相邻且未访问的 6 7 放入堆栈</p><p>7 6</p><p>（7）最后将堆栈的节点逐个判断即可。</p><p>7 7</p><p>最终遍历顺序为：1 -&gt; 2 -&gt; 4 -&gt; 8 -&gt; 5 -&gt; 3 -&gt; 6 -&gt; 7</p><pre><code class="lang-Java">public static void dfs(int current){    run[current] = 1;    System.out.print(&quot;[&quot; + current + &quot;]&quot;);    while ((Head[current].first) != null) {        if (run[Head[current].first.x] == 0) //如果顶点尚未遍历，就进行dfs的递归调用            dfs(Head[current].first.x);        Head[current].first = Head[current].first.next;    }}</code></pre><p>2、广度优先使用递归与 <strong>队列</strong> 的技巧</p><p>从图形的某顶点开始遍历，被访问过的顶点就做上已访问的记号，接着遍历此顶点的所有相邻且未访问过的顶点中的任意个顶点，并做上已访问的记号，再以该点为新的起点继续进行先广后深的搜索。</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/图形-图的遍历.png" alt="图形-图的遍历"></p><p>（1）从起点 1 开始，将相邻的 2 3 放入堆栈</p><p>2 3</p><p>（2）将 2 取出，并将与 2 相邻且未访问的 4 5 放入堆栈</p><p>3 4 5</p><p>（3）将 3 取出，并将与 3 相邻且未访问的 6 7 放入堆栈</p><p>4 5 6 7</p><p>（4）将 4 取出，并将与 4 相邻且未访问的 8 放入堆栈</p><p>5 6 7 8</p><p>（5）将 5 取出，并将与 5 相邻且未访问的 8 放入堆栈</p><p>6 7 8 8</p><p>（6）将 6 取出，并将与 6 相邻且未访问的 7 放入堆栈</p><p>7 8 8 7</p><p>（7）将 7 取出，发现与 7 相邻的节点都访问过了，这里就舍去</p><p>8 8 7</p><p>（8）最后将队列的节点逐个判断即可。</p><p>8 7</p><p>最终遍历顺序为：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8</p><pre><code class="lang-Java">public void bfs(int current) {    Node tempnode; //临时的节点指针    enqueue(current); //将第一个顶点存入队列    run[current] = 1; //将遍历过的顶点设定为1    System.out.print(&quot;[&quot; + current + &quot;]&quot;); //打印该遍历过的顶点    while (front != rear) { //判断目前是否为空队列        current = dequeue(); //将顶点从队列中取出        tempnode = Head[current].first; //先记录目前顶点的位置        while (tempnode != null) {            if (run[tempnode.x] == 0) {                enqueue(tempnode.x);                run[tempnode.x] = 1; //记录已遍历过                System.out.print(&quot;[&quot; + tempnode.x + &quot;]&quot;);            }            tempnode = tempnode.next;        }    }}</code></pre><h2 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h2><p>一个图形的生成树以最少的边来连接图形中所有的顶点，且不造成回路(Cycle)的树状结构。</p><p>深度优先生成树、广度优先生成树。</p><p>MST 生成树，即在加权图（网络）上，计算路径成本最小的的生成树。有 Peim 算法和 Kruskal 算法等。</p><blockquote><p>前面一直学习的数据结构，下面排序、查找属于算法的范畴了。</p></blockquote><p>数据结构：<a href="https://www.wshunli.com/posts/850e5c53.html">https://www.wshunli.com/posts/850e5c53.html</a><br>算法：<a href="https://www.wshunli.com/posts/444e2c0f.html">https://www.wshunli.com/posts/444e2c0f.html</a></p><blockquote><p>参考资料<br>1、《图解数据结构-使用Java》<br>2、（数据结构）十分钟搞定时间复杂度（算法的时间复杂度） - 简书<br><a href="https://www.jianshu.com/p/f4cca5ce055a" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f4cca5ce055a</a><br>3、单链表反转的两种实现（Java） - CSDN博客<br><a href="https://blog.csdn.net/acquaintanceship/article/details/73011169" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/acquaintanceship/article/details/73011169</a><br>4、data structures - Reversing a linked list in Java, recursively - Stack Overflow<br><a href="https://stackoverflow.com/questions/354875/reversing-a-linked-list-in-java-recursively" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/354875/reversing-a-linked-list-in-java-recursively</a><br>5、【算法】如何判断链表有环 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/78896293" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/78896293</a><br>6、队列的实现(JAVA) - CSDN博客<br><a href="https://blog.csdn.net/lcore/article/details/8868078" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lcore/article/details/8868078</a><br>7、树和二叉树定义、基本术语和性质 - CSDN博客<br><a href="https://blog.csdn.net/lsh_2013/article/details/43121373" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lsh_2013/article/details/43121373</a><br>8、java数据结构与算法之树基本概念及二叉树（BinaryTree）的设计与实现 - CSDN博客<br><a href="https://blog.csdn.net/javazejian/article/details/53727333" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/javazejian/article/details/53727333</a><br>9、data structures - Difference between “Complete binary tree”, “strict binary tree”,”full binary Tree”? - Stack Overflow<br><a href="https://stackoverflow.com/questions/12359660/difference-between-complete-binary-tree-strict-binary-tree-full-binary-tre" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/12359660/difference-between-complete-binary-tree-strict-binary-tree-full-binary-tre</a><br>10、数据结构 - 图的基本术语 - CSDN博客<br><a href="https://blog.csdn.net/wangzi11322/article/details/45417081" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/wangzi11322/article/details/45417081</a><br>11、《图论》——图的存储与遍历（Java） - CSDN博客<br><a href="https://blog.csdn.net/Gamer_gyt/article/details/51498546" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/Gamer_gyt/article/details/51498546</a><br>12、Java 与图 - 简书<br><a href="https://www.jianshu.com/p/a47a147ec92c" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/a47a147ec92c</a><br>13、DFS（深度优先搜索）和BFS(广度优先搜索) - 简书<br><a href="https://www.jianshu.com/p/b086986969e6" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/b086986969e6</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。&lt;/p&gt;&lt;p&gt;这次选择看的书籍是 《图解数据结构-使用Java》 ，先入门，后面再深入学习。&lt;/p&gt;&lt;p&gt;算法的时间复杂度，用来度量算法的运行时间，记作: T(n) =
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.wshunli.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘阿里巴巴面试</title>
    <link href="https://www.wshunli.com/posts/964a7017.html"/>
    <id>https://www.wshunli.com/posts/964a7017.html</id>
    <published>2018-08-29T07:51:07.000Z</published>
    <updated>2018-09-10T09:09:30.590Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘阿里巴巴面试（客户端开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘金山软件面试</title>
    <link href="https://www.wshunli.com/posts/52954f8e.html"/>
    <id>https://www.wshunli.com/posts/52954f8e.html</id>
    <published>2018-08-29T03:01:12.000Z</published>
    <updated>2018-09-10T09:09:30.590Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘金山软件面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
