<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-05-31T14:51:28.654Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kotlin for Android（一）Hello Kotlin !</title>
    <link href="https://www.wshunli.com/posts/591ca4ea.html"/>
    <id>https://www.wshunli.com/posts/591ca4ea.html</id>
    <published>2018-05-29T13:04:28.000Z</published>
    <updated>2018-05-31T14:51:28.654Z</updated>
    
    <content type="html"><![CDATA[<p>Kotlin 是用于现代多平台应用的静态编程语言，与 Java™ 和 Android™ 100% 可互操作。</p><p>2017 年 5 月，Google 年度 I/O 大会上，宣布把 Kotlin 作为 Android 开发的首选语言。</p><p>今年 2018 Google I/O 大会上，示例 App 已经全部采用 Kotlin 编写了。</p><p>前面也一直想涉猎 Kotlin 方面的东西，但是一直没有时间，主要还是懒。。</p><p><strong>维基百科关于 Kotlin 的介绍</strong>：</p><p>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，它也可以被编译成为 JavaScript 源代码。它主要是由俄罗斯圣彼得堡的 JetBrains 开发团队所发展出来的编程语言，其名称来自于圣彼得堡附近的科特林岛。</p><p>2011年7月，JetBrains 推出 Kotlin 项目，这是一个面向 JVM 的新语言，它已被开发一年之久。</p><p>JetBrains 负责人 Dmitry Jemerov 说，大多数语言没有他们正在寻找的特性，Scala 除外。但是，他指出了 Scala 的编译时间慢这一明显缺陷。<br>Kotlin 的既定目标之一是像 Java 一样快速编译。</p><p>2012年2月，JetBrains 以 Apache 2 许可证开源此项目。Jetbrains希望这个新语言能够推动IntelliJ IDEA的销售。</p><p>Kotlin v1.0 于 2016年2月15日 发布。这被认为是第一个官方稳定版本，并且 JetBrains 已准备从该版本开始的长期向后兼容性。</p><p><strong>官方及其中文网站</strong>：</p><p>Kotlin Programming Language:<br><a href="http://kotlinlang.org/" rel="external nofollow noopener noreferrer" target="_blank">http://kotlinlang.org/</a></p><p>Kotlin 语言中文站:<br><a href="https://www.kotlincn.net/" rel="external nofollow noopener noreferrer" target="_blank">https://www.kotlincn.net/</a></p><p>1、环境配置</p><p>Kotlin 是一种运行在 JVM 上的编程语言，所以和 Java 环境配置是一样的，这里就不多介绍了。</p><p>2、IntelliJ IDEA</p><p>Kotlin 是 JetBrains 推出的，我们就用大名鼎鼎的 IntelliJ IDEA 就好了。</p><p>3、Hello Kotlin !</p><p>我们在IDE 中新建项目，并写一个 HelloWorld 类：</p><p><img src="https://img.wshunli.com/Kotlin/kotlin-android/1.Hello.png" alt="Hello Kotlin"></p><p>和 Java 还是非常像的，学过 Java 的应该一下就能看懂。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kotlin 是用于现代多平台应用的静态编程语言，与 Java™ 和 Android™ 100% 可互操作。&lt;/p&gt;&lt;p&gt;2017 年 5 月，Google 年度 I/O 大会上，宣布把 Kotlin 作为 Android 开发的首选语言。&lt;/p&gt;&lt;p&gt;今年 2018 Go
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="https://www.wshunli.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季快手实习生面试</title>
    <link href="https://www.wshunli.com/posts/cfc1cac2.html"/>
    <id>https://www.wshunli.com/posts/cfc1cac2.html</id>
    <published>2018-05-28T05:06:00.000Z</published>
    <updated>2018-05-31T14:51:28.662Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（kuaishou）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（kuaishou）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春快手暑期实习生面试（客户端工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Logger使用及源码解析</title>
    <link href="https://www.wshunli.com/posts/ca2fa1f1.html"/>
    <id>https://www.wshunli.com/posts/ca2fa1f1.html</id>
    <published>2018-05-22T14:46:58.000Z</published>
    <updated>2018-05-31T14:51:28.654Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 开发过程中打印日志必不可少，Logger 就是一款优秀的 Android 开源日志库。</p><p>Logger 使用简单，输出日志美观高效，支持 JSON 、XML 格式输出，支持打印 Arrays 、Collections 等对象。</p><p>Logger 地址 ：<a href="https://github.com/orhanobut/logger" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/orhanobut/logger</a></p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>在项目中添加依赖：</p><pre><code class="Gradle">implementation &#39;com.orhanobut:logger:2.2.0&#39;</code></pre><p>快速开始：</p><pre><code class="Java">Logger.addLogAdapter(new AndroidLogAdapter());Logger.d(&quot;hello&quot;);</code></pre><p>这样就可以打印日志了。</p><p><img src="https://img.wshunli.com/Android/Logger/hello2.png" alt="hello"></p><p>当然不止打印这一种日志，和自带的函数类似：</p><pre><code class="Java">Logger.d(&quot;debug&quot;);Logger.e(&quot;error&quot;);Logger.w(&quot;warning&quot;);Logger.v(&quot;verbose&quot;);Logger.i(&quot;information&quot;);Logger.wtf(&quot;What a Terrible Failure&quot;);</code></pre><p>也支持格式化输出：</p><pre><code class="Java">Logger.d(&quot;hello %s&quot;, &quot;world&quot;);</code></pre><p>支持数字、集合对象的输出，注意只支持 Logger.d() 方法：</p><pre><code class="Java">Logger.d(MAP);Logger.d(SET);Logger.d(LIST);Logger.d(ARRAY);</code></pre><p>支持 JSON 和 XML 的输出：</p><pre><code class="Java">Logger.json(JSON_CONTENT);Logger.xml(XML_CONTENT);</code></pre><p>自定义 TAG ，仅本次日志打印有效：</p><pre><code class="Java">Logger.t(&quot;MainActivity&quot;).d(&quot;hello&quot;);</code></pre><p>支持把日志保存为文件：</p><pre><code class="Java">Logger.addLogAdapter(new DiskLogAdapter());Logger.d(&quot;hello&quot;);</code></pre><p>只需更改 LogAdapter 即可，其他使用相同。</p><pre><code class="Java">Logger.clearLogAdapters();</code></pre><p>清除 LogAdapter 方法。</p><h1 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h1><p>利用 PrettyFormatStrategy.newBuilder 还有更高级的设置，如：</p><pre><code class="Java">FormatStrategy formatStrategy = PrettyFormatStrategy.newBuilder()  .showThreadInfo(false)  // (Optional) Whether to show thread info or not. Default true  .methodCount(0)         // (Optional) How many method line to show. Default 2  .methodOffset(7)        // (Optional) Hides internal method calls up to offset. Default 5  .logStrategy(customLog) // (Optional) Changes the log strategy to print out. Default LogCat  .tag(&quot;My custom tag&quot;)   // (Optional) Global tag for every log. Default PRETTY_LOGGER  .build();Logger.addLogAdapter(new AndroidLogAdapter(formatStrategy));</code></pre><p>再者实现对打印日志的控制：</p><pre><code class="Java">Logger.addLogAdapter(new AndroidLogAdapter() {  @Override public boolean isLoggable(int priority, String tag) {    return BuildConfig.DEBUG;  }});</code></pre><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>先看官方对工作原理的介绍：</p><p><img src="https://img.wshunli.com/Android/Logger/how_it_works.png" alt="how_it_works"></p><p>Logger 打印日志整个流程非常明确：</p><p>Logger 负责整个对外的接口，LoggerPrinter 负责对不同日志的整合，LogAdapter 分别对 Logcat 和 Disk 的打印进行适配，FormatStrategy 负责打印输出的配置及美化，LogStrategy 负责最终的打印输出任务。</p><p>1、Logger.java 部分代码：</p><pre><code class="Java">private static Printer printer = new LoggerPrinter();public static Printer t(@Nullable String tag) {    return printer.t(tag);}</code></pre><p>这里只是提供了一系列的静态函数，包括前面对不同等级的日志的输出及 JSON、XML 的输出。</p><p>实际工作还是由 LoggerPrinter 来做。</p><p>还有就是对 LogAdapter 适配器的添加清除：</p><pre><code class="Java">public static void addLogAdapter(@NonNull LogAdapter adapter) {    printer.addAdapter(checkNotNull(adapter));}public static void clearLogAdapters() {    printer.clearLogAdapters();}</code></pre><p>2、LoggerPrinter 部分代码：</p><p>LoggerPrinter 实现 Printer 接口，负责不同日志的整合。</p><pre><code class="Java">@Override public void d(@NonNull String message, @Nullable Object... args) {    log(DEBUG, null, message, args);}@Override public void d(@Nullable Object object) {    log(DEBUG, null, Utils.toString(object));}@Override public void e(@Nullable Throwable throwable, @NonNull String message, @Nullable Object... args) {    log(ERROR, throwable, message, args);}@Override public void w(@NonNull String message, @Nullable Object... args) {    log(WARN, null, message, args);}  </code></pre><p>我们可以看到这些方法都是对 log() 方法的调用。</p><p>注意这里 d() 方法可以输出任意对象，还是对象转化为字符串输出。</p><p>我们接着看 log() 方法：</p><pre><code class="Java">private final ThreadLocal&lt;String&gt; localTag = new ThreadLocal&lt;&gt;();@Override public Printer t(String tag) {    if (tag != null) {        localTag.set(tag);    }    return this;}@Override public synchronized void log(int priority,                                         @Nullable String tag,                                         @Nullable String message,                                         @Nullable Throwable throwable) {    if (throwable != null &amp;&amp; message != null) {        message += &quot; : &quot; + Utils.getStackTraceString(throwable);    }    if (throwable != null &amp;&amp; message == null) {        message = Utils.getStackTraceString(throwable);    }    if (Utils.isEmpty(message)) {        message = &quot;Empty/NULL log message&quot;;    }    for (LogAdapter adapter : logAdapters) {        if (adapter.isLoggable(priority, tag)) {        adapter.log(priority, tag, message);        }    }}/*** This method is synchronized in order to avoid messy of logs&#39; order.*/private synchronized void log(int priority,                            @Nullable Throwable throwable,                            @NonNull String msg,                            @Nullable Object... args) {    checkNotNull(msg);    String tag = getTag();    String message = createMessage(msg, args);    log(priority, tag, message, throwable);}/*** @return the appropriate tag based on local or global*/@Nullable private String getTag() {String tag = localTag.get();    if (tag != null) {        localTag.remove();        return tag;    }    return null;}@NonNull private String createMessage(@NonNull String message, @Nullable Object... args) {    return args == null || args.length == 0 ? message : String.format(message, args);}</code></pre><p>我们可以看到这里是交由 LogAdapter 来实现打印：</p><pre><code class="Java">adapter.log(priority, tag, message);</code></pre><p>在调用之前添加了 tag ，对于一次性的 tag 是由 ThreadLocal 来存储的，避免线程的并发问题，并且在取出后将其置空。</p><p>3、LogAdapter 有两个实现</p><p>AndroidLogAdapter 与 DiskLogAdapter 分别对应 Logcat 输出与 Disk 保存。</p><p>4.1、AndroidLogAdapter 部分代码：</p><pre><code class="Java">public class AndroidLogAdapter implements LogAdapter {  @NonNull private final FormatStrategy formatStrategy;  public AndroidLogAdapter() {    this.formatStrategy = PrettyFormatStrategy.newBuilder().build();  }  public AndroidLogAdapter(@NonNull FormatStrategy formatStrategy) {    this.formatStrategy = checkNotNull(formatStrategy);  }  @Override public boolean isLoggable(int priority, @Nullable String tag) {    return true;  }  @Override public void log(int priority, @Nullable String tag, @NonNull String message) {    formatStrategy.log(priority, tag, message);  }}</code></pre><p>很明显只是对是否打印日志进行了控制，其他任务由 PrettyFormatStrategy 来做。</p><p>4.2、PrettyFormatStrategy 部分代码：</p><p>首先 PrettyFormatStrategy 使用 Builder 设计模式，从前面 AndroidLogAdapter 的构造函数中也可看出来。</p><pre><code class="Java">  public static class Builder {    int methodCount = 2;    int methodOffset = 0;    boolean showThreadInfo = true;    @Nullable LogStrategy logStrategy;    @Nullable String tag = &quot;PRETTY_LOGGER&quot;;    private Builder() {    }    @NonNull public Builder methodCount(int val) {      methodCount = val;      return this;    }    @NonNull public Builder methodOffset(int val) {      methodOffset = val;      return this;    }    @NonNull public Builder showThreadInfo(boolean val) {      showThreadInfo = val;      return this;    }    @NonNull public Builder logStrategy(@Nullable LogStrategy val) {      logStrategy = val;      return this;    }    @NonNull public Builder tag(@Nullable String tag) {      this.tag = tag;      return this;    }    @NonNull public PrettyFormatStrategy build() {      if (logStrategy == null) {        logStrategy = new LogcatLogStrategy();      }      return new PrettyFormatStrategy(this);    }  }</code></pre><p>这样就可以对打印的日志进行配置了，也就是前面进阶使用里面的内容。</p><p>下面来看具体打印的实现：</p><pre><code class="Java">  @Override public void log(int priority, @Nullable String onceOnlyTag, @NonNull String message) {    checkNotNull(message);    String tag = formatTag(onceOnlyTag);    logTopBorder(priority, tag);    logHeaderContent(priority, tag, methodCount);    //get bytes of message with system&#39;s default charset (which is UTF-8 for Android)    byte[] bytes = message.getBytes();    int length = bytes.length;    if (length &lt;= CHUNK_SIZE) {      if (methodCount &gt; 0) {        logDivider(priority, tag);      }      logContent(priority, tag, message);      logBottomBorder(priority, tag);      return;    }    if (methodCount &gt; 0) {      logDivider(priority, tag);    }    for (int i = 0; i &lt; length; i += CHUNK_SIZE) {      int count = Math.min(length - i, CHUNK_SIZE);      //create a new String with system&#39;s default charset (which is UTF-8 for Android)      logContent(priority, tag, new String(bytes, i, count));    }    logBottomBorder(priority, tag);  }  private void logTopBorder(int logType, @Nullable String tag) {    logChunk(logType, tag, TOP_BORDER);  }  @SuppressWarnings(&quot;StringBufferReplaceableByString&quot;)  private void logHeaderContent(int logType, @Nullable String tag, int methodCount) {    StackTraceElement[] trace = Thread.currentThread().getStackTrace();    if (showThreadInfo) {      logChunk(logType, tag, HORIZONTAL_LINE + &quot; Thread: &quot; + Thread.currentThread().getName());      logDivider(logType, tag);    }    String level = &quot;&quot;;    int stackOffset = getStackOffset(trace) + methodOffset;    //corresponding method count with the current stack may exceeds the stack trace. Trims the count    if (methodCount + stackOffset &gt; trace.length) {      methodCount = trace.length - stackOffset - 1;    }    for (int i = methodCount; i &gt; 0; i--) {      int stackIndex = i + stackOffset;      if (stackIndex &gt;= trace.length) {        continue;      }      StringBuilder builder = new StringBuilder();      builder.append(HORIZONTAL_LINE)          .append(&#39; &#39;)          .append(level)          .append(getSimpleClassName(trace[stackIndex].getClassName()))          .append(&quot;.&quot;)          .append(trace[stackIndex].getMethodName())          .append(&quot; &quot;)          .append(&quot; (&quot;)          .append(trace[stackIndex].getFileName())          .append(&quot;:&quot;)          .append(trace[stackIndex].getLineNumber())          .append(&quot;)&quot;);      level += &quot;   &quot;;      logChunk(logType, tag, builder.toString());    }  }  private void logBottomBorder(int logType, @Nullable String tag) {    logChunk(logType, tag, BOTTOM_BORDER);  }  private void logDivider(int logType, @Nullable String tag) {    logChunk(logType, tag, MIDDLE_BORDER);  }  private void logContent(int logType, @Nullable String tag, @NonNull String chunk) {    checkNotNull(chunk);    String[] lines = chunk.split(System.getProperty(&quot;line.separator&quot;));    for (String line : lines) {      logChunk(logType, tag, HORIZONTAL_LINE + &quot; &quot; + line);    }  }  private void logChunk(int priority, @Nullable String tag, @NonNull String chunk) {    checkNotNull(chunk);    logStrategy.log(priority, tag, chunk);  }</code></pre><p>这里就是对日志美化的核心了，但是最终每一行的输出还是不是在此，是由 LogcatLogStrategy 负责的。</p><p>4.3、LogcatLogStrategy 部分代码：</p><p>LogcatLogStrategy 负责打印每一行日志，当然已经美化过了。</p><pre><code class="Java">public class LogcatLogStrategy implements LogStrategy {  static final String DEFAULT_TAG = &quot;NO_TAG&quot;;  @Override public void log(int priority, @Nullable String tag, @NonNull String message) {    checkNotNull(message);    if (tag == null) {      tag = DEFAULT_TAG;    }    Log.println(priority, tag, message);  }}</code></pre><p>这里调用的是系统的 Log 方法逐行打印日志。</p><p>5.1、DiskLogAdapter 部分代码：</p><p>和 AndroidLogAdapter 类似，DiskLogAdapter 也只是负责控制是否打印日志，具体工作由 CsvFormatStrategy 实现。</p><pre><code class="Java">public class DiskLogAdapter implements LogAdapter {  @NonNull private final FormatStrategy formatStrategy;  public DiskLogAdapter() {    formatStrategy = CsvFormatStrategy.newBuilder().build();  }  public DiskLogAdapter(@NonNull FormatStrategy formatStrategy) {    this.formatStrategy = checkNotNull(formatStrategy);  }  @Override public boolean isLoggable(int priority, @Nullable String tag) {    return true;  }  @Override public void log(int priority, @Nullable String tag, @NonNull String message) {    formatStrategy.log(priority, tag, message);  }}</code></pre><p>5.2、CsvFormatStrategy 部分代码：</p><p>CsvFormatStrategy 处理后的日志要保存到文件，同样使用 Builder 设计模式：</p><p>我们来看下 build() 方法：</p><pre><code class="Java">@NonNull public CsvFormatStrategy build() {    if (date == null) {        date = new Date();    }    if (dateFormat == null) {        dateFormat = new SimpleDateFormat(&quot;yyyy.MM.dd HH:mm:ss.SSS&quot;, Locale.UK);    }    if (logStrategy == null) {        String diskPath = Environment.getExternalStorageDirectory().getAbsolutePath();        String folder = diskPath + File.separatorChar + &quot;logger&quot;;        HandlerThread ht = new HandlerThread(&quot;AndroidFileLogger.&quot; + folder);        ht.start();        Handler handler = new DiskLogStrategy.WriteHandler(ht.getLooper(), folder, MAX_BYTES);        logStrategy = new DiskLogStrategy(handler);    }    return new CsvFormatStrategy(this);}</code></pre><p>可以看到文件保存位置为 外置空间根目录 logger 文件夹下。</p><p>由 HandlerThread 启动了一个子线程，HandlerThread 实际上还是一个普通的 Thread，不过内部实现了 Looper 循环。</p><p>具体实现主要涉及字符串的拼接、格式的调整：</p><pre><code class="Java">  @Override public void log(int priority, @Nullable String onceOnlyTag, @NonNull String message) {    checkNotNull(message);    String tag = formatTag(onceOnlyTag);    date.setTime(System.currentTimeMillis());    StringBuilder builder = new StringBuilder();    // machine-readable date/time    builder.append(Long.toString(date.getTime()));    // human-readable date/time    builder.append(SEPARATOR);    builder.append(dateFormat.format(date));    // level    builder.append(SEPARATOR);    builder.append(Utils.logLevel(priority));    // tag    builder.append(SEPARATOR);    builder.append(tag);    // message    if (message.contains(NEW_LINE)) {      // a new line would break the CSV format, so we replace it here      message = message.replaceAll(NEW_LINE, NEW_LINE_REPLACEMENT);    }    builder.append(SEPARATOR);    builder.append(message);    // new line    builder.append(NEW_LINE);    logStrategy.log(priority, tag, builder.toString());  }  @Nullable private String formatTag(@Nullable String tag) {    if (!Utils.isEmpty(tag) &amp;&amp; !Utils.equals(this.tag, tag)) {      return this.tag + &quot;-&quot; + tag;    }    return this.tag;  }</code></pre><p>最终还是由 DiskLogStrategy 来负责打印输出日志。</p><p>5.3、DiskLogStrategy 部分代码：</p><p>这里使用了 Handler 实现线程间的通信：</p><pre><code class="Java">  @NonNull private final Handler handler;  public DiskLogStrategy(@NonNull Handler handler) {    this.handler = checkNotNull(handler);  }  @Override public void log(int level, @Nullable String tag, @NonNull String message) {    checkNotNull(message);    // do nothing on the calling thread, simply pass the tag/msg to the background thread    handler.sendMessage(handler.obtainMessage(level, message));  }</code></pre><p>每次有新的日志，调用 handler.sendMessage() 方法。</p><pre><code class="Java">@SuppressWarnings(&quot;checkstyle:emptyblock&quot;)@Override public void handleMessage(@NonNull Message msg) {    String content = (String) msg.obj;    FileWriter fileWriter = null;    File logFile = getLogFile(folder, &quot;logs&quot;);    try {    fileWriter = new FileWriter(logFile, true);    writeLog(fileWriter, content);    fileWriter.flush();    fileWriter.close();    } catch (IOException e) {    if (fileWriter != null) {        try {        fileWriter.flush();        fileWriter.close();        } catch (IOException e1) { /* fail silently */ }    }    }}</code></pre><p>最后 Handler 接收到消息，就把日志保存到文件中。</p><blockquote><p>Logger 源码分析就到这里了，作者代码写得很优雅，也非常感谢作者向开源社区贡献如此优秀的库。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Android 开发过程中打印日志必不可少，Logger 就是一款优秀的 Android 开源日志库。&lt;/p&gt;&lt;p&gt;Logger 使用简单，输出日志美观高效，支持 JSON 、XML 格式输出，支持打印 Arrays 、Collections 等对象。&lt;/p&gt;&lt;p&gt;Lo
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Logger" scheme="https://www.wshunli.com/tags/Logger/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Flutter开发环境与入门</title>
    <link href="https://www.wshunli.com/posts/a72058f7.html"/>
    <id>https://www.wshunli.com/posts/a72058f7.html</id>
    <published>2018-05-21T13:56:28.000Z</published>
    <updated>2018-05-31T14:51:28.654Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter 是 Google 的移动应用程序 SDK，用于在 iOS 和 Android 上构建高质量的原生界面。 Flutter 与现有的代码一起工作，被全世界的开发者和组织使用，并且是免费和开源的。</p><p>本文介绍在 Windows 环境下 Flutter 环境的搭建及入门。</p><p>1、获取 Flutter SDK</p><p>可以从下载页面获取 Flutter SDK： <a href="https://flutter.io/sdk-archive/#windows" rel="external nofollow noopener noreferrer" target="_blank">https://flutter.io/sdk-archive/#windows</a> .</p><p>将压缩包解压到合适位置，比如本文解压到 ：<code>D:\Android\flutter</code> .</p><p>然后双击文件夹下 <code>flutter_console.bat</code> 文件即可。</p><p>2、设置环境变量</p><p>将 <code>flutter\bin</code> 目录加到系统环境变量 Path 中。</p><p>如本文的目录就是：<code>D:\Android\flutter\bin</code> .</p><p>3、运行 flutter doctor</p><p>在命令行中运行 <code>flutter doctor</code> 可以检查 flutter 插件及依赖安装情况。</p><p>4、Android 环境</p><p>Android 环境安装配置就不多介绍了。</p><p>在 Android Studio 安装 Flutter 、Dart 两个插件就可以直接创建 Flutter 应用了。</p><p>创建过程也基本上和普通 Android 应用差别不大。</p><p>本文源代码：<a href="https://github.com/wshunli/flutter_demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/flutter_demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flutter 是 Google 的移动应用程序 SDK，用于在 iOS 和 Android 上构建高质量的原生界面。 Flutter 与现有的代码一起工作，被全世界的开发者和组织使用，并且是免费和开源的。&lt;/p&gt;&lt;p&gt;本文介绍在 Windows 环境下 Flutter 环
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Flutter" scheme="https://www.wshunli.com/tags/Flutter/"/>
    
      <category term="跨平台" scheme="https://www.wshunli.com/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>《设计模式之禅》读书笔记</title>
    <link href="https://www.wshunli.com/posts/ed1425c1.html"/>
    <id>https://www.wshunli.com/posts/ed1425c1.html</id>
    <published>2018-05-21T09:43:14.000Z</published>
    <updated>2018-05-31T14:51:28.658Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式也是比较欠缺的一方面，这次看的是 《设计模式之禅》 ，前面看了一点 《Head First 设计模式》感觉都是图片有点乱。</p><h1 id="第一部分-设计原则"><a href="#第一部分-设计原则" class="headerlink" title="第一部分 设计原则"></a>第一部分 设计原则</h1><p>单一职责原则：应该有且仅有一个原因引起类的变更，对于接口设计时要做到单一职责。</p><p>里氏替换原则：只要有父类出现的地方，替换为子类也不会产生任何问题或异常。<br>　　<br>依赖倒置原则：模块间的依赖关系是通过接口或抽象类产生的（面向接口编程）。</p><p>接口隔离原则：客户不应该依赖它不需要的接口；类间的依赖关系应建立在最小的接口上；尽量使用多个专门的接口。</p><p>迪米特法则：一个对象应对其他对象有最少的了解；只和直接朋友交流，朋友间也是有距离的；一个方法中尽量不引入类中不存在的对象；减少 public 方法和属性。</p><p>开闭原则：对扩展开放，对修改关闭；通过扩展来实现变化；不允许出现接口或抽象方法中不存在的 public 方法。</p><h1 id="第二部分-设计模式"><a href="#第二部分-设计模式" class="headerlink" title="第二部分 设计模式"></a>第二部分 设计模式</h1><p>设计模式根据目的可以分为三大类，分别是 <strong>创建型设计模式、行为型设计模式以及结构型设计模式</strong> 。</p><p><strong>创建型模式</strong> 涉及到将对象实例化，这类模式都提供一个方法，将客户从所需要实例化的对象中解藕。</p><p>单例模式(Singleton)<br>构建模式(Builder)<br>原型模式(Prototype)<br>抽象工厂模式(Abstract Factory)<br>工厂方法模式(Factory Method)</p><p><strong>行为型模式</strong> 涉及到类和对象如何交互及分配职责。</p><p>策略模式(Strategy)<br>状态模式(State)<br>责任链模式(Chain of Responsibility)<br>解释器模式(Interpreter)<br>命令模式(Command)<br>观察者模式(Observer)<br>备忘录模式(Memento)<br>迭代器模式(Iterator)<br>模板方法模式(Template Method)<br>访问者模式(Visitor)<br>中介者模式(Mediator)</p><p><strong>结构型模式</strong> 可以让你把类或对象组合到更大的结构中。</p><p>装饰者模式(Decorator)<br>代理模式(Proxy)<br>组合模式(Composite)<br>桥连接模式(Bridge)<br>适配器模式(Adapter)<br>蝇量模式(Flyweight)<br>外观模式(Facade)</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式（Singleton Pattern）确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p><p>单例模式的其他几种实现方式：</p><p>1、饿汉模式</p><pre><code class="Java">public class Singleton {    private static final Singleton instance = new Singleton();    private Singleton() {    }    public static Singleton getInstance() {        return instance;    }}</code></pre><p>2、懒汉模式：</p><pre><code class="Java">public class Singleton {    private static Singleton instance;    private Singleton() {    }    public static Singleton getInstance() {        if (instance == null) {            instance = new Singleton();        }        return instance;    }}</code></pre><p>3、懒汉模式、线程安全：</p><pre><code class="Java">public class Singleton {    private static Singleton instance;    private Singleton() {    }    public static synchronized Singleton getInstance() {        if (instance == null) {            instance = new Singleton();        }        return instance;    }}</code></pre><p>4、双检锁/双重校验锁（DCL，即 double-checked locking）</p><pre><code class="Java">public class Singleton {    private volatile static Singleton instance;    private Singleton() {    }    public static Singleton getInstance() {        if (instance == null) {            synchronized (Singleton.class) {                if (instance == null) {                    instance = new Singleton();                }            }        }        return instance;    }}</code></pre><p>单例模式 | 菜鸟教程：<br><a href="http://www.runoob.com/design-pattern/singleton-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/singleton-pattern.html</a></p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>工厂模式（Factory Pattern）定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设计模式也是比较欠缺的一方面，这次看的是 《设计模式之禅》 ，前面看了一点 《Head First 设计模式》感觉都是图片有点乱。&lt;/p&gt;&lt;h1 id=&quot;第一部分-设计原则&quot;&gt;&lt;a href=&quot;#第一部分-设计原则&quot; class=&quot;headerlink&quot; title=&quot;第一
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>中兴事件，比罚单更沉重的反思</title>
    <link href="https://www.wshunli.com/posts/8cba90ed.html"/>
    <id>https://www.wshunli.com/posts/8cba90ed.html</id>
    <published>2018-05-20T08:59:46.000Z</published>
    <updated>2018-05-31T14:51:28.658Z</updated>
    
    <content type="html"><![CDATA[<p>分享下《工程伦理》的 PPT ，不是最终的版本，后来又修改了。</p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片1.PNG" alt="幻灯片1"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片2.PNG" alt="幻灯片2"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片3.PNG" alt="幻灯片3"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片4.PNG" alt="幻灯片4"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片5.PNG" alt="幻灯片5"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片6.PNG" alt="幻灯片6"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片7.PNG" alt="幻灯片7"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片8.PNG" alt="幻灯片8"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片9.PNG" alt="幻灯片9"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片10.PNG" alt="幻灯片10"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片11.PNG" alt="幻灯片11"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片12.PNG" alt="幻灯片12"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片13.PNG" alt="幻灯片13"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分享下《工程伦理》的 PPT ，不是最终的版本，后来又修改了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.wshunli.com/胡思乱想/ZTE/幻灯片1.PNG&quot; alt=&quot;幻灯片1&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.wshunl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>唯代码与爱不可辜负</title>
    <link href="https://www.wshunli.com/posts/d51d2546.html"/>
    <id>https://www.wshunli.com/posts/d51d2546.html</id>
    <published>2018-05-20T05:14:00.000Z</published>
    <updated>2018-05-31T14:51:28.662Z</updated>
    
    <content type="html"><![CDATA[<p>唯代码与爱不可辜负</p><p>认真做技术，永远做极客</p><p>愿往后有房有车有姑娘 能吹能闹能干架 纵情豁达</p><p>愿今后能哭能笑能随性 敢爱敢恨敢追逐 干净明亮</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;唯代码与爱不可辜负&lt;/p&gt;&lt;p&gt;认真做技术，永远做极客&lt;/p&gt;&lt;p&gt;愿往后有房有车有姑娘 能吹能闹能干架 纵情豁达&lt;/p&gt;&lt;p&gt;愿今后能哭能笑能随性 敢爱敢恨敢追逐 干净明亮&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《深入理解Java虚拟机》读书笔记</title>
    <link href="https://www.wshunli.com/posts/7eb96b02.html"/>
    <id>https://www.wshunli.com/posts/7eb96b02.html</id>
    <published>2018-05-17T04:53:59.000Z</published>
    <updated>2018-05-31T14:51:28.658Z</updated>
    
    <content type="html"><![CDATA[<p>Java 虚拟机也是需要学习的一块内容 ，这次选择的书籍是 《深入理解Java虚拟机：JVM高级特性与最佳实践》。</p><p>Java 虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。 JVM 屏蔽了与具体操作系统平台相关的信息，使得 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p><blockquote align="center">第一部分 走进 Java</blockquote><h1 id="第一章-走进-Java"><a href="#第一章-走进-Java" class="headerlink" title="第一章 走进 Java"></a>第一章 走进 Java</h1><p>主要介绍了 Java 的历史、现在和未来的发展趋势。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Java技术体系.png" alt="Java技术体系"></p><p align="center">Java 技术体系</p><blockquote align="center">第二部分 自动内存管理机制</blockquote><h1 id="第二章-Java-内存区域与内存溢出异常"><a href="#第二章-Java-内存区域与内存溢出异常" class="headerlink" title="第二章 Java 内存区域与内存溢出异常"></a>第二章 Java 内存区域与内存溢出异常</h1><p>本章介绍 Java 虚拟机内存的各个区域的作用、服务对象及其可能出现的问题。</p><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Java虚拟机运行时数据区.png" alt="Java虚拟机运行时数据区"></p><p>1、程序计数器</p><p>当前线程所执行的字节码的行号指示器。</p><p>唯一一个没有规定任何 OOM 情况的区域。</p><p>2、Java 虚拟机栈</p><p>虚拟机栈描述的是 Java 方法执行的内存模型。</p><p>每个方法在执行的同时都会创建一个栈帧(Stack Frame)（指向堆的地址）用于存储局部变量表、操作数栈、动态连接、方法出口等信息<br>每个方法从调用直至执行完成的过程==&gt;一个栈帧在虚拟机栈中入栈到出栈的过程</p><p>3、本地方法栈</p><p>本地方法栈为虚拟机使用到的 Native 方法服务。</p><p>4、Java 堆</p><p>所有线程共享的一块内存区域，在虚拟机启动时创建，用于存放对象实例。</p><p>5、方法区</p><p>各线程共享内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p><strong>运行时常量池</strong>：</p><p>运行时常量池是方法区的一部分。</p><p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池(Constant Pool Table)，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><p><strong>直接内存</strong>：</p><p>不是虚拟机运行时数据区的一部分，也与 Java 虚拟机规范中定义的内存区域无关。</p><p>基于通道(Channel)与缓冲区(Buffer)的I/O方式。</p><p>它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。<br>这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</p><p>Java虚拟机运行时数据区-学习记录-51CTO博客：<br><a href="http://blog.51cto.com/turnsole/2057198" rel="external nofollow noopener noreferrer" target="_blank">http://blog.51cto.com/turnsole/2057198</a></p><h2 id="HotSpot-虚拟机对象"><a href="#HotSpot-虚拟机对象" class="headerlink" title="HotSpot 虚拟机对象"></a>HotSpot 虚拟机对象</h2><p>本节主要介绍了对象的创建、内存布局及访问定位的问题。</p><h2 id="OutOfMemoryError-异常"><a href="#OutOfMemoryError-异常" class="headerlink" title="OutOfMemoryError 异常"></a>OutOfMemoryError 异常</h2><p>在 Java 虚拟机规范的描述中，除程序计数器外，虚拟机内存的其他几个运行区域都有可能发生 OOM 异常。</p><h1 id="第三章-垃圾收集器与内存分配策略"><a href="#第三章-垃圾收集器与内存分配策略" class="headerlink" title="第三章 垃圾收集器与内存分配策略"></a>第三章 垃圾收集器与内存分配策略</h1><p>前面介绍了 Java 内存运行时各区域，其中程序计数器、虚拟机栈、本地方法栈随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊得执行者出栈和入栈操作。而每个栈帧分配的内存基本确定，内存的分配和回收也就确定了，方法结束或者线程结束后，内存自然就跟着回收了。</p><p>而 <strong>Java 堆和方法区</strong> 不一样，这部分的内训分配和回收都是动态的，所以垃圾收集器主要关注的指这部分内容。</p><h2 id="对象是否存活"><a href="#对象是否存活" class="headerlink" title="对象是否存活"></a>对象是否存活</h2><p>垃圾收集器在对堆进行回收前，应该确定对象是否存活。</p><p>（1）引用计数法</p><p>给对象中添加一个引用计数器，每当一个地方引用它时，计数器值就加 1，当引用失效时，计数器值就减 1；任何时刻计数器为 0 的对象就是不可能再被使用的。</p><p>引用计数法很难解决对象之间的相互循环引用问题。</p><pre><code class="Java">ReferenceCountingGC objA = new ReferenceCountingGC();ReferenceCountingGC objB = new ReferenceCountingGC();objA.instance = objB;objB.instance = objA;objA = null;objB = null;// 假设在这行发生GC，objA和objB是否能被回收？System.gc();</code></pre><p>上述代码，当方法运行完成后，对象就不能再被访问，可是 objA &lt;&gt; objB 循环引用着。</p><p>而 Java 垃圾收集器会回收内存，所以 Java 虚拟机不是通过引用计数器来判断对象是否存活的。</p><p>（2）可达性分析算法</p><p>通过一系列的称为 “GC Roots” 的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到 GC Roots 没有任何引用链相连（用图论的话来说，就是从 GC Roots 到这个对象不可达）时，则证明此对象是不可用的。</p><p>在 Java 语言中，可作为 GC Roots 的对象包括下面几种：</p><p>1、虚拟机栈（栈帧中的本地变量表）中引用的对象。<br>2、方法区中类静态属性引用的对象。<br>3、方法区中常量引用的对象。<br>4、本地方法栈中JNI（即一般说的Native方法）引用的对象。</p><p>（3）对象引用</p><p>Java 对象引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）4中，这 4 中引用强度异常逐渐减弱。</p><p>1、强引用就是指在程序代码之中普遍存在的，类似 <code>Object obj = new Object()</code> 这类的引用，只要强引用还存在，来及收集器永远不会回收掉被引用的对象。</p><p>2、软引用是用来描述一些还在用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。在 JDK1.2 之后，提供了 SoftReference 类来实现软引用。</p><p>3、弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论是当前内存是否足够，都会回收掉只被若引用关联的对象。在 JDK1.2 之后，提供了 WeakReference 类来实现弱引用。</p><p>4、虚引用也成为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间过长影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知，在 JDK1.2 之后，提供了 PhantomReference 类来实现虚引用。</p><p>（4）对象的回收的两次标记过程</p><p>在可达性分析算法中不可达的对象被回收，要警告过两次标记过程：</p><p>1、第一次标记的同时会进行一次筛选，筛选此对象是否有必要执行 finalize() 方法。</p><p>当对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p><p>2、如果有必要执行 finalize() 方法，此对象会放到 F-Queue 队列中，稍后由一个由虚拟机自动建立的、低优先级的 Finalizer 线程去执行它。</p><p>对象只要在 finalize() 方法中重新与引用链上的任何一个对象建立关联即可避免被回收。</p><pre><code class="java">/** * 此代码演示了两点：  * 1.对象可以在被GC时自我拯救。  * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次 */public class FinalizeEscapeGC {    public static FinalizeEscapeGC SAVE_HOOK = null;    public void isAlive() {        System.out.println(&quot;yes, i am still alive :)&quot;);    }    @Override    protected void finalize() throws Throwable {        super.finalize();        System.out.println(&quot;finalize mehtod executed!&quot;);        FinalizeEscapeGC.SAVE_HOOK = this;    }    public static void main(String[] args) throws Throwable {        SAVE_HOOK = new FinalizeEscapeGC();        //对象第一次成功拯救自己        SAVE_HOOK = null;        System.gc();        // 因为Finalizer方法优先级很低，暂停0.5秒，以等待它        Thread.sleep(500);        if (SAVE_HOOK != null) {            SAVE_HOOK.isAlive();        } else {            System.out.println(&quot;no, i am dead :(&quot;);        }        // 下面这段代码与上面的完全相同，但是这次自救却失败了        SAVE_HOOK = null;        System.gc();        // 因为Finalizer方法优先级很低，暂停0.5秒，以等待它        Thread.sleep(500);        if (SAVE_HOOK != null) {            SAVE_HOOK.isAlive();        } else {            System.out.println(&quot;no, i am dead :(&quot;);        }    }}</code></pre><p>注意，finalize() 方法只会被系统自动调用一次。</p><p>（5）回收方法区</p><p>方法区垃圾收集主要回收两部分：废弃常量和无用的类。</p><p>对于常量，没有任何对象引用常量池中的常量，虚拟机就可以把常量清出常量池。</p><p>对于类，同时满足以下三个条件才能算是 “无用的类”：</p><p>1、该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。<br>2、加载该类的 ClassLoader 已经被回收。<br>3、该类对应的 java.lang.Class 对象没有在任何地方被引用，无法再任何地方通过反射访问该类的方法。</p><p>虚拟机 <strong>可以</strong> 对满足上述3个条件的无用类进行回收。</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>（1）标记 — 清除算法（Mark-Sweep）</p><p>首先标记处所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集算法1.png" alt="垃圾收集算法1"></p><p>它的主要不足有两个：<br>1、效率问题，标记和清除两个过程的效率都不高；<br>2、标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序中运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p><p>（2）复制算法（Copying）</p><p>将可用内存按容量划分为大小相等的两块，每次只是用其中的一块，当这一块的内存用完了，就将存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集算法2.png" alt="垃圾收集算法2"></p><p>现在的商业虚拟机都采用这种收集算法来回收 <strong>新生代</strong> ，新生代的对象98%是“朝生夕死”的，所以并不需要按照 1:1 比例来划分内存空间。</p><p>（3）标记 — 整理算法（Mark-Compact）</p><p>“标记-整理”算法，标记过程任然与“标记-清理”算法一样，但后续步骤不是直接可对回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集算法3.png" alt="垃圾收集算法3"></p><p>（4）分代收集算法（Generational Collection）</p><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法，一般是 Java 堆分成新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p><p>在新生代中，每次垃圾收集时都发现有大批量的对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成手机。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或者“标记-整理”算法来进行回收。</p><p>Java虚拟机内存分配策略 | hua的博客：<br><a href="http://www.zhangrenhua.com/2016/11/09/Java虚拟机内存分配策略/" rel="external nofollow noopener noreferrer" target="_blank">http://www.zhangrenhua.com/2016/11/09/Java虚拟机内存分配策略/</a></p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>垃圾收集器就是内存回收的具体实现。新生代的垃圾回收器包括 Serial、ParNew、Parallel Scavenge，老年代的垃圾回收器包括 CMS、Serial Old、Parallel Old。其中新生代的三种垃圾回收器都采用了复制算法。</p><center><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器.png" alt="垃圾收集器"></center><p>1、Serial 收集器</p><p>Serial 收集器是一个单线程收集器，这个“单线程”不只是说它只会使用一个 CPU 或者一条线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它垃圾收集结束。它对于运行在 client 模式下的虚拟机来说是一个不错的选择。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器1.png" alt="垃圾收集器1"></p><p>2、ParNew 收集器</p><p>ParNew 收集器其实就是 Serial 收集器的多线程版本，由于除了 Serial 收集器外，只有它能够与 CMS 收集器配合工作，因此，在运行在 Server 模式下的虚拟机中，ParNew 收集器是首选的新生代收集器。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器2.png" alt="垃圾收集器2"></p><p>3、Parallel Scavenge 收集器</p><p>Parallel Scavenge 收集器也是一个并行的新生代垃圾收集器，不同于其他收集器（以尽可能缩短垃圾收集时用户线程的停顿时间为目的），它是唯一一个以达到一个可控制的吞吐量为目标的垃圾收集器。</p><p>吞吐量 = 运行用户代码的时间 / 总时间（垃圾收集时间＋运行用户代码的时间）。</p><p>在后台运算的任务中，不需要太多的交互，保证运行的高吞吐量可以高效地利用CPU时间，尽快完成程序的运算任务。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器3.png" alt="垃圾收集器3"></p><p>4、Serial Old 收集器</p><p>Serial Old 收集器是 Serial 收集器的老年代版本，同样是单线程的收集器，使用标记–整理算法对老年代垃圾进行回收。</p><p>它主要的两大用途：1. 配合 Parallel Scavenge 收集器；2. 作为 CMS 收集器在并发收集出现 Concurrent Mode Failure 时使用的后备预案。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器4.png" alt="垃圾收集器4"></p><p>5、Parallel Old 收集器</p><p>Parallel Old 收集器是 Parallel Scavenge 收集器的老年代版本，使用多线程和标记整理算法。</p><p>在注重吞吐量和 CPU 资源敏感的场合，优先考虑使用 Parallel Scavenge + Parallel Old 收集器的组合，切记 Parallel Scavenge 是无法与 CMS 收集器组合使用的。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器5.png" alt="垃圾收集器5"></p><p>6、Concurrent Mark Sweep 收集器</p><p>CMS 收集器是一款并发收集器，是一种以获取最短回收停顿时间为目标的收集器，它是基于标记–清除算法实现的。</p><p>它整个过程包含四个有效的步骤：</p><p>1) 初始标记（CMS initial mark）<br>2) 并发标记（CMS concurrent mark）<br>3) 重新标记（CMS remark）<br>4) 并发清除（CMS concurrent sweep）</p><p>CMS的主要优点是并发收集、低停顿，也称之为并发收集低停顿收集器（Concurrent Low Pause Collector）。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器6.png" alt="垃圾收集器6"></p><p>7、 G1 收集器</p><p>G1 基于“标记–整理”算法实现，不会产生空间碎片，对于长时间运行的应用系统来说非常重要；另外它可以非常精准地控制停顿，既能让使用者指定一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p><p>G1 收集器可以实现在基本不牺牲吞吐的前提下完成低停顿的内存回收，这是由于它能够避免全区域的垃圾回收，而 G1 将 Java 堆（包括新生代、老生代）划分成多个大小固定的独立区域，并且跟踪这些区域里面的垃圾堆积程度，在后台维护一个优先列表，每次根据允许的收集时间，优先回收垃圾最多的区域（这就是Garbage First名称的由来）。</p><p>JVM（二）垃圾收集算法与收集器 – charles：<br><a href="http://alicharles.com/article/jvm-gc/" rel="external nofollow noopener noreferrer" target="_blank">http://alicharles.com/article/jvm-gc/</a></p><h2 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h2><p>Java 技术体系中所提倡的自动内存管理最终可归结为自动化解决两个问题：给对象分配内存以及回收分配给对象的内存。</p><p>1、对象优先分配在 Eden 区</p><p>大多数情况下，对象首先会被分配到新生代 Eden 区，当 Eden 区满了，会触发一次 Minor GC 。</p><p>2、大对象直接进入老年区</p><p>所谓的大对象是指，需要大量连续内存空间的 Java 对象，最典型的大对象就是那种很长的字符串以及数组（笔者列出的例子中的 byte[] 数组就是典型的大对象）。</p><p>虚拟机提供了一个 -XX：PretenureSizeThreshold 参数，令大于这个设置值的对象直接在老年代分配。这样做的目的是避免在 Eden 区及两个 Survivor 区之间发生大量的内存复制（新生代采用复制算法收集内存）。</p><p>3、长期存活的对象进入老年区</p><p>对象在 Survivor 区中每“熬过”一次 Minor GC ，年龄就增加 1 岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。</p><p>对象晋升老年代的年龄阈值，可以通过参数 -XX：MaxTenuringThreshold 设置。</p><p>4、动态对象年龄的判断</p><p>虚拟机并不是永远地要求对象的年龄必须达到了 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到 MaxTenuringThreshold 中要求的年龄。</p><p>5、空间分配担保</p><p>在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么 Minor GC 可以确保是安全的。</p><p>如果不成立，则虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败。</p><p>如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC ，尽管这次 Minor GC 是有风险的，如果担保失败则会进行一次 Full GC ；如果小于，或者 HandlePromotionFailure 设置不允许冒险，那这时也要改为进行一次 Full GC 。</p><p>读《深入理解Java虚拟机》 - 轩宇一页 - 博客园：<br><a href="http://www.cnblogs.com/zhouxuanyu/p/6942417.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/zhouxuanyu/p/6942417.html</a></p><p>本章介绍了垃圾收集的算法、垃圾收集器的特点及运作原理、Java 虚拟机中的自动内存分配与回收机制。</p><h1 id="第四章-虚拟机性能监控与故障处理工具"><a href="#第四章-虚拟机性能监控与故障处理工具" class="headerlink" title="第四章 虚拟机性能监控与故障处理工具"></a>第四章 虚拟机性能监控与故障处理工具</h1><p>本章介绍了一些命令行及可视化的故障处理工具。</p><h1 id="第五章-调优案例分析与实战"><a href="#第五章-调优案例分析与实战" class="headerlink" title="第五章 调优案例分析与实战"></a>第五章 调优案例分析与实战</h1><p>本章介绍了一些案例及调优方法。</p><blockquote align="center">第三部分 虚拟机执行子系统</blockquote><h1 id="第六章-类文件结构"><a href="#第六章-类文件结构" class="headerlink" title="第六章 类文件结构"></a>第六章 类文件结构</h1><p>Sun 公司及其他虚拟机提供商发布了许多可以运行在各种不同平台上的虚拟机，这些虚拟机都可以载入和执行同一种平台无关的字节码，从而实现“一次编写，到处运行”。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/语言无关性2.png" alt="语言无关性"></p><p>Java Class文件结构如下图所示:</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Class文件结构.png" alt="Class文件结构"></p><p>对于以下 Java 源文件代码:</p><pre><code class="Java">public class Main {    public static void main(String[] args) {        System.out.println(&quot;Hello World!&quot;);    }}</code></pre><p>生成的类文件字节码为:</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Java字节码.png" alt="Java字节码"></p><p>JVM（四）类文件结构解析 – charles:<br><a href="http://alicharles.com/article/jvm-class/" rel="external nofollow noopener noreferrer" target="_blank">http://alicharles.com/article/jvm-class/</a></p><h1 id="第七章-虚拟机类加载机制"><a href="#第七章-虚拟机类加载机制" class="headerlink" title="第七章 虚拟机类加载机制"></a>第七章 虚拟机类加载机制</h1><p>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 java 类型，这就是虚拟机的类加载机制。</p><h2 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h2><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括以下7个阶段：加载，验证，准备，解析，初始化，使用，卸载。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/类的生命周期2.png" alt="类的生命周期"></p><p>其中加载，验证，准备，初始化，卸载这5个阶段的顺序是确定。而解析阶段则不一定，它在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的运行时绑定（也称为动态绑定或晚期绑定）。</p><h2 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h2><p>类加载的过程也就是类加载机制，分为 加载，验证，准备，解析，初始化 这 5 个阶段。</p><p>1、加载</p><p>“加载”是“类加载”过程中的一个阶段。在加载阶段，虚拟机会做 3 件事：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</li></ul><p>2、验证</p><p>验证是连接阶段的第一步。目的是确保 Class 文件的字节流中包含的信息不会危害到虚拟机自身的安全。</p><p>包含：文件格式验证，元数据验证，字节码验证，符号引用验证。</p><p>3、准备</p><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。</p><p>其中初始值“通常情况下”是数据类型的零值。</p><p>4、解析</p><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。符号引用和直接引用的关联如下：</p><p>符号引用（Symbol References）： 符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须一致，因为符号引用的字面量形式明确定义在Java虚拟机规范的 Class 文件格式中。</p><p>直接引用（Direct References）： 直接引用可以是直接目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局有关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那么引用的目标必定已经在内存中存在。</p><p>5、初始化</p><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由 JVM 主导。到了初始阶段，才开始真正执行类中定义的 Java 程序代码。</p><p>在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源，简单说，初始化阶段即虚拟机执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程。</p><p>下面来详细讲解<code>&lt;clinit&gt;()</code>方法是怎么生成的，首先来了解此方法执行过程中可能会影响到程序运行行为的特点和细节：</p><p>1) <code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中所有类变量的赋值动作和静态语句块（ <code>static{}</code> 块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定，特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：</p><pre><code class="Java">public class Test {    static {        i = 0;  // 给变量复制可以正常编译通过        System.out.print(i);  // 这句编译器会提示“非法向前引用”      }    static int i = 1;}</code></pre><p>2) <code>&lt;clinit&gt;()</code>方法与类的构造函数（或者说实例构造器 <code>&lt;init&gt;()</code> 方法）不同，不需要显式的调用父类的()方法。虚拟机会自动保证在子类的<code>&lt;clinit&gt;()</code>方法运行之前，父类的<code>&lt;clinit&gt;()</code>方法已经执行结束。因此虚拟机中第一个执行<code>&lt;clinit&gt;()</code>方法的类肯定为java.lang.Object。</p><p>3) 由于父类的<code>&lt;clinit&gt;()</code>方法先执行，也就意味着父类中定义的静态语句块要优于子类的变量赋值操作。例如以下代码：</p><pre><code class="Java">static class Parent {        public static int A = 1;        static {            A = 2;        }}static class Sub extends Parent {        public static int B = A;}public static void main(String[] args) {        System.out.println(Sub.B);//输出结果是父类中的静态变量值A，也就是2}</code></pre><p>4) <code>&lt;clinit&gt;()</code>方法对于类或接口不是必须的，如果一个类中不包含静态语句块，也没有对类变量的赋值操作，编译器可以不为该类生成<code>&lt;clinit&gt;()</code>方法。<br>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成<code>&lt;clinit&gt;()</code>方法。但接口与类不同的是，执行接口的</p><p>5) <code>&lt;clinit&gt;()</code>方法不需要先执行父接口的<code>&lt;clinit&gt;()</code>方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;()</code>方法。</p><p>6) 虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的<code>&lt;clinit&gt;()</code>方法，其它线程都会阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。如果在一个类的<code>&lt;clinit&gt;()</code>方法中有耗时的操作，就可能造成多个进程阻塞，在实际过程中此种阻塞很隐蔽。</p><p>深入理解JVM(5)——虚拟机类加载机制 - 王泽远的博客 | Crow’s Blog :<br><a href="https://crowhawk.github.io/2017/08/21/jvm_5/" rel="external nofollow noopener noreferrer" target="_blank">https://crowhawk.github.io/2017/08/21/jvm_5/</a></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器负责，通过一个类的全限定类名来获取描述此类的二进制字节流。</p><p>对于任意一个类，都需要由他的类加载器和这个类本身共同确立其在 Java 虚拟机中的唯一性。</p><pre><code class="Java">package com.wshunli.jvm.demo;import java.io.IOException;import java.io.InputStream;public class ClassLoaderTest {    public static void main(String[] args) throws Exception {        ClassLoader myLoader = new ClassLoader() {            @Override            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException {                try {                    String fileName = name.substring(name.lastIndexOf(&quot;.&quot;) + 1) + &quot;.class&quot;;                    InputStream is = getClass().getResourceAsStream(fileName);                    if (is == null) {                        return super.loadClass(name);                    }                    byte[] b = new byte[is.available()];                    is.read(b);                    return defineClass(name, b, 0, b.length);                } catch (IOException e) {                    throw new ClassNotFoundException(name);                }            }        };        Object obj = myLoader.loadClass(&quot;com.wshunli.jvm.demo.ClassLoaderTest&quot;).newInstance();        System.out.println(obj.getClass());        System.out.println(obj instanceof com.wshunli.jvm.demo.ClassLoaderTest);    }}/* * class com.wshunli.jvm.demo.ClassLoaderTest * false */</code></pre><p>每一个类加载器，都拥有一个独立的类名称空间。简言之，比较两个类是否“相等”只有在这两个类是由同一个类加载器加载的前提下才有意义。</p><p>（1）双亲委派模型</p><p>从 Java 虚拟机的角度来讲，只存在两种不同的类加载器：</p><p>一种是启动类加载器（Bootstrap ClassLoader），这个类加载器使用 C++ 语言实现，是虚拟机自身的一部分；<br>另一种就是所有其他的类加载器，这些类加载器都由 Java 语言实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。</p><p>从Java开发人员的角度来看，有三种类加载器：</p><p><strong>启动类加载器</strong> (Bootstrap ClassLoader)：负责加载<code>&lt;JAVA_HOME&gt;\lib</code>目录或者由参数 -Xbootclasspath 指定路径中并且是虚拟机识别的类库加载到虚拟机内存中。</p><p><strong>扩展类加载器</strong> (Extension ClassLoader)：负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中或者被 java.ext.dirs 系统变量指定路径中所有的类库。</p><p><strong>应用程序加载器</strong> (Application ClassLoader)：负责加载由 CLASSPATH 指定的类库，如果程序没有自定义类加载器，程序默认使用该加载器。</p><p>类加载器的双亲委派模型：</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/类加载器2.png" alt="类加载器"></p><p><strong>双亲委派模型的工作过程是</strong>：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p><p>实现双亲委派的代码都集中在 java.lang.ClassLoader 的 loadClass() 方法之中，实现如下：</p><pre><code class="Java">protected Class&lt;?&gt; loadClass(String name, boolean resolve)        throws ClassNotFoundException    {        synchronized (getClassLoadingLock(name)) {            // First, check if the class has already been loaded            Class&lt;?&gt; c = findLoadedClass(name);            if (c == null) {                long t0 = System.nanoTime();                try {                    if (parent != null) {                        c = parent.loadClass(name, false);                    } else {                        c = findBootstrapClassOrNull(name);                    }                } catch (ClassNotFoundException e) {                    // ClassNotFoundException thrown if class not found                    // from the non-null parent class loader                }                if (c == null) {                    // If still not found, then invoke findClass in order                    // to find the class.                    long t1 = System.nanoTime();                    c = findClass(name);                    // this is the defining class loader; record the stats                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);                    sun.misc.PerfCounter.getFindClasses().increment();                }            }            if (resolve) {                resolveClass(c);            }            return c;        }    }</code></pre><p><strong>双亲委派模型的实现逻辑</strong>：先检查是否已经被加载过，若没有加载则调用父加载器的loadClass() 方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，抛出 ClassNotFoundException 异常后，再调用自己的findClass() 方法进行加载。</p><h1 id="第八章-虚拟机字节码执行引擎"><a href="#第八章-虚拟机字节码执行引擎" class="headerlink" title="第八章 虚拟机字节码执行引擎"></a>第八章 虚拟机字节码执行引擎</h1><p>本章从虚拟机字节码执行引擎的概念模型角度来介绍虚拟机方法调用和字节码执行。</p><h2 id="运行时帧栈结构"><a href="#运行时帧栈结构" class="headerlink" title="运行时帧栈结构"></a>运行时帧栈结构</h2><p>栈帧是用于支持虚拟机进行方法调用和方法执行的数据结构。</p><p>栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。</p><p>每一个方法从调用开始到执行完成的过程都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/运行时栈帧结构.png" alt="运行时栈帧结构"></p><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>方法调用并不等同于方法执行，方法调用阶段唯一的任务就是确定被调用方法的版本(即调用哪一个方法)，暂时还不涉及方法内部的具体运行过程。</p><p>按照调用方式共分为两类：</p><p><strong>解析调用</strong> 是静态的过程，在编译期间就完全确定目标方法。</p><p><strong>分派调用</strong> 即可能是静态，也可能是动态的，根据分派标准可以分为单分派和多分派。两两组合有形成了静态单分派、静态多分派、动态单分派、动态多分派。</p><p>（1）解析</p><p>所有方法调用中的目标方法在 Class 文件里面都是一个常量池中的符号引用，在类加载的解析阶段，会将其中的一部分符号引用转化为直接引用。</p><p>（2）分派</p><p>1、静态分派</p><p>所有依赖静态类型3来定位方法执行版本的分派成为静态分派，发生在编译阶段，典型应用是方法重载。</p><p>2、动态分派</p><p>在运行期间根据实际类型4来确定方法执行版本的分派成为动态分派，发生在程序运行期间，典型的应用是方法的重写。</p><h2 id="基于栈的字节码解释执行引擎"><a href="#基于栈的字节码解释执行引擎" class="headerlink" title="基于栈的字节码解释执行引擎"></a>基于栈的字节码解释执行引擎</h2><p>Java 编译器输入的指令流基本上是一种基于栈的指令集架构，指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。</p><p>另外一种指令集架构则是基于寄存器的指令集架构，典型的应用是 x86 的二进制指令集，比如传统的 PC 以及 Android 的 Davlik 虚拟机。</p><p>两者之间最直接的区别是：<br>基于栈的指令集架构不需要硬件的支持，而基于寄存器的指令集架构则完全依赖硬件，<br>这意味基于寄存器的指令集架构执行效率更高，单可移植性差，而基于栈的指令集架构的移植性更高，但执行效率相对较慢，除此之外，相同的操作，基于栈的指令集往往需要更多的指令。</p><h1 id="第九章-类加载级执行子系统的案例及实战"><a href="#第九章-类加载级执行子系统的案例及实战" class="headerlink" title="第九章 类加载级执行子系统的案例及实战"></a>第九章 类加载级执行子系统的案例及实战</h1><p>本章主要介绍了类加载器和字节码的案例。</p><blockquote align="center">第四部分 程序编译与代码优化</blockquote><h1 id="第十章-早期（编译器）优化"><a href="#第十章-早期（编译器）优化" class="headerlink" title="第十章 早期（编译器）优化"></a>第十章 早期（编译器）优化</h1><h1 id="第十一章-晚期（运行器）优化"><a href="#第十一章-晚期（运行器）优化" class="headerlink" title="第十一章 晚期（运行器）优化"></a>第十一章 晚期（运行器）优化</h1><p>第四部分主要介绍了 Java 源程序从源代码编译成字节码和从字节码编译成本地机器码的过程，从 javac 字节码编译器到虚拟机内的 JIT 编译器执行过程合并起来其实就等同于一个传统编译器所执行的编译工程。</p><blockquote align="center">第五部分 高效并发</blockquote><h1 id="Java-内存模型与线程"><a href="#Java-内存模型与线程" class="headerlink" title="Java 内存模型与线程"></a>Java 内存模型与线程</h1><p>Java 虚拟机规范试图定义一种内存模型 （Java Memory Model，JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，实现 Java 程序在各种平台下都能达到一致的内存访问效果。</p><h2 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h2><p>Java 内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样底层细节。</p><p>此处的变量与 Java 编程时所说的变量不一样，指包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，后者是线程私有的，不会被共享。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/jvm_memory_thread2.png" alt="Java内存模型"></p><p>Java 内存模型中规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存（可以与前面将的处理器的高速缓存类比），线程的工作内存中保存了该线程使用到的变量到主内存副本拷贝，线程对变量的所有操作（读取、赋值）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程之间无法直接访问对方工作内存中的变量，线程间变量值的传递均需要在主内存来完成，线程、主内存和工作内存的交互关系如图所示。</p><p>(1) 内存间交互操作</p><p>一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，JMM 定义了一下八种操作来完成：</p><ul><li>lock（锁定）：作用域主内存的变量，它把一个变量标识为一条线程独占的状态。</li><li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存变量，它变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。</li></ul><p>如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行 read 和 load 操作，如果把变量从工作内存中同步回主内存中，就要按顺序地执行 store 和 write 操作。Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。也就是 read 和 load 之间，store 和 write 之间是可以插入其他指令的，如对主内存中的变量 a、b 进行访问时，可能的顺序是 read a，read b，load b， load a。</p><p>Java 内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：</p><ul><li>不允许 read 和 load、store 和 write 操作之一单独出现，如不允许从主内存读取了但工作内存不接受</li><li>不允许一个线程丢弃它的最近 assign 的操作，即变量在工作内存中改变了之后必须同步到主内存中。</li><li>不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施 use 和 store 操作之前，必须先执行过了 assign 和 load 操作。</li><li>一个变量在同一时刻只允许一条线程对其进行 lock 操作，lock 和 unlock 必须成对出现。</li><li>如果对一个变量执行 lock 操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行 load 或 assign 操作初始化变量的值</li><li>如果一个变量事先没有被 lock 操作锁定，则不允许对它执行 unlock 操作；也不允许去 unlock 一个被其他线程锁定的变量。</li><li>对一个变量执行 unlock 操作之前，必须先把此变量同步到主内存中（执行 store 和 write 操作）。</li></ul><p>深入理解JVM之高效并发 - 倔强的荔枝：<br><a href="http://wanglizhi.github.io/2016/07/16/JVM-JMM-And-Thread/" rel="external nofollow noopener noreferrer" target="_blank">http://wanglizhi.github.io/2016/07/16/JVM-JMM-And-Thread/</a></p><p>(2) 对于volatile型变量的特殊规则</p><p>使用 volatile 变量可以保证线程之间的可见性，再者禁止指令重排序优化。</p><p>由于 volatile 变量只能保证可见性，在 <strong>不符合</strong> 以下两条规则的运算场景中，我们仍然要通过加锁来保证原子性。</p><ul><li>运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值</li><li>变量不需要与其他状态变量共同参与不变约束</li></ul><p>(3) 对于long和double型变量的特殊规则</p><p>JVM 规范允许虚拟机将没有被 volatile 修饰的 64 位数据的读写操作划分为两次 32 位的操作来进行。</p><p>但是各种虚拟机实现几乎把 64 位数据的读写作为原子操作来对待。</p><p>(4) 原子性、可见性和有序性</p><p>原子性（Atomicity）：大致认为基本数据类型的访问读写是具备原子性的。JMM 提供 lock 和 unlock 保证原子性，对应代码中的 synchronized 关键字。</p><p>可见性（Visibility）：当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。volatile 保证新值能立即同步到主内存，以及每次使用前立即从主内存刷新。除了volatile外，synchronized 和 final 两个关键字也能实现可见性，其中同步块是有 lock 和 unloc k机制决定的，而 final 关键字一旦初始化完成，其他线程就能看见 final 字段的值。</p><p>有序性（Ordering）：如果在本线程内观察，所有的操作都是有序的；如果在一个线程内观察另一个线程，所有操作都是无序的。Java 提供了 volatile 和synchronized 关键字来保证线程之间操作的有序性。</p><p>(5) 先行发生原则</p><p>先行发生原则：如果操作 A 先发生于操作 B，操作 A 产生的影响能被操作 B 观察到，“影响”包括：修改了内存中共享变量的值、发送了消息、调用了方法。</p><ul><li>程序次序规则：写在程序签名的操作先行发生于书写在后面的操作</li><li>管程锁定规则：一个 unlock 操作先行发生于后面对 <strong>同一个锁</strong> 的 lock 操作</li><li>volatile变量规则：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作</li><li>线程启动规则：Thread 对象的 start 方法先行发生于此线程的每一个动作</li><li>线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测</li><li>线程中断规则：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生</li><li>对象终结规则：一个对象初始化完成先行发生于它的 finalize 方法的开始</li><li>传递性：如果操作 A 先于操作 B，操作 B 先行于操作 C，那么操作A先行发生于操作 C</li></ul><h2 id="Java-与线程"><a href="#Java-与线程" class="headerlink" title="Java 与线程"></a>Java 与线程</h2><p>（1）线程的实现</p><p>实现线程主要有三种方式：使用内核线程实现、使用用户线程实现和使用用户线程加轻量级混合线程实现。</p><p>（2）Java 线程调度</p><p>线程调剂是指系统为线程分配处理器使用权过程：协同式线程调度、抢占式线程调度。</p><p>协同式调度：线程的执行时间由线程本身来控制，线程把自己的工作执行完后，要主动通知系统切换到另一个线程上去。</p><p>抢占式调度：每个线程由系统来分配执行时间，线程切换不由线程本身来决定。Java 使用的就是抢占式调度。</p><p>Java 一种设置了 10 个级别的线程优先级，在两个线程同时处于 Ready 状态时，优先级越高的线程越容易被系统选择执行。但是并不是太靠谱，优先级可能会被系统自行改变。</p><p>（3）线程状态转换</p><p>Java 语言定义了六种线程状态。</p><ol><li><p>新建（New）：创建后尚未启动的线程处于这种状态。</p></li><li><p>运行（Runable）：包括了操作系统线程状态中的 Running 和 Ready，可能正在执行，也可能等待着CPU为它分配执行时间。</p></li><li><p>无限期等待（Waiting）：处于这种状态的线程不会被分配 CPU 执行时间，它们要等待被其他线程显式地唤醒。</p></li><li><p>限期等待（Timed Waiting）：处于这种状态也不会被分配 CPU 执行时间，在一定时间之后它们由系统自动唤醒。</p></li><li><p>阻塞（Blocked）：在等待获取一个排它锁，这个时间将在另外一个小城放弃这个锁的时候发生；在等待进入同步区域的时候。</p></li><li><p>结束（Terminated）：已终止线程的线程状态。</p></li></ol><p>深入理解Java虚拟机——高效并发 - CSDN博客：<br><a href="https://blog.csdn.net/hanxueyu666/article/details/53729491" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hanxueyu666/article/details/53729491</a></p><h1 id="第十三章-线程安全与锁优化"><a href="#第十三章-线程安全与锁优化" class="headerlink" title="第十三章 线程安全与锁优化"></a>第十三章 线程安全与锁优化</h1><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>当多个线程接见一个对象时，若不考虑这些线程在运行时环境下的调度和交替执行，也不须要进行额外的同步，或者调用方进行任何其他的协调操纵，调用这个对象的行动都可以获得正确的成果，那这个对象就是线程安全的。</p><p>线程安全强弱分成五类：</p><p>1、不可变：只要一个不可变的对象被正确地构建出来。</p><p>应用 final 关键字修饰的基本数据类型；若是共享数据是一个对象，那就须要保证对象的行动不会对其状况产生任何影响（String 类的对象）。</p><p>办法：把对象中带有状况的变量都申明为 final ，如 Integer 类。除 String 以外还有列举类型、Number 的部分子类（AtomicInteger 和 AtomicLong 除外）。</p><p>2、绝对线程安全：不管运行时环境如何，调用者都不需要任何额外的同步措施。大部分 Java API 都不是绝对的线程安全。</p><p>3、相对线程安全：它需要包成对这个对象单独的操作时线程安全的，对于一些特定的顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p><p>4、线程兼容：对象本身并不是线程安全的，需要经由过程调用规矩确地应用同步手段来保证对象在并发环境中安全地应用。</p><p>5、线程对立：不管调用端是否采取了同步措施，都无法在多线程环境中并发应用的代码。</p><p>如：Thread 类的 suspend() 和 resume() 方法，System.setIn（）、System.setOut（）、System.runFinalizersOnExit（）。</p><p><strong>线程安全的实现方法</strong>：</p><p>1、互斥同步</p><p>互斥同步（Mutual Exclusion &amp; Synchronization）是最常见的一种并发正确性保障手段，同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。而互斥是实现同步的一种手段，临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是主要的互斥实现方式。</p><p>2、非阻塞同步</p><p>互斥同步主要问题是进行现场阻塞和唤醒的性能问题，这种同步称为阻塞同步，另外它属于一种悲观的并发策略，总是认为不加锁肯定会出问题。随着硬件指令集的发展，我们有了另外一个选择：基于冲突检测的乐观并发策略，通俗讲就是先进行操作，没有冲突就成功，有冲突就进行补偿（如重试直到成功），这种乐观的并发策略成为非阻塞同步。</p><p>3、无同步方案</p><p>要保证线程安全，并不一定要进行同步，如果一个方法不涉及共享数据，那它就无须任何同步措施去保证正确性。</p><p><strong>可重入代码</strong>（Reentrant Code）：也叫做纯代码，可以在代码执行的任何时刻中断它，转而执行另一段代码，返回后不会出现任何错误。可重入代码有一些共同的特征：不依赖存储在堆上的数据和公用的系统资源、用到的状态都由参数传入、不调用非可重入的方法等。</p><p><strong>线程本地存储</strong>（Thread Local Storage）：把共享数据的可见范围限制在同一个线程内，无须同步，如：经典Web交互模型中的”一个请求对应一个服务器线程“的处理方式。java.lang.ThreadLocal 类来实现线程本地存储的功能，每个线程的 Thread 对象都有一个 ThreadLocalMap 对象，以 threadLocalHashCode 为键，以本地线程变量为值。</p><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><p>本部分介绍了一些锁优化的技术，如适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁等。</p><blockquote><p>本书也看完了，只是选择了比较重要的部分仔细阅读，其他的都是大概浏览一遍，后面有机会再读加深理解。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 虚拟机也是需要学习的一块内容 ，这次选择的书籍是 《深入理解Java虚拟机：JVM高级特性与最佳实践》。&lt;/p&gt;&lt;p&gt;Java 虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。 JVM 屏蔽了与具体操作系统平台相关的信息，使得 Java
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《深入理解Java虚拟机》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季中国银联实习生面试</title>
    <link href="https://www.wshunli.com/posts/60f1f107.html"/>
    <id>https://www.wshunli.com/posts/60f1f107.html</id>
    <published>2018-05-14T06:24:49.000Z</published>
    <updated>2018-05-31T14:51:28.662Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（unionpay）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（unionpay）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+iVja0TcN1f2m4tz8dmLRKR1KlH7c4rgjFYYq6mIIoykzQv5R3alTC8vGue+ZLaWQMU5WHtCdVy9TflaSUQZ2QF1rsM1YvnpdA1yDCCRQk4tXFtyekAKs+6W03XM9AxkUfcBgZHH/HtX/fobU76F29nQd2aiPq+O3KtQulp8JeIgMS7IkiqW7OG7ZzjzVeT+DZvrZUOZ46/LrL/RugqzF7mGb70nK91U6sIiK+8wZetrMHM+O3KYJ+MTPQ3AV0PXLx+yImq/Fma4d8NB4Fugk51KYXjI7QYoWZD2sd3OQRagLO6FTw6am482te8SYPsZis6Zynnol9/cP41jCBkEFsJJkyWpCTve3nbJoFF6KkeBUXp6ju2NBukLIDnvCzr0Ve+fTj2/zq5P1jeESQGPlHAHdW0GNsbeq+eNZ1IVpuUaJVUl/+EdEWDqPqP2mIWmpxftmTuKGkPNCSm3xJUqgn0FBxlKk8i+d7p/Bq6My/IHKhyUMRDsmYd0ZFqi7SKMft46WtrKaV3qxmSaJXpY0MjG1ov6uMUUuskGIdiZOAJEmHzES4tQ5TLJLXE0FNhnx6XlYDOtmnf+pT30At0LoiRrMT0kTHCCs3bDHKjfqt8KzNvi0Z+WsIaKO5C4AhJQgZYKIffSDL6HFcloZYWqOKPYvWdON9+4YHhddAN21SISBIbyXagUIBDiEe3622hees1gsd2u1JqKRzZZOnPnVmp1MJTkN9qLSVyoZE0QNqEUkW3aPjRVloufMHVcKLCc6llvgOjjP3A0MHgUUgEO20bPLf5md3YiARRvdUZmlFqzULY+vQnlkMk6QSgUrAZUwWubvN4dUz+vn10d5E7hdzZJFOu32ndyeCDRuu5y+bS1OolLHEwSWzEqWfRmBVZ2ux5IXXebEKQPqcDqyOHoGBg7NFY2/jXVrj2F/d5WqkN3OhNIooOHHOkpAQsgLWxhDilffXnaRJqcJN3fRM7P89vGnmZKqrTqBb+MCAm8eokjC4b3mV9vePleR8AKgqOEePAbtBlwpFDRyvDC7fojTzxjSQcBX4POTBCukOWBhPpiDHgV9tt1dUZqdNB2H72RJzFSXu6YoJqN5BbJwFSRI6QFlKPi4kiU4KALQjz8wNGaEjdXU8G4VCTDJj8phX1zoLBaCYFrwL8CIxAmdltEuKXZ8fmE6dYVQ3QrIxJe00ZIjoLZELf/ngdUy/qczUm/XkX2yD2qdNqcJ5IF4heR0toKI96JJdabQPOPanH60btPrWVj//tAO7IlAvN6j5qumsHzly92WVorgGveT/bDnpiwGs6PfsPnV50vSJM7gMiv0fzVIhpqPl90dfrZDs4pBy7dZdW1ERa5oIdG2wuaFB9LURQ9816G54El0tQA7IYk9I6ApVWfjhGdHt9w5IMrzi2eESsrdPlF82rrdx7wG8MKCMCQ0H11u7nlrgRw9mdgHmEOJbfKLF9/RWwuI9BR2vn1sJTSogRErU5io0LJtECVetNo0aHXr24FqhZzkcwt76kRRfBFGszXuuSdOduniHrpL8RhaKUX5USIR1F1618MgfN6u7TSiiVVQH6zsQyOka+HMFhNfP2KHgIuqDMY+vxJbmFt7ImrnBD3zKtXHQnX1tzRLipfYDkvsG6qoD73bk+aKgv9tpjAzxMNfwSetLLwayX1LrQMl2IkCTrVi2nnqbGa2uMeNZchQD2QuSaX/1BnPxzgW8KSOBSGudMHFwjyKLCkGBhyzhNDavYTkxYwXUKzdOkJrHvQ6bnLnMPufCjkMyaB/q4RvaSm7/aBkRYYscICE8eSGmryWXI6tiNDysZN+kby8eZGw6EGZTlvfHmxanZSx7lKyFoqKisFn3QS3Q3pqMqpDghVP7DZGN+N9X78zU45PxQrb3UpezbRRa+x+lpGIvg/bgg/KVWOiyMaEc8JCSTcuzQT5RD6EB53B5VOonJ14BMU38PJ06f4r9jfQNGg12bCCP0bK+VXi9O3pTgktCq2qNVomjFZ+G+IihAo/JwIbRKGFXI1OzU7ZPG7fnFMx0pStbUvKJtAIifVSK4OWSPvG55KVGrnMDHS9LSxDfRU+9V7B2fBs+LABkwW7efPeB6hrmylF0+MnSzcFRYD7dEgXaMWUgZRV0eNsULPdM62FV3w3Cd5VPrFfPg/ovy2ss3vJt0qSr1fwaRSfT8+//jE3LOd4cJUXlONoO2NsgKmKTtI20wlvEGniPZtt/rPF484aMQc5mn1Ms2dUQcOLMtaFn6T2Hi03rraUXa2rJHbuEgq3uvfYN0tLyENk3mzsn37IpOE8J8IMhwYw6jl1A6lxXCUf5skGfRVVvlHG5+X/+8g7SokS7oU8H1Mjb2eBR8zu5tvi++6PFu8GQDlqiKQQVENfJAHR+iLXGPdPxyl0s0KYVwUdM0d8kSX3TW6gf8aelDgA5VgqZBcm4NX+aMFMW+IJ7vlI1apRnnusLx/yRWUzwWCkYmsc+zXWgQJABhM2+FfTubpFIlwWgdeT/W5YWjqNziZL8BC1YDiVwIA1mcThm6e+63c2AoRDBKGxHN2pX9vtOb9kOJsaWMKvwdSnbshcpYRY3Xz98aafuzMGAT6ZtdiY5fAqDBxs2rjSjWN1V0lxAw5qoMfanq0M16tBwJZqKqL9h9eXe0JyvMXlQ4e7qyAcfDghuYqPTlzsp4Pw+t0we91zbX3IIlaix1NEDbWtUnJEqwvTw8uUeNe8MOH9skFRZCeuvFcv6Dxqj3yRoCGBISITZKD6E4WlrFYD7S0gNIADyMaauUu8rmEUXTc//LG958s9ZCk5zkUMAIbdtbmun2oF2nGQtONEBB2GkIZSbd8pXnRkQW3BJxJdUUfjwYhvhCHfB+ZbFxkJi05x2ojLY4vfEclaQgeDU5RgUM1q4sqyKfBUyDlQjegB5ZBFx51AC10KnIyWevAHOv20kIDcNImrB1MZOYfUb5YYfDb80VhTjx/X9b3QVmSZW1YgLxNs9KxXIx0tMt1rR3bDdbwVMMjnrgX8gJrvD700a05yZ4xEXD98ZYwTiIvkKJkXUYR8tKYpY4b8NpG5vpC2lurdlUxFwh08Nk9YAGcUkQN/Th4c/0NJGErHW3NLtYGQhmM9FfTwQCAHV4mTZHZ84XrUY0h0HuZWI/SBQGqFGoBMY4/2eCzSExZB2rYgxSKN4T30x39P1Jzda/IKPYgEUwEEAiq2EwCuGr2LyHnjX3ANDELPFxJ7m34s54uXsYzLG9W8QQKWKBOOIWK8QRS6LbqZaOf4MubcNkeOa0fvGqWFO4UeDUeVyWKJJMIj2XV7F5dEzDNQRsAq5rbI2J7WpnOHi4tyXLlp593Dzg4nYj3nzJFeKQ2mjJklHpZNokW3fgK3Uhu/3VSXyy1f6S7zgK2yrwLJU0lso831abpkUMbRu3iQAsB5HTOU7fIwF3atF4N8Yyq7s+ZPRGUYIAGlm77NAkdHGvG0OU5ZCwPz3ft9F3ehBMuuCN4DZl7TT9iB8FBXvIoYXGO+ZaNHd3TvJo1ADHfdNwB0lJRPIA5tU3/BhLE8MZWlpBwx9IaAiJiohxhxkhX0uYdm0Kn4GPfrAUKSoPUVKbX8FPdpK/0XKkPAzYf+1fyLLfr7dyMWuGmUC87RSJMHDnTHxHjNbvyDdF2AdeD9u+XcUHcHr+47H3mQO/i1IvGmnqARaz+0BNvlWY/7lfnBCa5mv8oQnum7AvLdFzahAnHheYKTDNXY2rxOuPVrqyua/L8ByZQEjpC2ItusXRXKiUjgxpbPt+L8CGXzC1y7RrYSYJpcARbbsAITYxL1d2mdbWw/zj3RUtrnN2NZWn5SqfJ9gqeYZQbTOLkX5AKOY1QrkRRrwH2udYUCbkROejADLF2trzInUfEJ5yPLY+RmqNsCd0SlfA1iiejb7ajTjzW3L+YZHq9g07xh5U7+ufdt9EC2S7jwqYLRAeulJ9j20JREbTPylIMPJMSU5s1PUuYl2amMWNyGfbqIh916IRn6K4NIzyjSFNJ4fOaUGXO1yAub9OJYcSOGmHJ8QYjG1oIYVdqhc9uX+S/LHBB6UgbeAGfQnk/guEv9YUJUvASmgVrBIY5j/RGazvA8tJrYc8+UUdQRcFcYCDA3pL5Cj0uPLNuuxtmRjVP+036URow4DIqrSTABEEIFsmwlAfFj3FWmCIIgejBisJz6gy5TvGuD2yHCBMSgkJ1I9VNhrp4ndVsBFAWvaPycxyYzQGnThYc3sa5JVNS4gdYnH8waW6G2A3xAac+iKwkrYcn3v8glPMTTEAHFB626HKAmSnKw5MERW0kHtAnHvW96w0/qOaL10c5SsXXjl4M080/YiP1WNP2tU3M/aiQ7xN9vEzRMV61nr7h9qLEBHw9WPF7gblDVVp8oOX6uEI6v+o5NEAeMikIYJPOhwtng7gPzK/SQ3dM+4wZ8BP6XFq3Cd9aT2s5Ckg75O5xrfpegezaD5QUFZ4a2osAl2K3hYHAu3aJjd1ZY8BtAHjV/+FVuj8ZS1c19EU+gCxSB7cRHwJui1OUKBMTB87im4xIO6FaaQPHgMbkWv+e2JSQ4xbh7o7Km+ZM+rA3VTTWSG8UCp66kXySWinovDukV3jVwNHhBrQ/QgcpbesygtX3/BHhnGvGnKGJvZ/cwMqfM1OXPNIrm4HQhsgjP4b6X2MArotEX1GxpkWia3ashG9Vbh9Aa/qVOkJzvIBEc5+2JMxFyYiCGM6kIipoeIZpzatgHNalxWHGkxaAVP5Ds62GTHTVd8sZ1i0fxYgpdtduxYWMceJGFLIFILKqTrAMMACHPsdS0r2YSdH7DAMNv/FStC150LMXR07tncdCQiE8r+GEwEAS8siRyoPVDh0ttLhUCnAKHUPvH7AbjoJbgSG/M3X6PYUaMhnGUZb7pgd49bpv/tx8xnIg3h3hfSFaK6FAJszZEyxTbns3XBPBphkeA12Vx1CUwvG9s75zrOAtafSZXxYbNMC6bc8Ip3QKYzffOFAMsRCk4/VPz4m3tGtNR7ZYzPppvjh1SlvtI9qKehp6513F0ribK4EQ3eyPQ0dRe7FHXDuKQnRvOSkRFkapuOCZBEyaRcw8P5fyaAJRM6iun6cWoswvdHi/aq4rjQjcbuYa1meQ9QHqbqP3mwrCBSwgMUPiCQWOBk8cgSKnUK4MC66m+IDF6vz9otBJo5g3BfGBeFJWy7PfhNPaJkWRyShwaXE+oXD5uDjjXlAx9fgV6wWfaLkZl3if+OxulSOaSuUTy446YLJ7/4281/VkN3KglE4NmeV0dlRP2DQaF76wZndimETEBi5scaqz0TyUv9pzbIjOgT2w432nx5qrLjGD3O+EgzRi52U2B85Nw/qEVjiS8yNvOielNjqvCem1PcKr+2/CqikpEJzC30mduEUg8Y5OgfPgDCt6W8q5SipE56ce7ZW5d3pKDgtpFLyltVKbN2eFloKqD+elY0Unooqdf/XGYP53uxT7o5SuXnJPSy0wVTPSpTfmoNW4Yq6NKxnwoVQJRzs28A2inp8uwIu5ScQ4yVTzFxMyE4U+J8nIZFt+AFV6VdHkGKblbV1hkD/zriYBLbOY0Nl+0ESiWTAawbeB9ttpsFRc4H62kjwbSGReFsT79FO3dIrBHwYkftixhQow3gE4+RB1njRexVOfdswH8YCWa4y3BY8WD8eqI2Njir/RcVqm6QX1nBUSGloXADFEzo7xZLOT8D0+GbCN4dKVoLuVoLXNpft4leWyYBqxOKuhw6DrldMA9LZUACQ95GtcJOin42J4qNoFtoFbfTnQ4DxVRsutAs6FSXBoyke65phmJu/sH6AUaKif+lfieUjNeaLCXF4TDm+SofQ7rPZdqEc0pzlmwt5mSgQFVmm5X05fcxE4utKR+ZLTFu8PUBZj+QYJApHcxFm/bayauRllVt28IDuxafh2HD7mS5bJyzZureLwwAPFD5xVc40NUBEG3nGjmCXVQRfTOOpd2SMttOibsyB+8fyU1cyHMQddL7Y7B7pphnLpeyfu8EyMWhj91wPf4GI1qnP//OWrd9Q2QQ/RGcHDDfTG7z1Z6Ze+KFfeqYIt138k9hgpM7Dtt+cvTXnXsrDexSKqWMQu8LHs+h4d+z/Z9nOTZ2pYqZ/LUFR+cUZCA7ToBkiy1xtJ/RIbYLMpXfzfSwgzSDhOFQr8sTk7oY1ggB3JfedSJEEK0LWGrAgiLR6CHN6dL2PAK7KSyCnkfJYmAez2K80JKaoJMqI4N1rYw6QX8koUjupTOQ3aw/75y38bovkJYKK8f90LzelfexZ02k7SO7K0+NzXQ4wwHhQFSjBfo0g+5WfBTJBnZciCk+83eap6wNLfrgsV5hNmuGVIGZRIgJHc+64Vng+eZRcTJIq8ZeScYE7to8OM8q5V3XT0gx64og9asw0scJT074dog5JzUGhTFaiP592yK4nCmufhFpKjc1/oBCYXr23s9C31NKMhiD+WmlYdQNLz2pLG6+lsFswnsXDq4/EbsfC0Crzfjp3imCH2hxZ8R43NsQSqYL3Pv4XKZuaCHfMqiJyv9HDQu4FfQEJTz993eBb85vGDc9LGQkat+yuGrjF4ntcjvi7OOTW5tBv0hTq8cDPdrrkkg6VTFBKlf1Qc3y6cfdNUtDHybJqsbKWok9B47ptgrUXaqxMYD91QoDHxsurz3GN2GuIo9fviqUMBFqa2GCMS70cy8vkFmlGQoL1Tqg0Q2GIIvHrkxv4tYuGRa8dmvKiyg5IIRkq4FUv9E/HbTNNadqH1lUMBytu3+NbI/rG9HT74TXjXy67nI1Oa6A/wZYXnOwVO1ztJ7rf5rY9G9oJQu/RYIBqdOVcAyB7GKMYc4St2P6aLJbm8H8V4GEQnERFSFtgH+Vy6+r/ZAVXPZEOf0MXs/M3eMbhqmexHOMMMLqQWTzk+/EPfWnoYc6i3qiTzV7s1gQdDk8/cD8c3VD4Uj0U74GiKifwSPeCwJWGn95FtTuzkTpzZJSiA5mlPMe7HfEa7veDYXbyc7xZdz2cXVHFjeI8tVFCYWv5ypnUqv22BY9XGXvXv2qSNUybhoRTzoBonXCaQJXr5XuuWCKPzlJfiIzxDPRH3yDlBoLX5O3P5mp9CVXZZpFMGR15mlM5WN5T6wJEwyCzBWjn7/7bapWB4xffr8362HsX/LNGyuBSxcPm5KTxrT5kwDaDtTVVGoimwwF4UYp34c4R1pMqKrxgw2W+sBzRjWjE05KHHpPkfj9YCvwzjaL40uwToC8Nn1US/Z2+DK2y67V84Gm7QKaED0D0Pf/IE5lKZiSyPjUP6b5iljbYEoCm6HtSTkzpssLrrxT4jFzYUACuSVLHkOK8xnjdWcaS/aKuwpqWu2I4nf9yOcktcYxeYbEDt95bQ73GjAkHfoKgKRWiS7E1bX08r9poQC+6xGAapZL6oS2pcmgKJcoogdJ3B6lgicpADduvJtz47LIIz0SA6Jk6wzmhFJ+BPmCVQjJbwjcO5w6hBm8L4yjQJVgHFLnqpVBUd1NF3b/HrBdCGmKJzrq2B1Xmn5LFRLcSvF+fHd42D8vCenUnZB5S3r2BKsivFGoWZs51+SPQOrCHMieJqXygr9KrAD0otzOHo6ggzqznJbMQv/i3A8T4CY7bBrXn/NAvd44R9jKiXx9vbb8JOWgH6htAK7tKttjxmTyAR2EpXce+gRs6vw3i6vilHklP3+MJkPUfDXc4KRFKAKnA+WIItZGwPR26tGhDEt9NIJySGyuIAwdVcxVMaHAS129QeU8LQ== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春中国银联暑期实习生面试（系统与应用开发）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>我本将心向明月，奈何明月照沟渠</title>
    <link href="https://www.wshunli.com/posts/2739df62.html"/>
    <id>https://www.wshunli.com/posts/2739df62.html</id>
    <published>2018-05-08T06:06:23.000Z</published>
    <updated>2018-05-31T14:51:28.662Z</updated>
    
    <content type="html"><![CDATA[<p>我本将心向明月，奈何明月照沟渠，<br>落花有意随流水，流水无心恋落花。</p><p>简历初筛未通过，笔试机会都没有。</p><p>滴，好人卡。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我本将心向明月，奈何明月照沟渠，&lt;br&gt;落花有意随流水，流水无心恋落花。&lt;/p&gt;&lt;p&gt;简历初筛未通过，笔试机会都没有。&lt;/p&gt;&lt;p&gt;滴，好人卡。。&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《Java多线程编程核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/4e70966b.html"/>
    <id>https://www.wshunli.com/posts/4e70966b.html</id>
    <published>2018-05-05T14:47:09.000Z</published>
    <updated>2018-05-31T14:51:28.658Z</updated>
    
    <content type="html"><![CDATA[<p>前面面试什么的多线程部分问的比较多，需要加强下，这里记录总结 《Java多线程编程核心技术》 读书情况。</p><h1 id="第一章-Java-多线程技能"><a href="#第一章-Java-多线程技能" class="headerlink" title="第一章 Java 多线程技能"></a>第一章 Java 多线程技能</h1><p>本章主要介绍了线程概念、核心方法以及优先级。</p><p>1、进程和线程的区别</p><p><strong>进程</strong>是受操作系统管理的基本运行单元，是系统进行资源分配和调度的独立单位。<br><strong>线程</strong>是在进程中独立运行的子任务，CPU 在这些任务之间不停地切换，各子任务共享程序的内存空间。</p><p>线程和进程的区别是什么？ - 知乎：<br><a href="https://www.zhihu.com/question/25532384" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/25532384</a></p><p>2、线程的创建</p><p>（1）继承 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.html" rel="external nofollow noopener noreferrer" target="_blank">Thread</a> 类</p><p>（2）实现 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Runnable.html" rel="external nofollow noopener noreferrer" target="_blank">Runnable</a> 接口</p><p>其中 Thread 类实现了 Runable 接口，都需要重写里面 run 方法。</p><p>两种方式的区别：</p><p>实现 Runnable 的类更具有健壮性，避免了单继承的局限。<br>Runnable 更容易实现资源共享，能多个线程同时处理一个资源。</p><p>Java中 Thread和Runnable实现多线程的区别和联系 - CSDN博客:<br><a href="https://blog.csdn.net/oxuanboy1/article/details/51733279" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/oxuanboy1/article/details/51733279</a></p><p><strong>非线程安全</strong> 主要是指多个线程对同一对象中的同一变量实例进行操作时会出现值被修改、值不同步的现象。</p><p>3、线程的启动和停止</p><p>线程的启动可以使用 start() 或者 run() 方法，</p><p>调用 start() 方法，虚拟机会创建新的线程运行 run 方法；<br>调用 run() 方法后，会在调用的线程执行，不会创建新的线程。</p><p>线程的终止方法有三种：</p><p>（1）使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。<br>（2）使用 stop() 方法强行终止线程（这个方法不推荐使用，因为 stop() 和 suspend()、resume() 一样，也可能发生不可预料的结果）。<br>（3）使用 interrupt() 方法中断线程。</p><p>下面介绍了 interrupt() 方法停止线程，调用该方法知识在当前线程中打了一个停止的标记，并不是真的停止线程。</p><p>如何判断线程的状态是不是停止的：</p><p>（1）this.interrupted() 测试 <strong>当前线程</strong> 是否已经中断，会将状态标志置清为 false 。</p><pre><code class="Java">public static boolean interrupted() {}</code></pre><p>（2）this.isInterrupted() 测试线程是否已经中断，不清除状态标志。</p><pre><code class="Java">public boolean isInterrupted() {}</code></pre><p>Java并发（基础知识）—— 创建、运行以及停止一个线程 - Tim-Tom - 博客园：<br><a href="https://www.cnblogs.com/timlearn/p/4007982.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/timlearn/p/4007982.html</a></p><p>其他方法 stop()、suspend()、resume() 不推荐使用。</p><p>4、线程的主要方法</p><p>Thread.currentThread() 返回代码段正在被哪个线程调用的信息。</p><p>isAlive() 判断当前线程是否处于活动状态，即线程已经启动但尚未终止。</p><pre><code class="Java">package com.wshunli.thread;public class CountOperate extends Thread{    public CountOperate(){        System.out.println(&quot;CountOperate---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName()=&quot; + Thread.currentThread().getName());//获取线程名        System.out.println(&quot;Thread.currentThread().isAlive()=&quot; + Thread.currentThread().isAlive()); //查看线程是否存活        System.out.println(&quot;this.getName=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;CountOperate---end &quot;);        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));    }    @Override    public void run() {        System.out.println(&quot;run---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName=&quot; + Thread.currentThread().getName());        System.out.println(&quot;Thread.currentThread().isAlive()&quot; + Thread.currentThread().isAlive());        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));        System.out.println(&quot;this.getName()=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;run --- end&quot;);    }}package com.wshunli.thread;public class Main {    public static void main(String[] args) {        CountOperate c = new CountOperate();//        c.start();        Thread t1 = new Thread(c);        System.out.println(&quot;main begin t1 isAlive=&quot; + t1.isAlive());        t1.setName(&quot;A&quot;);        t1.start();        System.out.println(&quot;main end t1 isAlive=&quot; + t1.isAlive());    }}/* * CountOperate---begin * Thread.currentThread().getName()=main * Thread.currentThread().isAlive()=true * this.getName=Thread-0 * this.isAlive()=false * CountOperate---end * Thread.currentThread()==this :false * main begin t1 isAlive=false * main end t1 isAlive=true * run---begin * Thread.currentThread().getName=A * Thread.currentThread().isAlive()true * Thread.currentThread()==this :false * this.getName()=Thread-0 * this.isAlive()=false * run --- end */</code></pre><p>Thread.sleep() 方法是在指定的毫秒数内让“当前正在执行的线程”休眠（暂停执行）。</p><p>yield() 放弃当前 CPU 资源，将它让给其他任务占用 CPU 时间。</p><p>5、线程的优先级</p><p>在 Java 中线程的优先级分为 1 ~ 10 这 10 个等级，可以使用 setPriority​(int newPriority) 方法设置。</p><p>优先级较高的线程得到的 CPU 资源较多，CPU 会尽量优先执行，并不一定先执行完。</p><p>线程的优先级具有继承性。</p><p>6、守护线程</p><p>在 java 中线程有两种：用户线程、守护线程。</p><p>守护线程的作用是为其他线程提供便利服务，当进程中不存在非守护线程了，守护线程会自动销毁。</p><p>守护线程最典型的应用就是 GC （垃圾回收器）。</p><h1 id="第二章-对象及变量的并发访问"><a href="#第二章-对象及变量的并发访问" class="headerlink" title="第二章 对象及变量的并发访问"></a>第二章 对象及变量的并发访问</h1><h2 id="synchronized-同步方法"><a href="#synchronized-同步方法" class="headerlink" title="synchronized 同步方法"></a>synchronized 同步方法</h2><p>（1）方法内的变量线程安全，而 <strong>实例变量</strong> 非线程安全。</p><p>（2）多个对象多个锁</p><p>关键字 synchronized 取得的锁都是对象锁，而不是把方法或者代码段当作锁。</p><pre><code class="Java">class HasSelfPrivateNum {    public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class ThreadA extends Thread {    private HasSelfPrivateNum numRef;    public ThreadA(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;a&quot;);    }}class ThreadB extends Thread {    private HasSelfPrivateNum numRef;    public ThreadB(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;b&quot;);    }}class Main {    public static void main(String[] args) {        HasSelfPrivateNum numRef = new HasSelfPrivateNum();        ThreadA athread = new ThreadA(numRef);        athread.start();        ThreadB bthread = new ThreadB(numRef);        bthread.start();    }}/* * a set over! * b set over! * b num=200 * a num=100 */</code></pre><p>对于多个对象实例，会有多个对象锁，所以还是异步的、互不影响。</p><p>（3）synchronized 方法与对象锁</p><p>调用 synchronized 声明的方法是排队同步执行的。</p><p>把 HasSelfPrivateNum 类的 addI() 方法添加 synchronized 关键字，输出就变为：</p><pre><code class="java">class HasSelfPrivateNum {    synchronized public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * a set over! * a num=100 * b set over! * b num=200 */</code></pre><p>上面多个线程调用同一方法，下面再看调用 <strong>不同方法</strong> 的情况。</p><pre><code class="java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyObject object;    public ThreadA(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodA();    }}class ThreadB extends Thread {    private MyObject object;    public ThreadB(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodB();    }}public class Main {    public static void main(String[] args) {        MyObject object = new MyObject();        ThreadA a = new ThreadA(object);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(object);        b.setName(&quot;B&quot;);        a.start();        b.start();    }}/* * begin methodA threadName=A * end endTime=1526043906998 * begin methodB threadName=B begin time=1526043906998 * end */</code></pre><p>修改下 methodB() 方法，去除 synchronized 关键字。</p><pre><code class="Java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * begin methodA threadName=A * begin methodB threadName=B begin time=1526044084533 * end * end endTime=1526044089534 */</code></pre><p>由此可见：</p><p>A 线程先持有 object 对象锁，B 线程可以以异步方式调用 object 对象中的 <strong>非 synchronized 类型</strong> 的方法。<br>A 线程先持有 object 对象锁，B 线程如果在这时调用 object 对中的 <strong>synchronized 类型</strong> 的方法则需等待，也就是同步。</p><p>（4）脏读</p><p>脏读（dirtyRead）即赋值时进行了同步，但在取值时已经被其他线程修改过了。</p><p>跟上例类似，在方法上加 synchronized 关键字可以解决脏读问题。</p><p>（5）synchronized 锁重入</p><p>synchronized 具有锁重入功能，也就说当一个线程获得对象锁之后，再次请求此对象锁可以再次得到该对象的锁。</p><pre><code class="Java">public class Service {    synchronized public void service1() {        System.out.println(&quot;service1&quot;);        service2();    }    synchronized public void service2() {        System.out.println(&quot;service2&quot;);        service3();    }    synchronized public void service3() {        System.out.println(&quot;service3&quot;);    }}</code></pre><p>可重入锁的概念：自己可以再次获取自己的内部锁。假如说不可锁重入的话，线程一直等待释放对象锁，而对象锁自己拥有，就会造成死锁。</p><p><strong>可重入锁</strong> 也支持在父子类继承的环境中，即子类可以通过重入锁调用父类的同步方法。</p><p>（6）当线程执行的代码出现异常时，其所持有的锁会自动释放。</p><p>（7）同步不可以继承。</p><pre><code class="Java">class Super {    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int main 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int main 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class Sub extends Super {    @Override    public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class MyThreadA extends Thread {    private Sub sub;    public MyThreadA(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}class MyThreadB extends Thread {    private Sub sub;    public MyThreadB(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}public class Main {    public static void main(String[] args) {        Sub subRef = new Sub();        MyThreadA a = new MyThreadA(subRef);        a.setName(&quot;A&quot;);        a.start();        MyThreadB b = new MyThreadB(subRef);        b.setName(&quot;B&quot;);        b.start();    }}/* * int sub 下一步 sleep begin threadName=A time=1526046246540 * int sub 下一步 sleep begin threadName=B time=1526046246540 * int sub 下一步 sleep   end threadName=A time=1526046251541 * int sub 下一步 sleep   end threadName=B time=1526046251541 * int main 下一步 sleep begin threadName=A time=1526046251541 * int main 下一步 sleep   end threadName=A time=1526046256541 * int main 下一步 sleep begin threadName=B time=1526046256541 * int main 下一步 sleep   end threadName=B time=1526046261542 */</code></pre><p>子类方法添加 synchronized 关键字。</p><pre><code class="Java">class Sub extends Super {    @Override    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * int sub 下一步 sleep begin threadName=A time=1526046197787 * int sub 下一步 sleep   end threadName=A time=1526046202787 * int main 下一步 sleep begin threadName=A time=1526046202787 * int main 下一步 sleep   end threadName=A time=1526046207788 * int sub 下一步 sleep begin threadName=B time=1526046207788 * int sub 下一步 sleep   end threadName=B time=1526046212789 * int main 下一步 sleep begin threadName=B time=1526046212789 * int main 下一步 sleep   end threadName=B time=1526046217790 */</code></pre><p>由此可见：重写父类的同步方法并不能同步，还是要加 synchronized 关键字才行。</p><h2 id="synchronized-同步语句块"><a href="#synchronized-同步语句块" class="headerlink" title="synchronized 同步语句块"></a>synchronized 同步语句块</h2><p>（1）synchronized 同步语句块的使用</p><p>当两个线程同时访问同一对象 object 中的 synchronized (this) 同步代码块时，一段时间内只能有一个线程被执行，另一个线程要等这个线程执行完以后才能执行。</p><p>（2）用同步代码块解决同步方法的弊端</p><p>同步方法的弊端是有时候执行时间会比较长。</p><pre><code class="Java">// 使用同步方法public class Task {    private String getData1;    private String getData2;    public synchronized void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            getData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            getData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}// 使用同步代码块public class Task {    private String getData1;    private String getData2;    public void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            String privateGetData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            String privateGetData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            synchronized (this) {                getData1 = privateGetData1;                getData2 = privateGetData2;            }            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>其实也就是在耗时部分是异步执行的，从而缩短了代码的执行时长。</p><p>当一个线程访问 同步代码块 时，另一个线程仍然可以访问该对象的非同步代码块。即在 synchronized 块中就是同步执行，不在 synchronized 块中时异步执行。</p><p>（3）synchronized 代码块之间的同步性</p><p>在使用 synchronized (this) 代码块时，当线程访问 object 的一个 synchronized (this) 代码块时，其他线程对同一 object 中所有 synchronized (this) 同步代码块的访问将阻塞。</p><p>和 synchronized 方法一样，synchronized (this) 代码块也是锁定 <strong>当前对象</strong> 的。其他对象访问同一 object 中的 synchronized 方法也会阻塞。</p><p>（4）将任意对象作为对象监视器</p><p>多个线程调用同一个对象中的不同名称的 synchronized 同步方法或 synchronized(this) 同步代码块时，调用的效果就是按顺序执行，也就是 <strong>同步的，阻塞的</strong> 。</p><p>这说明 synchronized 同步方法或 synchronized(this) 同步代码块分别有 <strong>两种作用</strong> ：</p><ul><li>synchronized 同步 <strong>方法</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized 同步方法中的代码。</li></ul></li><li>synchronized(this) 同步 <strong>代码块</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized(this) 同步代码块中的代码。</li></ul></li></ul><p>类似，对于 synchronized(非this对象) 同步代码块：</p><p>当多个线程持有 “对象监视器” 为同一个对象的前提下，同一时间只有一个线程可以执行 synchronized(非this对象x) 同步代码块中的代码。</p><pre><code class="java">public class Service {    private String usernameParam;    private String passwordParam;    public void setUsernamePassword(String username, String password) {        try {            String anyString = new String();            synchronized (anyString) {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入同步块&quot;);                usernameParam = username;                Thread.sleep(3000);                passwordParam = password;                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开同步块&quot;);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>而多个线程持有的 “对象监视器” 不是同一对象时，还是异步执行的。</p><pre><code class="Java">public class Service {    private String anyString = new String();    public void a() {        try {            synchronized (anyString) {                System.out.println(&quot;a begin&quot;);                Thread.sleep(3000);                System.out.println(&quot;a   end&quot;);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void b() {        System.out.println(&quot;b begin&quot;);        System.out.println(&quot;b   end&quot;);    }}</code></pre><p>站在多个线程角度，多个线程调用同一方法先后顺序是随机的，只是对于单个线程而言，在同步方法/代码块内部是同步的。</p><p>（5）静态 synchronized 方法与 synchronized(class) 代码块</p><p>对于静态的 synchronized 方法，是对当前 Class 类进行封锁。<br>对于非静态 synchronized 方法，是对当前 对象 的封锁。</p><p>二者是不同的锁，但是 Class 锁可以对所有对象实例起作用。</p><pre><code class="Java">package com.wshunli.thread.sync5;class Service {    synchronized public static void printA() {        try {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);            Thread.sleep(3000);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public static void printB() {        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;进入printB&quot;);        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;离开printB&quot;);    }}class ThreadA extends Thread {    private Service service;    public ThreadA(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printA();    }}class ThreadB extends Thread {    private Service service;    public ThreadB(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printB();    }}public class Main {    public static void main(String[] args) {        Service service1 = new Service();        Service service2 = new Service();        ThreadA a = new ThreadA(service1);        a.setName(&quot;A&quot;);        a.start();        ThreadB b = new ThreadB(service2);        b.setName(&quot;B&quot;);        b.start();    }}/* * 线程名称为：A在1526136864655进入printA * 线程名称为：A在1526136867656离开printA * 线程名称为：B在1526136867656进入printB * 线程名称为：B在1526136867656离开printB */</code></pre><p>同步 synchronized(class) 代码块的作用其实和 synchronized static 方法的作用一样。</p><pre><code class="Java">class Service {    public static void printA() {        synchronized (Service.class) {            try {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);                Thread.sleep(3000);                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public static void printB() {        synchronized (Service.class) {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printB&quot;);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printB&quot;);        }    }}/* * 线程名称为：A在1526137124491进入printA * 线程名称为：A在1526137127492离开printA * 线程名称为：B在1526137127492进入printB * 线程名称为：B在1526137127492离开printB */</code></pre><p>（6）数据类型 String 的常量池特性</p><p>对于 synchronized(<strong>string</strong>) 同步块，string 值为相同 String 常量时，两个线程持有相同的锁。</p><p>所以在大多数情况下，synchronized 代码块不使用 String 作为锁对象。</p><p>（7）多线程的死锁</p><p>不同的线程都在等待根本不可能释放的锁，从而导致所有任务都无法继续完成。</p><p>线程互相持有对方的锁，然后等待对方释放锁就有可能出现死锁。</p><p>（8）内置类与静态内置类</p><p>对于内置类中有两个同步方法，只要是使用不同的锁，多线程还是异步的。</p><p>对于两个内置类 class1 class2 ，class1 中使用 synchronized(<strong>class2</strong>) 同步代码块时，其他线程只能以同步方式调用 class2 中的 synchronized 同步方法</p><p>（9）锁对象的改变</p><p>再将任何数据作为同步锁时，只需判断多线程是否同时持有相同的锁对象即可。</p><pre><code class="Java">class MyService {    private String lock = &quot;123&quot;;    public void testMethod() {        try {            synchronized (lock) {                System.out.println(Thread.currentThread().getName() + &quot; begin &quot;                        + System.currentTimeMillis());                lock = &quot;456&quot;;                Thread.sleep(2000);                System.out.println(Thread.currentThread().getName() + &quot;   end &quot;                        + System.currentTimeMillis());            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyService service;    public ThreadA(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.testMethod();    }}class ThreadB extends Thread {    private MyService service;    public ThreadB(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.testMethod();    }}public class Main {    public static void main(String[] args) throws InterruptedException {        MyService service = new MyService();        ThreadA a = new ThreadA(service);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(service);        b.setName(&quot;B&quot;);        a.start();        Thread.sleep(50);        b.start();    }}/* * A begin 1526217990101 * B begin 1526217990151 * A   end 1526217992101 * B   end 1526217992151 */</code></pre><p>运行到线程 B 时，对象锁已经改变，所以是异步。</p><p>但是对于对象而言，只是改变对象的属性时不行的，运行结果还是同步的。</p><h2 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h2><p>关键字 volatile 的主要作用是使变量在多个线程间可见。</p><p>（1）关键字 volatile 与死循环</p><pre><code class="Java">class PrintString {    private boolean isContinuePrint = true;    public boolean isContinuePrint() {        return isContinuePrint;    }    public void setContinuePrint(boolean isContinuePrint) {        this.isContinuePrint = isContinuePrint;    }    public void printStringMethod() {        try {            while (isContinuePrint == true) {                System.out.println(&quot;run printStringMethod threadName=&quot;                        + Thread.currentThread().getName());                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        PrintString printStringService = new PrintString();        printStringService.printStringMethod();        System.out.println(&quot;我要停止它！ stopThread=&quot;                + Thread.currentThread().getName());        printStringService.setContinuePrint(false);    }}</code></pre><p>这个程序停不下来，主要原因是 main 线程一直在处理 while() 循环，导致程序不能继续执行。</p><p>我们可以使用多线程技术解决这个问题，在子线程中执行 while() 循环，这样主线程就能继续执行了。</p><pre><code class="Java">class PrintString implements Runnable {    private boolean isContinuePrint = true;    public boolean isContinuePrint() {        return isContinuePrint;    }    public void setContinuePrint(boolean isContinuePrint) {        this.isContinuePrint = isContinuePrint;    }    public void printStringMethod() {        try {            while (isContinuePrint == true) {                System.out.println(&quot;run printStringMethod threadName=&quot;                        + Thread.currentThread().getName());                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    @Override    public void run() {        printStringMethod();    }}public class Run {    public static void main(String[] args) {        PrintString printStringService = new PrintString();        new Thread(printStringService).start();        System.out.println(&quot;我要停止它！ stopThread=&quot;                + Thread.currentThread().getName());        printStringService.setContinuePrint(false);    }}</code></pre><p>但是这种在 <code>-server</code> 服务器模式下，还是会出现死循环。<br>主要是因为在服务器模式下，为了提高线程运行的效率，线程一致在私有堆栈中取得 <code>isContinuePrint</code> 的值为 true 。</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/内存结构.png" alt="内存结构"></p><p>volatile 关键字增加了实例变量在多个线程之间的可见性，但不支持原子性。</p><p>也就是说同步私有堆栈中的值和公共堆栈中的值，强制从公共堆栈中进行取值，或者强制将值写入公共堆栈。</p><p><strong>synchronized 和 volatile 的比较</strong>：</p><p>1、关键字 volatile 是线程同步的轻量级实现，所以 volatile 性能肯定比 synchronized 要好，并且 volatile 只能修饰变量，而 synchronized 可以修饰方法和代码块。目前在开发中使用 synchronized 关键字的比率还是比较大的。<br>2、多线程访问 volatile 不会发生阻塞，而 synchronized 会出现阻塞。<br>3、volatile 能保证数据的可见性，但是不能保证原子性；而 synchronized 可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公有内存中的数据同步。<br>4、volatile 关键字是解决变量在多个线程之间的可见性；而 synchronized 关键字是解决多个线程之间访问资源同步性的。</p><p>所谓的线程安全包含 <strong>原子性和可见性</strong> 两个方面，Java 的同步机制都是围绕这两个方面量保证线程安全的。</p><p>volatile和synchronized的区别 - CSDN博客:<br><a href="https://blog.csdn.net/suifeng3051/article/details/52611233" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/suifeng3051/article/details/52611233</a></p><p>（2）volatile 关键字的非原子性</p><p>（3）原子类</p><p>原子操作是不可分割的整体，没有其他线程能够中断或检查正在原子操作中的变量。</p><pre><code class="Java">import java.util.concurrent.atomic.AtomicInteger;public class AddCountThread extends Thread {    private AtomicInteger count = new AtomicInteger(0);    @Override    public void run() {        for (int i = 0; i &lt; 10000; i++) {            System.out.println(count.incrementAndGet());        }    }}</code></pre><p>一个原子（atomic）类型就是一个原子操作可用的类型，它可以在没有锁的情况下做到线程安全（thread-safe）。</p><p>注意方法之间的调用不是原子操作。</p><p>（4）synchronized 代码块具有 volatile 同步功能。</p><p>关键字 synchronized 可以使多个线程访问统一资源具有同步性，而且它还具有将线程内存中的私有变量与公共内存中的变量同步的功能。</p><h1 id="第三章-线程间通信"><a href="#第三章-线程间通信" class="headerlink" title="第三章 线程间通信"></a>第三章 线程间通信</h1><p>进程间通信使系统之间的交互性更强大，在大大提高 CPU 利用率的同时，还可以对个线程任务在处理的过程中进行有效的把控和监督。</p><h2 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h2><p>（1）使用 wait/notify 实现进程间通信</p><p>java中等待通知机制（wait/notify） - CSDN博客：<br><a href="https://blog.csdn.net/joenqc/article/details/54981532" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/joenqc/article/details/54981532</a></p><p>wait() 和 notify() 需要在同步方法或者同步代码块中调用。</p><p>wait() 会使线程停止运行，而 notify() 使停止的线程继续运行。</p><pre><code class="Java">import java.util.ArrayList;import java.util.List;class MyList {    private static List list = new ArrayList();    public static void add() {        list.add(&quot;anyString&quot;);    }    public static int size() {        return list.size();    }}class ThreadA extends Thread {    private Object lock;    public ThreadA(Object lock) {        super();        this.lock = lock;    }    @Override    public void run() {        try {            synchronized (lock) {                if (MyList.size() != 5) {                    System.out.println(&quot;wait begin &quot;                            + System.currentTimeMillis());                    lock.wait();                    System.out.println(&quot;wait end  &quot;                            + System.currentTimeMillis());                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadB extends Thread {    private Object lock;    public ThreadB(Object lock) {        super();        this.lock = lock;    }    @Override    public void run() {        try {            synchronized (lock) {                for (int i = 0; i &lt; 10; i++) {                    MyList.add();                    if (MyList.size() == 5) {                        lock.notify();                        System.out.println(&quot;已发出通知！&quot;);                    }                    System.out.println(&quot;添加了&quot; + (i + 1) + &quot;个元素!&quot;);                    Thread.sleep(1000);                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}public class Main {    public static void main(String[] args){        try {            Object lock = new Object();            ThreadA a = new ThreadA(lock);            a.start();            Thread.sleep(50);            ThreadB b = new ThreadB(lock);            b.start();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * wait begin 1526377675223 * 添加了1个元素! * 添加了2个元素! * 添加了3个元素! * 添加了4个元素! * 已发出通知！ * 添加了5个元素! * 添加了6个元素! * 添加了7个元素! * 添加了8个元素! * 添加了9个元素! * 添加了10个元素! * wait end  1526377685276 */</code></pre><p>方法 wait() 被执行后，锁会自动释放；执行完 notify() 方法后，锁不会自动释放，只有同步方法或者代码块执行完后才会释放。</p><p>（2）Thread 中关于线程状态的 API</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/线程状态切换.png" alt="线程状态切换"></p><p>Java 线程一共有 6 个状态，分别是新建（New），RUNNABLE [ 就绪（Ready to run）、运行中（Running）]，睡眠（Sleeping），阻塞（Blocked），等待（Waiting），死亡（Dead/Terminate）。</p><p>java线程状态切换 - 简书：<br><a href="https://www.jianshu.com/p/531310753a64" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/531310753a64</a></p><p>每个锁对象都有两个队列：就绪队列、阻塞队列。就绪队列存储了将要获得锁的线程，阻塞队列存储了被阻塞的线程。</p><p>当一个线程被唤醒 (notify) 后，才会进入到就绪队列，等待 CPU 的调度，反之，当一个线程被等待 (wait) 后，就会进入阻塞队列，等待下一次被唤醒。</p><p>（3）wait() 方法的使用</p><p>wait() 方法会使线程进入等待状态。</p><p>wait(long) 方法是线程等待一段时间内是否被唤醒，超时则自动唤醒。</p><p>当线程在 wait() 状态时，调用线程的 interrupt() 方法会出现 InterruptedException 异常。</p><p>在以下情况下，持有锁的线程会释放锁：<br>1、执行完同步代码块。<br>2、在执行同步代码块的过程中，遇到异常而导致线程终止。<br>3、在执行同步代码块的过程中，执行了锁所属对象的 wait() 方法，这个线程会释放锁，进行对象的等待池。</p><p>（4）通知一个线程和唤醒所有线程</p><p>notify() 仅 <strong>随机</strong> 唤醒一个线程，多次调用也会随机将等待 wait 状态的线程进行唤醒。</p><p>notifyAll() 方法可以唤醒所有线程。</p><p>但是通知 notify() 方法在 wait() 方法之前调用，后面 wait 线程收不到通知就会一直处于等待状态。</p><p>注意线程在等待结束后其外部条件数据值可能发生改变。</p><p>（5）生产者/消费者模式</p><p>1、一生产者一消费者:</p><pre><code class="Java">class MyStack {    private List list = new ArrayList();    synchronized public void push() {        try {            if (list.size() == 1) {                this.wait();            }            list.add(&quot;anyString=&quot; + Math.random());            this.notify();            System.out.println(&quot;push=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public String pop() {        String returnValue = &quot;&quot;;        try {            if (list.size() == 0) {                System.out.println(&quot;pop操作中的：&quot;                        + Thread.currentThread().getName() + &quot; 线程呈wait状态&quot;);                this.wait();            }            returnValue = &quot;&quot; + list.get(0);            list.remove(0);            this.notify();            System.out.println(&quot;pop=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }        return returnValue;    }}class P {    private MyStack myStack;    public P(MyStack myStack) {        super();        this.myStack = myStack;    }    public void pushService() {        myStack.push();    }}class C {    private MyStack myStack;    public C(MyStack myStack) {        super();        this.myStack = myStack;    }    public void popService() {        System.out.println(&quot;pop=&quot; + myStack.pop());    }}class P_Thread extends Thread {    private P p;    public P_Thread(P p) {        super();        this.p = p;    }    @Override    public void run() {        while (true) {            p.pushService();        }    }}class C_Thread extends Thread {    private C r;    public C_Thread(C r) {        super();        this.r = r;    }    @Override    public void run() {        while (true) {            r.popService();        }    }}public class Main {    public static void main(String[] args) {        MyStack myStack = new MyStack();        P p = new P(myStack);        C r = new C(myStack);        P_Thread pThread = new P_Thread(p);        C_Thread rThread = new C_Thread(r);        pThread.start();        rThread.start();    }}</code></pre><p>2、一生产者多消费者：</p><pre><code class="Java">class MyStack {    private List list = new ArrayList();    synchronized public void push() {        try {            while (list.size() == 1) {                this.wait();            }            list.add(&quot;anyString=&quot; + Math.random());            this.notify();            System.out.println(&quot;push=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public String pop() {        String returnValue = &quot;&quot;;        try {            while (list.size() == 0) {                System.out.println(&quot;pop操作中的：&quot;                        + Thread.currentThread().getName() + &quot; 线程呈wait状态&quot;);                this.wait();            }            returnValue = &quot;&quot; + list.get(0);            list.remove(0);            this.notify();            System.out.println(&quot;pop=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }        return returnValue;    }}</code></pre><p>3、多生产者一消费者。</p><p>4、多生产者多消费者。</p><p>可能产生假死的情况，使用 notifyAll() 方法通知其他线程即可。</p><p>（6）通过管道进行进程间通信</p><p>在 Java 语言中提供了各种各样的输入/输出流，其中管道流 pipeStream 可用于不同线程间之间传送数据。</p><p>一个线程发送数据到输出管道，另一个线程从输入管道中读取数据。</p><pre><code class="Java">class WriteData {    public void writeMethod(PipedOutputStream out) {        try {            System.out.println(&quot;write :&quot;);            for (int i = 0; i &lt; 300; i++) {                String outData = &quot;&quot; + (i + 1);                out.write(outData.getBytes());                System.out.print(outData);            }            System.out.println();            out.close();        } catch (IOException e) {            e.printStackTrace();        }    }}class ReadData {    public void readMethod(PipedInputStream input) {        try {            System.out.println(&quot;read  :&quot;);            byte[] byteArray = new byte[20]; // 字节流            // char[] byteArray = new char[20]; //字符流            int readLength = input.read(byteArray);            while (readLength != -1) {                String newData = new String(byteArray, 0, readLength);                System.out.print(newData);                readLength = input.read(byteArray);            }            System.out.println();            input.close();        } catch (IOException e) {            e.printStackTrace();        }    }}class ThreadWrite extends Thread {    private WriteData write;    private PipedOutputStream out;    public ThreadWrite(WriteData write, PipedOutputStream out) {        super();        this.write = write;        this.out = out;    }    @Override    public void run() {        write.writeMethod(out);    }}class ThreadRead extends Thread {    private ReadData read;    private PipedInputStream input;    public ThreadRead(ReadData read, PipedInputStream input) {        super();        this.read = read;        this.input = input;    }    @Override    public void run() {        read.readMethod(input);    }}public class Main {    public static void main(String[] args) {        try {            WriteData writeData = new WriteData();            ReadData readData = new ReadData();            PipedInputStream inputStream = new PipedInputStream();            PipedOutputStream outputStream = new PipedOutputStream();            // inputStream.connect(outputStream);            outputStream.connect(inputStream);            ThreadRead threadRead = new ThreadRead(readData, inputStream);            threadRead.start();            Thread.sleep(2000);            ThreadWrite threadWrite = new ThreadWrite(writeData, outputStream);            threadWrite.start();        } catch (IOException e) {            e.printStackTrace();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><p>通过管道进行进程间通信可以传递，字节流和字符流。</p><h2 id="方法-join-的使用"><a href="#方法-join-的使用" class="headerlink" title="方法 join 的使用"></a>方法 join 的使用</h2><p>join() 方法具有使线程排队运行的作用，使所属线程 x 正常执行 run() 方法，而使当前线程 z 进行无限期阻塞，等待线程 x 销毁后继续执行线程 z 后面的代码。</p><pre><code class="Java">class MyThread extends Thread {    @Override    public void run() {        try {            int secondValue = (int) (Math.random() * 10000);            System.out.println(secondValue);            Thread.sleep(secondValue);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Test {    public static void main(String[] args) {        try {            MyThread threadTest = new MyThread();            threadTest.start();            threadTest.join();            System.out.println(&quot;我想当threadTest对象执行完毕后我再执行，我做到了&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><p>join 方法有点类似与同步的效果。</p><p>但是 join() 方法内部是由 wait() 方法进行等待，而 sychronized 关键字是使用 <strong>对象监视器</strong> 原理作为同步。</p><p>在 join 过程中，如果当前线程对象被终端，则当前线程出现异常，而 join 的线程正常执行。</p><p>方法 join(long) 中参数是设定等待时间。</p><p>long 是最长的等待时间，如果子线程提前结束，主线程也会结束等待。</p><pre><code class="Java">public final synchronized void join(long millis)throws InterruptedException {    long base = System.currentTimeMillis();    long now = 0;    if (millis &lt; 0) {        throw new IllegalArgumentException(&quot;timeout value is negative&quot;);    }    if (millis == 0) {        while (isAlive()) {            wait(0);        }    } else {        while (isAlive()) {            long delay = millis - now;            if (delay &lt;= 0) {                break;            }            wait(delay);            now = System.currentTimeMillis() - base;        }    }}</code></pre><p>方法 join() 内部由 wait() 方法实现会立即释放对象锁，而 Thread.sleep() 方法不会释放对象锁。</p><h2 id="类-ThreadLocal-的使用"><a href="#类-ThreadLocal-的使用" class="headerlink" title="类 ThreadLocal 的使用"></a>类 ThreadLocal 的使用</h2><p>类 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/ThreadLocal.html" rel="external nofollow noopener noreferrer" target="_blank">ThreadLocal</a> 是保证线程之间变量的隔离性。</p><pre><code class="Java">class Tools {    public static ThreadLocal tl = new ThreadLocal();}class ThreadA extends Thread {    @Override    public void run() {        try {            for (int i = 0; i &lt; 100; i++) {                if (Tools.tl.get() == null) {                    Tools.tl.set(&quot;ThreadA&quot; + (i + 1));                } else {                    System.out.println(&quot;ThreadA get Value=&quot; + Tools.tl.get());                }                Thread.sleep(200);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadB extends Thread {    @Override    public void run() {        try {            for (int i = 0; i &lt; 100; i++) {                if (Tools.tl.get() == null) {                    Tools.tl.set(&quot;ThreadB&quot; + (i + 1));                } else {                    System.out.println(&quot;ThreadB get Value=&quot; + Tools.tl.get());                }                Thread.sleep(200);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        try {            ThreadA a = new ThreadA();            ThreadB b = new ThreadB();            a.start();            b.start();            for (int i = 0; i &lt; 100; i++) {                if (Tools.tl.get() == null) {                    Tools.tl.set(&quot;Main&quot; + (i + 1));                } else {                    System.out.println(&quot;Main get Value=&quot; + Tools.tl.get());                }                Thread.sleep(200);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><h2 id="类-InheritableThreadLocal-的使用"><a href="#类-InheritableThreadLocal-的使用" class="headerlink" title="类 InheritableThreadLocal 的使用"></a>类 InheritableThreadLocal 的使用</h2><p>类 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/InheritableThreadLocal.html" rel="external nofollow noopener noreferrer" target="_blank">InheritableThreadLocal</a> 可以再子线程中取得父线程继承下来的值。</p><pre><code class="Java">class InheritableThreadLocalExt extends InheritableThreadLocal {    @Override    protected Object initialValue() {        return new Date().getTime();    }    @Override    protected Object childValue(Object parentValue) {        return parentValue + &quot; 我在子线程加的~!&quot;;    }}class Tools {    public static InheritableThreadLocalExt tl = new InheritableThreadLocalExt();}class ThreadA extends Thread {    @Override    public void run() {        try {            for (int i = 0; i &lt; 10; i++) {                System.out.println(&quot;在ThreadA线程中取值=&quot; + Tools.tl.get());                Thread.sleep(100);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        try {            for (int i = 0; i &lt; 10; i++) {                System.out.println(&quot;       在Main线程中取值=&quot; + Tools.tl.get());                Thread.sleep(100);            }            Thread.sleep(5000);            ThreadA a = new ThreadA();            a.start();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><p>在继承的同时可以对值进行进一步的处理。</p><p>但在子线程取得值的同时，主线程将 InheritableThreadLocal 中的值进行更改，子线程取得的值还是旧值。</p><h1 id="第四章-Lock-的使用"><a href="#第四章-Lock-的使用" class="headerlink" title="第四章 Lock 的使用"></a>第四章 Lock 的使用</h1><h2 id="ReentrantLock-类"><a href="#ReentrantLock-类" class="headerlink" title="ReentrantLock 类"></a>ReentrantLock 类</h2><p>（1）ReentrantLock 实现同步</p><pre><code class="Java">ReentrantLock reentrantLock = new ReentrantLock();reentrantLock.lock();// Do somethingreentrantLock.unlock();</code></pre><p>（2）使用 Condition 实现等待/通知</p><pre><code class="Java">class MyService {    private Lock lock = new ReentrantLock();    public Condition condition = lock.newCondition();    public void await() {        try {            lock.lock();            System.out.println(&quot; await时间为&quot; + System.currentTimeMillis());            condition.await();        } catch (InterruptedException e) {            e.printStackTrace();        } finally {            lock.unlock();        }    }    public void signal() {        try {            lock.lock();            System.out.println(&quot;signal时间为&quot; + System.currentTimeMillis());            condition.signal();        } finally {            lock.unlock();        }    }}class ThreadA extends Thread {    private MyService service;    public ThreadA(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.await();    }}public class Run {    public static void main(String[] args) throws InterruptedException {        MyService service = new MyService();        ThreadA a = new ThreadA(service);        a.start();        Thread.sleep(3000);        service.signal();    }}</code></pre><p>这样就实现了 Condition 的通知/等待功能。</p><p>对于多个 Condition 实现通知部分线程，可多次调用 lock.newCondition() 方法。</p><p>（3）公平锁和非公平锁</p><p>锁 Lock 分为公平锁和非公平锁：</p><p>公平锁表示线程获取锁的顺序是按照线程 <strong>加锁的顺序</strong> 来分配的。而非公平锁是抢占机制，是随机获取获取锁的。</p><p>ReentrantLock 可使用构造函数实例化公平锁和非公平锁。</p><p>（4）ReentrantLock 中的常用方法</p><p>getHoldCount() 当前线程保持锁定的个数，也就是调用 lock() 方法的次数。</p><p>getQueueLength() 返回等待获得锁定的线程的估计数。</p><p>getWaitQueueLength​(Condition condition) 返回等待与此锁定相关的给定条件 condition 的线程估计数。</p><p>hasQueuedThread​(Thread thread) 查询指定线程 thread 是否在等待获得此锁定；hasQueuedThreads() 查询是否有线程在等待次锁。</p><p>hasWaiters​(Condition condition) 查询是否有线程正在等待与此线程有关的 condition 条件。</p><p>isFair() 是不是公平锁。</p><p>isHeldByCurrentThread() 当前线程是否保持此锁。</p><p>isLocked() 查询此锁定是否由任意线程锁定。</p><p>lockInterruptibly() 如果当前线程未中断，则获得此锁；否则出现异常。</p><p>tryLock() 调用时未被另外一个线程保持的情况下，才获得此锁定；tryLock​(long timeout, TimeUnit unit) 在给定时间内。</p><h2 id="ReentrantReadWriteLock-类"><a href="#ReentrantReadWriteLock-类" class="headerlink" title="ReentrantReadWriteLock 类"></a>ReentrantReadWriteLock 类</h2><p>读写锁 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html" rel="external nofollow noopener noreferrer" target="_blank">ReentrantReadWriteLock</a> 表示也有两个锁，一个是与读有关的锁，也成为共享锁；另一个是与写有关的锁，也叫排他锁。</p><p>多个读锁之间不互斥，读锁和写锁互斥，写锁和写锁互斥。</p><p>（1）读读共享</p><pre><code class="java">import java.util.concurrent.locks.ReentrantReadWriteLock;class Service {    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    public void read() {        try {            try {                lock.readLock().lock();                System.out.println(&quot;获得读锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.readLock().unlock();            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class ThreadA extends Thread {    private Service service;    public ThreadA(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.read();    }}class ThreadB extends Thread {    private Service service;    public ThreadB(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.read();    }}public class Main {    public static void main(String[] args) {        Service service = new Service();        ThreadA a = new ThreadA(service);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(service);        b.setName(&quot;B&quot;);        a.start();        b.start();    }}/* * 获得读锁B 1526483245955 * 获得读锁A 1526483245955 */</code></pre><p>（2）写写互斥</p><pre><code class="Java">class Service {    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    public void write() {        try {            try {                lock.writeLock().lock();                System.out.println(&quot;获得写锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.writeLock().unlock();            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * 获得写锁B 1526483357433 * 获得写锁A 1526483367434 */</code></pre><p>（3）读写互斥、写读互斥</p><pre><code class="Java">class Service {    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    public void read() {        try {            try {                lock.readLock().lock();                System.out.println(&quot;获得读锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.readLock().unlock();            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void write() {        try {            try {                lock.writeLock().lock();                System.out.println(&quot;获得写锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.writeLock().unlock();            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * 获得读锁A 1526483561390 * 获得写锁B 1526483571390 *//* * 获得写锁B 1526483608487 * 获得读锁A 1526483618487 */</code></pre><h1 id="第五章-定时器-Timer"><a href="#第五章-定时器-Timer" class="headerlink" title="第五章 定时器 Timer"></a>第五章 定时器 Timer</h1><p>（1）Timer 的概念</p><p>类 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Timer.html" rel="external nofollow noopener noreferrer" target="_blank">Timer</a> 主要负责计划任务的功能，也就是在指定时间开始执行某一个任务。Timer 的封装类是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/TimerTask.html" rel="external nofollow noopener noreferrer" target="_blank">TimerTask</a> 。</p><p>（2）Timer 的常用方法</p><p>1、schedule​(TimerTask task, Date time) 在指定日期执行一次某一任务。</p><pre><code class="Java">public class Run {    private static Timer timer = new Timer();    // 守护线程方式，任务执行后自行销毁    // private static Timer timer = new Timer(true);    static public class MyTask extends TimerTask {        @Override        public void run() {            System.out.println(&quot;运行了！时间为：&quot; + new Date());        }    }    public static void main(String[] args) {        try {            MyTask task = new MyTask();            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);            String dateString = &quot;2014-10-12 11:55:00&quot;;            Date dateRef = sdf.parse(dateString);            System.out.println(&quot;字符串时间：&quot; + dateRef.toLocaleString() + &quot; 当前时间：&quot;                    + new Date().toLocaleString());            timer.schedule(task, dateRef);        } catch (ParseException e) {            e.printStackTrace();        }    }}</code></pre><p>如果 time 晚于当前时间，则按照计划执行；若早于当前时间，则立即执行。</p><p>TimerTask 是以任务队列的方式按照顺序知心话，如果前面的任务执行时间较长，后面的任务也会延迟。</p><p>2、schedule​(TimerTask task, Date firstTime, long period) 在指定日期后，按照指定时间间隔周期性无限循环地执行某一任务。</p><p>3、schedule​(TimerTask task, long delay) 以当前时间为参考，延迟指定地毫秒数之后执行一次 TimerTask 任务。</p><p>4、schedule​(TimerTask task, long delay, long period) 以当前时间为参考，延迟指定地毫秒数之后，再以指定时间间隔周期性无限循环地执行某一任务。</p><p>5、scheduleAtFixedRate​() 方法</p><p>主要有两个方法：</p><p>scheduleAtFixedRate​(TimerTask task, Date firstTime, long period)</p><p>scheduleAtFixedRate​(TimerTask task, long delay, long period)</p><p>方法 schedule 和 scheduleAtFixedRate​ 区别和联系：</p><p>1) 方法 schedule 和 scheduleAtFixedRate 都会顺序序执行，所以不要考虑非线程安全的情况。<br>2) 方法 schedule 和 scheduleAtFixedRate 主要的区别只在于不延时的情况。</p><ul><li>使用 schedule 方法:如果执行任务的时间没有被延时，那么下一次任务的执行时间参考的是上一次任务的“开始”时的时间来计算。</li><li>使用 scheduleAtFixedRate 方法:如果执行任务的时间没有被延时，那么下一次任务的执行时间参考的是上一次任务的“结束”时的时间来计算。</li></ul><p>3) 延时的情况则没有区别，也就是使用 schedule 或 scheduleAtFixedRate 方法都是如果执行任务的时间被延时，那么下一次任务的执行时间参考的是上一次任务“结束”时的时间来计算。<br>4) schedule 方法没有具有任务追赶执行性，而 scheduleAtFixedRate 是有的。</p><p><strong>不延时</strong> 是指 TimerTask 任务执行的时间比 period 周期要短，不会对下次任务执行造成延迟。<br><strong>追赶执行性</strong> 是指 任务执行时间 比当前时间早的情况下，过去时间段内的任务从现在开始执行。</p><h1 id="第六章-单例模式与多线程"><a href="#第六章-单例模式与多线程" class="headerlink" title="第六章 单例模式与多线程"></a>第六章 单例模式与多线程</h1><p>（1）单例模式概述</p><p>单例模式可分为两种：</p><p>1、立即执行/“饿汉模式”：使用类的时候已经将对象创建完毕。</p><pre><code class="Java">public class MyObject {    // 立即加载方式==饿汉模式    private static MyObject myObject = new MyObject();    private MyObject() {    }    public static MyObject getInstance() {        // 此代码版本为立即加载        // 此版本代码的缺点是不能有其它实例变量        // 因为getInstance()方法没有同步        // 所以有可能出现非线程安全问题        return myObject;    }}</code></pre><p>2、延迟加载/“懒汉模式”：在使用类的时候实例才被创建。</p><p>DCL 双检查锁机制。</p><pre><code class="Java">public class MyObject {    private volatile static MyObject myObject;    private MyObject() {    }    // 使用双检测机制来解决问题    // 即保证了不需要同步代码的异步    // 又保证了单例的效果    public static MyObject getInstance() {        try {            if (myObject != null) {            } else {                // 模拟在创建对象之前做一些准备性的工作                Thread.sleep(3000);                synchronized (MyObject.class) {                    if (myObject == null) {                        myObject = new MyObject();                    }                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }        return myObject;    }    // 此版本的代码称为：    // 双重检查Double-Check Locking}</code></pre><p>（2）单例模式的实现方式</p><p>单例模式还可以由静态内置类、static 代码块、enum 枚举数据类实现。</p><h1 id="第七章-拾遗增补"><a href="#第七章-拾遗增补" class="headerlink" title="第七章 拾遗增补"></a>第七章 拾遗增补</h1><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>线程在不同运行时期有不同的状态，状态信息存储在 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.State.html" rel="external nofollow noopener noreferrer" target="_blank">State</a> 枚举类中。</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/java_thread_state.png" alt="java_thread_state"></p><p>A thread can be in one of the following states:</p><ul><li>NEW ：A thread that has not yet started.</li><li>RUNNABLE ：A thread executing in the Java virtual machine.</li><li>BLOCKED ：A thread that is blocked waiting for a monitor lock.</li><li>WAITING ：A thread that is waiting indefinitely for another thread to perform a particular action.</li><li>TIMED_WAITING ：A thread that is waiting for another thread to perform an action for up to a specified waiting time.</li><li>TERMINATED ：A thread that has exited.</li></ul><p>A thread can be in only one state at a given point in time. These states are virtual machine states which do not reflect any operating system thread states.</p><h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><p>线程组中可以包含线程对象和线程组，对其进行批量管理和有效组织。</p><p>（1）线程组的关联</p><p>1 级关联，即没有子孙对象。</p><pre><code class="Java">ThreadA aRunnable = new ThreadA();ThreadB bRunnable = new ThreadB();ThreadGroup group = new ThreadGroup(&quot;线程组&quot;);Thread aThread = new Thread(group, aRunnable);Thread bThread = new Thread(group, bRunnable);aThread.start();bThread.start();</code></pre><p>多级关联，存在子孙对象。</p><pre><code class="Java">// 在main组中添加一个线程组A，然后在这个A组中添加线程对象ZThreadGroup mainGroup = Thread.currentThread().getThreadGroup();ThreadGroup group = new ThreadGroup(mainGroup, &quot;A&quot;);Runnable runnable = new Runnable() {    @Override    public void run() {        try {            System.out.println(&quot;runMethod!&quot;);            Thread.sleep(10000);// 线程必须在运行状态才可以受组管理        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }};Thread newThread = new Thread(group, runnable);newThread.setName(&quot;Z&quot;);newThread.start();// 线程必须启动然后才归到组A中</code></pre><p>（2）线程组自动归属特性</p><p>自动归属就是在实例化一个 ThreadGroup 线程组 x 时，如果不指定所属的线程组，则 x 线程组会自动归到当前线程对象所属的线程组中。</p><p>（3）线程组的操作</p><p>获取父线程组，ThreadGroup 的 getParent() 方法获取父线程组。</p><pre><code class="Java">Thread.currentThread().getThreadGroup().getParent()</code></pre><p>线程组内的线程批量停止，ThreadGroup 的 interrupt() 方法。</p><h2 id="SimpleDateFormat-非线程安全"><a href="#SimpleDateFormat-非线程安全" class="headerlink" title="SimpleDateFormat 非线程安全"></a>SimpleDateFormat 非线程安全</h2><p>类 SimpleDateFormat 主要负责日期的转化和格式化，但在多线程环境下，非常容易造成数据转换和处理的不准确，SimpleDateFormat 不是线程安全的。</p><h2 id="多线程出现异常的处理"><a href="#多线程出现异常的处理" class="headerlink" title="多线程出现异常的处理"></a>多线程出现异常的处理</h2><p>（1）线程中出现异常的处理</p><pre><code class="Java">// 指定线程对象设置异常处理类MyThread t1 = new MyThread();t1.setName(&quot;线程t1&quot;);t1.setUncaughtExceptionHandler(new UncaughtExceptionHandler() {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;线程:&quot; + t.getName() + &quot; 出现了异常：&quot;);        e.printStackTrace();    }});t1.start();// 指定线程类的所有对象设置默认异常处理类MyThread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;线程:&quot; + t.getName() + &quot; 出现了异常：&quot;);        e.printStackTrace();    }});</code></pre><p>（2）线程组中出现异常的处理</p><pre><code class="Java">public class MyThreadGroup extends ThreadGroup {    public MyThreadGroup(String name) {        super(name);    }    @Override    public void uncaughtException(Thread t, Throwable e) {        super.uncaughtException(t, e);        this.interrupt();    }}</code></pre><p>注意线程组中的线程对象 run() 方法内部不要有 catch 语句，否则 uncaughtException 不执行。</p><p>（3）线程组异常处理的传递</p><pre><code class="Java">package com.wshunli.thread.sync71;class MyThread extends Thread {    private String num = &quot;a&quot;;    public MyThread() {        super();    }    public MyThread(ThreadGroup group, String name) {        super(group, name);    }    @Override    public void run() {        int numInt = Integer.parseInt(num);        System.out.println(&quot;在线程中打印：&quot; + (numInt + 1));    }}class MyThreadGroup extends ThreadGroup {    public MyThreadGroup(String name) {        super(name);    }    @Override    public void uncaughtException(Thread t, Throwable e) {        super.uncaughtException(t, e);        System.out.println(&quot;线程组的异常处理&quot;);        e.printStackTrace();    }}class ObjectUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;对象的异常处理&quot;);        e.printStackTrace();    }}class StateUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;静态的异常处理&quot;);        e.printStackTrace();    }}public class Main {    public static void main(String[] args) {        MyThread myThread = new MyThread();        // 对象        myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        // MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 对象的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */public class Main {    public static void main(String[] args) {        MyThread myThread = new MyThread();        // 对象        // myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 静态的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */</code></pre><p>对于线程组而言：</p><pre><code class="Java">public class Main {    public static void main(String[] args) {        MyThreadGroup group = new MyThreadGroup(&quot;我的线程组&quot;);        MyThread myThread = new MyThread(group, &quot;我的线程&quot;);        // 对象        myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        // MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 对象的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */public class Main {    public static void main(String[] args) {        MyThreadGroup group = new MyThreadGroup(&quot;我的线程组&quot;);        MyThread myThread = new MyThread(group, &quot;我的线程&quot;);        // 对象        // myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 静态的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; * 线程组的异常处理 *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */</code></pre><blockquote><p>本书是阅读完了，也只是一些多线程的基础，距离实战还是有差距，后面再深入学习 《Java并发编程的艺术》、《Java并发编程实战》等书籍逐步提高。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面面试什么的多线程部分问的比较多，需要加强下，这里记录总结 《Java多线程编程核心技术》 读书情况。&lt;/p&gt;&lt;h1 id=&quot;第一章-Java-多线程技能&quot;&gt;&lt;a href=&quot;#第一章-Java-多线程技能&quot; class=&quot;headerlink&quot; title=&quot;第一章 J
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java多线程编程核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="https://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>https://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-31T14:51:28.654Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;&lt;p&gt;Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 
      
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="https://www.wshunli.com/posts/4cbab315.html"/>
    <id>https://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-31T14:51:28.662Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="https://www.wshunli.com/posts/b96eb139.html"/>
    <id>https://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-04-28T06:47:46.000Z</published>
    <updated>2018-05-31T14:51:28.662Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里云实习生面试</title>
    <link href="https://www.wshunli.com/posts/b3a8426.html"/>
    <id>https://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-31T14:51:28.662Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="https://www.wshunli.com/posts/689a494.html"/>
    <id>https://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-31T14:51:28.662Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="https://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>https://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-31T14:51:28.662Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="https://www.wshunli.com/posts/3cb63fb.html"/>
    <id>https://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-31T14:51:28.662Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-31T14:51:28.658Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;&lt;p&gt;老是看书学习理论知识不太行，还得动手写代码啊。&lt;/p&gt;&lt;p&gt;1、赋值运算函数&lt;/p&gt;&lt;p&gt;2、单例设计模式&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;Java&quot;&gt;public class SingletonClass {

      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/9c87288c.html"/>
    <id>https://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-31T14:51:28.658Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><p>第十四章 并发</p><p>这部分大概地看了下，后面再看本书仔细学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;&lt;p&gt;前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。&lt;/p&gt;&lt;p&gt;《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎&lt;br&gt;&lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
</feed>
