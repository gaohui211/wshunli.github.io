<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-05-11T15:06:20.166Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我本将心向明月，奈何明月照沟渠</title>
    <link href="https://www.wshunli.com/posts/2739df62.html"/>
    <id>https://www.wshunli.com/posts/2739df62.html</id>
    <published>2018-05-08T06:06:23.000Z</published>
    <updated>2018-05-11T15:06:20.166Z</updated>
    
    <content type="html"><![CDATA[<p>我本将心向明月，奈何明月照沟渠，<br>落花有意随流水，流水无心恋落花。</p><a id="more"></a><p>简历初筛未通过，笔试机会都没有。</p><p>滴，好人卡。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我本将心向明月，奈何明月照沟渠，&lt;br&gt;落花有意随流水，流水无心恋落花。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《Java多线程编程核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/4e70966b.html"/>
    <id>https://www.wshunli.com/posts/4e70966b.html</id>
    <published>2018-05-05T14:47:09.000Z</published>
    <updated>2018-05-11T15:06:20.166Z</updated>
    
    <content type="html"><![CDATA[<p>前面面试什么的多线程部分问的比较多，需要加强下<a id="more"></a> ，这里记录总结 《Java多线程编程核心技术》 读书情况。</p><h1 id="第一章-Java-多线程技能"><a href="#第一章-Java-多线程技能" class="headerlink" title="第一章 Java 多线程技能"></a>第一章 Java 多线程技能</h1><p>本章主要介绍了线程概念、核心方法以及优先级。</p><p>1、进程和线程的区别</p><p><strong>进程</strong>是受操作系统管理的基本运行单元，是系统进行资源分配和调度的独立单位。<br><strong>线程</strong>是在进程中独立运行的子任务，CPU 在这些任务之间不停地切换，各子任务共享程序的内存空间。</p><p>线程和进程的区别是什么？ - 知乎：<br><a href="https://www.zhihu.com/question/25532384" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/25532384</a></p><p>2、线程的创建</p><p>（1）继承 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.html" rel="external nofollow noopener noreferrer" target="_blank">Thread</a> 类</p><p>（2）实现 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Runnable.html" rel="external nofollow noopener noreferrer" target="_blank">Runnable</a> 接口</p><p>其中 Thread 类实现了 Runable 接口，都需要重写里面 run 方法。</p><p>两种方式的区别：</p><p>实现 Runnable 的类更具有健壮性，避免了单继承的局限。<br>Runnable 更容易实现资源共享，能多个线程同时处理一个资源。</p><p>Java中 Thread和Runnable实现多线程的区别和联系 - CSDN博客:<br><a href="https://blog.csdn.net/oxuanboy1/article/details/51733279" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/oxuanboy1/article/details/51733279</a></p><p><strong>非线程安全</strong> 主要是指多个线程对同一对象中的同一变量实例进行操作时会出现值被修改、值不同步的现象。</p><p>3、线程的启动和停止</p><p>线程的启动可以使用 start() 或者 run() 方法，</p><p>调用 start() 方法，虚拟机会创建新的线程运行 run 方法；<br>调用 run() 方法后，会在调用的线程执行，不会创建新的线程。</p><p>线程的终止方法有三种：</p><p>（1）使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。<br>（2）使用 stop() 方法强行终止线程（这个方法不推荐使用，因为 stop() 和 suspend()、resume() 一样，也可能发生不可预料的结果）。<br>（3）使用 interrupt() 方法中断线程。</p><p>下面介绍了 interrupt() 方法停止线程，调用该方法知识在当前线程中打了一个停止的标记，并不是真的停止线程。</p><p>如何判断线程的状态是不是停止的：</p><p>（1）this.interrupted() 测试 <strong>当前线程</strong> 是否已经中断，会将状态标志置清为 false 。</p><pre><code class="Java">public static boolean interrupted() {}</code></pre><p>（2）this.isInterrupted() 测试线程是否已经中断，不清除状态标志。</p><pre><code class="Java">public boolean isInterrupted() {}</code></pre><p>Java并发（基础知识）—— 创建、运行以及停止一个线程 - Tim-Tom - 博客园：<br><a href="https://www.cnblogs.com/timlearn/p/4007982.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/timlearn/p/4007982.html</a></p><p>其他方法 stop()、suspend()、resume() 不推荐使用。</p><p>4、线程的主要方法</p><p>Thread.currentThread() 返回代码段正在被哪个线程调用的信息。</p><p>isAlive() 判断当前线程是否处于活动状态，即线程已经启动但尚未终止。</p><pre><code class="Java">package com.wshunli.thread;public class CountOperate extends Thread{    public CountOperate(){        System.out.println(&quot;CountOperate---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName()=&quot; + Thread.currentThread().getName());//获取线程名        System.out.println(&quot;Thread.currentThread().isAlive()=&quot; + Thread.currentThread().isAlive()); //查看线程是否存活        System.out.println(&quot;this.getName=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;CountOperate---end &quot;);        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));    }    @Override    public void run() {        System.out.println(&quot;run---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName=&quot; + Thread.currentThread().getName());        System.out.println(&quot;Thread.currentThread().isAlive()&quot; + Thread.currentThread().isAlive());        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));        System.out.println(&quot;this.getName()=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;run --- end&quot;);    }}package com.wshunli.thread;public class Main {    public static void main(String[] args) {        CountOperate c = new CountOperate();//        c.start();        Thread t1 = new Thread(c);        System.out.println(&quot;main begin t1 isAlive=&quot; + t1.isAlive());        t1.setName(&quot;A&quot;);        t1.start();        System.out.println(&quot;main end t1 isAlive=&quot; + t1.isAlive());    }}/* * CountOperate---begin * Thread.currentThread().getName()=main * Thread.currentThread().isAlive()=true * this.getName=Thread-0 * this.isAlive()=false * CountOperate---end * Thread.currentThread()==this :false * main begin t1 isAlive=false * main end t1 isAlive=true * run---begin * Thread.currentThread().getName=A * Thread.currentThread().isAlive()true * Thread.currentThread()==this :false * this.getName()=Thread-0 * this.isAlive()=false * run --- end */</code></pre><p>Thread.sleep() 方法是在指定的毫秒数内让“当前正在执行的线程”休眠（暂停执行）。</p><p>yield() 放弃当前 CPU 资源，将它让给其他任务占用 CPU 时间。</p><p>5、线程的优先级</p><p>在 Java 中线程的优先级分为 1 ~ 10 这 10 个等级，可以使用 setPriority​(int newPriority) 方法设置。</p><p>优先级较高的线程得到的 CPU 资源较多，CPU 会尽量优先执行，并不一定先执行完。</p><p>线程的优先级具有继承性。</p><p>6、守护线程</p><p>在 java 中线程有两种：用户线程、守护线程。</p><p>守护线程的作用是为其他线程提供便利服务，当进程中不存在非守护线程了，守护线程会自动销毁。</p><p>守护线程最典型的应用就是 GC （垃圾回收器）。</p><h1 id="第二章-对象及变量的并发访问"><a href="#第二章-对象及变量的并发访问" class="headerlink" title="第二章 对象及变量的并发访问"></a>第二章 对象及变量的并发访问</h1><h2 id="synchronized-同步方法"><a href="#synchronized-同步方法" class="headerlink" title="synchronized 同步方法"></a>synchronized 同步方法</h2><p>（1）方法内的变量线程安全，而 <strong>实例变量</strong> 非线程安全。</p><p>（2）多个对象多个锁</p><p>关键字 synchronized 取得的锁都是对象锁，而不是把方法或者代码段当作锁。</p><pre><code class="Java">class HasSelfPrivateNum {    public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class ThreadA extends Thread {    private HasSelfPrivateNum numRef;    public ThreadA(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;a&quot;);    }}class ThreadB extends Thread {    private HasSelfPrivateNum numRef;    public ThreadB(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;b&quot;);    }}class Main {    public static void main(String[] args) {        HasSelfPrivateNum numRef = new HasSelfPrivateNum();        ThreadA athread = new ThreadA(numRef);        athread.start();        ThreadB bthread = new ThreadB(numRef);        bthread.start();    }}/* * a set over! * b set over! * b num=200 * a num=100 */</code></pre><p>对于多个对象实例，会有多个对象锁，所以还是异步的、互不影响。</p><p>（3）synchronized 方法与对象锁</p><p>调用 synchronized 声明的方法是排队同步执行的。</p><p>把 HasSelfPrivateNum 类的 addI() 方法添加 synchronized 关键字，输出就变为：</p><pre><code class="java">class HasSelfPrivateNum {    synchronized public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * a set over! * a num=100 * b set over! * b num=200 */</code></pre><p>上面多个线程调用同一方法，下面再看调用 <strong>不同方法</strong> 的情况。</p><pre><code class="java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyObject object;    public ThreadA(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodA();    }}class ThreadB extends Thread {    private MyObject object;    public ThreadB(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodB();    }}public class Main {    public static void main(String[] args) {        MyObject object = new MyObject();        ThreadA a = new ThreadA(object);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(object);        b.setName(&quot;B&quot;);        a.start();        b.start();    }}/* * begin methodA threadName=A * end endTime=1526043906998 * begin methodB threadName=B begin time=1526043906998 * end */</code></pre><p>修改下 methodB() 方法，去除 synchronized 关键字。</p><pre><code class="Java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * begin methodA threadName=A * begin methodB threadName=B begin time=1526044084533 * end * end endTime=1526044089534 */</code></pre><p>由此可见：</p><p>A 线程先持有 object 对象锁，B 线程可以以异步方式调用 object 对象中的 <strong>非 synchronized 类型</strong> 的方法。<br>A 线程先持有 object 对象锁，B 线程如果在这时调用 object 对中的 <strong>synchronized 类型</strong> 的方法则需等待，也就是同步。</p><p>（4）脏读</p><p>脏读（dirtyRead）即赋值时进行了同步，但在取值时已经被其他线程修改过了。</p><p>跟上例类似，在方法上加 synchronized 关键字可以解决脏读问题。</p><p>（5）synchronized 锁重入</p><p>synchronized 具有锁重入功能，也就说当一个线程获得对象锁之后，再次请求此对象锁可以再次得到该对象的锁。</p><pre><code class="Java">public class Service {    synchronized public void service1() {        System.out.println(&quot;service1&quot;);        service2();    }    synchronized public void service2() {        System.out.println(&quot;service2&quot;);        service3();    }    synchronized public void service3() {        System.out.println(&quot;service3&quot;);    }}</code></pre><p>可重入锁的概念：自己可以再次获取自己的内部锁。假如说不可锁重入的话，线程一直等待释放对象锁，而对象锁自己拥有，就会造成死锁。</p><p><strong>可重入锁</strong> 也支持在父子类继承的环境中，即子类可以通过重入锁调用父类的同步方法。</p><p>（6）当线程执行的代码出现异常时，其所持有的锁会自动释放。</p><p>（7）同步不可以继承。</p><pre><code class="Java">class Super {    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int main 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int main 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class Sub extends Super {    @Override    public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class MyThreadA extends Thread {    private Sub sub;    public MyThreadA(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}class MyThreadB extends Thread {    private Sub sub;    public MyThreadB(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}public class Main {    public static void main(String[] args) {        Sub subRef = new Sub();        MyThreadA a = new MyThreadA(subRef);        a.setName(&quot;A&quot;);        a.start();        MyThreadB b = new MyThreadB(subRef);        b.setName(&quot;B&quot;);        b.start();    }}/* * int sub 下一步 sleep begin threadName=A time=1526046246540 * int sub 下一步 sleep begin threadName=B time=1526046246540 * int sub 下一步 sleep   end threadName=A time=1526046251541 * int sub 下一步 sleep   end threadName=B time=1526046251541 * int main 下一步 sleep begin threadName=A time=1526046251541 * int main 下一步 sleep   end threadName=A time=1526046256541 * int main 下一步 sleep begin threadName=B time=1526046256541 * int main 下一步 sleep   end threadName=B time=1526046261542 */</code></pre><p>子类方法添加 synchronized 关键字。</p><pre><code class="Java">class Sub extends Super {    @Override    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * int sub 下一步 sleep begin threadName=A time=1526046197787 * int sub 下一步 sleep   end threadName=A time=1526046202787 * int main 下一步 sleep begin threadName=A time=1526046202787 * int main 下一步 sleep   end threadName=A time=1526046207788 * int sub 下一步 sleep begin threadName=B time=1526046207788 * int sub 下一步 sleep   end threadName=B time=1526046212789 * int main 下一步 sleep begin threadName=B time=1526046212789 * int main 下一步 sleep   end threadName=B time=1526046217790 */</code></pre><p>由此可见：重写父类的同步方法并不能同步，还是要加 synchronized 关键字才行。</p><h2 id="synchronized-同步语句块"><a href="#synchronized-同步语句块" class="headerlink" title="synchronized 同步语句块"></a>synchronized 同步语句块</h2><p>（1）synchronized 同步语句块的使用</p><p>当两个线程同时访问同一对象 object 中的 synchronized (this) 同步代码块时，一段时间内只能有一个线程被执行，另一个线程要等这个线程执行完以后才能执行。</p><p>（2）用同步代码块解决同步方法的弊端</p><p>同步方法的弊端是有时候执行时间会比较长。</p><pre><code class="Java">// 使用同步方法public class Task {    private String getData1;    private String getData2;    public synchronized void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            getData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            getData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}// 使用同步代码块public class Task {    private String getData1;    private String getData2;    public void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            String privateGetData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            String privateGetData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            synchronized (this) {                getData1 = privateGetData1;                getData2 = privateGetData2;            }            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>其实也就是在耗时部分是异步执行的，从而缩短了代码的执行时长。</p><p>当一个线程访问 同步代码块 时，另一个线程仍然可以访问该对象的非同步代码块。即在 synchronized 块中就是同步执行，不在 synchronized 块中时异步执行。</p><p>（3）synchronized 代码块之间的同步性</p><p>在使用 synchronized (this) 代码块时，当线程访问 object 的一个 synchronized (this) 代码块时，其他线程对同一 object 中所有 synchronized (this) 同步代码块的访问将阻塞。</p><p>和 synchronized 方法一样，synchronized (this) 代码块也是锁定 <strong>当前对象</strong> 的。其他对象访问同一 object 中的 synchronized 方法也会阻塞。</p><p>（4）将任意对象作为对象监视器</p><p>多个线程调用同一个对象中的不同名称的 synchronized 同步方法或 synchronized(this) 同步代码块时，调用的效果就是按顺序执行，也就是 <strong>同步的，阻塞的</strong> 。</p><p>这说明 synchronized 同步方法或 synchronized(this) 同步代码块分别有 <strong>两种作用</strong> ：</p><ul><li>synchronized 同步 <strong>方法</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized 同步方法中的代码。</li></ul></li><li>synchronized(this) 同步 <strong>代码块</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized(this) 同步代码块中的代码。</li></ul></li></ul><p>类似，对于 synchronized(非this对象) 同步代码块：</p><p>当多个线程持有 “对象监视器” 为同一个对象的前提下，同一时间只有一个线程可以执行 synchronized(非this对象x) 同步代码块中的代码。</p><pre><code class="java">public class Service {    private String usernameParam;    private String passwordParam;    public void setUsernamePassword(String username, String password) {        try {            String anyString = new String();            synchronized (anyString) {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入同步块&quot;);                usernameParam = username;                Thread.sleep(3000);                passwordParam = password;                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开同步块&quot;);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>而多个线程持有的 “对象监视器” 不是同一对象时，还是异步执行的。</p><pre><code class="Java">public class Service {    private String anyString = new String();    public void a() {        try {            synchronized (anyString) {                System.out.println(&quot;a begin&quot;);                Thread.sleep(3000);                System.out.println(&quot;a   end&quot;);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void b() {        System.out.println(&quot;b begin&quot;);        System.out.println(&quot;b   end&quot;);    }}</code></pre><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面面试什么的多线程部分问的比较多，需要加强下
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java多线程编程核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="https://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>https://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-11T15:06:20.162Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><a id="more"></a><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="https://www.wshunli.com/posts/4cbab315.html"/>
    <id>https://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-11T15:06:20.166Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="https://www.wshunli.com/posts/b96eb139.html"/>
    <id>https://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-04-28T06:47:46.000Z</published>
    <updated>2018-05-11T15:06:20.166Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里云实习生面试</title>
    <link href="https://www.wshunli.com/posts/b3a8426.html"/>
    <id>https://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-11T15:06:20.170Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="https://www.wshunli.com/posts/689a494.html"/>
    <id>https://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-11T15:06:20.170Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="https://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>https://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-11T15:06:20.170Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="https://www.wshunli.com/posts/3cb63fb.html"/>
    <id>https://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-11T15:06:20.170Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-11T15:06:20.166Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/9c87288c.html"/>
    <id>https://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-11T15:06:20.166Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><p>第十四章 并发</p><p>这部分大概地看了下，后面再看本书仔细学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="https://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>https://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-05-11T15:06:20.170Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（amap）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（amap）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="https://www.wshunli.com/posts/4e05997a.html"/>
    <id>https://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-05-11T15:06:20.166Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="https://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>https://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-05-11T15:06:20.166Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="https://www.wshunli.com/posts/96840e7.html"/>
    <id>https://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-05-11T15:06:20.166Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="https://www.wshunli.com/posts/4e57ccd.html"/>
    <id>https://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-05-11T15:06:20.162Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="https://www.wshunli.com/posts/91672bd7.html"/>
    <id>https://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-05-11T15:06:20.162Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="https://www.wshunli.com/posts/84f52548.html"/>
    <id>https://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-05-11T15:06:20.170Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="https://www.wshunli.com/posts/b4e3c990.html"/>
    <id>https://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-05-11T15:06:20.170Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（六）</title>
    <link href="https://www.wshunli.com/posts/9c05eee5.html"/>
    <id>https://www.wshunli.com/posts/9c05eee5.html</id>
    <published>2018-01-22T02:44:25.000Z</published>
    <updated>2018-05-11T15:06:20.166Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】生活是一条路，走走停停，停停走走
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
</feed>
