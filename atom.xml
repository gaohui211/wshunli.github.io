<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-05-10T15:04:08.049Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我本将心向明月，奈何明月照沟渠</title>
    <link href="https://www.wshunli.com/posts/2739df62.html"/>
    <id>https://www.wshunli.com/posts/2739df62.html</id>
    <published>2018-05-08T06:06:23.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<p>我本将心向明月，奈何明月照沟渠，<br>落花有意随流水，流水无心恋落花。</p><a id="more"></a><p>简历初筛未通过，笔试机会都没有。</p><p>滴，好人卡。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我本将心向明月，奈何明月照沟渠，&lt;br&gt;落花有意随流水，流水无心恋落花。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《Java多线程编程核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/4e70966b.html"/>
    <id>https://www.wshunli.com/posts/4e70966b.html</id>
    <published>2018-05-05T14:47:09.000Z</published>
    <updated>2018-05-10T15:04:08.045Z</updated>
    
    <content type="html"><![CDATA[<p>前面面试什么的多线程部分问的比较多，需要加强下<a id="more"></a> ，这里记录总结 《Java多线程编程核心技术》 读书情况。</p><h1 id="第一章-Java-多线程技能"><a href="#第一章-Java-多线程技能" class="headerlink" title="第一章 Java 多线程技能"></a>第一章 Java 多线程技能</h1><p>本章主要介绍了线程概念、核心方法以及优先级。</p><p>1、进程和线程的区别</p><p><strong>进程</strong>是受操作系统管理的基本运行单元，是系统进行资源分配和调度的独立单位。<br><strong>线程</strong>是在进程中独立运行的子任务，CPU 在这些任务之间不停地切换，各子任务共享程序的内存空间。</p><p>线程和进程的区别是什么？ - 知乎：<br><a href="https://www.zhihu.com/question/25532384" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/25532384</a></p><p>2、线程的创建</p><p>（1）继承 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.html" rel="external nofollow noopener noreferrer" target="_blank">Thread</a> 类</p><p>（2）实现 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Runnable.html" rel="external nofollow noopener noreferrer" target="_blank">Runnable</a> 接口</p><p>其中 Thread 类实现了 Runable 接口，都需要重写里面 run 方法。</p><p>两种方式的区别：</p><p>实现 Runnable 的类更具有健壮性，避免了单继承的局限。<br>Runnable 更容易实现资源共享，能多个线程同时处理一个资源。</p><p>Java中 Thread和Runnable实现多线程的区别和联系 - CSDN博客:<br><a href="https://blog.csdn.net/oxuanboy1/article/details/51733279" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/oxuanboy1/article/details/51733279</a></p><p><strong>非线程安全</strong> 主要是指多个线程对同一对象中的同一变量实例进行操作时会出现值被修改、值不同步的现象。</p><p>3、线程的启动和停止</p><p>线程的启动可以使用 start() 或者 run() 方法，</p><p>调用 start() 方法，虚拟机会创建新的线程运行 run 方法；<br>调用 run() 方法后，会在调用的线程执行，不会创建新的线程。</p><p>线程的终止方法有三种：</p><p>（1）使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。<br>（2）使用 stop() 方法强行终止线程（这个方法不推荐使用，因为 stop() 和 suspend()、resume() 一样，也可能发生不可预料的结果）。<br>（3）使用 interrupt() 方法中断线程。</p><p>下面介绍了 interrupt() 方法停止线程，调用该方法知识在当前线程中打了一个停止的标记，并不是真的停止线程。</p><p>如何判断线程的状态是不是停止的：</p><p>（1）this.interrupted() 测试 <strong>当前线程</strong> 是否已经中断，会将状态标志置清为 false 。</p><pre><code class="Java">public static boolean interrupted() {}</code></pre><p>（2）this.isInterrupted() 测试线程是否已经中断，不清除状态标志。</p><pre><code class="Java">public boolean isInterrupted() {}</code></pre><p>Java并发（基础知识）—— 创建、运行以及停止一个线程 - Tim-Tom - 博客园：<br><a href="https://www.cnblogs.com/timlearn/p/4007982.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/timlearn/p/4007982.html</a></p><p>其他方法 stop()、suspend()、resume() 不推荐使用。</p><p>4、线程的主要方法</p><p>Thread.currentThread() 返回代码段正在被哪个线程调用的信息。</p><p>isAlive() 判断当前线程是否处于活动状态，即线程已经启动但尚未终止。</p><pre><code class="Java">package com.wshunli.thread;public class CountOperate extends Thread{    public CountOperate(){        System.out.println(&quot;CountOperate---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName()=&quot; + Thread.currentThread().getName());//获取线程名        System.out.println(&quot;Thread.currentThread().isAlive()=&quot; + Thread.currentThread().isAlive()); //查看线程是否存活        System.out.println(&quot;this.getName=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;CountOperate---end &quot;);        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));    }    @Override    public void run() {        System.out.println(&quot;run---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName=&quot; + Thread.currentThread().getName());        System.out.println(&quot;Thread.currentThread().isAlive()&quot; + Thread.currentThread().isAlive());        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));        System.out.println(&quot;this.getName()=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;run --- end&quot;);    }}package com.wshunli.thread;public class Main {    public static void main(String[] args) {        CountOperate c = new CountOperate();//        c.start();        Thread t1 = new Thread(c);        System.out.println(&quot;main begin t1 isAlive=&quot; + t1.isAlive());        t1.setName(&quot;A&quot;);        t1.start();        System.out.println(&quot;main end t1 isAlive=&quot; + t1.isAlive());    }}/* * CountOperate---begin * Thread.currentThread().getName()=main * Thread.currentThread().isAlive()=true * this.getName=Thread-0 * this.isAlive()=false * CountOperate---end * Thread.currentThread()==this :false * main begin t1 isAlive=false * main end t1 isAlive=true * run---begin * Thread.currentThread().getName=A * Thread.currentThread().isAlive()true * Thread.currentThread()==this :false * this.getName()=Thread-0 * this.isAlive()=false * run --- end */</code></pre><p>Thread.sleep() 方法是在指定的毫秒数内让“当前正在执行的线程”休眠（暂停执行）。</p><p>yield() 放弃当前 CPU 资源，将它让给其他任务占用 CPU 时间。</p><p>5、线程的优先级</p><p>在 Java 中线程的优先级分为 1 ~ 10 这 10 个等级，可以使用 setPriority​(int newPriority) 方法设置。</p><p>优先级较高的线程得到的 CPU 资源较多，CPU 会尽量优先执行，并不一定先执行完。</p><p>线程的优先级具有继承性。</p><p>6、守护线程</p><p>在 java 中线程有两种：用户线程、守护线程。</p><p>守护线程的作用是为其他线程提供便利服务，当进程中不存在非守护线程了，守护线程会自动销毁。</p><p>守护线程最典型的应用就是 GC （垃圾回收器）。</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面面试什么的多线程部分问的比较多，需要加强下
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java多线程编程核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="https://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>https://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-10T15:04:08.041Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><a id="more"></a><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="https://www.wshunli.com/posts/4cbab315.html"/>
    <id>https://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="https://www.wshunli.com/posts/b96eb139.html"/>
    <id>https://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-04-28T06:47:46.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里云实习生面试</title>
    <link href="https://www.wshunli.com/posts/b3a8426.html"/>
    <id>https://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="https://www.wshunli.com/posts/689a494.html"/>
    <id>https://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="https://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>https://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="https://www.wshunli.com/posts/3cb63fb.html"/>
    <id>https://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-10T15:04:08.045Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/9c87288c.html"/>
    <id>https://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-10T15:04:08.045Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><p>第十四章 并发</p><p>这部分大概地看了下，后面再看本书仔细学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="https://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>https://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（amap）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（amap）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="https://www.wshunli.com/posts/4e05997a.html"/>
    <id>https://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="https://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>https://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-05-10T15:04:08.045Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="https://www.wshunli.com/posts/96840e7.html"/>
    <id>https://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-05-10T15:04:08.045Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="https://www.wshunli.com/posts/4e57ccd.html"/>
    <id>https://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-05-10T15:04:08.041Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="https://www.wshunli.com/posts/91672bd7.html"/>
    <id>https://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-05-10T15:04:08.041Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="https://www.wshunli.com/posts/84f52548.html"/>
    <id>https://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="https://www.wshunli.com/posts/b4e3c990.html"/>
    <id>https://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（六）</title>
    <link href="https://www.wshunli.com/posts/9c05eee5.html"/>
    <id>https://www.wshunli.com/posts/9c05eee5.html</id>
    <published>2018-01-22T02:44:25.000Z</published>
    <updated>2018-05-10T15:04:08.049Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】生活是一条路，走走停停，停停走走
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
</feed>
