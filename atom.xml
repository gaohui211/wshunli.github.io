<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  <subtitle>wshunli`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-08-26T15:39:14.663Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录2018年秋季校园招聘中国银联面试</title>
    <link href="https://www.wshunli.com/posts/b372432c.html"/>
    <id>https://www.wshunli.com/posts/b372432c.html</id>
    <published>2018-08-08T05:22:35.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（unionpay）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（unionpay）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】【Offer】记录2018年秋季校园招聘中国银联面试（客户端开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘</title>
    <link href="https://www.wshunli.com/posts/8dfab246.html"/>
    <id>https://www.wshunli.com/posts/8dfab246.html</id>
    <published>2018-07-30T01:24:39.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<p>好多公司的秋招内推已经开始了，本文记录下今年的应聘情况。</p><p>参考工信部互联网企业百强名单，搜集资料。</p><p>1、阿里巴巴</p><p><a href="https://campus.alibaba.com/index.htm" rel="external nofollow noopener noreferrer" target="_blank">https://campus.alibaba.com/index.htm</a></p><p>内推简历投递时间：7月16日至8月17日<br>网申简历投递时间：7月16日至8月17日</p><blockquote><p>客户端开发工程师、IoT开发工程师（安卓方向）<br>熟悉 iOS/Android 平台原理机制,具备客户端性能优化的经验有一定软件架构设计能力，熟悉常见的异步、同步、多线程、跨进程、组件、容器的设计方法<br>具备扎实的数据结构和计算机系统基础，编码功底扎实<br>具备 C++ 跨平台开发经验，熟悉NDK开发优先<br>具备创新业务技术攻关和落地能力者优先（不限于算法、生物识别、图形图像、3D建模、AR、多媒体等领域）</p></blockquote><p>工作地点：无锡市,上海市,深圳市,北京市,广州市,杭州市</p><p>地图工艺工程师、工作地点：北京</p><p>2、腾讯</p><p><a href="https://join.qq.com/index.php" rel="external nofollow noopener noreferrer" target="_blank">https://join.qq.com/index.php</a></p><p>网申：7月25日至9月12日<br>内推：7月25日至9月14日<br>笔试：9月16日至9月17日<br>面试：9月26日起</p><blockquote><p>软件开发-移动客户端开发方向<br>计算机软件相关专业本科及以上学历。<br>对于创新及解决具有挑战性的问题充满激情。<br>热爱编程，基础扎实，理解算法和数据结构相关知识。<br>至少掌握一种编程语言，C/C++/Java编程经验优先。<br>有IOS、Android、Windows、Phone开发经验优先。</p></blockquote><p>工作地点：深圳总部 北京 上海 广州 成都</p><p>3、百度</p><p><a href="https://talent.baidu.com/external/baidu/campus.html" rel="external nofollow noopener noreferrer" target="_blank">https://talent.baidu.com/external/baidu/campus.html</a></p><p>网申：7月23日-9月8日<br>笔试：9月11日<br>面试：9月14日-9月21日（待定）</p><blockquote><p>移动软件研发工程师<br>计算机软件、通讯相关专业<br>热爱移动互联网，对移动软件开发有浓厚的兴趣<br>优秀的分析问题和解决问题的能力，对解决具有挑战性问题充满激情<br>熟悉一门常用编程语言(C/C++/Java/Objective C)<br>对数据结构和算法设计有较为深刻的理解<br>学习能力强，具有良好的沟通能力和良好的团队合作精神<br>具有以下条件者优先：<br>熟悉手机研发平台(Android/iPhone/Windows Phone 7等)者优先<br>熟悉HTML/WML/CSS等相关规范<br>熟悉Javascript与DOM规范<br>熟悉webkit或其他任意一种浏览器内核<br>熟悉HTML5编程技术<br>熟悉Linux操作系统<br>熟悉数据库原理和技术，熟练使用SQL<br>熟悉TCP/IP，HTTP，HTTPS等网络协议优先</p></blockquote><p>工作地点：北京 上海 深圳</p><p>4、京东</p><p><a href="http://campus.jd.com/" rel="external nofollow noopener noreferrer" target="_blank">http://campus.jd.com/</a></p><p>网申：2018年7月13日-2018年9月6日<br>面试：2018年9月25日-29日<br>Offer：2018年10月15日前</p><blockquote><p>Android开发工程师<br>2019年毕业，计算机软件相关专业本科及以上学历<br>负责Android移动终端设备应用程序的开发和技术实现，在资源受限的移动终端设备上做精简和高性能的设计，开发面向用户的产品<br>对于创新及解决具有挑战性的问题充满激情<br>热爱编程，基础扎实，理解算法和数据结构相关知识<br>对Android开发有经验者优先</p></blockquote><p>工作地：北京,上海,武汉</p><p>5、网易【内推投递】</p><p><a href="https://campus.163.com/app/index" rel="external nofollow noopener noreferrer" target="_blank">https://campus.163.com/app/index</a></p><p>内推投递：2018年7月16日-8月8日（仅开放技术类岗位，拿到内推码即可参加内推哟~）<br>网申投递：2018年8月9日-9月5日（网易杭州），2018年8月9日-9月25日（网易北京&amp;网易有道）</p><blockquote><p>Android开发工程师（网易杭州）<br>你将把所学付诸实践，用牛逼的代码去推动一个app的产生和优化；<br>你将充分展示逻辑的魅力，用你严谨的思维来保证一个项目高效高质量的完成；<br>你将负责Android平台移动应用的开发，平台的搭建是你，重要模块的设计是你，产品性能的优化是你，是你是你都是你。</p></blockquote><p>工作地点：杭州</p><p><strong>投递记录</strong>：</p><p>2018.08.06 内推投递 Android开发工程师（网易杭州）<br>投递邮箱 <a href="mailto:shunlimail@163.com" rel="external nofollow noopener noreferrer" target="_blank">shunlimail@163.com</a><br>内推码:87431XQ ：<a href="https://www.nowcoder.com/discuss/86551" rel="external nofollow noopener noreferrer" target="_blank">https://www.nowcoder.com/discuss/86551</a></p><p>2018.08.11 笔试</p><p>6、新浪</p><p><a href="http://career.sina.com.cn/welcome.html" rel="external nofollow noopener noreferrer" target="_blank">http://career.sina.com.cn/welcome.html</a></p><p>网申投递：8月6日-9月14日<br>内推投递：8月6日-9月14日<br>笔试时间：9月15日-9月16日<br>面试时间：9月底-10月中旬<br>面试地点：哈尔滨、沈阳、成都、西安、武汉、北京。</p><blockquote><p>研发工程师_客户端方向（北京）<br>熟悉Android/iOS开发，热爱编程（包含在校项目）<br>熟悉常用网络协议包括tcp、http等<br>具备一定的产品意识，对社交网络产品有一定的理解<br>具备扎实的理论基础，熟悉常用的数据结构，算法以及数据库技术<br>具备一定的沟通能力，能够清晰地表达自己的想法</p></blockquote><p>7、搜狐</p><p>内推截止到8月22日，网申简历截止时间9月10日。</p><p><a href="http://campus.sohu.com/" rel="external nofollow noopener noreferrer" target="_blank">http://campus.sohu.com/</a></p><p><a href="http://campus.sogou.com/" rel="external nofollow noopener noreferrer" target="_blank">http://campus.sogou.com/</a></p><p>8、美团点评</p><p><a href="https://campus.meituan.com" rel="external nofollow noopener noreferrer" target="_blank">https://campus.meituan.com</a></p><p>内推投递：8月6日-9月14日<br>面试时间：9月6日-9月14日</p><blockquote><p>Android开发工程师<br>1.具备扎实的计算机编程基础，包括算法、数据结构、计算机网络等领域基础知识；<br>2.对Android系统各种功能有着执着的热爱和追求，对互联网产品有自己的体验使用经验和认知，对用户交互设计和视觉设计有一定感觉更佳；<br>3.熟悉Android平台工作机制、体系架构，掌握Java开发语言，并熟悉相关的开发工具平台，有已经发布上架的成品App更佳；<br>4.掌握至少一门非前端开发语言（如C/C++/PHP/Java/Python/Ruby等），并有一定的实践经验；<br>5.持续关注并实践HTML5、CSS3、ES6等各种新兴Web前端技术更佳；<br>如果，你对创建优雅、直观、高可用、高性能的用户界面和前端体验富有激情，我们将高举双手欢迎你！</p></blockquote><p>工作地点：北京、上海</p><p>9、360</p><p><a href="http://campus.chinahr.com/2018/qihu360/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://campus.chinahr.com/2018/qihu360/index.html</a></p><p>10、小米</p><p><a href="https://hr.xiaomi.com/campus/index" rel="external nofollow noopener noreferrer" target="_blank">https://hr.xiaomi.com/campus/index</a></p><p>11、字节跳动【内推投递】</p><p><a href="https://job.bytedance.com/campus/position" rel="external nofollow noopener noreferrer" target="_blank">https://job.bytedance.com/campus/position</a></p><blockquote><p>Android开发工程师<br>1、本科及以上学历，计算机相关专业；<br>2、热爱计算机科学和互联网技术，对移动产品有浓厚兴趣；<br>3、扎实的数据结构和算法基础；精通至少一门编程语言，包括但不限于：Java、Objective-C、Swift、C、C++；<br>4、熟悉Android平台原理，具备将产品逻辑抽象为技术方案的能力；<br>5、关注用户体验，能够积极把技术转化到用户体验改进上；<br>6、对新技术保持热情，具备良好的分析、解决问题的能力。</p></blockquote><p>工作地点：北京、上海、深圳、武汉</p><p><strong>投递记录</strong>：</p><p>2018.08.07 内推投递 Android开发工程师（武汉）</p><p><a href="https://www.nowcoder.com/discuss/90316" rel="external nofollow noopener noreferrer" target="_blank">https://www.nowcoder.com/discuss/90316</a></p><p>2018.08.12 笔试</p><p>12、网宿科技</p><p><a href="http://www.wangsu.com/about/school.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.wangsu.com/about/school.html</a></p><p>13、58集团</p><p><a href="http://campus.58.com/" rel="external nofollow noopener noreferrer" target="_blank">http://campus.58.com/</a></p><p>14、金山软件</p><p>猎豹移动：<a href="http://hr.cmcm.com/campus" rel="external nofollow noopener noreferrer" target="_blank">http://hr.cmcm.com/campus</a><br>西山居：<a href="http://hr.xishanju.com/" rel="external nofollow noopener noreferrer" target="_blank">http://hr.xishanju.com/</a><br>金山云：<a href="http://ksyun.hirede.com/CareerSite/CampusRecruit" rel="external nofollow noopener noreferrer" target="_blank">http://ksyun.hirede.com/CareerSite/CampusRecruit</a><br>金山办公：<a href="http://www.wps.cn/college/flow" rel="external nofollow noopener noreferrer" target="_blank">http://www.wps.cn/college/flow</a></p><p>15、携程</p><p><a href="http://campus.ctrip.com/" rel="external nofollow noopener noreferrer" target="_blank">http://campus.ctrip.com/</a></p><p>先整理那么多，大部分还没开始招聘。</p><p>中国银联【内推投递】</p><p><a href="http://companyads.51job.com/companyads/campus/zhongGuoYinLian/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://companyads.51job.com/companyads/campus/zhongGuoYinLian/index.html</a></p><p>内推：7月23日至7月30日<br>笔试：8月2日<br>面试：8月8日至8月10日</p><blockquote><p>客户端开发工程师<br>全日制本科及以上学历，计算机、软件、通讯相关专业；<br>了解java+Android或者Object C／swift开发技术、Linux／Unix系统架构知识及计算机基础知识、客户端架构设计、安全技术、Volley、AFNetworking、gson等常用第三方软件库的知识；具有快速学习能力，能够迅速掌握移动支付、二维码、转接清算等银行卡产业知识；<br>严谨细致，具有较高的责任心、主动性、执行力、抗压能力、学习能力及创新精神。</p></blockquote><p>工作地点：上海</p><p>顺风科技</p><p><a href="http://campus.sf-tech.com.cn/campusRecruitment/Default.html?p=30217592346" rel="external nofollow noopener noreferrer" target="_blank">http://campus.sf-tech.com.cn/campusRecruitment/Default.html?p=30217592346</a></p><blockquote><p>Android开发工程师<br>1、国家统招本科及以上学历，计算机相关专业应届生；<br>2、熟悉Android开发平台及框架原理，熟悉Android NDK及相关驱动开发者优先；<br>3、熟悉网络原理及其编程技术；<br>4、熟悉Linux操作系统（了解Linux原理者优先，有Linux编程经验者优先）；<br>5、良好的英文文档阅读、理解、分析能力；<br>6、有较强的工作责任心、良好的学习能力。</p></blockquote><p>工作地点：深圳</p><blockquote><p>参考资料<br>1、工信部公布互联网企业100强榜单：阿里、腾讯、百度位列前三位<br><a href="https://www.yicai.com/news/100003059.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.yicai.com/news/100003059.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好多公司的秋招内推已经开始了，本文记录下今年的应聘情况。&lt;/p&gt;&lt;p&gt;参考工信部互联网企业百强名单，搜集资料。&lt;/p&gt;&lt;p&gt;1、阿里巴巴&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://campus.alibaba.com/index.htm&quot; rel=&quot;external n
      
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（十一）</title>
    <link href="https://www.wshunli.com/posts/a7e2fd51.html"/>
    <id>https://www.wshunli.com/posts/a7e2fd51.html</id>
    <published>2018-07-27T06:41:47.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX187+JeSYAS/vRoG5E/+OqysFv+0qi+OUDCT3zFZX20m6JcYLE0uFoOtj6WRb5ppIt9LipY8nN5duFRiiGo3PTKSU/ADgzE1U8Avylf9UC4rzR83gp3WecR9x0f47w2aHxoQc/qbZRmE4mBGBUz4cQ71WGa78t1GGCDQ6stz+OsuK5K9mSlQw1KwloM/PKB45gVnpVhmFctTGwMMqq9DwTV3YwY2tTGIsDTHYz044pT8iTRaokacBWSJSDb6nYAjDpxN0VJJBT/ln+YVs4b+oS8fT/ANw9KD9SEprkHNQByMShrPl6aYMqxhH63hiLm+aLMtOXL1zrBsPBBri2ZwKctc77CJd0xm+n0nR91EW8h+Kaio31i9v/m1E4c4sKs3BiAdQhxzhT+reZJeWx1WOhWgrufpsEuCO6aKwfAorAvSz7/B9X5W8lnVEolnaX2fbjWPni8TbPfDUOWlV7hG+f+Wzc1U++fLjZ6bN6j4WxZoyOr9ovu4/vQLW1l1K0G6mVYGzZrU0DmcPlCeE2yAP9Y3Bp3qM8C3ug9C4+f9dgpTlrfzh75JzaJyFnArodSv2fgL9/4eAEr6VEfieg3p1eJFjX8Pjnac8zBaF2M7vBf7fMrcCL36nw2VuofywQPy2bfskftOiCwP6kfV1AbbtAVNz6K4xMc/KrfNdB1sxApkD5nYRHTNqDj0QR/S8fSAegwK4R8Ka71QWOz4i6KyNmVRku0c5D+UR+r+GMNwH/ikj+Zn4zXh0eVvKCIpGvDcZStyIT//ume4lr8UHnZ3JwqcTnbj8sLwywcV7ZTDZeTYtepA4e9oEilY8nhIuFmLiOuITLj/OfAq6+lQ7mchqtuzMcD7Zv0oGVGmt/DCxPwXcUlGXZNZppXL3W4jtPi3LS++px/AVMPlE31M69qJHx1HQu2S9KKvC1wQn9U3Xk4ppuI//ghJgA18YNNDVbi33pFHfLavrysmvzRw5Ok5dcKzdyLJYSr0Q5zS9kAhmnCA/sEqjjj0w0t8mkpgGKmKqhMn3/3QZ1umYOpHsYsf8TIOdyq+tl+VI1d/ORcE1w+55HfAKMAbTna/MuJo99UhEmj8O6cMR2h5ipxezzw2baM0ZR6B5aZmVq7/yX3Y3I0xd3ux+sNRarV8t7Xt1D9JZ4lAAqYPUnz5Ft6xmycseJBVV4MeONOQQdVOun/dG+HOfsnBURIgx96NRCKGWHZSDTyft5OPWmFT+oBmPVXsOmpScvjW6Aak9jTPaPk5yRswvVNTXT4j/95GrEoHrmgbjqdkPfE534TrfAtc0NN3V69ZCYDXmNG1I5d5m0bzjxrwhZBDIRqS2b6W4N4OXoVrEbXZ58qiLzHVv86jp0RMZDp+b8+V8WF8JMyPt7ey2ADJQce9XJVdHhm1IMZdxgL07vZSJ85NrBXy81tmYwGvWha1zO6O8JZELl8ahmFqHnpknOG2cdvCt/HcD3vMT56gDxi1dH1KlZMOGncFNCrhRNqQ7gJVdL6Vmb5A+sJBory4gFTpnPLdCAKyYQxT4YVSunWpfRbGSKtEbRTw+StnONljBY6J4YqIru0W4IipWk2LEsy5QQzPbHOd7lRffGzlRkKoVTzPAAV8tuRh2EfFF/eRDTFSmt4zyoGMb3/um46uSylbyVqulhyLEosACrYzjWg+CV7mPZZM0HwHDz1ORfq0AwbLuZhsFDmq+a9I2tQCg4+hgXJXyo6JP4mi8ZH/3UMBzdy1PsgGoTtmtuxrBMYjt/AiyZ63yiXOR5qyBV0O0baUGpr311kz826YNyZpfCou/qbJ8Bo3oz+mBhkb7aS+VXgB+I5iFLneF/SpUqANspRZA+RCyRi7WBaNU4LsrFGpYt2vGne0h6Zu7cQob3G0R5M1xrxipM/b0LhpbnGGJoiegKiQMCXT9UtGUtHU+ZRoyz8FBWAVLICa/ERUJmknHoicSCdr/6jkCHuvxeL9X2n9Hf4o/rXxJ9VQqnoyo6NBci2UVfnitQq0OqtZAfqVmzYvDNzLeJcnSghHpun6eLO9eX4IAtW1hbiWnNlmx4qftUrpiJUJOwDzDZ4j2mXUpYH75k5Wu0TTdHvrD8Pnxn7/TLRifSQ1/L22DHrOJ7f9e1zIA2Wze02UPFvdtCXQuTOQ85+6pIoC0gvm2Zh5MhZS3qowhHZEGe0oKyeznG/Tq7ti4H1IYEWlhE8plRcjNG6MIvtFPZQx0iXgBsWmJ7YWQ8m3sP/MmAE+c0ePxTI3n2RlsoF07q3XNRuCqxy99XkR0vPWU1N/EMRD1MGuk9Ufgcyocqv2qkhzBmESrYjWfk6XgEPPF12Rxb8DeyDcJ3PnMfqLWa6I/1Egj2GYi5F4NDWo77yqd24BID1EWGLwkDXgOZq1Y3FLq7is/QEufeR+DAf5NbX88E5792n6+pxAcwAYmYnul4qSA5GQsia13sVSCzjNIe6Ni4D7IjTCZNCCqQWFyRLfRUAW1nUHlWwbK8aE+yEfpqNWXL39XMgetsjukKbOfWVC5lffZUtcyqWfE807D7c1sIBqEWthUSqTqU/vSyEZIShp8dOpLJFYIhDG4a1GQtCCGTEmMpaCPefE20t3VouF+Sk0+Gb0TgWTyUTKMP++ix5Uzz7chKuEPsvQCYx/V2flJkzbrWGkofJzA11HCuumVjlSJE8ANfTYkcv0eaumiJjr9oVuSMlNjkWhK53aqbD9qC4brKGhvS5Xb7SJkuOgmLUXQliOBm65eFGgMAS46fwzmuOYBGM0spiAgqR5KaWcHAOhRhiZ29tg6XvMGZoD9EKnEs1NYPUnJngQDT/nh4CZPz3FQuNQfLhFKmn1Z3ZWdXTrJEn9zDzMG/l/BZ1kUE7RluvpxnDEcR8W7E98/AC5aEAJPrIjqtJc74JRoapUgxAA1anGl2tAg6+q6E1+tCdq/kSASsfNdlJl++bo1qmzFNlRxs4LS7YY1+3PUOhw1A6c98CvZzsMLBuHF3Rs54Tbw5yL/z7odZpQviOdFhbZrgf6EnPes5c+HZi9VP930dKkKZFDzW1zFdaoT6FBvFgBW1VvA9QHZ2GHatR6NxRANhrVVpl0+hQRDNKxGJoGnijj0alfPPCDyhU/y5C6fUpyGriKeMITE8Q/Us3bQwnqCJbZ8s3VUh8HR5iCLvIgnmjtYgKGzUNc5RzytWX8SRNXZlrkcOOz0YBK1pSDgZUboNyU1CkGPL16mBHvoyJjOInlUnfbL33No43bAMCDzhJXYAF56CHT2/uKrG0KPLnCm8gxQ0KP8fNByRYq32p7ZFRahqCUSUj9C6ADB0UcQU94kcns5E5brTSXAhgLuQITy63/HFa4IV2IfPLodw7cb+hdxEAGuJ8YuwKVB+z3PKCOKqzj2qHrdyY7ge0CGJ3DLcfjtnA/4R77lcGFUaPatgzlmuExqLH03iaGtv+Jy0a+Hee3soCM5jhzu2/sB/MvCSFbcyKRuv1U3jTx+Ki7H/JW/Eupes/gW2qoDipZBVvFAZFqsqFbzJAK2U8wP3GkGNUuMuv264ReGxUPLV1CI7OBTIa/GRwpbkK1UFlc9ax/gIejtjI6CIB0oXxyHsKndfSzGU6BqpQL0mwVajbDSljKVPO4ag9ZoMrBy9EYNat9R9KDJwfjaSxMaDGcw1vLR5Hv320WklwRtZPvcMOa6rdwrDVv2RbVgL2XG6b3Ym+zoPJcu6uGkDMkO9npnAwDUOFf6EucAF6xcc/BiA8fU4j9+fIyhIHnBZyxRk4OyJ9zkFMS/KWWFWyQa511bIiEzll0p0yB2USQ63sMQyCiFiJ/oUCxPU5DT0RawhZPVzBi7HoiZCEAj26FrFrAlnHbsjeWe8ljWYUjnKUWM3ozB7wSd8QRJRtGkkuaUGtErZB6B5tAW0M0V7j0z7tZuSoLwFr62NLOLAW8MOc485Jkdg/lXqed+6NlmDGVGokWM5Cv/wi7rYJ2E2Ub1KCUxElZxnB7msyIzsXscC7Ie6qLp9EkHk33RURIvoHTDBlBYnc7oiAxbi85bHzX3zN59AXiRq0eWMrNMajXj2/Jv1M3Pdoaq3LJ8I2zdT61wFo3ycF6ejMwd6cifSIfG4Z0izfQ5GS/kY0G14MCYkhAsfYhF3KtGHnx2YUTz6oENgSusDYOsqWAFbhEWeLG1atUo/nCKpNx9mitzhH5G06OiPKCHXvztAa61NhG79+HxP5E5iOfGGq5sUcWxfWb4jHBEELnDNKZlLOL+Q22JXNYgmrO4TXiY2xzc/2Hc5Ufr9gz0mIlgsPyWIxAOSQDqWsCgMGcjIWOusdhdmdvCOC2pY5ukuJAIDWuWEfLiqwWI4ino+QizL/BqxZglGoG4kCR9Ih66kVMMatmZ5nCTznjmUYBNPm5ZO8IjnMTsbTUaBEra7RXF193lH2ay+IDLm+USUZCQ15uEpaZdHvt/HPUO85815ADuM3Ea6DJHL1lDg6vsuakJsOPNU5oL+D9R5nZ </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】算是人生的第一份工作吧
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins安装Java代码质量分析工具</title>
    <link href="https://www.wshunli.com/posts/57f40b04.html"/>
    <id>https://www.wshunli.com/posts/57f40b04.html</id>
    <published>2018-07-25T01:15:32.000Z</published>
    <updated>2018-08-26T15:39:14.655Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Checkstyle、PMD、FindBugs 三款主流的 Java 静态分析工具，以及 SourceMonitor 代码度量工具，Simian 代码重复检查工具等。</p><h1 id="Jenkins-安装-Java-代码质量分析工具"><a href="#Jenkins-安装-Java-代码质量分析工具" class="headerlink" title="Jenkins 安装 Java 代码质量分析工具"></a>Jenkins 安装 Java 代码质量分析工具</h1><p>在 Java 世界中，Checkstyle、PMD、FindBugs 插件是三款主流的静态分析工具。</p><p>1、Checkstyle 擅长检查编码标准和约定，编码行为以及其他的一些质量指标（如代码复杂度）。</p><p>Checkstyle（<a href="http://checkstyle.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">http://checkstyle.sourceforge.net/</a> ） 是 SourceForge 下的一个项目，提供了一个帮助 JAVA 开发人员遵守某些编码规范的工具。</p><p>CheckStyle 检验的主要内容包括：Javadoc 注释、命名约定、标题、Import 语句、体积大小、空白、修饰符、块、代码问题、类设计和混合检查（包括一些有用的比如非必须的 System.out 和 printstackTrace）。</p><p>在 Jenkins 中安装 CheckStyle 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;        &lt;version&gt;2.16&lt;/version&gt;        &lt;configuration&gt;            &lt;configLocation&gt;checkstyle.xml&lt;/configLocation&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>checkstyle:checkstyle</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/Checkstyle+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Checkstyle+Plugin</a></p><p>2、PMD 类似于 Checkstyle ，它更加专注于编码和设计实践。</p><p>PMD（<a href="https://pmd.github.io/" rel="external nofollow noopener noreferrer" target="_blank">https://pmd.github.io/</a> ） An extensible cross-language static code analyzer.</p><p>专注于潜在的编码问题，比如未使用或者次优化的代码，代码大小和复杂性，以及良好的编码行为。</p><p>PMD 也附带了 CPD ，以支持探测重复或者近似重复代码。</p><p>在 Jenkins 中安装 PMD 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;        &lt;version&gt;3.5&lt;/version&gt;    &lt;/plugin&gt;            ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>pmd:pmd</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/PMD+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/PMD+Plugin</a></p><p>3、FindBugs 专注于识别潜在的危险和错误的代码。</p><p>FindBugs（<a href="http://findbugs.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">http://findbugs.sourceforge.net/</a> ） 检查应用程序的字节码来找出潜在的 bug 、性能问题或者差的编码行为。</p><p>在 Jenkins 中安装 FindBugs 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;        &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.5.2&lt;/version&gt;        &lt;configuration&gt;            &lt;findbugsXmlOutput&gt;true&lt;/findbugsXmlOutput&gt;            &lt;findbugsXmlWithMessages&gt;true&lt;/findbugsXmlWithMessages&gt;            &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>findbugs:findbugs</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/FindBugs+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/FindBugs+Plugin</a></p><p>4、Static Analysis Collector 插件汇总静态分析结果</p><p>插件地址：<a href="https://wiki.jenkins.io/display/JENKINS/Analysis+Collector+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Analysis+Collector+Plugin</a></p><h1 id="Jenkins-安装-SourceMonitor-代码度量工具"><a href="#Jenkins-安装-SourceMonitor-代码度量工具" class="headerlink" title="Jenkins 安装 SourceMonitor 代码度量工具"></a>Jenkins 安装 SourceMonitor 代码度量工具</h1><p>SourceMonitor（<a href="http://www.campwoodsw.com/sourcemonitor.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.campwoodsw.com/sourcemonitor.html</a> ） 允许查看软件源代码内部，以了解项目拥有的代码量，并确定模块的相对复杂度。</p><p>在 Jenkins 中也有 SourceMonitor（<a href="https://github.com/jenkinsci/sourcemonitor-plugin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jenkinsci/sourcemonitor-plugin</a> ）插件，但是好久没更新了，也存在一些问题（<a href="https://issues.jenkins-ci.org/browse/JENKINS-5741" rel="external nofollow noopener noreferrer" target="_blank">https://issues.jenkins-ci.org/browse/JENKINS-5741</a> ）。</p><p>报错如下：</p><pre><code class="TXT">Parsing sourcemonitor resultshudson.AbortException: Parsing file error    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorParser.invoke(SourceMonitorParser.java:70)    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorParser.invoke(SourceMonitorParser.java:45)    at hudson.FilePath.act(FilePath.java:1047)    at hudson.FilePath.act(FilePath.java:1025)    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorPublisher.perform(SourceMonitorPublisher.java:80)    at hudson.tasks.BuildStepMonitor$3.perform(BuildStepMonitor.java:45)    at hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)    at hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:690)    at hudson.model.Build$BuildExecution.post2(Build.java:186)    at hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:635)    at hudson.model.Run.execute(Run.java:1819)    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)    at hudson.model.ResourceController.execute(ResourceController.java:97)    at hudson.model.Executor.run(Executor.java:429)Build step &#39;Publish SourceMonitor results&#39; changed build result to FAILUREBuild step &#39;Publish SourceMonitor results&#39; marked build as failureFinished: FAILURE</code></pre><p>原因是在构建的时候需要添加 <code>sourcemonitor:sourcemonitor</code> 参数。</p><p>SourceMonitor 插件地址：<a href="https://plugins.jenkins.io/sourcemonitor" rel="external nofollow noopener noreferrer" target="_blank">https://plugins.jenkins.io/sourcemonitor</a></p><p>这里可以安装公司内部的 <code>hwSourceMonitor.hpi</code> 插件</p><p>参考资料：<br>1、<a href="http://3ms.huawei.com/km/blogs/details/2503631" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/km/blogs/details/2503631</a><br>2、<a href="http://3ms.huawei.com/hi/group/2033815/wiki_4496373.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/hi/group/2033815/wiki_4496373.html</a></p><p><del>也可以使用 HTML Publisher 插件解析 SourceMonitor 输出的 xml 结果。</del></p><p>0、准备 SourceMonitor 并安装 Jenkins Server 上。</p><p>本文安装在 <code>C:\Program Files (x86)\SourceMonitor\SourceMonitor.exe</code> 目录。</p><p>1、安装 HTML Publisher 插件。</p><p>HTML Publisher Plugin 用来把 SourceMonitor 检测的结果可视化。</p><p>2、在构建后添加 Windows 批处理命令。</p><pre><code class="Shell">&quot;C:\Program Files (x86)\SourceMonitor\SourceMonitor.exe&quot; /C &quot;C:\CI_Tools\SourceMonitorCommand.xml&quot;&quot;C:\CI_Tools\msxsl.exe&quot; SourceMonitorReport.xml &quot;C:\CI_Tools\SourceMonitorSummaryGeneration.xsl&quot; -o SourceMonitorSummaryGeneration.xml&quot;C:\CI_Tools\msxsl.exe&quot; SourceMonitorSummaryGeneration.xml &quot;C:\CI_Tools\SourceMonitor.xsl&quot; -o SourceMonitorResult.html</code></pre><p>其中 <code>SourceMonitorCommand.xml</code> 来自</p><p><code>C:\Program Files (x86)\SourceMonitor\Samples\sample_commands.xml</code></p><pre><code class="XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;sourcemonitor_commands&gt;    &lt;write_log&gt;true&lt;/write_log&gt;    &lt;command&gt;        &lt;project_file&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\target/sourcemonitor\project.smp&lt;/project_file&gt;        &lt;project_language&gt;Java&lt;/project_language&gt;        &lt;source_directory&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\src\main\java&lt;/source_directory&gt;        &lt;parse_utf8_files&gt;true&lt;/parse_utf8_files&gt;        &lt;file_extensions&gt;*.java&lt;/file_extensions&gt;        &lt;include_subdirectories&gt;true&lt;/include_subdirectories&gt;        &lt;export&gt;            &lt;export_file&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\target/sourcemonitor\sourcemonitor.xml&lt;/export_file&gt;            &lt;export_type&gt;2 (project details as XML)&lt;/export_type&gt;            &lt;export_option&gt;Include method metrics: option 3&lt;/export_option&gt;        &lt;/export&gt;    &lt;/command&gt;&lt;/sourcemonitor_commands&gt;</code></pre><p>需要下载 <code>msxsl</code> 工具（<a href="http://www.microsoft.com/en-us/download/details.aspx?id=21714" rel="external nofollow noopener noreferrer" target="_blank">http://www.microsoft.com/en-us/download/details.aspx?id=21714</a> ）并放置到 <code>C:\CI_Tools</code> 目录下。</p><p>3、最后添加 Publish HTML reports 即可。</p><p>不过我没有配置成功，总是提示找不到 <code>SourceMonitorReport.xml</code> 文件。</p><p>如果使用 SourceMonitor 插件遇到如下 OutOfMemoryError 错误。</p><pre><code class="TXT">FATAL: Java heap spacejava.lang.OutOfMemoryError: Java heap space</code></pre><p>解决办法：<a href="https://wiki.jenkins.io/display/JENKINS/Builds+failing+with+OutOfMemoryErrors" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Builds+failing+with+OutOfMemoryErrors</a></p><h1 id="Jenkins-安装-Simian-代码重复检查工具"><a href="#Jenkins-安装-Simian-代码重复检查工具" class="headerlink" title="Jenkins 安装 Simian 代码重复检查工具"></a>Jenkins 安装 Simian 代码重复检查工具</h1><p>Simian（<a href="http://www.harukizaemon.com/simian/" rel="external nofollow noopener noreferrer" target="_blank">http://www.harukizaemon.com/simian/</a> ） 是一个检查重复代码的工具。</p><p>这里可以使用公司内部的插件</p><p><a href="http://3ms.huawei.com/hi/group/2964/wiki_4145693.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/hi/group/2964/wiki_4145693.html</a></p><h1 id="Jenkins-安装-Cobertura-代码测试覆盖率工具"><a href="#Jenkins-安装-Cobertura-代码测试覆盖率工具" class="headerlink" title="Jenkins 安装 Cobertura 代码测试覆盖率工具"></a>Jenkins 安装 Cobertura 代码测试覆盖率工具</h1><p>Cobertura（<a href="https://sourceforge.net/projects/cobertura/" rel="external nofollow noopener noreferrer" target="_blank">https://sourceforge.net/projects/cobertura/</a> ） 一项衡量是否所有代码都被测到的工具。</p><p>在 Jenkins 中安装 Cobertura 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;        &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.6&lt;/version&gt;        &lt;configuration&gt;            &lt;instrumentation&gt;                &lt;ignoreTrivial&gt;false&lt;/ignoreTrivial&gt;            &lt;/instrumentation&gt;            &lt;formats&gt;                &lt;format&gt;html&lt;/format&gt;                &lt;format&gt;xml&lt;/format&gt;            &lt;/formats&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>cobertura:cobertura</code> 参数。</p><p><code>compile -D cobertura.report.format=xml clean compile cobertura:cobertura</code></p><p>这里注意添加 <code>-D cobertura.report.format=xml</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/Cobertura+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Cobertura+Plugin</a></p><blockquote><p>参考资料<br>1、jenkins+maven配置Checkstyle+FindBugs+PMD - 简书<br><a href="https://www.jianshu.com/p/03b9e38d03b2" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/03b9e38d03b2</a><br>2、CheckStyle提高代码质量 - CSDN博客<br><a href="https://blog.csdn.net/lx_yoyo/article/details/73332590" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lx_yoyo/article/details/73332590</a><br>3、Jenkins+maven+checkstyle对java代码进行静态代码分析 - CSDN博客<br><a href="https://blog.csdn.net/hwhua1986/article/details/48339545" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hwhua1986/article/details/48339545</a><br>4、Jenkins+maven+pmd对java代码进行静态代码分析 - CSDN博客<br><a href="https://blog.csdn.net/hwhua1986/article/details/48342745" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hwhua1986/article/details/48342745</a><br>5、[Jenkins]持续集成环境下fingbug插件的安装使用与配置 - Amberly - 博客园<br><a href="https://www.cnblogs.com/amberly/p/7201041.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/amberly/p/7201041.html</a><br>6、静态检查——SourceMonitor的学习和使用 - CSDN博客<br><a href="https://blog.csdn.net/yf210yf/article/details/17535713" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yf210yf/article/details/17535713</a><br>7、[料理佳餚] Jenkins 增加 SourceMonitor Plugin | 軟體主廚的程式料理廚房 - 點部落<br><a href="https://dotblogs.com.tw/supershowwei/2015/10/14/153562" rel="external nofollow noopener noreferrer" target="_blank">https://dotblogs.com.tw/supershowwei/2015/10/14/153562</a><br>8、CI Server 16 - 整合程式碼複雜度及深度報表 (Source Monitor) - iT 邦幫忙<br><a href="https://ithelp.ithome.com.tw/articles/10107051" rel="external nofollow noopener noreferrer" target="_blank">https://ithelp.ithome.com.tw/articles/10107051</a><br>8、重复代码检查工具simian的基本用法 | 知行一<br><a href="http://purecpp.org/?p=92" rel="external nofollow noopener noreferrer" target="_blank">http://purecpp.org/?p=92</a><br>9、Jenkins集成Simian插件_百度经验<br><a href="https://jingyan.baidu.com/article/c45ad29ccbfd3a051653e272.html" rel="external nofollow noopener noreferrer" target="_blank">https://jingyan.baidu.com/article/c45ad29ccbfd3a051653e272.html</a><br>10、[料理佳餚] Jenkins 增加 Simian Plugin | 軟體主廚的程式料理廚房 - 點部落<br><a href="https://dotblogs.com.tw/supershowwei/2015/10/14/153561" rel="external nofollow noopener noreferrer" target="_blank">https://dotblogs.com.tw/supershowwei/2015/10/14/153561</a><br>11、代码测试覆盖率Cobertura使用 - CSDN博客<br><a href="https://blog.csdn.net/cathy_sunshine/article/details/75258298" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cathy_sunshine/article/details/75258298</a><br>12、jenkins集成cobertura，调用显示cobertura的report - CSDN博客<br><a href="https://blog.csdn.net/yaominhua/article/details/40684647" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yaominhua/article/details/40684647</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Checkstyle、PMD、FindBugs 三款主流的 Java 静态分析工具，以及 SourceMonitor 代码度量工具，Simian 代码重复检查工具等。&lt;/p&gt;&lt;h1 id=&quot;Jenkins-安装-Java-代码质量分析工具&quot;&gt;&lt;a href=&quot;#J
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins服务搭建及环境配置</title>
    <link href="https://www.wshunli.com/posts/5d09cdc2.html"/>
    <id>https://www.wshunli.com/posts/5d09cdc2.html</id>
    <published>2018-07-24T11:16:40.000Z</published>
    <updated>2018-08-26T15:39:14.655Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 是一款优秀的开源自动化服务器，允许持续集成和持续交付。Jenkins 支持数百个插件，以支持项目的构建、部署和自动化。</p><p>Jenkins 官网：<a href="https://jenkins.io/" rel="external nofollow noopener noreferrer" target="_blank">https://jenkins.io/</a></p><p>「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」这三个概念的解释。</p><p><strong>持续集成</strong> 强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p><p><strong>持续交付</strong> 在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。</p><p><strong>持续部署</strong> 则是在持续交付的基础上，把部署到生产环境的过程自动化。</p><h2 id="Jenkins-基础环境"><a href="#Jenkins-基础环境" class="headerlink" title="Jenkins 基础环境"></a>Jenkins 基础环境</h2><p>Jenkins 使用 Java 编写，支持所有主流操作系统。</p><p>本文仅介绍在 Windows 操作系统下 Jenkins 单机本地部署。</p><p>首先应配置 Java 环境，然后部署 Tomcat 服务。</p><p>然后即可安装 Jenkins 应用。</p><p>安装步骤可参考：<a href="https://www.cnblogs.com/hdwang/p/6081994.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/hdwang/p/6081994.html</a></p><p>最后推荐安装一些工具包括：</p><p>1、Apache Maven 软件（特别是Java软件）项目管理及自动构建工具。</p><p>推荐 Maven 配置镜像。</p><pre><code class="XML">&lt;mirror&gt;    &lt;!--This sends everything else to /public --&gt;    &lt;id&gt;nexus-aliyun&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Nexus aliyun&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>Maven 仓库阿里云镜像配置 - CSDN博客<br><a href="https://blog.csdn.net/cwenyifan/article/details/54864504" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cwenyifan/article/details/54864504</a></p><p>在公司内部推荐使用</p><pre><code class="XML">&lt;mirror&gt;&lt;id&gt;rnd-huawei&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Maven China Mirror&lt;/name&gt;      &lt;url&gt;http://rnd-mirrors.huawei.com/maven/&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>参考链接：MAVEN公司内部镜像配置&amp;Intellij IDEA MAVEN配置 - CE中间件与系统集成 - 3ms知识管理社区<br><a href="http://3ms.huawei.com/hi/group/2027489/wiki_4781465.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/hi/group/2027489/wiki_4781465.html</a></p><p>2、Git SVN 源代码版本控制工具。</p><p>具体安装配置操作可参考资料。</p><h2 id="Jenkins-全局工具配置"><a href="#Jenkins-全局工具配置" class="headerlink" title="Jenkins 全局工具配置"></a>Jenkins 全局工具配置</h2><p>JDK 配置 JAVA_HOME 目录即可</p><p>比如 <code>C:\Program Files\Java\jdk1.8.0_171</code></p><p>Git 配置 git.exe 文件即可</p><p>比如 <code>C:\Program Files\Git\bin\git.exe</code></p><p>Maven 配置 MAVEN_HOME 目录即可</p><p>比如 <code>D:\apache-maven\</code></p><h2 id="Jenkins-插件管理高级配置"><a href="#Jenkins-插件管理高级配置" class="headerlink" title="Jenkins 插件管理高级配置"></a>Jenkins 插件管理高级配置</h2><p>推荐配置 <strong>升级站点</strong></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json" rel="external nofollow noopener noreferrer" target="_blank">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json</a></p><p>公司内部推荐使用</p><p><a href="http://cmc-cd-mirror.rnd.huawei.com/jenkins-updates/update-center.json" rel="external nofollow noopener noreferrer" target="_blank">http://cmc-cd-mirror.rnd.huawei.com/jenkins-updates/update-center.json</a></p><p>参考链接：公司Jenkins插件中心上线啦，只需两步，免代理配置和漫长等待，轻松实现Jenkins插件在线自动安装和升级 - 刘珍珍的博客<br><a href="http://3ms.huawei.com/km/blogs/details/5544279" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.huawei.com/km/blogs/details/5544279</a></p><blockquote><p>参考资料<br>1、jenkins详解 - CSDN博客<br><a href="https://blog.csdn.net/qq_26848099/article/details/78901240" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_26848099/article/details/78901240</a><br>2、如何理解持续集成、持续交付、持续部署？ - 知乎<br><a href="https://www.zhihu.com/question/23444990" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/23444990</a><br>3、使用jekins自动构建部署java maven项目（jdk1.7+tomcat7.0+jenkins2.19.3） - 追极 - 博客园<br><a href="https://www.cnblogs.com/hdwang/p/6081994.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/hdwang/p/6081994.html</a><br>4、Jenkins：插件安装失败问题 - 简书<br><a href="https://www.jianshu.com/p/2b7288e77ff8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/2b7288e77ff8</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jenkins 是一款优秀的开源自动化服务器，允许持续集成和持续交付。Jenkins 支持数百个插件，以支持项目的构建、部署和自动化。&lt;/p&gt;&lt;p&gt;Jenkins 官网：&lt;a href=&quot;https://jenkins.io/&quot; rel=&quot;external nofollow
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>在线直播技术解决方案及其实现方法（移动端）</title>
    <link href="https://www.wshunli.com/posts/8aeeab4a.html"/>
    <id>https://www.wshunli.com/posts/8aeeab4a.html</id>
    <published>2018-07-04T13:40:33.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<p>简单地记录下 Android 移动端直播技术实现方法。</p><p>目前对移动端直播技术实现方法了解还不够全面，本文仅介绍一种基于 RTMP 协议的在线直播实现方法。</p><p>直播系统可以简单地分为三部分：服务端、推流端、拉流端。</p><h1 id="简单的直播系统"><a href="#简单的直播系统" class="headerlink" title="简单的直播系统"></a>简单的直播系统</h1><p>1、服务端：SRS</p><p>SRS定位是运营级的互联网直播服务器集群，追求更好的概念完整性和最简单实现的代码。</p><p>源代码：<a href="https://github.com/ossrs/srs" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ossrs/srs</a></p><p>部署方法：<a href="https://github.com/ossrs/srs/wiki/v1_CN_SampleRTMP" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ossrs/srs/wiki/v1_CN_SampleRTMP</a></p><p>2、推流端：OBS Studio</p><p>OBS Studio 是一款优秀的开源直播推流软件，支持 Windows, Mac or Linux 操作系统。</p><p>官网：<a href="https://obsproject.com/" rel="external nofollow noopener noreferrer" target="_blank">https://obsproject.com/</a></p><p>3、拉流端：VLC media player</p><p>VLC 是一款自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及 DVD、音频 CD、VCD 及各类流媒体协议。</p><p>官网：<a href="http://www.videolan.org/vlc/" rel="external nofollow noopener noreferrer" target="_blank">http://www.videolan.org/vlc/</a></p><p>其实这里好多视频播放器都支持的。</p><h1 id="移动端实现方法"><a href="#移动端实现方法" class="headerlink" title="移动端实现方法"></a>移动端实现方法</h1><p>1、服务端 SRS</p><p>服务端同样使用 SRS</p><p>2、推流端 yasea</p><p>yasea 是一个优秀的 RTMP 直播流推流库。</p><p>代码仓库：<a href="https://github.com/begeekmyfriend/yasea" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/begeekmyfriend/yasea</a></p><p>3、拉流端 ijkplayer</p><p>使用方法：<a href="https://www.wshunli.com/posts/2f3bf23c.html">https://www.wshunli.com/posts/2f3bf23c.html</a></p><p>源码编译：<a href="https://www.wshunli.com/posts/45f072c2.html">https://www.wshunli.com/posts/45f072c2.html</a></p><p>本文内容比较简单，后面有机会再深入了解。</p><blockquote><p>参考资料<br>1、Android手机直播（一）总览 - 简书<br><a href="https://www.jianshu.com/p/7ebbcc0c5df7" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/7ebbcc0c5df7</a><br>2、轻松入门Android直播相关技术 从0搭建直播系统 - CSDN博客<br><a href="https://blog.csdn.net/lmj623565791/article/details/77937483" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lmj623565791/article/details/77937483</a><br>3、Android直播实现（一）Android端推流、播放 - CSDN博客<br><a href="https://blog.csdn.net/mr_sk/article/details/71083366" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/mr_sk/article/details/71083366</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单地记录下 Android 移动端直播技术实现方法。&lt;/p&gt;&lt;p&gt;目前对移动端直播技术实现方法了解还不够全面，本文仅介绍一种基于 RTMP 协议的在线直播实现方法。&lt;/p&gt;&lt;p&gt;直播系统可以简单地分为三部分：服务端、推流端、拉流端。&lt;/p&gt;&lt;h1 id=&quot;简单的直播系统&quot;
      
    
    </summary>
    
      <category term="前端技术" scheme="https://www.wshunli.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="视频" scheme="https://www.wshunli.com/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="直播" scheme="https://www.wshunli.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="前端" scheme="https://www.wshunli.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（十）</title>
    <link href="https://www.wshunli.com/posts/4691b5a2.html"/>
    <id>https://www.wshunli.com/posts/4691b5a2.html</id>
    <published>2018-07-03T11:43:13.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】希望我的坚持，让我走得更高、看得更远
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android视频播放器ijkplayer源码编译</title>
    <link href="https://www.wshunli.com/posts/45f072c2.html"/>
    <id>https://www.wshunli.com/posts/45f072c2.html</id>
    <published>2018-06-26T06:55:55.000Z</published>
    <updated>2018-08-26T15:39:14.651Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 16.04 LTS 系统下编译 ijkplayer Android 源码。</p><p>前面介绍过 ijkplayer 的使用，要想支持更多的特性，还是需要编译下源码的。</p><p>本文编译源码的主要目的是支持更多的格式，以及支持 HTTPS 链接。</p><p>NDK 版本：android-ndk-r10e</p><p>ijkplayer 仓库地址 <a href="https://github.com/Bilibili/ijkplayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer</a></p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>0、最好还是在 Ubuntu 环境下编译，在 Windows 下编译可以参考</p><p><a href="https://blog.csdn.net/u010072711/article/details/51354834" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010072711/article/details/51354834</a></p><p>并不推荐此方法。</p><p>1、然后需要有 Java 及 Android 环境，可参考</p><p><a href="https://www.wshunli.com/posts/80d94eb7.html">https://www.wshunli.com/posts/80d94eb7.html</a></p><p>2、编译之前，还要准备一些工具</p><pre><code class="Shell">sudo apt-get updatesudo apt-get install gitsudo apt-get install yasm</code></pre><h1 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h1><p>1、从 GitHub 拉取源码，并打开源码目录</p><pre><code class="Shell">git clone https://github.com/Bilibili/ijkplayer.git ijkplayer-androidcd ijkplayer-android</code></pre><p>2、切换到指定版本，可在源码仓库查看</p><pre><code class="Shell">git checkout -B latest k0.8.8</code></pre><p>3、配置参数（可选操作，为了支持更多格式）</p><p>参数配置一共有三种方式，选择一种即可。</p><p>(1) 为支持更多的格式，我们选这种</p><pre><code class="Shell">cd configrm module.shln -s module-default.sh module.shcd ..</code></pre><p>(2) 支持 hevc 功能，而且精简后的库</p><pre><code class="Shell">cd configrm module.shln -s module-lite-hevc.sh module.shcd ..</code></pre><p>(3) 精简后的库，默认是这种配置</p><pre><code class="Shell">cd configrm module.shln -s module-lite.sh module.shcd ..</code></pre><p>4、初始化，主要是拉取 ijkplayer 的依赖等，输入命令</p><pre><code class="Shell">./init-android.sh</code></pre><p>初始化 openssl （可选操作，为了支持 HTTPS ）</p><pre><code class="Shell">./init-android-openssl.sh</code></pre><p>5、打开 <code>ijkplayer-android/android/contrib/</code> 目录，Android 下编译脚本就放在该目录下</p><pre><code class="Shell">cd android/contrib</code></pre><p>6、清理并编译 openssl 依赖（可选操作，为了支持 HTTPS ）</p><pre><code class="Shell">./compile-openssl.sh clean./compile-openssl.sh all</code></pre><p>7、清理并编译 ffmpeg 软解码库依赖</p><pre><code class="Shell">./compile-ffmpeg.sh clean./compile-ffmpeg.sh all</code></pre><p>如果遇到问题 <code>fatal error: linux/perf_event.h: No such file or directory</code></p><p>可参考：<a href="https://github.com/Bilibili/ijkplayer/issues/4125" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer/issues/4125</a></p><p>在 module-default.sh、module-lite-hevc.sh 中添加如下一行配置即可。</p><pre><code class="Shell">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --disable-linux-perf&quot;</code></pre><p>8、然后返回上级到 <code>ijkplayer-android/android/</code> 目录，编译源码</p><pre><code class="Shell">cd .../compile-ijk.sh all</code></pre><p>等待编译完成即可。</p><h1 id="导入使用"><a href="#导入使用" class="headerlink" title="导入使用"></a>导入使用</h1><p>打开 Android Studio 并导入 <code>ijkplayer-android/android/ijkplayer/</code> 即可。</p><p><img src="https://img.wshunli.com/Android/ijkplayer/ijkplayer-build.png" alt="ijkplayer-build"></p><p>在这个项目中 module 比较多，大多数是针对不同 CPU 架构的包。</p><blockquote><p>参考资料<br>1、Android 超好用的播放器——ijkplayer - 简书<br><a href="https://www.jianshu.com/p/c5d972ab0309" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c5d972ab0309</a><br>2、IJKPlayer初识-编译与使用 - 简书<br><a href="https://www.jianshu.com/p/a425ee1c2aec" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/a425ee1c2aec</a><br>3、在ubuntu下编译ijkplayer-android - CSDN博客<br><a href="https://blog.csdn.net/u010072711/article/details/51438871" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010072711/article/details/51438871</a><br>4、Android集成IjkPlayer - 简书<br><a href="https://www.jianshu.com/p/79b434b2d5c8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/79b434b2d5c8</a><br>5、Ubuntu编译ijkplayer支持https和更多视频格式 - CSDN博客<br><a href="https://blog.csdn.net/DyncKathline/article/details/78223972" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/DyncKathline/article/details/78223972</a><br>6、Android，ijkplayer增加https协议支持，编译运行ijkplayer - CSDN博客<br><a href="https://blog.csdn.net/linchaolong/article/details/52805666" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/linchaolong/article/details/52805666</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ubuntu 16.04 LTS 系统下编译 ijkplayer Android 源码。&lt;/p&gt;&lt;p&gt;前面介绍过 ijkplayer 的使用，要想支持更多的特性，还是需要编译下源码的。&lt;/p&gt;&lt;p&gt;本文编译源码的主要目的是支持更多的格式，以及支持 HTTPS 链接。&lt;/p&gt;
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="ijkplayer" scheme="https://www.wshunli.com/tags/ijkplayer/"/>
    
  </entry>
  
  <entry>
    <title>Android视频播放器ExoPlayer使用入门</title>
    <link href="https://www.wshunli.com/posts/11deb252.html"/>
    <id>https://www.wshunli.com/posts/11deb252.html</id>
    <published>2018-06-23T11:02:59.000Z</published>
    <updated>2018-08-26T15:39:14.651Z</updated>
    
    <content type="html"><![CDATA[<p>EXOPlayer 是Google 官方开源的一款 Android 播放器，支持本地或者网络的音频和视频播放，支持 DASH、HLS 等流媒体协议，但是不支持 rtsp、rtmp 协议。</p><p>EXOPlayer 仓库地址：<a href="https://github.com/google/ExoPlayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/google/ExoPlayer</a></p><p>Google 的亲儿子，还是要学习下啊。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>引入依赖可以一次性全部引入所有依赖：</p><pre><code class="gradle">dependencies {    implementation &#39;com.google.android.exoplayer:exoplayer:2.X.X&#39;}</code></pre><p>也可以根据需要引入不同模块。</p><pre><code class="gradle">dependencies {    implementation &#39;com.google.android.exoplayer:exoplayer-core:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-dash:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-hls:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-smoothstreaming:2.X.X&#39;    implementation &#39;com.google.android.exoplayer:exoplayer-ui:2.X.X&#39;}</code></pre><h1 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h1><p>EXOPlayer 使用是非常简单的，首先添加播放器控件。</p><pre><code class="XML">&lt;com.google.android.exoplayer2.ui.SimpleExoPlayerView    android:id=&quot;@+id/exoView&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot; /&gt;</code></pre><p>然后初始化播放器。</p><pre><code class="Java">private void initPlayer() {    //1. 创建一个默认的 TrackSelector    BandwidthMeter bandwidthMeter = new DefaultBandwidthMeter();    TrackSelection.Factory videoTackSelectionFactory =            new AdaptiveTrackSelection.Factory(bandwidthMeter);    TrackSelector trackSelector =            new DefaultTrackSelector(videoTackSelectionFactory);    //2.创建ExoPlayer    simpleExoPlayer = ExoPlayerFactory.newSimpleInstance(this, trackSelector);    //3.创建SimpleExoPlayerView    simpleExoPlayerView = (SimpleExoPlayerView) findViewById(R.id.exoView);    //4.为SimpleExoPlayer设置播放器    simpleExoPlayerView.setPlayer(simpleExoPlayer);    simpleExoPlayer.setPlayWhenReady(true);}</code></pre><p>最后添加视频资源就可以播放了。</p><pre><code class="Java">DataSource.Factory mediaDataSourceFactory = new DefaultDataSourceFactory(this,        Util.getUserAgent(this, &quot;ExoPlayerDemo&quot;));MediaSource mediaSource = new ExtractorMediaSource.Factory(mediaDataSourceFactory).createMediaSource(Uri.parse(&quot;http://streams.wshunli.com/videos/dyys_x264.mp4&quot;));simpleExoPlayer.prepare(mediaSource);</code></pre><p>注意添加网络权限，最终效果：</p><p><img src="https://img.wshunli.com/Android/ExoPlayer/exoplayer-result.min.jpg" alt="exoplayer-result"></p><blockquote><p>参考资料<br>1、EXOPlayer简要学习及应用 - CSDN博客<br><a href="https://blog.csdn.net/s1991721/article/details/77587308" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/s1991721/article/details/77587308</a><br>2、ExoPlayer开发指南（官方文档翻译） - CSDN博客<br><a href="https://blog.csdn.net/u014606081/article/details/76181049" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u014606081/article/details/76181049</a><br>3、Google Exoplayer 之全面认识 - Android - 掘金<br><a href="https://juejin.im/entry/5884061f128fe1006c34ea43" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/entry/5884061f128fe1006c34ea43</a><br>4、ExoPlayer2.5 的简单使用 - 简书<br><a href="https://www.jianshu.com/p/c9b136fc16c7" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c9b136fc16c7</a><br>6、ExoPlayer的使用介绍 - 简书<br><a href="https://www.jianshu.com/p/628481250b59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/628481250b59</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;EXOPlayer 是Google 官方开源的一款 Android 播放器，支持本地或者网络的音频和视频播放，支持 DASH、HLS 等流媒体协议，但是不支持 rtsp、rtmp 协议。&lt;/p&gt;&lt;p&gt;EXOPlayer 仓库地址：&lt;a href=&quot;https://githu
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="ExoPlayer" scheme="https://www.wshunli.com/tags/ExoPlayer/"/>
    
  </entry>
  
  <entry>
    <title>Android视频播放器ijkplayer使用入门</title>
    <link href="https://www.wshunli.com/posts/2f3bf23c.html"/>
    <id>https://www.wshunli.com/posts/2f3bf23c.html</id>
    <published>2018-06-23T08:26:20.000Z</published>
    <updated>2018-08-26T15:39:14.651Z</updated>
    
    <content type="html"><![CDATA[<p>ijkplayer 是 Bilibili 基于 ffmpeg 开发并开源的轻量级视频播放器，支持播放本地网络视频，也支持流媒体播放。</p><p>支持 Android 和 iOS 操作系统，所以文章起名还是有点瑕疵的，哈哈哈 。</p><p>ijkplayer 仓库地址：<a href="https://github.com/Bilibili/ijkplayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer</a></p><p>目前 Android 主流的视频播放器是 ijkplayer、ExoPlayer、MediaPlayer。</p><p>其中 MediaPlayer 在前面介绍过了：《第一行代码》读书笔记（七） | CirGIS<br><a href="https://www.wshunli.com/posts/941f84ed.html">https://www.wshunli.com/posts/941f84ed.html</a></p><p>接下来两篇文章会分别介绍 ijkplayer 和 ExoPlayer 的使用，也为移动端直播技术打下基础。</p><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>根据需要引入依赖，根据建议引入 java 、 armv7a 两种兼容性基本满足要求。</p><pre><code class="gradle">dependencies {    # required, enough for most devices.    compile &#39;tv.danmaku.ijk.media:ijkplayer-java:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8&#39;    # Other ABIs: optional    compile &#39;tv.danmaku.ijk.media:ijkplayer-armv5:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-arm64:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-x86:0.8.8&#39;    compile &#39;tv.danmaku.ijk.media:ijkplayer-x86_64:0.8.8&#39;    # ExoPlayer as IMediaPlayer: optional, experimental    compile &#39;tv.danmaku.ijk.media:ijkplayer-exo:0.8.8&#39;}</code></pre><h1 id="添加播放控件"><a href="#添加播放控件" class="headerlink" title="添加播放控件"></a>添加播放控件</h1><p>本身 ijkplayer 是没有播放控件的，这里我们采用示例代码的播放控件。</p><p>\ijkplayer\android\ijkplayer\ijkplayer-example\src\main\java\tv\danmaku\ijk\media\example\widget\media</p><p>将其代码复制到合适位置，还有 string 键值对，以及 Manifest 配置。</p><p><img src="https://img.wshunli.com/Android/ijkplayer/ijkplayer-widget.png" alt="ijkplayer-widget"></p><p>其中 Manifest 需要配置权限及声明服务。</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;···&lt;service    android:name=&quot;com.wshunli.ijkplayer.demo.services.MediaPlayerService&quot;    android:enabled=&quot;false&quot;    android:exported=&quot;false&quot;    android:icon=&quot;@mipmap/ic_launcher&quot;    android:label=&quot;@string/app_name&quot; /&gt;</code></pre><p>可能会出现 NullPointerException 错误，删除不必要的代码即可。</p><p><a href="https://github.com/Bilibili/ijkplayer/issues/3969" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Bilibili/ijkplayer/issues/3969</a></p><h1 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h1><p>在布局中添加播放控件。</p><pre><code class="XML">&lt;com.wshunli.ijkplayer.demo.widget.IjkVideoView    android:id=&quot;@+id/ijkvideoview&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;&gt;&lt;/com.wshunli.ijkplayer.demo.widget.IjkVideoView&gt;</code></pre><p>然后在 Activity 中使用就可以了。</p><pre><code class="Java">IjkVideoView ijkVideoView;···ijkVideoView = findViewById(R.id.ijkvideoview);ijkVideoView.setVideoURI(Uri.parse(&quot;http://streams.wshunli.com/videos/dyys2_x264.mp4&quot;));//  ijkVideoView.setVideoURI(Uri.parse(&quot;http://streams.wshunli.com/x36xhzz/x36xhzz.m3u8&quot;));ijkVideoView.start();</code></pre><p>默认是支持 m3u8 直播视频流的，挺意外的。</p><p><img src="https://img.wshunli.com/Android/ijkplayer/ijkplayer-livevideo.min.jpg" alt="ijkplayer-livevideo"></p><p>其他还有很多基于或者封装的播放库，这里列举出来就不多介绍了。</p><p>1、支持浮动和全屏的视频播放器。<br><a href="https://github.com/lipangit/JiaoZiVideoPlayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/lipangit/JiaoZiVideoPlayer</a></p><p>2、基于IJKPlayer（兼容系统MediaPlayer与EXOPlayer2），实现了多功能的视频播放器。<br><a href="https://github.com/CarGuo/GSYVideoPlayer" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/CarGuo/GSYVideoPlayer</a></p><p>3、Android播放器基础库，专注于播放视图组件的高复用性和组件间的低耦合，轻松处理复杂业务。<br><a href="https://github.com/jiajunhui/PlayerBase" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jiajunhui/PlayerBase</a></p><blockquote><p>参考资料<br>1、Android ijkplayer的使用解析 - CSDN博客<br><a href="https://blog.csdn.net/huaxun66/article/details/53401231" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/huaxun66/article/details/53401231</a><br>2、Android ijkplayer的使用解析及播放器的制作 - CSDN博客<br><a href="https://blog.csdn.net/github_2011/article/details/77385498" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/github_2011/article/details/77385498</a><br>3、Android 超好用的播放器——ijkplayer - 简书<br><a href="https://www.jianshu.com/p/c5d972ab0309" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c5d972ab0309</a><br>4、Android集成IjkPlayer - 简书<br><a href="https://www.jianshu.com/p/79b434b2d5c8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/79b434b2d5c8</a><br>5、视频直播技术（四）：使用Ijkplayer播放直播视频 - 灰色飘零 - 博客园<br><a href="http://www.cnblogs.com/renhui/p/6420140.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/renhui/p/6420140.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ijkplayer 是 Bilibili 基于 ffmpeg 开发并开源的轻量级视频播放器，支持播放本地网络视频，也支持流媒体播放。&lt;/p&gt;&lt;p&gt;支持 Android 和 iOS 操作系统，所以文章起名还是有点瑕疵的，哈哈哈 。&lt;/p&gt;&lt;p&gt;ijkplayer 仓库地址：&lt;
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="ijkplayer" scheme="https://www.wshunli.com/tags/ijkplayer/"/>
    
  </entry>
  
  <entry>
    <title>在线直播技术及其实时视频流可视化方法（前端）</title>
    <link href="https://www.wshunli.com/posts/b4d6e25d.html"/>
    <id>https://www.wshunli.com/posts/b4d6e25d.html</id>
    <published>2018-06-23T04:23:34.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开，非常抱歉。 " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开，非常抱歉。 </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录在线直播技术及其实时视频流可视化方法（前端）。
    
    </summary>
    
      <category term="前端技术" scheme="https://www.wshunli.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="视频" scheme="https://www.wshunli.com/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="直播" scheme="https://www.wshunli.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="前端" scheme="https://www.wshunli.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android View 体系（一）Android View 体系基础</title>
    <link href="https://www.wshunli.com/posts/f6f583a.html"/>
    <id>https://www.wshunli.com/posts/f6f583a.html</id>
    <published>2018-06-20T02:33:59.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<p>有很多人觉得自己比较菜，就会称自己为 Android UI 工程师，非常有意思。</p><p>其实 Android UI 体系内容也是比较多的，不仅仅是指 UI 控件的使用，那也太基础了。</p><p>本文主要介绍 Android View 基础，内容可能后面会逐步完善。</p><h1 id="View-介绍"><a href="#View-介绍" class="headerlink" title="View 介绍"></a>View 介绍</h1><p>View 是 Android 中所有控件的基类，同时 ViewGroup 也继承自 View 。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/ViewGroup介绍.jpg" alt="ViewGroup介绍"></p><p>所以 View 本身可以是一个控件也可以是多个控件，基本上我们平常用到控件都继承自 View ，是一种树状结构。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View介绍.min.png" alt="View介绍"></p><h1 id="View-的位置参数"><a href="#View-的位置参数" class="headerlink" title="View 的位置参数"></a>View 的位置参数</h1><p>在 Android 中有两种类型的坐标系，分别是 Android 坐标系和视图坐标系。其实是相对而言的，</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View坐标系.png" alt="View坐标系"></p><p>Android 坐标系是相对屏幕原点（左上角）而言，视图坐标系是相对父类容器（ViewGroup）而言的。</p><p>在 Android 中，View 的位置由 top、left、right、bottom 四个属性确定，注意都是相对父容器而言。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View位置API.png" alt="View位置API"></p><p>View 提供的 API 分别获取对应的数值。</p><ul><li>getTop()：获取 View 顶边到其父布局顶边的距离</li><li>getLeft()：获取 View 左边到其父布局左边的距离</li><li>getRight()：获取 View 右边到其父布局左边的距离</li><li>getBottom()：获取 View 底边到其父布局顶边的距离</li></ul><p>MotionEvent 也提供了一些获取点击位置的方法。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/MotionEvent位置API.png" alt="MotionEvent位置API"></p><p>其中红点位置为点击位置。</p><ul><li>getX()：获取点击位置离View左边的距离</li><li>getY()：获取点击位置离View顶边的距离</li><li>getRawX()：获取点击位置离屏幕左边的距离</li><li>getRawY()：获取点击位置离屏幕顶边的距离</li></ul><p>其实感觉看懂了下面这张图，也就基本可以理解View的坐标系了。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-View体系/1/View位置.min.png" alt="View位置"></p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 3.1 View 基础知识<br>2、《Android群英传》 – 第三章 Android 控件架构与自定义控件详解<br>3、Android View体系（一）视图坐标系 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/view/1-coordinate-system.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/view/1-coordinate-system.html</a><br>4、View | Android Developers<br><a href="https://developer.android.com/reference/android/view/View" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/reference/android/view/View</a><br>5、View与ViewGroup的概念 | 菜鸟教程<br><a href="http://www.runoob.com/w3cnote/android-tutorial-view-viewgroup-intro.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/w3cnote/android-tutorial-view-viewgroup-intro.html</a><br>6、Android 坐标系与视图坐标系图解 - CSDN博客<br><a href="https://blog.csdn.net/zhuwentao2150/article/details/52434104" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/zhuwentao2150/article/details/52434104</a><br>7、Android应用坐标系统全面详解 - CSDN博客<br><a href="https://blog.csdn.net/yanbober/article/details/50419117" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yanbober/article/details/50419117</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有很多人觉得自己比较菜，就会称自己为 Android UI 工程师，非常有意思。&lt;/p&gt;&lt;p&gt;其实 Android UI 体系内容也是比较多的，不仅仅是指 UI 控件的使用，那也太基础了。&lt;/p&gt;&lt;p&gt;本文主要介绍 Android View 基础，内容可能后面会逐步完善。&lt;
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
      <category term="View体系" scheme="https://www.wshunli.com/tags/View%E4%BD%93%E7%B3%BB/"/>
    
      <category term="《Android群英传》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E7%BE%A4%E8%8B%B1%E4%BC%A0%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（九）</title>
    <link href="https://www.wshunli.com/posts/c3a39066.html"/>
    <id>https://www.wshunli.com/posts/c3a39066.html</id>
    <published>2018-06-09T08:48:00.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】都6月份了，一直拖到现在，也是6得不行
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>那些年，我们用过的地图下载器</title>
    <link href="https://www.wshunli.com/posts/73256148.html"/>
    <id>https://www.wshunli.com/posts/73256148.html</id>
    <published>2018-06-09T01:46:27.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<p>作为地信、遥感等专业的同学，下载线划图、遥感影像应该都接触过，以前很多群发广告都看不惯，借这次下载高程数据的机会，总结下地图下载器，收费部分的搜索下就懂了。。</p><p><strong>本文仅介绍平常接触到的地图下载器，用作学习和研究目的，不提供收费软件破解文件下载</strong>。</p><p><strong>本文标题来源</strong>：那些年，我们用过的地图下载器 - 我也是个傻瓜 - 博客园<br><a href="https://www.cnblogs.com/liweis/p/4575656.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/liweis/p/4575656.html</a></p><p>1、晟兴地球 SXEarth 是一款永久免费的 3DGIS 平台软件。</p><p>支持在线 Google Earth 卫星影像（无水印无偏移）下载，支持拼接为tif，支持模拟飞行，支持场景编辑。</p><p><img src="https://img.wshunli.com/瞎推荐/地图下载器/SXEarth.png" alt="SXEarth"></p><p>下载地址：<a href="http://www.sxsim.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.sxsim.com/</a></p><p>支持的在线地图特别多，平常基本上用这个就够了。</p><p>2、LocaSpace Viewer 免费、开放的三维数字地球</p><p>多种互联网地图集成、影像、地形数据下载、倾斜数据极速浏览、二三维地理、模型数据、量测和空间分析、软件特色应用。</p><p><img src="https://img.wshunli.com/瞎推荐/地图下载器/LocaSpaceViewer.png" alt="LocaSpaceViewer"></p><p>下载地址：<a href="http://www.locaspace.cn/LSV.jsp" rel="external nofollow noopener noreferrer" target="_blank">http://www.locaspace.cn/LSV.jsp</a></p><p>支持的在线底图不是很多，但是在三维场景尤其是倾斜摄影方面很有优势。</p><p>其他收费的在参考资料，这里就先不介绍了。</p><blockquote><p>参考资料<br>1、那些年，我们用过的地图下载器 - 我也是个傻瓜 - 博客园<br><a href="https://www.cnblogs.com/liweis/p/4575656.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/liweis/p/4575656.html</a><br>2、奉上我收藏的地图下载器（低调使用，你懂的），还各个群一个良好的群环境（别再因为苦于找不到下载器而转发广告了） - ThinkGIS<br><a href="http://www.thinkgis.cn/topic/555ac3911cf2f372004ef9ac" rel="external nofollow noopener noreferrer" target="_blank">http://www.thinkgis.cn/topic/555ac3911cf2f372004ef9ac</a><br>3、SXEarth-超强的GIS数据下载利器 | 麻辣GIS<br><a href="https://malagis.com/sxearth-super-gis-data-downloader.html" rel="external nofollow noopener noreferrer" target="_blank">https://malagis.com/sxearth-super-gis-data-downloader.html</a><br>4、只要三步下载GIS数据（亲测可用/免费/无需转发5个群） | 麻辣GIS<br><a href="https://malagis.com/downlod-gis-data-by-3-steps.html" rel="external nofollow noopener noreferrer" target="_blank">https://malagis.com/downlod-gis-data-by-3-steps.html</a><br>5、北京晟兴科技有限公司 官网首页<br><a href="http://www.sxsim.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.sxsim.com/</a><br>6、LocaSpace Viewer 三维数字地球<br><a href="http://www.locaspace.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.locaspace.cn/</a><br>7、太乐地图官网 - 让地理信息应用更简单<br><a href="http://www.arctiler.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.arctiler.com/</a><br>8、谷歌卫星地图下载器-谷歌地图高清卫星地图2018-北斗卫星地图-水经注万能地图下载器-水经注软件<br><a href="http://www.rivermap.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.rivermap.cn/</a><br>9、91卫图助手，Google Earth影像高程历史影像下载专家<br><a href="http://www.91weitu.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.91weitu.com/</a><br>10、谷歌地图高清卫星地图2018_北斗卫星地图_3d地形图-BIGEMAP<br><a href="http://www.bigemap.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.bigemap.com/</a><br>11、谷歌卫星地图下载器<br><a href="http://www.wolfmap.cn/" rel="external nofollow noopener noreferrer" target="_blank">http://www.wolfmap.cn/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为地信、遥感等专业的同学，下载线划图、遥感影像应该都接触过，以前很多群发广告都看不惯，借这次下载高程数据的机会，总结下地图下载器，收费部分的搜索下就懂了。。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;本文仅介绍平常接触到的地图下载器，用作学习和研究目的，不提供收费软件破解文件下载&lt;/s
      
    
    </summary>
    
      <category term="瞎推荐" scheme="https://www.wshunli.com/categories/%E7%9E%8E%E6%8E%A8%E8%8D%90/"/>
    
    
      <category term="GIS" scheme="https://www.wshunli.com/tags/GIS/"/>
    
      <category term="地图下载器" scheme="https://www.wshunli.com/tags/%E5%9C%B0%E5%9B%BE%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（八）使用 Socket 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/c9a2416c.html"/>
    <id>https://www.wshunli.com/posts/c9a2416c.html</id>
    <published>2018-06-08T12:46:26.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<p>Socket 也称为 “嵌套字”，是计算机网络中的概念，分为流式嵌套字（TCP）和用户数据报嵌套字（UDP）。</p><p>不同用户进程通过 Socket 进行通信也是一种 IPC 方式。</p><p>在使用 Socket 通信前应在 AndroidManifest 中声明权限：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</code></pre><p>1、服务端</p><p>我们需要一个 Service 作为服务端，声明如下：</p><pre><code class="XML">&lt;service    android:name=&quot;.socket.SocketService&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p>Socket 服务端在 Service 启动时，会建立 TCP 连接并监听 8688 端口。</p><pre><code class="Java">public class SocketService extends Service {    private static final String TAG = &quot;SocketService&quot;;    private boolean isDestroyed = false;    private String[] messages = new String[]{            &quot;你好啊，哈哈&quot;,            &quot;请问你叫什么名字呀？&quot;,            &quot;今天北京天气不错啊&quot;,            &quot;你知道吗？我可是可以和多个人同时聊天的哦&quot;,            &quot;给你讲个笑话吧：据说爱笑的人运气不会太差，不知道真假。&quot;    };    public SocketService() {    }    @Override    public void onCreate() {        super.onCreate();        new Thread(new TCPServer()).start();    }    @Override    public IBinder onBind(Intent intent) {        return null;    }    @Override    public void onDestroy() {        isDestroyed = true;        super.onDestroy();    }    private class TCPServer implements Runnable {        @Override        public void run() {            ServerSocket serverSocket = null;            try {                serverSocket = new ServerSocket(8688);            } catch (IOException e) {                e.printStackTrace();            }            while (!isDestroyed) {                try {                    final Socket client = serverSocket.accept();                    Log.d(TAG, &quot;accept&quot;);                    new Thread() {                        @Override                        public void run() {                            responseClient(client);                        }                    }.start();                } catch (IOException e) {                    e.printStackTrace();                }            }        }        private void responseClient(Socket client) {            try {                // 接收客户端消息                BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));                // 响应客户端消息                PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(client.getOutputStream())), true);                Log.d(TAG, &quot;欢迎来到聊天室！&quot;);                out.println(&quot;欢迎来到聊天室！&quot;);                while (!isDestroyed) {                    String line = in.readLine();                    Log.d(TAG, &quot;message from Client: &quot; + line);                    if (line == null) break;                    int i = new Random().nextInt(messages.length);                    String message = messages[i];                    out.println(message);                    Log.d(TAG, &quot;response to Client: &quot; + message);                }                out.close();                in.close();                client.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }}</code></pre><p>当与客户端建立连接后，新建 Socket 客户端，接收消息并作出响应。</p><p>2、客户端</p><p>客户端部分首先启动 Socket 服务，并且在连接失败后会不断重新尝试连接。</p><pre><code class="Java">public class SocketActivity extends AppCompatActivity {    private static final String TAG = &quot;SocketActivity&quot;;    private Button bt_send;    private EditText et_receive;    private TextView tv_message;    private PrintWriter mPrintWriter;    private Socket mClientSocket;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_socket);        initView();        Intent service = new Intent(this, SocketService.class);        startService(service);        new Thread() {            @Override            public void run() {                connectSocketServer();            }        }.start();    }    private void initView() {        et_receive = findViewById(R.id.et_receive);        bt_send = findViewById(R.id.bt_send);        tv_message = findViewById(R.id.tv_message);        bt_send.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                final String msg = et_receive.getText().toString();                //向服务器发送信息                if (!TextUtils.isEmpty(msg) &amp;&amp; mPrintWriter != null) {                    Log.d(TAG, &quot;onClick: &quot; + msg);                    new Thread(new Runnable() {                        @Override                        public void run() {                            mPrintWriter.println(msg);                        }                    }).start();                    tv_message.setText(tv_message.getText() + &quot;\n&quot; + &quot;客户端：&quot; + msg);                    et_receive.setText(&quot;&quot;);                }            }        });    }    private void connectSocketServer() {        Socket socket = null;        while (socket == null) {            try {                //选择和服务器相同的端口8688                socket = new Socket(&quot;localhost&quot;, 8688);                mClientSocket = socket;                mPrintWriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);            } catch (IOException e) {                SystemClock.sleep(1000);            }        }        try {            // 接收服务器端的消息            BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));            while (!isFinishing()) {                final String msg = br.readLine();                if (msg != null) {                    runOnUiThread(                            new Runnable() {                                @Override                                public void run() {                                    tv_message.setText(tv_message.getText() + &quot;\n&quot; + &quot;服务端：&quot; + msg);                                }                            }                    );                }            }            mPrintWriter.close();            br.close();            socket.close();        } catch (IOException e) {            e.printStackTrace();        }    }    @Override    protected void onDestroy() {        if (mClientSocket != null) {            try {                mClientSocket.shutdownInput();                mClientSocket.close();            } catch (IOException e) {                e.printStackTrace();            }        }        super.onDestroy();    }}</code></pre><p>主要使用 socket.getOutputStream() 和 socket.getInputStream() 方法分别发送、接收服务端消息。</p><p>打印日志如下：</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/8.Socket日志.png" alt="8.Socket日志"></p><p>最终效果如下：</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/8.Socket进程间通信.png" alt="8.Socket进程间通信"></p><p>到这里把 Android IPC 通信的几种实现方式基本看了一遍，但是在 Binder 机制原理方面还有欠缺，后面再深入学习。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.6 使用 Socket<br>2、Android IPC机制（五）用Socket实现跨进程聊天程序 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/5-socket.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/5-socket.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Socket 也称为 “嵌套字”，是计算机网络中的概念，分为流式嵌套字（TCP）和用户数据报嵌套字（UDP）。&lt;/p&gt;&lt;p&gt;不同用户进程通过 Socket 进行通信也是一种 IPC 方式。&lt;/p&gt;&lt;p&gt;在使用 Socket 通信前应在 AndroidManifest 中声明
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（七）使用 ContentProvider 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/b68f7dd9.html"/>
    <id>https://www.wshunli.com/posts/b68f7dd9.html</id>
    <published>2018-06-08T11:32:34.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<p>ContentProvider 是 Andorid 中专门用于不同应用间进行数据共享的方式，底层实现也是 Binder 。</p><p>前面在 <a href="https://www.wshunli.com/posts/2311b8ab.html">《第一行代码》读书笔记（五）– 应用组件之 ContentProvider</a> 介绍过，这里就不再详细记录了。</p><p>首先继承 ContentProvider 类实现自己的 Provider ：</p><pre><code class="Java">public class BookProvider extends ContentProvider {    private static final String TAG = &quot;BookProvider&quot;;    public static final String AUTHORITY = &quot;com.wshunli.ipc.demo.book.provider&quot;;    public static final Uri BOOK_CONTENT_URI = Uri.parse(&quot;content://&quot;            + AUTHORITY + &quot;/book&quot;);    public static final Uri USER_CONTENT_URI = Uri.parse(&quot;content://&quot;            + AUTHORITY + &quot;/user&quot;);    public static final int BOOK_URI_CODE = 0;    public static final int USER_URI_CODE = 1;    private static final UriMatcher sUriMatcher = new UriMatcher(            UriMatcher.NO_MATCH);    static {        sUriMatcher.addURI(AUTHORITY, &quot;book&quot;, BOOK_URI_CODE);        sUriMatcher.addURI(AUTHORITY, &quot;user&quot;, USER_URI_CODE);    }    private Context context;    private SQLiteDatabase db;    public BookProvider() {    }    @Override    public boolean onCreate() {        context = getContext();        initProviderData();        return true;    }    private void initProviderData() {        db = new DBHelper(context).getWritableDatabase();        db.execSQL(&quot;delete from &quot; + DBHelper.BOOK_TABLE_NAME);        db.execSQL(&quot;delete from &quot; + DBHelper.USER_TALBE_NAME);        db.execSQL(&quot;insert into book values(3,&#39;Android&#39;);&quot;);        db.execSQL(&quot;insert into book values(4,&#39;Ios&#39;);&quot;);        db.execSQL(&quot;insert into book values(5,&#39;Html5&#39;);&quot;);        db.execSQL(&quot;insert into user values(1,&#39;jake&#39;,1);&quot;);        db.execSQL(&quot;insert into user values(2,&#39;jasmine&#39;,0);&quot;);    }    @Override    public String getType(Uri uri) {        Log.d(TAG, &quot;getType: &quot;);        return null;    }    @Override    public Uri insert(Uri uri, ContentValues values) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        db.insert(table, null, values);        context.getContentResolver().notifyChange(uri, null);        return uri;    }    @Override    public Cursor query(Uri uri, String[] projection, String selection,                        String[] selectionArgs, String sortOrder) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        return db.query(table, projection, selection, selectionArgs, null, null, sortOrder, null);    }    @Override    public int update(Uri uri, ContentValues values, String selection,                      String[] selectionArgs) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        int row = db.update(table, values, selection, selectionArgs);        if (row &gt; 0) {            context.getContentResolver().notifyChange(uri, null);        }        return row;    }    @Override    public int delete(Uri uri, String selection, String[] selectionArgs) {        String table = getTableName(uri);        if (table == null) {            throw new IllegalArgumentException(&quot;Unsupported URI: &quot; + uri);        }        int count = db.delete(table, selection, selectionArgs);        if (count &gt; 0) {            context.getContentResolver().notifyChange(uri, null);        }        return count;    }    private String getTableName(Uri uri) {        String tableName = null;        switch (sUriMatcher.match(uri)) {            case BOOK_URI_CODE:                tableName = DBHelper.BOOK_TABLE_NAME;                break;            case USER_URI_CODE:                tableName = DBHelper.USER_TALBE_NAME;                break;            default:                break;        }        return tableName;    }}</code></pre><p>记得在 AndroidManifest 中声明：</p><pre><code class="XML">&lt;provider    android:name=&quot;.content.BookProvider&quot;    android:authorities=&quot;com.wshunli.ipc.demo.book.provider&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;    android:permission=&quot;com.wshunli.ipc.demo.PROVIDER&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p>其中 DBHelper 为数据库帮助类，代码如下：</p><pre><code class="Java">public class DBHelper extends SQLiteOpenHelper {    private static final String DB_NAME = &quot;book_provider.db&quot;;    public static final String BOOK_TABLE_NAME = &quot;book&quot;;    public static final String USER_TALBE_NAME = &quot;user&quot;;    private static final int DB_VERSION = 3;    private String CREATE_BOOK_TABLE = &quot;CREATE TABLE IF NOT EXISTS &quot;            + BOOK_TABLE_NAME + &quot;(_id INTEGER PRIMARY KEY,&quot; + &quot;name TEXT)&quot;;    private String CREATE_USER_TABLE = &quot;CREATE TABLE IF NOT EXISTS &quot;            + USER_TALBE_NAME + &quot;(_id INTEGER PRIMARY KEY,&quot; + &quot;name TEXT,&quot;            + &quot;sex INT)&quot;;    public DBHelper(Context context) {        super(context, DB_NAME, null, DB_VERSION);    }    @Override    public void onCreate(SQLiteDatabase db) {        db.execSQL(CREATE_BOOK_TABLE);        db.execSQL(CREATE_USER_TABLE);    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {    }}</code></pre><p>然后就是使用了，新建 Activity ：</p><pre><code class="Java">public class ProviderActivity extends AppCompatActivity {    private static final String TAG = &quot;ProviderActivity&quot;;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_provider);//        Uri uri = Uri.parse(&quot;content://com.wshunli.ipc.demo.book.provider&quot;);//        getContentResolver().query(uri, null, null, null, null);        Uri bookUri = Uri.parse(&quot;content://com.wshunli.ipc.demo.book.provider/book&quot;);        ContentValues values = new ContentValues();        values.put(&quot;_id&quot;, 6);        values.put(&quot;name&quot;, &quot;程序设计的艺术&quot;);        getContentResolver().insert(bookUri, values);        Cursor bookCursor = getContentResolver().query(bookUri, new String[]{&quot;_id&quot;, &quot;name&quot;}, null, null, null);        while (bookCursor.moveToNext()) {            Book book = new Book();            book.bookId = bookCursor.getInt(0);            book.bookName = bookCursor.getString(1);            Log.d(TAG, &quot;query book:&quot; + book.toString());        }        bookCursor.close();        Uri userUri = Uri.parse(&quot;content://com.wshunli.ipc.demo.book.provider/user&quot;);        Cursor userCursor = getContentResolver().query(userUri, new String[]{&quot;_id&quot;, &quot;name&quot;, &quot;sex&quot;}, null, null, null);        while (userCursor.moveToNext()) {            User user = new User();            user.userId = userCursor.getInt(0);            user.userName = userCursor.getString(1);            user.isMale = userCursor.getInt(2) == 1;            Log.d(TAG, &quot;query user:&quot; + user.toString());        }        userCursor.close();    }}</code></pre><p>日志结果如下：</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/7.ContentProvider进程间通信.png" alt="7.ContentProvider进程间通信"></p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.5 使用 ContentProvider</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ContentProvider 是 Andorid 中专门用于不同应用间进行数据共享的方式，底层实现也是 Binder 。&lt;/p&gt;&lt;p&gt;前面在 &lt;a href=&quot;https://www.wshunli.com/posts/2311b8ab.html&quot;&gt;《第一行代码》读书笔记
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（六）使用 AIDL 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/75f6d3a2.html"/>
    <id>https://www.wshunli.com/posts/75f6d3a2.html</id>
    <published>2018-06-08T06:43:53.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<p>AIDL（Android Interface Definition Language ，Android 接口定义语言），定义客户端与服务使用进程间通信 (IPC) 进行相互通信时都认可的编程接口。</p><p>只有允许不同应用的客户端用 IPC 方式访问服务，并且想要在服务中处理多线程时，才有必要使用 AIDL。</p><p>如果不需要执行跨越不同应用的并发 IPC，就应该通过实现一个 Binder 创建接口；或者，如果想执行 IPC，但根本不需要处理多线程，则使用 Messenger 类来实现接口。</p><p>1、创建 AIDL 文件</p><p>首先在 java 同级目录 aidl 文件夹，然后创建 .aidl 文件。</p><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/6.AIDL文件.png" alt="6.AIDL文件"></p><pre><code class="Java">// IBookManager.aidlpackage com.wshunli.ipc.demo;// Declare any non-default types here with import statementsimport com.wshunli.ipc.demo.Book;interface IBookManager {    List&lt;Book&gt; getBookList();    void addBook(in Book book);    /**     * Demonstrates some basic types that you can use as parameters     * and return values in AIDL.     */    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,            double aDouble, String aString);}</code></pre><p>在 <code>.aidl</code> 文件中支持的数据类型包括：</p><ul><li>基本数据类型</li><li>String 和 CharSequence</li><li>List:只支持 ArrayList , 里面的元素都必须被 AIDL 支持</li><li>Map:只支持 HashMap , 里面的元素必须被 AIDL 支持</li><li>实现 Parcelable 接口的对象</li><li>所有 AIDL 接口</li></ul><p>然后创建实现了 Parcelable 的类：</p><pre><code class="Java">public class Book implements Parcelable {    public String name;    public Book(String name) {        this.name = name;    }    @Override    public int describeContents() {        return 0;    }    @Override    public void writeToParcel(Parcel dest, int flags) {        dest.writeString(name);    }    public static Creator&lt;Book&gt; CREATOR = new Creator&lt;Book&gt;() {        @Override        public Book createFromParcel(Parcel source) {            return new Book(source);        }        @Override        public Book[] newArray(int size) {            return new Book[size];        }    };    private Book(Parcel source) {        name = source.readString();    }    @Override    public String toString() {        return &quot;Book{&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &#39;}&#39;;    }}</code></pre><p>创建 Book.aidl 文件：</p><pre><code class="Java">// Book.aidlpackage com.wshunli.ipc.demo;// Declare any non-default types here with import statementsparcelable Book;</code></pre><p>这时候重新编译程序，工程就会自动生成 <code>BookManager.aidl</code> 接口对应的文件。</p><p>app\build\generated\source\aidl\debug\com\wshunli\ipc\demoIBookManager.java</p><p>2、创建服务端</p><p>服务端使用 IBookManager.Stub() 方法创建 Binder 实例并在 onBind() 方法中返回。</p><pre><code class="Java">public class BookManagerService extends Service {    private static final String TAG = &quot;BookManagerService&quot;;    private CopyOnWriteArrayList&lt;Book&gt; mBookList = new CopyOnWriteArrayList&lt;&gt;();    private Binder mBinder = new IBookManager.Stub(){        @Override        public List&lt;Book&gt; getBookList() throws RemoteException {            return mBookList;        }        @Override        public void addBook(Book book) throws RemoteException {            mBookList.add(book);        }        @Override        public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, String aString) throws RemoteException {        }    };    public BookManagerService() {    }    @Override    public void onCreate() {        super.onCreate();        mBookList.add(new Book(&quot;android&quot;));        mBookList.add(new Book(&quot;ios&quot;));    }    @Override    public IBinder onBind(Intent intent) {        return mBinder;    }}</code></pre><p>其中 onCreate() 方法中填充了数据。</p><p>当然在 AndroidManife 文件中要配置 Service</p><pre><code class="XML">&lt;service    android:name=&quot;com.wshunli.ipc.demo.BookManagerService&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p>3、客户端</p><p>客户端还是使用 bindService() 方法绑定服务。</p><pre><code class="Java">public class BookManagerActivity extends AppCompatActivity {    private static final String TAG = &quot;BookManagerActivity&quot;;    private ServiceConnection connection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName name, IBinder service) {            IBookManager bookManager = IBookManager.Stub.asInterface(service);            try {                List&lt;Book&gt; bookList = bookManager.getBookList();                Log.d(TAG, &quot;onServiceConnected: &quot; + bookList.toString());            } catch (RemoteException e) {                e.printStackTrace();            }        }        @Override        public void onServiceDisconnected(ComponentName name) {        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_book_manager);        Intent intent = new Intent(BookManagerActivity.this, BookManagerService.class);        bindService(intent, connection, BIND_AUTO_CREATE);    }    @Override    protected void onDestroy() {        unbindService(connection);        super.onDestroy();    }}</code></pre><p>其中 IBookManager 对象来调用具体服务器方法，获取数据。</p><p>AIDL 的功能远不止这些，后面再深入研究。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.4 使用 AIDL<br>2、Android 接口定义语言 (AIDL) | Android Developers<br><a href="https://developer.android.com/guide/components/aidl" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/aidl</a><br>3、Android IPC机制（三）在Android Studio中使用AIDL实现跨进程方法调用 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/3-aidl.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/3-aidl.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AIDL（Android Interface Definition Language ，Android 接口定义语言），定义客户端与服务使用进程间通信 (IPC) 进行相互通信时都认可的编程接口。&lt;/p&gt;&lt;p&gt;只有允许不同应用的客户端用 IPC 方式访问服务，并且想要在服务
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（五）使用 Messenger 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/9da3d2db.html"/>
    <id>https://www.wshunli.com/posts/9da3d2db.html</id>
    <published>2018-06-07T11:05:00.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Messenger 可以在不同进程之间传递 Message 对象，是一种轻量级的 IPC 方案。</p><p>首先看 Messenger 的构造方法：</p><pre><code class="Java">public Messenger(Handler target) {    mTarget = target.getIMessenger();}public Messenger(IBinder target) {    mTarget = IMessenger.Stub.asInterface(target);}</code></pre><p>实质上还是底层还是基于 AIDL 的。</p><p>对于 Message 对象可以存储传递的数据：</p><pre><code class="Java">public int what; // 消息标识public int arg1; // 整型数据public int arg2; // 整型数据public Object obj;public Messenger replyTo;/*package*/ Bundle data;public void setData(Bundle data) {    this.data = data;}</code></pre><p>其中 obj 只能传输系统中实现了 Parcelable 接口的对象。</p><p>对于 <strong>客户端</strong> 发送消息主要使用 bindService 方法绑定另一个进程的 Service 。</p><pre><code class="Java">public class MessengerActivity extends AppCompatActivity {    private static final String TAG = &quot;MessengerActivity&quot;;    private Messenger messenger;    private ServiceConnection connection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName name, IBinder service) {            // 请求服务端            messenger = new Messenger(service);            Message message = Message.obtain(null, MConstants.MSG_FROM_CLIENT);            Bundle bundle = new Bundle();            Log.d(TAG, &quot;这里是客户端，向服务端发送消息&quot;);            bundle.putString(&quot;msg&quot;, &quot;客户端发送内容&quot;);            message.setData(bundle);            // 注意设置 replyTo            message.replyTo = getReplyMessenger;            try {                messenger.send(message);            } catch (RemoteException e) {                e.printStackTrace();            }        }        @Override        public void onServiceDisconnected(ComponentName name) {        }    };    private static class MessageHandler extends Handler {        @Override        public void handleMessage(Message msg) {            Log.d(TAG, &quot;这里是客户端，接收服务端响应&quot;);            switch (msg.what) {                case MConstants.MSG_FROM_SERVICE:                    // 接收服务端响应                    Log.d(TAG, &quot;客户端接收到: &quot; + msg.getData().get(&quot;reply&quot;));                    break;                default:                    super.handleMessage(msg);            }        }    }    private Messenger getReplyMessenger = new Messenger(new MessageHandler());    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_messenger);        Intent intent = new Intent(this, MessengerService.class);        bindService(intent, connection, Context.BIND_AUTO_CREATE);    }    @Override    protected void onDestroy() {        unbindService(connection);        super.onDestroy();    }}</code></pre><p>如果需要接收服务端返回的消息，注意在发送 Message 字段 replyTo 关联处理消息的 Messenger 对象。</p><p>对于 <strong>服务端</strong> ，首先 Messenger 对象关联接收消息的 Handler ，然后在服务端 onBind 中调用 getBinder() 方法得到 Binder 对象。</p><p>其中 MessageHandler 继承 Handler 并重写 handleMessage 方法。</p><pre><code class="Java">public class MessengerService extends Service {    private static final String TAG = &quot;MessengerService&quot;;    private static class MessageHandler extends Handler {        @Override        public void handleMessage(Message msg) {            Log.d(TAG, &quot;这里是服务端，响应客户端消息&quot;);            switch (msg.what) {                case MConstants.MSG_FROM_CLIENT:                    Log.d(TAG, &quot;服务端接收到: &quot; + msg.getData().get(&quot;msg&quot;));                    // 响应客户端请求                    Messenger replyTo = msg.replyTo;                    Message replyMessage = Message.obtain(null, MConstants.MSG_FROM_SERVICE);                    Bundle bundle = new Bundle();                    bundle.putString(&quot;reply&quot;,&quot;服务端响应内容&quot;);                    replyMessage.setData(bundle);                    try {                        replyTo.send(replyMessage);                    } catch (RemoteException e) {                        e.printStackTrace();                    }                    break;                default:                    super.handleMessage(msg);            }        }    }    private final Messenger messenger = new Messenger(new MessageHandler());    @Nullable    @Override    public IBinder onBind(Intent intent) {        return messenger.getBinder();    }}</code></pre><p>如果需要响应客户端请求，使用 replyTo 字段获取 Messenger 实例再发送消息即可。</p><p>最后注意在 Manifest 中注册 Service 组件。</p><pre><code class="XML">&lt;service    android:name=&quot;com.wshunli.ipc.demo.message.MessengerService&quot;    android:process=&quot;:remote&quot; /&gt;</code></pre><p><img src="https://img.wshunli.com/Android/Android开发艺术探索/详解Android-IPC机制/5.Messenger进程间通信.png" alt="Messenger进程间通信"></p><p>Messenger 进程间通信在服务端是以串行的方式逐个处理的，所以有大量并发请求时使用 Messenger 不太合适。</p><blockquote><p>参考资料<br>1、《Android开发艺术探索》 – 2.4.3 使用 Messenger<br>2、Android IPC机制（二）用Messenger进行进程间通信 | 刘望舒的博客<br><a href="http://liuwangshu.cn/application/ipc/2-messenger.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/application/ipc/2-messenger.html</a><br>3、Android 基于Message的进程间通信 Messenger完全解析 - CSDN博客<br><a href="https://blog.csdn.net/lmj623565791/article/details/47017485" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lmj623565791/article/details/47017485</a><br>4、Handler之Message详解 - 简书<br><a href="https://www.jianshu.com/p/a6c01dd2efdc" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/a6c01dd2efdc</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过 Messenger 可以在不同进程之间传递 Message 对象，是一种轻量级的 IPC 方案。&lt;/p&gt;&lt;p&gt;首先看 Messenger 的构造方法：&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;Java&quot;&gt;public Messenger(Handler target
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（四）使用文件共享实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/60bbb7ec.html"/>
    <id>https://www.wshunli.com/posts/60bbb7ec.html</id>
    <published>2018-06-07T09:09:28.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<p>使用文件共享也是不错的进程间通信方式，两个进程通过读/写同一个文件来交换数据。</p><p>在 Windows 系统，文件会被加排斥锁导致其他线程无法对其访问，而 Android 是基于 Linux 系统，所以并发读写文件没有限制。</p><pre><code class="Java">// 序列化private void persistToFile() {    new Thread(new Runnable() {        @Override        public void run() {            User user = new User(1, &quot;wshunli&quot;, true);            File dir = new File(getApplicationContext().getCacheDir().getPath() + &quot;/user/&quot;);            if (!dir.exists()) {                dir.mkdirs();            }            File cachedFile = new File(dir.getPath() + &quot;/usercache&quot;);            ObjectOutputStream objectOutputStream = null;            try {                objectOutputStream = new ObjectOutputStream(                        new FileOutputStream(cachedFile));                objectOutputStream.writeObject(user);                Log.d(TAG, &quot;persist user:&quot; + user);            } catch (IOException e) {                e.printStackTrace();            } finally {                try {                    if (objectOutputStream != null) {                        objectOutputStream.close();                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }).start();}// 反序列化private void recoverFromFile() {    new Thread(new Runnable() {        @Override        public void run() {            User user = null;            File dir = new File(getApplicationContext().getCacheDir().getPath() + &quot;/user/&quot;);            File cachedFile = new File(dir.getPath() + &quot;/usercache&quot;);            if (cachedFile.exists()) {                ObjectInputStream objectInputStream = null;                try {                    objectInputStream = new ObjectInputStream(                            new FileInputStream(cachedFile));                    user = (User) objectInputStream.readObject();                    Log.d(TAG, &quot;recover user:&quot; + user);                } catch (IOException e) {                    e.printStackTrace();                } catch (ClassNotFoundException e) {                    e.printStackTrace();                } finally {                    try {                        if (objectInputStream != null) {                            objectInputStream.close();                        }                    } catch (IOException e) {                        e.printStackTrace();                    }                }            }        }    }).start();}</code></pre><p>这样对共享文件格式没有要求，但是在多线程情况下可能导致读出的内容不是最新的。<br>所以文件共享适合对数据同步要求不高的进程间进行通信，并妥善地处理好并发读/写问题。</p><p>而对于 SharedPreferences 有一定的读/写缓存策略，在内存中会有一份缓存，因此在多进程情况下，系统对其的读/写就变得不可靠，所以在进程间通信时，一般不用 SharedPreferences 。</p><blockquote><p>参考资料<br>《Android开发艺术探索》 – 2.4.2 使用文件共享</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用文件共享也是不错的进程间通信方式，两个进程通过读/写同一个文件来交换数据。&lt;/p&gt;&lt;p&gt;在 Windows 系统，文件会被加排斥锁导致其他线程无法对其访问，而 Android 是基于 Linux 系统，所以并发读写文件没有限制。&lt;/p&gt;&lt;pre&gt;&lt;code class=
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>详解 Android IPC 机制（三）使用 Bundle 实现进程间通信</title>
    <link href="https://www.wshunli.com/posts/f0f2eaec.html"/>
    <id>https://www.wshunli.com/posts/f0f2eaec.html</id>
    <published>2018-06-07T07:40:59.000Z</published>
    <updated>2018-08-26T15:39:14.663Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 四大组件中 Activity、Service、Receiver 都支持在 Intent 中附加传递 Bundle 数据。</p><p>Bundle 是以键值对的形式存储数据，支持基本数据类型、数组、实现 Serializable 或 Parcelable 接口的对象以及一些 Android 支持的特殊对象。</p><pre><code class="Java">// 发送数据Intent intent = new Intent(MainActivity.this, SecondActivity.class);Bundle bundle = new Bundle();bundle.putString(&quot;userName&quot;, &quot;wshunli&quot;);intent.putExtras(bundle);startActivity(intent);// 接收数据Bundle bundle = getIntent().getExtras();String userName = null;if (bundle != null) {    userName = bundle.getString(&quot;userName&quot;);}Log.d(TAG, &quot;userName: &quot; + userName);</code></pre><p>使用 Bundle 的 put 与 get 方法族将数据保存至 bundle 对象，调用 Intent 的 putExtras 方法即可。</p><p>Bundle 源码分析，Bundle 继承自 BaseBundle 并实现了 Cloneable 和 Parcelable 接口。</p><p>以 Boolean 类型数据存取为例：</p><pre><code class="Java">ArrayMap&lt;String, Object&gt; mMap = null;public void putBoolean(@Nullable String key, boolean value) {    unparcel();    mMap.put(key, value);}public boolean getBoolean(String key, boolean defaultValue) {    unparcel();    Object o = mMap.get(key);    if (o == null) {        return defaultValue;    }    try {        return (Boolean) o;    } catch (ClassCastException e) {        typeWarning(key, o, &quot;Boolean&quot;, defaultValue, e);        return defaultValue;    }}</code></pre><p>根据源码可知数据存取都是在 ArrayMap 对象中。</p><p>其中 unparcel() 方法源码如下：</p><pre><code class="Java">/** If mParcelledData is non-null, then mMap will be null and the* data are stored as a Parcel containing a Bundle.  When the data* are unparcelled, mParcelledData willbe set to null.*/Parcel mParcelledData = null;/* package */ void unparcel() {    synchronized (this) {        final Parcel source = mParcelledData;        if (source != null) {            initializeFromParcelLocked(source, /*recycleParcel=*/ true);        } else {            if (DEBUG) {                Log.d(TAG, &quot;unparcel &quot;                        + Integer.toHexString(System.identityHashCode(this))                        + &quot;: no parcelled data&quot;);            }        }    }}private void initializeFromParcelLocked(@NonNull Parcel parcelledData, boolean recycleParcel) {    if (LOG_DEFUSABLE &amp;&amp; sShouldDefuse &amp;&amp; (mFlags &amp; FLAG_DEFUSABLE) == 0) {        Slog.wtf(TAG, &quot;Attempting to unparcel a Bundle while in transit; this may &quot;                + &quot;clobber all data inside!&quot;, new Throwable());    }    if (isEmptyParcel(parcelledData)) {        if (DEBUG) {            Log.d(TAG, &quot;unparcel &quot;                    + Integer.toHexString(System.identityHashCode(this)) + &quot;: empty&quot;);        }        if (mMap == null) {            mMap = new ArrayMap&lt;&gt;(1);        } else {            mMap.erase();        }        mParcelledData = null;        return;    }    final int count = parcelledData.readInt();    if (DEBUG) {        Log.d(TAG, &quot;unparcel &quot; + Integer.toHexString(System.identityHashCode(this))                + &quot;: reading &quot; + count + &quot; maps&quot;);    }    if (count &lt; 0) {        return;    }    ArrayMap&lt;String, Object&gt; map = mMap;    if (map == null) {        map = new ArrayMap&lt;&gt;(count);    } else {        map.erase();        map.ensureCapacity(count);    }    try {        parcelledData.readArrayMapInternal(map, count, mClassLoader);    } catch (BadParcelableException e) {        if (sShouldDefuse) {            Log.w(TAG, &quot;Failed to parse Bundle, but defusing quietly&quot;, e);            map.erase();        } else {            throw e;        }    } finally {        mMap = map;        if (recycleParcel) {            recycleParcel(parcelledData);        }        mParcelledData = null;    }    if (DEBUG) {        Log.d(TAG, &quot;unparcel &quot; + Integer.toHexString(System.identityHashCode(this))                + &quot; final map: &quot; + mMap);    }}</code></pre><p>只有使用 Bundle 构造函数实例化 Bundle 对象时，才会给 mParcelledData 赋值，其他大部分情况下 mParcelledData 都是 null 。</p><pre><code class="Java">BaseBundle(Parcel parcelledData) {    readFromParcelInner(parcelledData);}void readFromParcelInner(Parcel parcel) {    // Keep implementation in sync with readFromParcel() in    // frameworks/native/libs/binder/PersistableBundle.cpp.    int length = parcel.readInt();    readFromParcelInner(parcel, length);}private void readFromParcelInner(Parcel parcel, int length) {    if (length &lt; 0) {        throw new RuntimeException(&quot;Bad length in parcel: &quot; + length);    } else if (length == 0) {        // Empty Bundle or end of data.        mParcelledData = NoImagePreloadHolder.EMPTY_PARCEL;        return;    }    final int magic = parcel.readInt();    if (magic != BUNDLE_MAGIC) {        throw new IllegalStateException(&quot;Bad magic number for Bundle: 0x&quot;                + Integer.toHexString(magic));    }    if (parcel.hasReadWriteHelper()) {        // If the parcel has a read-write helper, then we can&#39;t lazily-unparcel it, so just        // unparcel right away.        synchronized (this) {            initializeFromParcelLocked(parcel, /*recycleParcel=*/ false);        }        return;    }    // Advance within this Parcel    int offset = parcel.dataPosition();    parcel.setDataPosition(MathUtils.addOrThrow(offset, length));    Parcel p = Parcel.obtain();    p.setDataPosition(0);    p.appendFrom(parcel, offset, length);    p.adoptClassCookies(parcel);    if (DEBUG) Log.d(TAG, &quot;Retrieving &quot;  + Integer.toHexString(System.identityHashCode(this))            + &quot;: &quot; + length + &quot; bundle bytes starting at &quot; + offset);    p.setDataPosition(0);    mParcelledData = p;}</code></pre><p>从上述代码片段可以知道 mParcelledData 的取值有3种情况：</p><pre><code class="Java">mParcelledData = nullmParcelledData = NoImagePreloadHolder.EMPTY_PARCELmParcelledData = Parcel.obtain()</code></pre><p>在 unparcel() 方法中分别对这三种情况进行了处理，如果为 null 不进行任何操作返回；如果为 EMPTY_PARCEL 则使用 <code>mMap = new ArrayMap&lt;&gt;(1)</code> 创建长度为 1 的 ArrayMap 对象；如果为 Parcel.obtain() 则实例化 ArrayMap 对象并存储数据。</p><blockquote><p>参考资料<br>1、Android Bundle详解 - CSDN博客<br><a href="https://blog.csdn.net/cswhale/article/details/39053411" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cswhale/article/details/39053411</a><br>2、Android Bundle总结 - CSDN博客<br><a href="https://blog.csdn.net/ylyg050518/article/details/72638852" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/ylyg050518/article/details/72638852</a><br>3、Android细节问题 —— 有了Intent，为什么还要有Bundle？ - 简书<br><a href="https://www.jianshu.com/p/e9db0797293b" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/e9db0797293b</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Android 四大组件中 Activity、Service、Receiver 都支持在 Intent 中附加传递 Bundle 数据。&lt;/p&gt;&lt;p&gt;Bundle 是以键值对的形式存储数据，支持基本数据类型、数组、实现 Serializable 或 Parcelable
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IPC机制" scheme="https://www.wshunli.com/tags/IPC%E6%9C%BA%E5%88%B6/"/>
    
      <category term="《Android开发艺术探索》" scheme="https://www.wshunli.com/tags/%E3%80%8AAndroid%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2%E3%80%8B/"/>
    
  </entry>
  
</feed>
