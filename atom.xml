<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-06-01T15:00:27.423Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安利两款数据备份与无损分区的软件</title>
    <link href="https://www.wshunli.com/posts/89531c6c.html"/>
    <id>https://www.wshunli.com/posts/89531c6c.html</id>
    <published>2018-06-01T13:24:45.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<p><strong>阅读本文前，请确认您熟悉数据备份及无损分区，确认理解执行每项操作的含义及后果，数据无价，谨慎操作</strong>。</p><p>机房电脑硬盘出问题了，然后想换个新硬盘，没想到台式机的硬盘那么便宜，1T 机械硬盘还不到三百。</p><p>安利的两款软件叫 <strong>傲梅分区助手</strong> 和 <strong>傲梅轻松备份</strong> ，都是免费的。</p><p>我的电脑有两块硬盘，256G 固态硬盘装系统和软件，多余的空间还能存一些示例数据，以前就坏过一次 SSD ，数据还没发恢复，从那以后就有系统备份的习惯，再者重要的代码都上传到 GitHub 私有仓库了，所以机房电脑 SSD 这部分倒不是很担心。</p><p>另一块是机械硬盘也是这次出问题的硬盘，一直以来这个硬盘噪声都挺大的，但是最近磁盘活动时间总是 100% ，只是作为 QQ 和网易云音乐的缓存，系统运行状态下读写还是比较小的，就这也经常引起系统卡顿崩溃，检测下硬盘已经有不少坏道了，这部分没有备份所以比较害怕。</p><p>以上是背景，下面介绍 <strong>整个数据备份及恢复的过程</strong> 。</p><p>硬盘出问题了，最先想到还是备份数据。</p><p>最开始直接使用拷贝的方式，但是在拷贝的过程中硬盘系统蓝屏了，开机后机械硬盘丢失，当时有点伤心了。还好重启电脑后硬盘又出现，至今也不知道具体原因。</p><p>然后就是在对新硬盘进行分区的过程中，系统又蓝屏，然后进不去系统了。</p><p>中间也试了不少方法，修复分区表啊，尝试修复了都不行，有点崩溃。</p><p><strong>数据备份</strong>：</p><p>系统修复无望后，使用 PE 系统，安装 轻松备份 ，还是先备份硬盘，包括 SSD 和机械硬盘。</p><p>整个过程很顺畅，SSD 备份在 150M+ ，机械硬盘在 30M+ ，机械硬盘明显不行了。</p><p><strong>数据恢复</strong>：</p><p>首先把备份的系统恢复，然后进入系统逐个还原分区。</p><p><img src="https://img.wshunli.com/瞎推荐/傲梅科技/数据备份恢复.png" alt="数据备份恢复"></p><p>想到以前对机房电脑和笔记本 SSD 硬盘都有备份，就想干脆笔记本的算了。</p><p><strong>分区调整</strong>：</p><p>分区还原之后大小不是很理想，可以使用分区助手调整。</p><p><img src="https://img.wshunli.com/瞎推荐/傲梅科技/分区操作.png" alt="分区操作"></p><p><strong>满血复活</strong>：</p><p>这是恢复完成后，系统界面（模糊处理），莫名感动，熟悉的界面失而复得很神奇：</p><p><img src="https://img.wshunli.com/瞎推荐/傲梅科技/ok.png" alt="ok"></p><p><strong>分区助手</strong> 和 <strong>轻松备份</strong> 是 <a href="https://www.disktool.cn/about-us.html" rel="external nofollow noopener noreferrer" target="_blank">成都傲梅科技有限公司</a> 两款免费软件，很优秀。</p><p><strong>傲梅分区助手</strong> 是一个简单易用且免费的无损分区软件，作为无损分区的领导者，在它的帮助下，您可以无损数据地执行调整分区大小，移动分区位置，复制分区，快速分区，复制磁盘，合并分区，切割分区、恢复分区、迁移操作系统等操作。</p><p><img src="https://img.wshunli.com/瞎推荐/傲梅科技/分区助手.png" alt="分区助手"></p><p><strong>轻松备份专业版（<a href="https://www.disktool.cn/backup/backup-software.html）" rel="external nofollow noopener noreferrer" target="_blank">https://www.disktool.cn/backup/backup-software.html）</a></strong> 是一款免费的、简单易用的备份还原软件，不仅能轻松地 Ghost 系统实现系统备份，还能备份文件、文件夹、硬盘、分区，也能通过定时备份功能自动备份您想备份的数据和实时同步功能同步文件、文件夹到其他位置。</p><p><img src="https://img.wshunli.com/瞎推荐/傲梅科技/轻松备份.png" alt="轻松备份"></p><p>成都傲梅科技有限公司是一家致力于备份还原与磁盘分区软件产品开发的软件公司，从 2009 年底发布第一款产品以来就一直在这块领土上耕耘着，在基于文件系统与磁盘分区管理的产品开发方面积累了丰富的经验，同时也在备份还原上拥有核心的技术实力。</p><p><strong>数据无价，谨慎操作。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;阅读本文前，请确认您熟悉数据备份及无损分区，确认理解执行每项操作的含义及后果，数据无价，谨慎操作&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;机房电脑硬盘出问题了，然后想换个新硬盘，没想到台式机的硬盘那么便宜，1T 机械硬盘还不到三百。&lt;/p&gt;&lt;p&gt;安利的两款软件叫 &lt;
      
    
    </summary>
    
      <category term="瞎推荐" scheme="https://www.wshunli.com/categories/%E7%9E%8E%E6%8E%A8%E8%8D%90/"/>
    
    
      <category term="数据备份" scheme="https://www.wshunli.com/tags/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/"/>
    
      <category term="无损分区" scheme="https://www.wshunli.com/tags/%E6%97%A0%E6%8D%9F%E5%88%86%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin for Android（一）Hello Kotlin !</title>
    <link href="https://www.wshunli.com/posts/591ca4ea.html"/>
    <id>https://www.wshunli.com/posts/591ca4ea.html</id>
    <published>2018-05-29T13:04:28.000Z</published>
    <updated>2018-06-01T15:00:27.419Z</updated>
    
    <content type="html"><![CDATA[<p>Kotlin 是用于现代多平台应用的静态编程语言，与 Java™ 和 Android™ 100% 可互操作。</p><p>2017 年 5 月，Google 年度 I/O 大会上，宣布把 Kotlin 作为 Android 开发的首选语言。</p><p>今年 2018 Google I/O 大会上，示例 App 已经全部采用 Kotlin 编写了。</p><p>前面也一直想涉猎 Kotlin 方面的东西，但是一直没有时间，主要还是懒。。</p><p><strong>维基百科关于 Kotlin 的介绍</strong>：</p><p>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，它也可以被编译成为 JavaScript 源代码。它主要是由俄罗斯圣彼得堡的 JetBrains 开发团队所发展出来的编程语言，其名称来自于圣彼得堡附近的科特林岛。</p><p>2011年7月，JetBrains 推出 Kotlin 项目，这是一个面向 JVM 的新语言，它已被开发一年之久。</p><p>JetBrains 负责人 Dmitry Jemerov 说，大多数语言没有他们正在寻找的特性，Scala 除外。但是，他指出了 Scala 的编译时间慢这一明显缺陷。<br>Kotlin 的既定目标之一是像 Java 一样快速编译。</p><p>2012年2月，JetBrains 以 Apache 2 许可证开源此项目。Jetbrains希望这个新语言能够推动IntelliJ IDEA的销售。</p><p>Kotlin v1.0 于 2016年2月15日 发布。这被认为是第一个官方稳定版本，并且 JetBrains 已准备从该版本开始的长期向后兼容性。</p><p><strong>官方及其中文网站</strong>：</p><p>Kotlin Programming Language:<br><a href="http://kotlinlang.org/" rel="external nofollow noopener noreferrer" target="_blank">http://kotlinlang.org/</a></p><p>Kotlin 语言中文站:<br><a href="https://www.kotlincn.net/" rel="external nofollow noopener noreferrer" target="_blank">https://www.kotlincn.net/</a></p><p>1、环境配置</p><p>Kotlin 是一种运行在 JVM 上的编程语言，所以和 Java 环境配置是一样的，这里就不多介绍了。</p><p>2、IntelliJ IDEA</p><p>Kotlin 是 JetBrains 推出的，我们就用大名鼎鼎的 IntelliJ IDEA 就好了。</p><p>3、Hello Kotlin !</p><p>我们在IDE 中新建项目，并写一个 HelloWorld 类：</p><p><img src="https://img.wshunli.com/Kotlin/kotlin-android/1.Hello.png" alt="Hello Kotlin"></p><p>和 Java 还是非常像的，学过 Java 的应该一下就能看懂。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kotlin 是用于现代多平台应用的静态编程语言，与 Java™ 和 Android™ 100% 可互操作。&lt;/p&gt;&lt;p&gt;2017 年 5 月，Google 年度 I/O 大会上，宣布把 Kotlin 作为 Android 开发的首选语言。&lt;/p&gt;&lt;p&gt;今年 2018 Go
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="https://www.wshunli.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季快手实习生面试</title>
    <link href="https://www.wshunli.com/posts/cfc1cac2.html"/>
    <id>https://www.wshunli.com/posts/cfc1cac2.html</id>
    <published>2018-05-28T05:06:00.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（kuaishou）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（kuaishou）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春快手暑期实习生面试（客户端工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Logger使用及源码解析</title>
    <link href="https://www.wshunli.com/posts/ca2fa1f1.html"/>
    <id>https://www.wshunli.com/posts/ca2fa1f1.html</id>
    <published>2018-05-22T14:46:58.000Z</published>
    <updated>2018-06-01T15:00:27.419Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 开发过程中打印日志必不可少，Logger 就是一款优秀的 Android 开源日志库。</p><p>Logger 使用简单，输出日志美观高效，支持 JSON 、XML 格式输出，支持打印 Arrays 、Collections 等对象。</p><p>Logger 地址 ：<a href="https://github.com/orhanobut/logger" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/orhanobut/logger</a></p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>在项目中添加依赖：</p><pre><code class="Gradle">implementation &#39;com.orhanobut:logger:2.2.0&#39;</code></pre><p>快速开始：</p><pre><code class="Java">Logger.addLogAdapter(new AndroidLogAdapter());Logger.d(&quot;hello&quot;);</code></pre><p>这样就可以打印日志了。</p><p><img src="https://img.wshunli.com/Android/Logger/hello2.png" alt="hello"></p><p>当然不止打印这一种日志，和自带的函数类似：</p><pre><code class="Java">Logger.d(&quot;debug&quot;);Logger.e(&quot;error&quot;);Logger.w(&quot;warning&quot;);Logger.v(&quot;verbose&quot;);Logger.i(&quot;information&quot;);Logger.wtf(&quot;What a Terrible Failure&quot;);</code></pre><p>也支持格式化输出：</p><pre><code class="Java">Logger.d(&quot;hello %s&quot;, &quot;world&quot;);</code></pre><p>支持数字、集合对象的输出，注意只支持 Logger.d() 方法：</p><pre><code class="Java">Logger.d(MAP);Logger.d(SET);Logger.d(LIST);Logger.d(ARRAY);</code></pre><p>支持 JSON 和 XML 的输出：</p><pre><code class="Java">Logger.json(JSON_CONTENT);Logger.xml(XML_CONTENT);</code></pre><p>自定义 TAG ，仅本次日志打印有效：</p><pre><code class="Java">Logger.t(&quot;MainActivity&quot;).d(&quot;hello&quot;);</code></pre><p>支持把日志保存为文件：</p><pre><code class="Java">Logger.addLogAdapter(new DiskLogAdapter());Logger.d(&quot;hello&quot;);</code></pre><p>只需更改 LogAdapter 即可，其他使用相同。</p><pre><code class="Java">Logger.clearLogAdapters();</code></pre><p>清除 LogAdapter 方法。</p><h1 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h1><p>利用 PrettyFormatStrategy.newBuilder 还有更高级的设置，如：</p><pre><code class="Java">FormatStrategy formatStrategy = PrettyFormatStrategy.newBuilder()  .showThreadInfo(false)  // (Optional) Whether to show thread info or not. Default true  .methodCount(0)         // (Optional) How many method line to show. Default 2  .methodOffset(7)        // (Optional) Hides internal method calls up to offset. Default 5  .logStrategy(customLog) // (Optional) Changes the log strategy to print out. Default LogCat  .tag(&quot;My custom tag&quot;)   // (Optional) Global tag for every log. Default PRETTY_LOGGER  .build();Logger.addLogAdapter(new AndroidLogAdapter(formatStrategy));</code></pre><p>再者实现对打印日志的控制：</p><pre><code class="Java">Logger.addLogAdapter(new AndroidLogAdapter() {  @Override public boolean isLoggable(int priority, String tag) {    return BuildConfig.DEBUG;  }});</code></pre><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>先看官方对工作原理的介绍：</p><p><img src="https://img.wshunli.com/Android/Logger/how_it_works.png" alt="how_it_works"></p><p>Logger 打印日志整个流程非常明确：</p><p>Logger 负责整个对外的接口，LoggerPrinter 负责对不同日志的整合，LogAdapter 分别对 Logcat 和 Disk 的打印进行适配，FormatStrategy 负责打印输出的配置及美化，LogStrategy 负责最终的打印输出任务。</p><p>1、Logger.java 部分代码：</p><pre><code class="Java">private static Printer printer = new LoggerPrinter();public static Printer t(@Nullable String tag) {    return printer.t(tag);}</code></pre><p>这里只是提供了一系列的静态函数，包括前面对不同等级的日志的输出及 JSON、XML 的输出。</p><p>实际工作还是由 LoggerPrinter 来做。</p><p>还有就是对 LogAdapter 适配器的添加清除：</p><pre><code class="Java">public static void addLogAdapter(@NonNull LogAdapter adapter) {    printer.addAdapter(checkNotNull(adapter));}public static void clearLogAdapters() {    printer.clearLogAdapters();}</code></pre><p>2、LoggerPrinter 部分代码：</p><p>LoggerPrinter 实现 Printer 接口，负责不同日志的整合。</p><pre><code class="Java">@Override public void d(@NonNull String message, @Nullable Object... args) {    log(DEBUG, null, message, args);}@Override public void d(@Nullable Object object) {    log(DEBUG, null, Utils.toString(object));}@Override public void e(@Nullable Throwable throwable, @NonNull String message, @Nullable Object... args) {    log(ERROR, throwable, message, args);}@Override public void w(@NonNull String message, @Nullable Object... args) {    log(WARN, null, message, args);}  </code></pre><p>我们可以看到这些方法都是对 log() 方法的调用。</p><p>注意这里 d() 方法可以输出任意对象，还是对象转化为字符串输出。</p><p>我们接着看 log() 方法：</p><pre><code class="Java">private final ThreadLocal&lt;String&gt; localTag = new ThreadLocal&lt;&gt;();@Override public Printer t(String tag) {    if (tag != null) {        localTag.set(tag);    }    return this;}@Override public synchronized void log(int priority,                                         @Nullable String tag,                                         @Nullable String message,                                         @Nullable Throwable throwable) {    if (throwable != null &amp;&amp; message != null) {        message += &quot; : &quot; + Utils.getStackTraceString(throwable);    }    if (throwable != null &amp;&amp; message == null) {        message = Utils.getStackTraceString(throwable);    }    if (Utils.isEmpty(message)) {        message = &quot;Empty/NULL log message&quot;;    }    for (LogAdapter adapter : logAdapters) {        if (adapter.isLoggable(priority, tag)) {        adapter.log(priority, tag, message);        }    }}/*** This method is synchronized in order to avoid messy of logs&#39; order.*/private synchronized void log(int priority,                            @Nullable Throwable throwable,                            @NonNull String msg,                            @Nullable Object... args) {    checkNotNull(msg);    String tag = getTag();    String message = createMessage(msg, args);    log(priority, tag, message, throwable);}/*** @return the appropriate tag based on local or global*/@Nullable private String getTag() {String tag = localTag.get();    if (tag != null) {        localTag.remove();        return tag;    }    return null;}@NonNull private String createMessage(@NonNull String message, @Nullable Object... args) {    return args == null || args.length == 0 ? message : String.format(message, args);}</code></pre><p>我们可以看到这里是交由 LogAdapter 来实现打印：</p><pre><code class="Java">adapter.log(priority, tag, message);</code></pre><p>在调用之前添加了 tag ，对于一次性的 tag 是由 ThreadLocal 来存储的，避免线程的并发问题，并且在取出后将其置空。</p><p>3、LogAdapter 有两个实现</p><p>AndroidLogAdapter 与 DiskLogAdapter 分别对应 Logcat 输出与 Disk 保存。</p><p>4.1、AndroidLogAdapter 部分代码：</p><pre><code class="Java">public class AndroidLogAdapter implements LogAdapter {  @NonNull private final FormatStrategy formatStrategy;  public AndroidLogAdapter() {    this.formatStrategy = PrettyFormatStrategy.newBuilder().build();  }  public AndroidLogAdapter(@NonNull FormatStrategy formatStrategy) {    this.formatStrategy = checkNotNull(formatStrategy);  }  @Override public boolean isLoggable(int priority, @Nullable String tag) {    return true;  }  @Override public void log(int priority, @Nullable String tag, @NonNull String message) {    formatStrategy.log(priority, tag, message);  }}</code></pre><p>很明显只是对是否打印日志进行了控制，其他任务由 PrettyFormatStrategy 来做。</p><p>4.2、PrettyFormatStrategy 部分代码：</p><p>首先 PrettyFormatStrategy 使用 Builder 设计模式，从前面 AndroidLogAdapter 的构造函数中也可看出来。</p><pre><code class="Java">  public static class Builder {    int methodCount = 2;    int methodOffset = 0;    boolean showThreadInfo = true;    @Nullable LogStrategy logStrategy;    @Nullable String tag = &quot;PRETTY_LOGGER&quot;;    private Builder() {    }    @NonNull public Builder methodCount(int val) {      methodCount = val;      return this;    }    @NonNull public Builder methodOffset(int val) {      methodOffset = val;      return this;    }    @NonNull public Builder showThreadInfo(boolean val) {      showThreadInfo = val;      return this;    }    @NonNull public Builder logStrategy(@Nullable LogStrategy val) {      logStrategy = val;      return this;    }    @NonNull public Builder tag(@Nullable String tag) {      this.tag = tag;      return this;    }    @NonNull public PrettyFormatStrategy build() {      if (logStrategy == null) {        logStrategy = new LogcatLogStrategy();      }      return new PrettyFormatStrategy(this);    }  }</code></pre><p>这样就可以对打印的日志进行配置了，也就是前面进阶使用里面的内容。</p><p>下面来看具体打印的实现：</p><pre><code class="Java">  @Override public void log(int priority, @Nullable String onceOnlyTag, @NonNull String message) {    checkNotNull(message);    String tag = formatTag(onceOnlyTag);    logTopBorder(priority, tag);    logHeaderContent(priority, tag, methodCount);    //get bytes of message with system&#39;s default charset (which is UTF-8 for Android)    byte[] bytes = message.getBytes();    int length = bytes.length;    if (length &lt;= CHUNK_SIZE) {      if (methodCount &gt; 0) {        logDivider(priority, tag);      }      logContent(priority, tag, message);      logBottomBorder(priority, tag);      return;    }    if (methodCount &gt; 0) {      logDivider(priority, tag);    }    for (int i = 0; i &lt; length; i += CHUNK_SIZE) {      int count = Math.min(length - i, CHUNK_SIZE);      //create a new String with system&#39;s default charset (which is UTF-8 for Android)      logContent(priority, tag, new String(bytes, i, count));    }    logBottomBorder(priority, tag);  }  private void logTopBorder(int logType, @Nullable String tag) {    logChunk(logType, tag, TOP_BORDER);  }  @SuppressWarnings(&quot;StringBufferReplaceableByString&quot;)  private void logHeaderContent(int logType, @Nullable String tag, int methodCount) {    StackTraceElement[] trace = Thread.currentThread().getStackTrace();    if (showThreadInfo) {      logChunk(logType, tag, HORIZONTAL_LINE + &quot; Thread: &quot; + Thread.currentThread().getName());      logDivider(logType, tag);    }    String level = &quot;&quot;;    int stackOffset = getStackOffset(trace) + methodOffset;    //corresponding method count with the current stack may exceeds the stack trace. Trims the count    if (methodCount + stackOffset &gt; trace.length) {      methodCount = trace.length - stackOffset - 1;    }    for (int i = methodCount; i &gt; 0; i--) {      int stackIndex = i + stackOffset;      if (stackIndex &gt;= trace.length) {        continue;      }      StringBuilder builder = new StringBuilder();      builder.append(HORIZONTAL_LINE)          .append(&#39; &#39;)          .append(level)          .append(getSimpleClassName(trace[stackIndex].getClassName()))          .append(&quot;.&quot;)          .append(trace[stackIndex].getMethodName())          .append(&quot; &quot;)          .append(&quot; (&quot;)          .append(trace[stackIndex].getFileName())          .append(&quot;:&quot;)          .append(trace[stackIndex].getLineNumber())          .append(&quot;)&quot;);      level += &quot;   &quot;;      logChunk(logType, tag, builder.toString());    }  }  private void logBottomBorder(int logType, @Nullable String tag) {    logChunk(logType, tag, BOTTOM_BORDER);  }  private void logDivider(int logType, @Nullable String tag) {    logChunk(logType, tag, MIDDLE_BORDER);  }  private void logContent(int logType, @Nullable String tag, @NonNull String chunk) {    checkNotNull(chunk);    String[] lines = chunk.split(System.getProperty(&quot;line.separator&quot;));    for (String line : lines) {      logChunk(logType, tag, HORIZONTAL_LINE + &quot; &quot; + line);    }  }  private void logChunk(int priority, @Nullable String tag, @NonNull String chunk) {    checkNotNull(chunk);    logStrategy.log(priority, tag, chunk);  }</code></pre><p>这里就是对日志美化的核心了，但是最终每一行的输出还是不是在此，是由 LogcatLogStrategy 负责的。</p><p>4.3、LogcatLogStrategy 部分代码：</p><p>LogcatLogStrategy 负责打印每一行日志，当然已经美化过了。</p><pre><code class="Java">public class LogcatLogStrategy implements LogStrategy {  static final String DEFAULT_TAG = &quot;NO_TAG&quot;;  @Override public void log(int priority, @Nullable String tag, @NonNull String message) {    checkNotNull(message);    if (tag == null) {      tag = DEFAULT_TAG;    }    Log.println(priority, tag, message);  }}</code></pre><p>这里调用的是系统的 Log 方法逐行打印日志。</p><p>5.1、DiskLogAdapter 部分代码：</p><p>和 AndroidLogAdapter 类似，DiskLogAdapter 也只是负责控制是否打印日志，具体工作由 CsvFormatStrategy 实现。</p><pre><code class="Java">public class DiskLogAdapter implements LogAdapter {  @NonNull private final FormatStrategy formatStrategy;  public DiskLogAdapter() {    formatStrategy = CsvFormatStrategy.newBuilder().build();  }  public DiskLogAdapter(@NonNull FormatStrategy formatStrategy) {    this.formatStrategy = checkNotNull(formatStrategy);  }  @Override public boolean isLoggable(int priority, @Nullable String tag) {    return true;  }  @Override public void log(int priority, @Nullable String tag, @NonNull String message) {    formatStrategy.log(priority, tag, message);  }}</code></pre><p>5.2、CsvFormatStrategy 部分代码：</p><p>CsvFormatStrategy 处理后的日志要保存到文件，同样使用 Builder 设计模式：</p><p>我们来看下 build() 方法：</p><pre><code class="Java">@NonNull public CsvFormatStrategy build() {    if (date == null) {        date = new Date();    }    if (dateFormat == null) {        dateFormat = new SimpleDateFormat(&quot;yyyy.MM.dd HH:mm:ss.SSS&quot;, Locale.UK);    }    if (logStrategy == null) {        String diskPath = Environment.getExternalStorageDirectory().getAbsolutePath();        String folder = diskPath + File.separatorChar + &quot;logger&quot;;        HandlerThread ht = new HandlerThread(&quot;AndroidFileLogger.&quot; + folder);        ht.start();        Handler handler = new DiskLogStrategy.WriteHandler(ht.getLooper(), folder, MAX_BYTES);        logStrategy = new DiskLogStrategy(handler);    }    return new CsvFormatStrategy(this);}</code></pre><p>可以看到文件保存位置为 外置空间根目录 logger 文件夹下。</p><p>由 HandlerThread 启动了一个子线程，HandlerThread 实际上还是一个普通的 Thread，不过内部实现了 Looper 循环。</p><p>具体实现主要涉及字符串的拼接、格式的调整：</p><pre><code class="Java">  @Override public void log(int priority, @Nullable String onceOnlyTag, @NonNull String message) {    checkNotNull(message);    String tag = formatTag(onceOnlyTag);    date.setTime(System.currentTimeMillis());    StringBuilder builder = new StringBuilder();    // machine-readable date/time    builder.append(Long.toString(date.getTime()));    // human-readable date/time    builder.append(SEPARATOR);    builder.append(dateFormat.format(date));    // level    builder.append(SEPARATOR);    builder.append(Utils.logLevel(priority));    // tag    builder.append(SEPARATOR);    builder.append(tag);    // message    if (message.contains(NEW_LINE)) {      // a new line would break the CSV format, so we replace it here      message = message.replaceAll(NEW_LINE, NEW_LINE_REPLACEMENT);    }    builder.append(SEPARATOR);    builder.append(message);    // new line    builder.append(NEW_LINE);    logStrategy.log(priority, tag, builder.toString());  }  @Nullable private String formatTag(@Nullable String tag) {    if (!Utils.isEmpty(tag) &amp;&amp; !Utils.equals(this.tag, tag)) {      return this.tag + &quot;-&quot; + tag;    }    return this.tag;  }</code></pre><p>最终还是由 DiskLogStrategy 来负责打印输出日志。</p><p>5.3、DiskLogStrategy 部分代码：</p><p>这里使用了 Handler 实现线程间的通信：</p><pre><code class="Java">  @NonNull private final Handler handler;  public DiskLogStrategy(@NonNull Handler handler) {    this.handler = checkNotNull(handler);  }  @Override public void log(int level, @Nullable String tag, @NonNull String message) {    checkNotNull(message);    // do nothing on the calling thread, simply pass the tag/msg to the background thread    handler.sendMessage(handler.obtainMessage(level, message));  }</code></pre><p>每次有新的日志，调用 handler.sendMessage() 方法。</p><pre><code class="Java">@SuppressWarnings(&quot;checkstyle:emptyblock&quot;)@Override public void handleMessage(@NonNull Message msg) {    String content = (String) msg.obj;    FileWriter fileWriter = null;    File logFile = getLogFile(folder, &quot;logs&quot;);    try {    fileWriter = new FileWriter(logFile, true);    writeLog(fileWriter, content);    fileWriter.flush();    fileWriter.close();    } catch (IOException e) {    if (fileWriter != null) {        try {        fileWriter.flush();        fileWriter.close();        } catch (IOException e1) { /* fail silently */ }    }    }}</code></pre><p>最后 Handler 接收到消息，就把日志保存到文件中。</p><blockquote><p>Logger 源码分析就到这里了，作者代码写得很优雅，也非常感谢作者向开源社区贡献如此优秀的库。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Android 开发过程中打印日志必不可少，Logger 就是一款优秀的 Android 开源日志库。&lt;/p&gt;&lt;p&gt;Logger 使用简单，输出日志美观高效，支持 JSON 、XML 格式输出，支持打印 Arrays 、Collections 等对象。&lt;/p&gt;&lt;p&gt;Lo
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Logger" scheme="https://www.wshunli.com/tags/Logger/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Flutter开发环境与入门</title>
    <link href="https://www.wshunli.com/posts/a72058f7.html"/>
    <id>https://www.wshunli.com/posts/a72058f7.html</id>
    <published>2018-05-21T13:56:28.000Z</published>
    <updated>2018-06-01T15:00:27.415Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter 是 Google 的移动应用程序 SDK，用于在 iOS 和 Android 上构建高质量的原生界面。 Flutter 与现有的代码一起工作，被全世界的开发者和组织使用，并且是免费和开源的。</p><p>本文介绍在 Windows 环境下 Flutter 环境的搭建及入门。</p><p>1、获取 Flutter SDK</p><p>可以从下载页面获取 Flutter SDK： <a href="https://flutter.io/sdk-archive/#windows" rel="external nofollow noopener noreferrer" target="_blank">https://flutter.io/sdk-archive/#windows</a> .</p><p>将压缩包解压到合适位置，比如本文解压到 ：<code>D:\Android\flutter</code> .</p><p>然后双击文件夹下 <code>flutter_console.bat</code> 文件即可。</p><p>2、设置环境变量</p><p>将 <code>flutter\bin</code> 目录加到系统环境变量 Path 中。</p><p>如本文的目录就是：<code>D:\Android\flutter\bin</code> .</p><p>3、运行 flutter doctor</p><p>在命令行中运行 <code>flutter doctor</code> 可以检查 flutter 插件及依赖安装情况。</p><p>4、Android 环境</p><p>Android 环境安装配置就不多介绍了。</p><p>在 Android Studio 安装 Flutter 、Dart 两个插件就可以直接创建 Flutter 应用了。</p><p>创建过程也基本上和普通 Android 应用差别不大。</p><p>本文源代码：<a href="https://github.com/wshunli/flutter_demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/flutter_demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flutter 是 Google 的移动应用程序 SDK，用于在 iOS 和 Android 上构建高质量的原生界面。 Flutter 与现有的代码一起工作，被全世界的开发者和组织使用，并且是免费和开源的。&lt;/p&gt;&lt;p&gt;本文介绍在 Windows 环境下 Flutter 环
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Flutter" scheme="https://www.wshunli.com/tags/Flutter/"/>
    
      <category term="跨平台" scheme="https://www.wshunli.com/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>《设计模式之禅》读书笔记</title>
    <link href="https://www.wshunli.com/posts/ed1425c1.html"/>
    <id>https://www.wshunli.com/posts/ed1425c1.html</id>
    <published>2018-05-21T09:43:14.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式也是比较欠缺的一方面，这次看的是 《设计模式之禅》 ，前面看了一点 《Head First 设计模式》感觉都是图片有点乱。</p><h1 id="第一部分-设计原则"><a href="#第一部分-设计原则" class="headerlink" title="第一部分 设计原则"></a>第一部分 设计原则</h1><p>单一职责原则：应该有且仅有一个原因引起类的变更，对于接口设计时要做到单一职责。</p><p>里氏替换原则：只要有父类出现的地方，替换为子类也不会产生任何问题或异常。<br>　　<br>依赖倒置原则：模块间的依赖关系是通过接口或抽象类产生的（面向接口编程）。</p><p>接口隔离原则：客户不应该依赖它不需要的接口；类间的依赖关系应建立在最小的接口上；尽量使用多个专门的接口。</p><p>迪米特法则：一个对象应对其他对象有最少的了解；只和直接朋友交流，朋友间也是有距离的；一个方法中尽量不引入类中不存在的对象；减少 public 方法和属性。</p><p>开闭原则：对扩展开放，对修改关闭；通过扩展来实现变化；不允许出现接口或抽象方法中不存在的 public 方法。</p><h1 id="第二部分-设计模式"><a href="#第二部分-设计模式" class="headerlink" title="第二部分 设计模式"></a>第二部分 设计模式</h1><p>设计模式根据目的可以分为三大类，分别是 <strong>创建型设计模式、行为型设计模式以及结构型设计模式</strong> 。</p><p><strong>创建型模式</strong> 涉及到将对象实例化，这类模式都提供一个方法，将客户从所需要实例化的对象中解藕。</p><p>单例模式(Singleton)<br>构建模式(Builder)<br>原型模式(Prototype)<br>抽象工厂模式(Abstract Factory)<br>工厂方法模式(Factory Method)</p><p><strong>行为型模式</strong> 涉及到类和对象如何交互及分配职责。</p><p>策略模式(Strategy)<br>状态模式(State)<br>责任链模式(Chain of Responsibility)<br>解释器模式(Interpreter)<br>命令模式(Command)<br>观察者模式(Observer)<br>备忘录模式(Memento)<br>迭代器模式(Iterator)<br>模板方法模式(Template Method)<br>访问者模式(Visitor)<br>中介者模式(Mediator)</p><p><strong>结构型模式</strong> 可以让你把类或对象组合到更大的结构中。</p><p>装饰者模式(Decorator)<br>代理模式(Proxy)<br>组合模式(Composite)<br>桥连接模式(Bridge)<br>适配器模式(Adapter)<br>蝇量模式(Flyweight)<br>外观模式(Facade)</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式（Singleton Pattern）确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p><p>单例模式的其他几种实现方式：</p><p>1、饿汉模式</p><pre><code class="Java">public class Singleton {    private static final Singleton instance = new Singleton();    private Singleton() {    }    public static Singleton getInstance() {        return instance;    }}</code></pre><p>2、懒汉模式：</p><pre><code class="Java">public class Singleton {    private static Singleton instance;    private Singleton() {    }    public static Singleton getInstance() {        if (instance == null) {            instance = new Singleton();        }        return instance;    }}</code></pre><p>3、懒汉模式、线程安全：</p><pre><code class="Java">public class Singleton {    private static Singleton instance;    private Singleton() {    }    public static synchronized Singleton getInstance() {        if (instance == null) {            instance = new Singleton();        }        return instance;    }}</code></pre><p>4、双检锁/双重校验锁（DCL，即 double-checked locking）</p><pre><code class="Java">public class Singleton {    private volatile static Singleton instance;    private Singleton() {    }    public static Singleton getInstance() {        if (instance == null) {            synchronized (Singleton.class) {                if (instance == null) {                    instance = new Singleton();                }            }        }        return instance;    }}</code></pre><p>单例模式 | 菜鸟教程：<br><a href="http://www.runoob.com/design-pattern/singleton-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/singleton-pattern.html</a></p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>工厂模式（Factory Pattern）定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设计模式也是比较欠缺的一方面，这次看的是 《设计模式之禅》 ，前面看了一点 《Head First 设计模式》感觉都是图片有点乱。&lt;/p&gt;&lt;h1 id=&quot;第一部分-设计原则&quot;&gt;&lt;a href=&quot;#第一部分-设计原则&quot; class=&quot;headerlink&quot; title=&quot;第一
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>中兴事件，比罚单更沉重的反思</title>
    <link href="https://www.wshunli.com/posts/8cba90ed.html"/>
    <id>https://www.wshunli.com/posts/8cba90ed.html</id>
    <published>2018-05-20T08:59:46.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<p>分享下《工程伦理》的 PPT ，不是最终的版本，后来又修改了。</p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片1.PNG" alt="幻灯片1"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片2.PNG" alt="幻灯片2"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片3.PNG" alt="幻灯片3"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片4.PNG" alt="幻灯片4"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片5.PNG" alt="幻灯片5"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片6.PNG" alt="幻灯片6"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片7.PNG" alt="幻灯片7"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片8.PNG" alt="幻灯片8"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片9.PNG" alt="幻灯片9"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片10.PNG" alt="幻灯片10"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片11.PNG" alt="幻灯片11"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片12.PNG" alt="幻灯片12"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片13.PNG" alt="幻灯片13"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分享下《工程伦理》的 PPT ，不是最终的版本，后来又修改了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.wshunli.com/胡思乱想/ZTE/幻灯片1.PNG&quot; alt=&quot;幻灯片1&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.wshunl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>唯代码与爱不可辜负</title>
    <link href="https://www.wshunli.com/posts/d51d2546.html"/>
    <id>https://www.wshunli.com/posts/d51d2546.html</id>
    <published>2018-05-20T05:14:00.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<p>唯代码与爱不可辜负</p><p>认真做技术，永远做极客</p><p>愿往后有房有车有姑娘 能吹能闹能干架 纵情豁达</p><p>愿今后能哭能笑能随性 敢爱敢恨敢追逐 干净明亮</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;唯代码与爱不可辜负&lt;/p&gt;&lt;p&gt;认真做技术，永远做极客&lt;/p&gt;&lt;p&gt;愿往后有房有车有姑娘 能吹能闹能干架 纵情豁达&lt;/p&gt;&lt;p&gt;愿今后能哭能笑能随性 敢爱敢恨敢追逐 干净明亮&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《深入理解Java虚拟机》读书笔记</title>
    <link href="https://www.wshunli.com/posts/7eb96b02.html"/>
    <id>https://www.wshunli.com/posts/7eb96b02.html</id>
    <published>2018-05-17T04:53:59.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<p>Java 虚拟机也是需要学习的一块内容 ，这次选择的书籍是 《深入理解Java虚拟机：JVM高级特性与最佳实践》。</p><p>Java 虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。 JVM 屏蔽了与具体操作系统平台相关的信息，使得 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p><blockquote align="center">第一部分 走进 Java</blockquote><h1 id="第一章-走进-Java"><a href="#第一章-走进-Java" class="headerlink" title="第一章 走进 Java"></a>第一章 走进 Java</h1><p>主要介绍了 Java 的历史、现在和未来的发展趋势。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Java技术体系.png" alt="Java技术体系"></p><p align="center">Java 技术体系</p><blockquote align="center">第二部分 自动内存管理机制</blockquote><h1 id="第二章-Java-内存区域与内存溢出异常"><a href="#第二章-Java-内存区域与内存溢出异常" class="headerlink" title="第二章 Java 内存区域与内存溢出异常"></a>第二章 Java 内存区域与内存溢出异常</h1><p>本章介绍 Java 虚拟机内存的各个区域的作用、服务对象及其可能出现的问题。</p><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Java虚拟机运行时数据区.png" alt="Java虚拟机运行时数据区"></p><p>1、程序计数器</p><p>当前线程所执行的字节码的行号指示器。</p><p>唯一一个没有规定任何 OOM 情况的区域。</p><p>2、Java 虚拟机栈</p><p>虚拟机栈描述的是 Java 方法执行的内存模型。</p><p>每个方法在执行的同时都会创建一个栈帧(Stack Frame)（指向堆的地址）用于存储局部变量表、操作数栈、动态连接、方法出口等信息<br>每个方法从调用直至执行完成的过程==&gt;一个栈帧在虚拟机栈中入栈到出栈的过程</p><p>3、本地方法栈</p><p>本地方法栈为虚拟机使用到的 Native 方法服务。</p><p>4、Java 堆</p><p>所有线程共享的一块内存区域，在虚拟机启动时创建，用于存放对象实例。</p><p>5、方法区</p><p>各线程共享内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p><strong>运行时常量池</strong>：</p><p>运行时常量池是方法区的一部分。</p><p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池(Constant Pool Table)，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><p><strong>直接内存</strong>：</p><p>不是虚拟机运行时数据区的一部分，也与 Java 虚拟机规范中定义的内存区域无关。</p><p>基于通道(Channel)与缓冲区(Buffer)的I/O方式。</p><p>它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。<br>这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</p><p>Java虚拟机运行时数据区-学习记录-51CTO博客：<br><a href="http://blog.51cto.com/turnsole/2057198" rel="external nofollow noopener noreferrer" target="_blank">http://blog.51cto.com/turnsole/2057198</a></p><h2 id="HotSpot-虚拟机对象"><a href="#HotSpot-虚拟机对象" class="headerlink" title="HotSpot 虚拟机对象"></a>HotSpot 虚拟机对象</h2><p>本节主要介绍了对象的创建、内存布局及访问定位的问题。</p><h2 id="OutOfMemoryError-异常"><a href="#OutOfMemoryError-异常" class="headerlink" title="OutOfMemoryError 异常"></a>OutOfMemoryError 异常</h2><p>在 Java 虚拟机规范的描述中，除程序计数器外，虚拟机内存的其他几个运行区域都有可能发生 OOM 异常。</p><h1 id="第三章-垃圾收集器与内存分配策略"><a href="#第三章-垃圾收集器与内存分配策略" class="headerlink" title="第三章 垃圾收集器与内存分配策略"></a>第三章 垃圾收集器与内存分配策略</h1><p>前面介绍了 Java 内存运行时各区域，其中程序计数器、虚拟机栈、本地方法栈随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊得执行者出栈和入栈操作。而每个栈帧分配的内存基本确定，内存的分配和回收也就确定了，方法结束或者线程结束后，内存自然就跟着回收了。</p><p>而 <strong>Java 堆和方法区</strong> 不一样，这部分的内训分配和回收都是动态的，所以垃圾收集器主要关注的指这部分内容。</p><h2 id="对象是否存活"><a href="#对象是否存活" class="headerlink" title="对象是否存活"></a>对象是否存活</h2><p>垃圾收集器在对堆进行回收前，应该确定对象是否存活。</p><p>（1）引用计数法</p><p>给对象中添加一个引用计数器，每当一个地方引用它时，计数器值就加 1，当引用失效时，计数器值就减 1；任何时刻计数器为 0 的对象就是不可能再被使用的。</p><p>引用计数法很难解决对象之间的相互循环引用问题。</p><pre><code class="Java">ReferenceCountingGC objA = new ReferenceCountingGC();ReferenceCountingGC objB = new ReferenceCountingGC();objA.instance = objB;objB.instance = objA;objA = null;objB = null;// 假设在这行发生GC，objA和objB是否能被回收？System.gc();</code></pre><p>上述代码，当方法运行完成后，对象就不能再被访问，可是 objA &lt;&gt; objB 循环引用着。</p><p>而 Java 垃圾收集器会回收内存，所以 Java 虚拟机不是通过引用计数器来判断对象是否存活的。</p><p>（2）可达性分析算法</p><p>通过一系列的称为 “GC Roots” 的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到 GC Roots 没有任何引用链相连（用图论的话来说，就是从 GC Roots 到这个对象不可达）时，则证明此对象是不可用的。</p><p>在 Java 语言中，可作为 GC Roots 的对象包括下面几种：</p><p>1、虚拟机栈（栈帧中的本地变量表）中引用的对象。<br>2、方法区中类静态属性引用的对象。<br>3、方法区中常量引用的对象。<br>4、本地方法栈中JNI（即一般说的Native方法）引用的对象。</p><p>（3）对象引用</p><p>Java 对象引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）4中，这 4 中引用强度异常逐渐减弱。</p><p>1、强引用就是指在程序代码之中普遍存在的，类似 <code>Object obj = new Object()</code> 这类的引用，只要强引用还存在，来及收集器永远不会回收掉被引用的对象。</p><p>2、软引用是用来描述一些还在用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。在 JDK1.2 之后，提供了 SoftReference 类来实现软引用。</p><p>3、弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论是当前内存是否足够，都会回收掉只被若引用关联的对象。在 JDK1.2 之后，提供了 WeakReference 类来实现弱引用。</p><p>4、虚引用也成为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间过长影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知，在 JDK1.2 之后，提供了 PhantomReference 类来实现虚引用。</p><p>（4）对象的回收的两次标记过程</p><p>在可达性分析算法中不可达的对象被回收，要警告过两次标记过程：</p><p>1、第一次标记的同时会进行一次筛选，筛选此对象是否有必要执行 finalize() 方法。</p><p>当对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p><p>2、如果有必要执行 finalize() 方法，此对象会放到 F-Queue 队列中，稍后由一个由虚拟机自动建立的、低优先级的 Finalizer 线程去执行它。</p><p>对象只要在 finalize() 方法中重新与引用链上的任何一个对象建立关联即可避免被回收。</p><pre><code class="java">/** * 此代码演示了两点：  * 1.对象可以在被GC时自我拯救。  * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次 */public class FinalizeEscapeGC {    public static FinalizeEscapeGC SAVE_HOOK = null;    public void isAlive() {        System.out.println(&quot;yes, i am still alive :)&quot;);    }    @Override    protected void finalize() throws Throwable {        super.finalize();        System.out.println(&quot;finalize mehtod executed!&quot;);        FinalizeEscapeGC.SAVE_HOOK = this;    }    public static void main(String[] args) throws Throwable {        SAVE_HOOK = new FinalizeEscapeGC();        //对象第一次成功拯救自己        SAVE_HOOK = null;        System.gc();        // 因为Finalizer方法优先级很低，暂停0.5秒，以等待它        Thread.sleep(500);        if (SAVE_HOOK != null) {            SAVE_HOOK.isAlive();        } else {            System.out.println(&quot;no, i am dead :(&quot;);        }        // 下面这段代码与上面的完全相同，但是这次自救却失败了        SAVE_HOOK = null;        System.gc();        // 因为Finalizer方法优先级很低，暂停0.5秒，以等待它        Thread.sleep(500);        if (SAVE_HOOK != null) {            SAVE_HOOK.isAlive();        } else {            System.out.println(&quot;no, i am dead :(&quot;);        }    }}</code></pre><p>注意，finalize() 方法只会被系统自动调用一次。</p><p>（5）回收方法区</p><p>方法区垃圾收集主要回收两部分：废弃常量和无用的类。</p><p>对于常量，没有任何对象引用常量池中的常量，虚拟机就可以把常量清出常量池。</p><p>对于类，同时满足以下三个条件才能算是 “无用的类”：</p><p>1、该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。<br>2、加载该类的 ClassLoader 已经被回收。<br>3、该类对应的 java.lang.Class 对象没有在任何地方被引用，无法再任何地方通过反射访问该类的方法。</p><p>虚拟机 <strong>可以</strong> 对满足上述3个条件的无用类进行回收。</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>（1）标记 — 清除算法（Mark-Sweep）</p><p>首先标记处所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集算法1.png" alt="垃圾收集算法1"></p><p>它的主要不足有两个：<br>1、效率问题，标记和清除两个过程的效率都不高；<br>2、标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序中运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p><p>（2）复制算法（Copying）</p><p>将可用内存按容量划分为大小相等的两块，每次只是用其中的一块，当这一块的内存用完了，就将存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集算法2.png" alt="垃圾收集算法2"></p><p>现在的商业虚拟机都采用这种收集算法来回收 <strong>新生代</strong> ，新生代的对象98%是“朝生夕死”的，所以并不需要按照 1:1 比例来划分内存空间。</p><p>（3）标记 — 整理算法（Mark-Compact）</p><p>“标记-整理”算法，标记过程任然与“标记-清理”算法一样，但后续步骤不是直接可对回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集算法3.png" alt="垃圾收集算法3"></p><p>（4）分代收集算法（Generational Collection）</p><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法，一般是 Java 堆分成新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p><p>在新生代中，每次垃圾收集时都发现有大批量的对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成手机。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或者“标记-整理”算法来进行回收。</p><p>Java虚拟机内存分配策略 | hua的博客：<br><a href="http://www.zhangrenhua.com/2016/11/09/Java虚拟机内存分配策略/" rel="external nofollow noopener noreferrer" target="_blank">http://www.zhangrenhua.com/2016/11/09/Java虚拟机内存分配策略/</a></p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>垃圾收集器就是内存回收的具体实现。新生代的垃圾回收器包括 Serial、ParNew、Parallel Scavenge，老年代的垃圾回收器包括 CMS、Serial Old、Parallel Old。其中新生代的三种垃圾回收器都采用了复制算法。</p><center><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器.png" alt="垃圾收集器"></center><p>1、Serial 收集器</p><p>Serial 收集器是一个单线程收集器，这个“单线程”不只是说它只会使用一个 CPU 或者一条线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它垃圾收集结束。它对于运行在 client 模式下的虚拟机来说是一个不错的选择。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器1.png" alt="垃圾收集器1"></p><p>2、ParNew 收集器</p><p>ParNew 收集器其实就是 Serial 收集器的多线程版本，由于除了 Serial 收集器外，只有它能够与 CMS 收集器配合工作，因此，在运行在 Server 模式下的虚拟机中，ParNew 收集器是首选的新生代收集器。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器2.png" alt="垃圾收集器2"></p><p>3、Parallel Scavenge 收集器</p><p>Parallel Scavenge 收集器也是一个并行的新生代垃圾收集器，不同于其他收集器（以尽可能缩短垃圾收集时用户线程的停顿时间为目的），它是唯一一个以达到一个可控制的吞吐量为目标的垃圾收集器。</p><p>吞吐量 = 运行用户代码的时间 / 总时间（垃圾收集时间＋运行用户代码的时间）。</p><p>在后台运算的任务中，不需要太多的交互，保证运行的高吞吐量可以高效地利用CPU时间，尽快完成程序的运算任务。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器3.png" alt="垃圾收集器3"></p><p>4、Serial Old 收集器</p><p>Serial Old 收集器是 Serial 收集器的老年代版本，同样是单线程的收集器，使用标记–整理算法对老年代垃圾进行回收。</p><p>它主要的两大用途：1. 配合 Parallel Scavenge 收集器；2. 作为 CMS 收集器在并发收集出现 Concurrent Mode Failure 时使用的后备预案。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器4.png" alt="垃圾收集器4"></p><p>5、Parallel Old 收集器</p><p>Parallel Old 收集器是 Parallel Scavenge 收集器的老年代版本，使用多线程和标记整理算法。</p><p>在注重吞吐量和 CPU 资源敏感的场合，优先考虑使用 Parallel Scavenge + Parallel Old 收集器的组合，切记 Parallel Scavenge 是无法与 CMS 收集器组合使用的。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器5.png" alt="垃圾收集器5"></p><p>6、Concurrent Mark Sweep 收集器</p><p>CMS 收集器是一款并发收集器，是一种以获取最短回收停顿时间为目标的收集器，它是基于标记–清除算法实现的。</p><p>它整个过程包含四个有效的步骤：</p><p>1) 初始标记（CMS initial mark）<br>2) 并发标记（CMS concurrent mark）<br>3) 重新标记（CMS remark）<br>4) 并发清除（CMS concurrent sweep）</p><p>CMS的主要优点是并发收集、低停顿，也称之为并发收集低停顿收集器（Concurrent Low Pause Collector）。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器6.png" alt="垃圾收集器6"></p><p>7、 G1 收集器</p><p>G1 基于“标记–整理”算法实现，不会产生空间碎片，对于长时间运行的应用系统来说非常重要；另外它可以非常精准地控制停顿，既能让使用者指定一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p><p>G1 收集器可以实现在基本不牺牲吞吐的前提下完成低停顿的内存回收，这是由于它能够避免全区域的垃圾回收，而 G1 将 Java 堆（包括新生代、老生代）划分成多个大小固定的独立区域，并且跟踪这些区域里面的垃圾堆积程度，在后台维护一个优先列表，每次根据允许的收集时间，优先回收垃圾最多的区域（这就是Garbage First名称的由来）。</p><p>JVM（二）垃圾收集算法与收集器 – charles：<br><a href="http://alicharles.com/article/jvm-gc/" rel="external nofollow noopener noreferrer" target="_blank">http://alicharles.com/article/jvm-gc/</a></p><h2 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h2><p>Java 技术体系中所提倡的自动内存管理最终可归结为自动化解决两个问题：给对象分配内存以及回收分配给对象的内存。</p><p>1、对象优先分配在 Eden 区</p><p>大多数情况下，对象首先会被分配到新生代 Eden 区，当 Eden 区满了，会触发一次 Minor GC 。</p><p>2、大对象直接进入老年区</p><p>所谓的大对象是指，需要大量连续内存空间的 Java 对象，最典型的大对象就是那种很长的字符串以及数组（笔者列出的例子中的 byte[] 数组就是典型的大对象）。</p><p>虚拟机提供了一个 -XX：PretenureSizeThreshold 参数，令大于这个设置值的对象直接在老年代分配。这样做的目的是避免在 Eden 区及两个 Survivor 区之间发生大量的内存复制（新生代采用复制算法收集内存）。</p><p>3、长期存活的对象进入老年区</p><p>对象在 Survivor 区中每“熬过”一次 Minor GC ，年龄就增加 1 岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。</p><p>对象晋升老年代的年龄阈值，可以通过参数 -XX：MaxTenuringThreshold 设置。</p><p>4、动态对象年龄的判断</p><p>虚拟机并不是永远地要求对象的年龄必须达到了 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到 MaxTenuringThreshold 中要求的年龄。</p><p>5、空间分配担保</p><p>在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么 Minor GC 可以确保是安全的。</p><p>如果不成立，则虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败。</p><p>如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC ，尽管这次 Minor GC 是有风险的，如果担保失败则会进行一次 Full GC ；如果小于，或者 HandlePromotionFailure 设置不允许冒险，那这时也要改为进行一次 Full GC 。</p><p>读《深入理解Java虚拟机》 - 轩宇一页 - 博客园：<br><a href="http://www.cnblogs.com/zhouxuanyu/p/6942417.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/zhouxuanyu/p/6942417.html</a></p><p>本章介绍了垃圾收集的算法、垃圾收集器的特点及运作原理、Java 虚拟机中的自动内存分配与回收机制。</p><h1 id="第四章-虚拟机性能监控与故障处理工具"><a href="#第四章-虚拟机性能监控与故障处理工具" class="headerlink" title="第四章 虚拟机性能监控与故障处理工具"></a>第四章 虚拟机性能监控与故障处理工具</h1><p>本章介绍了一些命令行及可视化的故障处理工具。</p><h1 id="第五章-调优案例分析与实战"><a href="#第五章-调优案例分析与实战" class="headerlink" title="第五章 调优案例分析与实战"></a>第五章 调优案例分析与实战</h1><p>本章介绍了一些案例及调优方法。</p><blockquote align="center">第三部分 虚拟机执行子系统</blockquote><h1 id="第六章-类文件结构"><a href="#第六章-类文件结构" class="headerlink" title="第六章 类文件结构"></a>第六章 类文件结构</h1><p>Sun 公司及其他虚拟机提供商发布了许多可以运行在各种不同平台上的虚拟机，这些虚拟机都可以载入和执行同一种平台无关的字节码，从而实现“一次编写，到处运行”。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/语言无关性2.png" alt="语言无关性"></p><p>Java Class文件结构如下图所示:</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Class文件结构.png" alt="Class文件结构"></p><p>对于以下 Java 源文件代码:</p><pre><code class="Java">public class Main {    public static void main(String[] args) {        System.out.println(&quot;Hello World!&quot;);    }}</code></pre><p>生成的类文件字节码为:</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Java字节码.png" alt="Java字节码"></p><p>JVM（四）类文件结构解析 – charles:<br><a href="http://alicharles.com/article/jvm-class/" rel="external nofollow noopener noreferrer" target="_blank">http://alicharles.com/article/jvm-class/</a></p><h1 id="第七章-虚拟机类加载机制"><a href="#第七章-虚拟机类加载机制" class="headerlink" title="第七章 虚拟机类加载机制"></a>第七章 虚拟机类加载机制</h1><p>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 java 类型，这就是虚拟机的类加载机制。</p><h2 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h2><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括以下7个阶段：加载，验证，准备，解析，初始化，使用，卸载。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/类的生命周期2.png" alt="类的生命周期"></p><p>其中加载，验证，准备，初始化，卸载这5个阶段的顺序是确定。而解析阶段则不一定，它在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的运行时绑定（也称为动态绑定或晚期绑定）。</p><h2 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h2><p>类加载的过程也就是类加载机制，分为 加载，验证，准备，解析，初始化 这 5 个阶段。</p><p>1、加载</p><p>“加载”是“类加载”过程中的一个阶段。在加载阶段，虚拟机会做 3 件事：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</li></ul><p>2、验证</p><p>验证是连接阶段的第一步。目的是确保 Class 文件的字节流中包含的信息不会危害到虚拟机自身的安全。</p><p>包含：文件格式验证，元数据验证，字节码验证，符号引用验证。</p><p>3、准备</p><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。</p><p>其中初始值“通常情况下”是数据类型的零值。</p><p>4、解析</p><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。符号引用和直接引用的关联如下：</p><p>符号引用（Symbol References）： 符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须一致，因为符号引用的字面量形式明确定义在Java虚拟机规范的 Class 文件格式中。</p><p>直接引用（Direct References）： 直接引用可以是直接目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局有关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那么引用的目标必定已经在内存中存在。</p><p>5、初始化</p><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由 JVM 主导。到了初始阶段，才开始真正执行类中定义的 Java 程序代码。</p><p>在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源，简单说，初始化阶段即虚拟机执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程。</p><p>下面来详细讲解<code>&lt;clinit&gt;()</code>方法是怎么生成的，首先来了解此方法执行过程中可能会影响到程序运行行为的特点和细节：</p><p>1) <code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中所有类变量的赋值动作和静态语句块（ <code>static{}</code> 块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定，特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：</p><pre><code class="Java">public class Test {    static {        i = 0;  // 给变量复制可以正常编译通过        System.out.print(i);  // 这句编译器会提示“非法向前引用”      }    static int i = 1;}</code></pre><p>2) <code>&lt;clinit&gt;()</code>方法与类的构造函数（或者说实例构造器 <code>&lt;init&gt;()</code> 方法）不同，不需要显式的调用父类的()方法。虚拟机会自动保证在子类的<code>&lt;clinit&gt;()</code>方法运行之前，父类的<code>&lt;clinit&gt;()</code>方法已经执行结束。因此虚拟机中第一个执行<code>&lt;clinit&gt;()</code>方法的类肯定为java.lang.Object。</p><p>3) 由于父类的<code>&lt;clinit&gt;()</code>方法先执行，也就意味着父类中定义的静态语句块要优于子类的变量赋值操作。例如以下代码：</p><pre><code class="Java">static class Parent {        public static int A = 1;        static {            A = 2;        }}static class Sub extends Parent {        public static int B = A;}public static void main(String[] args) {        System.out.println(Sub.B);//输出结果是父类中的静态变量值A，也就是2}</code></pre><p>4) <code>&lt;clinit&gt;()</code>方法对于类或接口不是必须的，如果一个类中不包含静态语句块，也没有对类变量的赋值操作，编译器可以不为该类生成<code>&lt;clinit&gt;()</code>方法。<br>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成<code>&lt;clinit&gt;()</code>方法。但接口与类不同的是，执行接口的</p><p>5) <code>&lt;clinit&gt;()</code>方法不需要先执行父接口的<code>&lt;clinit&gt;()</code>方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;()</code>方法。</p><p>6) 虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的<code>&lt;clinit&gt;()</code>方法，其它线程都会阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。如果在一个类的<code>&lt;clinit&gt;()</code>方法中有耗时的操作，就可能造成多个进程阻塞，在实际过程中此种阻塞很隐蔽。</p><p>深入理解JVM(5)——虚拟机类加载机制 - 王泽远的博客 | Crow’s Blog :<br><a href="https://crowhawk.github.io/2017/08/21/jvm_5/" rel="external nofollow noopener noreferrer" target="_blank">https://crowhawk.github.io/2017/08/21/jvm_5/</a></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器负责，通过一个类的全限定类名来获取描述此类的二进制字节流。</p><p>对于任意一个类，都需要由他的类加载器和这个类本身共同确立其在 Java 虚拟机中的唯一性。</p><pre><code class="Java">package com.wshunli.jvm.demo;import java.io.IOException;import java.io.InputStream;public class ClassLoaderTest {    public static void main(String[] args) throws Exception {        ClassLoader myLoader = new ClassLoader() {            @Override            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException {                try {                    String fileName = name.substring(name.lastIndexOf(&quot;.&quot;) + 1) + &quot;.class&quot;;                    InputStream is = getClass().getResourceAsStream(fileName);                    if (is == null) {                        return super.loadClass(name);                    }                    byte[] b = new byte[is.available()];                    is.read(b);                    return defineClass(name, b, 0, b.length);                } catch (IOException e) {                    throw new ClassNotFoundException(name);                }            }        };        Object obj = myLoader.loadClass(&quot;com.wshunli.jvm.demo.ClassLoaderTest&quot;).newInstance();        System.out.println(obj.getClass());        System.out.println(obj instanceof com.wshunli.jvm.demo.ClassLoaderTest);    }}/* * class com.wshunli.jvm.demo.ClassLoaderTest * false */</code></pre><p>每一个类加载器，都拥有一个独立的类名称空间。简言之，比较两个类是否“相等”只有在这两个类是由同一个类加载器加载的前提下才有意义。</p><p>（1）双亲委派模型</p><p>从 Java 虚拟机的角度来讲，只存在两种不同的类加载器：</p><p>一种是启动类加载器（Bootstrap ClassLoader），这个类加载器使用 C++ 语言实现，是虚拟机自身的一部分；<br>另一种就是所有其他的类加载器，这些类加载器都由 Java 语言实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。</p><p>从Java开发人员的角度来看，有三种类加载器：</p><p><strong>启动类加载器</strong> (Bootstrap ClassLoader)：负责加载<code>&lt;JAVA_HOME&gt;\lib</code>目录或者由参数 -Xbootclasspath 指定路径中并且是虚拟机识别的类库加载到虚拟机内存中。</p><p><strong>扩展类加载器</strong> (Extension ClassLoader)：负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中或者被 java.ext.dirs 系统变量指定路径中所有的类库。</p><p><strong>应用程序加载器</strong> (Application ClassLoader)：负责加载由 CLASSPATH 指定的类库，如果程序没有自定义类加载器，程序默认使用该加载器。</p><p>类加载器的双亲委派模型：</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/类加载器2.png" alt="类加载器"></p><p><strong>双亲委派模型的工作过程是</strong>：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p><p>实现双亲委派的代码都集中在 java.lang.ClassLoader 的 loadClass() 方法之中，实现如下：</p><pre><code class="Java">protected Class&lt;?&gt; loadClass(String name, boolean resolve)        throws ClassNotFoundException    {        synchronized (getClassLoadingLock(name)) {            // First, check if the class has already been loaded            Class&lt;?&gt; c = findLoadedClass(name);            if (c == null) {                long t0 = System.nanoTime();                try {                    if (parent != null) {                        c = parent.loadClass(name, false);                    } else {                        c = findBootstrapClassOrNull(name);                    }                } catch (ClassNotFoundException e) {                    // ClassNotFoundException thrown if class not found                    // from the non-null parent class loader                }                if (c == null) {                    // If still not found, then invoke findClass in order                    // to find the class.                    long t1 = System.nanoTime();                    c = findClass(name);                    // this is the defining class loader; record the stats                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);                    sun.misc.PerfCounter.getFindClasses().increment();                }            }            if (resolve) {                resolveClass(c);            }            return c;        }    }</code></pre><p><strong>双亲委派模型的实现逻辑</strong>：先检查是否已经被加载过，若没有加载则调用父加载器的loadClass() 方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，抛出 ClassNotFoundException 异常后，再调用自己的findClass() 方法进行加载。</p><h1 id="第八章-虚拟机字节码执行引擎"><a href="#第八章-虚拟机字节码执行引擎" class="headerlink" title="第八章 虚拟机字节码执行引擎"></a>第八章 虚拟机字节码执行引擎</h1><p>本章从虚拟机字节码执行引擎的概念模型角度来介绍虚拟机方法调用和字节码执行。</p><h2 id="运行时帧栈结构"><a href="#运行时帧栈结构" class="headerlink" title="运行时帧栈结构"></a>运行时帧栈结构</h2><p>栈帧是用于支持虚拟机进行方法调用和方法执行的数据结构。</p><p>栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。</p><p>每一个方法从调用开始到执行完成的过程都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/运行时栈帧结构.png" alt="运行时栈帧结构"></p><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>方法调用并不等同于方法执行，方法调用阶段唯一的任务就是确定被调用方法的版本(即调用哪一个方法)，暂时还不涉及方法内部的具体运行过程。</p><p>按照调用方式共分为两类：</p><p><strong>解析调用</strong> 是静态的过程，在编译期间就完全确定目标方法。</p><p><strong>分派调用</strong> 即可能是静态，也可能是动态的，根据分派标准可以分为单分派和多分派。两两组合有形成了静态单分派、静态多分派、动态单分派、动态多分派。</p><p>（1）解析</p><p>所有方法调用中的目标方法在 Class 文件里面都是一个常量池中的符号引用，在类加载的解析阶段，会将其中的一部分符号引用转化为直接引用。</p><p>（2）分派</p><p>1、静态分派</p><p>所有依赖静态类型3来定位方法执行版本的分派成为静态分派，发生在编译阶段，典型应用是方法重载。</p><p>2、动态分派</p><p>在运行期间根据实际类型4来确定方法执行版本的分派成为动态分派，发生在程序运行期间，典型的应用是方法的重写。</p><h2 id="基于栈的字节码解释执行引擎"><a href="#基于栈的字节码解释执行引擎" class="headerlink" title="基于栈的字节码解释执行引擎"></a>基于栈的字节码解释执行引擎</h2><p>Java 编译器输入的指令流基本上是一种基于栈的指令集架构，指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。</p><p>另外一种指令集架构则是基于寄存器的指令集架构，典型的应用是 x86 的二进制指令集，比如传统的 PC 以及 Android 的 Davlik 虚拟机。</p><p>两者之间最直接的区别是：<br>基于栈的指令集架构不需要硬件的支持，而基于寄存器的指令集架构则完全依赖硬件，<br>这意味基于寄存器的指令集架构执行效率更高，单可移植性差，而基于栈的指令集架构的移植性更高，但执行效率相对较慢，除此之外，相同的操作，基于栈的指令集往往需要更多的指令。</p><h1 id="第九章-类加载级执行子系统的案例及实战"><a href="#第九章-类加载级执行子系统的案例及实战" class="headerlink" title="第九章 类加载级执行子系统的案例及实战"></a>第九章 类加载级执行子系统的案例及实战</h1><p>本章主要介绍了类加载器和字节码的案例。</p><blockquote align="center">第四部分 程序编译与代码优化</blockquote><h1 id="第十章-早期（编译器）优化"><a href="#第十章-早期（编译器）优化" class="headerlink" title="第十章 早期（编译器）优化"></a>第十章 早期（编译器）优化</h1><h1 id="第十一章-晚期（运行器）优化"><a href="#第十一章-晚期（运行器）优化" class="headerlink" title="第十一章 晚期（运行器）优化"></a>第十一章 晚期（运行器）优化</h1><p>第四部分主要介绍了 Java 源程序从源代码编译成字节码和从字节码编译成本地机器码的过程，从 javac 字节码编译器到虚拟机内的 JIT 编译器执行过程合并起来其实就等同于一个传统编译器所执行的编译工程。</p><blockquote align="center">第五部分 高效并发</blockquote><h1 id="Java-内存模型与线程"><a href="#Java-内存模型与线程" class="headerlink" title="Java 内存模型与线程"></a>Java 内存模型与线程</h1><p>Java 虚拟机规范试图定义一种内存模型 （Java Memory Model，JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，实现 Java 程序在各种平台下都能达到一致的内存访问效果。</p><h2 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h2><p>Java 内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样底层细节。</p><p>此处的变量与 Java 编程时所说的变量不一样，指包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，后者是线程私有的，不会被共享。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/jvm_memory_thread2.png" alt="Java内存模型"></p><p>Java 内存模型中规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存（可以与前面将的处理器的高速缓存类比），线程的工作内存中保存了该线程使用到的变量到主内存副本拷贝，线程对变量的所有操作（读取、赋值）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程之间无法直接访问对方工作内存中的变量，线程间变量值的传递均需要在主内存来完成，线程、主内存和工作内存的交互关系如图所示。</p><p>(1) 内存间交互操作</p><p>一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，JMM 定义了一下八种操作来完成：</p><ul><li>lock（锁定）：作用域主内存的变量，它把一个变量标识为一条线程独占的状态。</li><li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存变量，它变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。</li></ul><p>如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行 read 和 load 操作，如果把变量从工作内存中同步回主内存中，就要按顺序地执行 store 和 write 操作。Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。也就是 read 和 load 之间，store 和 write 之间是可以插入其他指令的，如对主内存中的变量 a、b 进行访问时，可能的顺序是 read a，read b，load b， load a。</p><p>Java 内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：</p><ul><li>不允许 read 和 load、store 和 write 操作之一单独出现，如不允许从主内存读取了但工作内存不接受</li><li>不允许一个线程丢弃它的最近 assign 的操作，即变量在工作内存中改变了之后必须同步到主内存中。</li><li>不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施 use 和 store 操作之前，必须先执行过了 assign 和 load 操作。</li><li>一个变量在同一时刻只允许一条线程对其进行 lock 操作，lock 和 unlock 必须成对出现。</li><li>如果对一个变量执行 lock 操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行 load 或 assign 操作初始化变量的值</li><li>如果一个变量事先没有被 lock 操作锁定，则不允许对它执行 unlock 操作；也不允许去 unlock 一个被其他线程锁定的变量。</li><li>对一个变量执行 unlock 操作之前，必须先把此变量同步到主内存中（执行 store 和 write 操作）。</li></ul><p>深入理解JVM之高效并发 - 倔强的荔枝：<br><a href="http://wanglizhi.github.io/2016/07/16/JVM-JMM-And-Thread/" rel="external nofollow noopener noreferrer" target="_blank">http://wanglizhi.github.io/2016/07/16/JVM-JMM-And-Thread/</a></p><p>(2) 对于volatile型变量的特殊规则</p><p>使用 volatile 变量可以保证线程之间的可见性，再者禁止指令重排序优化。</p><p>由于 volatile 变量只能保证可见性，在 <strong>不符合</strong> 以下两条规则的运算场景中，我们仍然要通过加锁来保证原子性。</p><ul><li>运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值</li><li>变量不需要与其他状态变量共同参与不变约束</li></ul><p>(3) 对于long和double型变量的特殊规则</p><p>JVM 规范允许虚拟机将没有被 volatile 修饰的 64 位数据的读写操作划分为两次 32 位的操作来进行。</p><p>但是各种虚拟机实现几乎把 64 位数据的读写作为原子操作来对待。</p><p>(4) 原子性、可见性和有序性</p><p>原子性（Atomicity）：大致认为基本数据类型的访问读写是具备原子性的。JMM 提供 lock 和 unlock 保证原子性，对应代码中的 synchronized 关键字。</p><p>可见性（Visibility）：当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。volatile 保证新值能立即同步到主内存，以及每次使用前立即从主内存刷新。除了volatile外，synchronized 和 final 两个关键字也能实现可见性，其中同步块是有 lock 和 unloc k机制决定的，而 final 关键字一旦初始化完成，其他线程就能看见 final 字段的值。</p><p>有序性（Ordering）：如果在本线程内观察，所有的操作都是有序的；如果在一个线程内观察另一个线程，所有操作都是无序的。Java 提供了 volatile 和synchronized 关键字来保证线程之间操作的有序性。</p><p>(5) 先行发生原则</p><p>先行发生原则：如果操作 A 先发生于操作 B，操作 A 产生的影响能被操作 B 观察到，“影响”包括：修改了内存中共享变量的值、发送了消息、调用了方法。</p><ul><li>程序次序规则：写在程序签名的操作先行发生于书写在后面的操作</li><li>管程锁定规则：一个 unlock 操作先行发生于后面对 <strong>同一个锁</strong> 的 lock 操作</li><li>volatile变量规则：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作</li><li>线程启动规则：Thread 对象的 start 方法先行发生于此线程的每一个动作</li><li>线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测</li><li>线程中断规则：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生</li><li>对象终结规则：一个对象初始化完成先行发生于它的 finalize 方法的开始</li><li>传递性：如果操作 A 先于操作 B，操作 B 先行于操作 C，那么操作A先行发生于操作 C</li></ul><h2 id="Java-与线程"><a href="#Java-与线程" class="headerlink" title="Java 与线程"></a>Java 与线程</h2><p>（1）线程的实现</p><p>实现线程主要有三种方式：使用内核线程实现、使用用户线程实现和使用用户线程加轻量级混合线程实现。</p><p>（2）Java 线程调度</p><p>线程调剂是指系统为线程分配处理器使用权过程：协同式线程调度、抢占式线程调度。</p><p>协同式调度：线程的执行时间由线程本身来控制，线程把自己的工作执行完后，要主动通知系统切换到另一个线程上去。</p><p>抢占式调度：每个线程由系统来分配执行时间，线程切换不由线程本身来决定。Java 使用的就是抢占式调度。</p><p>Java 一种设置了 10 个级别的线程优先级，在两个线程同时处于 Ready 状态时，优先级越高的线程越容易被系统选择执行。但是并不是太靠谱，优先级可能会被系统自行改变。</p><p>（3）线程状态转换</p><p>Java 语言定义了六种线程状态。</p><ol><li><p>新建（New）：创建后尚未启动的线程处于这种状态。</p></li><li><p>运行（Runable）：包括了操作系统线程状态中的 Running 和 Ready，可能正在执行，也可能等待着CPU为它分配执行时间。</p></li><li><p>无限期等待（Waiting）：处于这种状态的线程不会被分配 CPU 执行时间，它们要等待被其他线程显式地唤醒。</p></li><li><p>限期等待（Timed Waiting）：处于这种状态也不会被分配 CPU 执行时间，在一定时间之后它们由系统自动唤醒。</p></li><li><p>阻塞（Blocked）：在等待获取一个排它锁，这个时间将在另外一个小城放弃这个锁的时候发生；在等待进入同步区域的时候。</p></li><li><p>结束（Terminated）：已终止线程的线程状态。</p></li></ol><p>深入理解Java虚拟机——高效并发 - CSDN博客：<br><a href="https://blog.csdn.net/hanxueyu666/article/details/53729491" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hanxueyu666/article/details/53729491</a></p><h1 id="第十三章-线程安全与锁优化"><a href="#第十三章-线程安全与锁优化" class="headerlink" title="第十三章 线程安全与锁优化"></a>第十三章 线程安全与锁优化</h1><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>当多个线程接见一个对象时，若不考虑这些线程在运行时环境下的调度和交替执行，也不须要进行额外的同步，或者调用方进行任何其他的协调操纵，调用这个对象的行动都可以获得正确的成果，那这个对象就是线程安全的。</p><p>线程安全强弱分成五类：</p><p>1、不可变：只要一个不可变的对象被正确地构建出来。</p><p>应用 final 关键字修饰的基本数据类型；若是共享数据是一个对象，那就须要保证对象的行动不会对其状况产生任何影响（String 类的对象）。</p><p>办法：把对象中带有状况的变量都申明为 final ，如 Integer 类。除 String 以外还有列举类型、Number 的部分子类（AtomicInteger 和 AtomicLong 除外）。</p><p>2、绝对线程安全：不管运行时环境如何，调用者都不需要任何额外的同步措施。大部分 Java API 都不是绝对的线程安全。</p><p>3、相对线程安全：它需要包成对这个对象单独的操作时线程安全的，对于一些特定的顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p><p>4、线程兼容：对象本身并不是线程安全的，需要经由过程调用规矩确地应用同步手段来保证对象在并发环境中安全地应用。</p><p>5、线程对立：不管调用端是否采取了同步措施，都无法在多线程环境中并发应用的代码。</p><p>如：Thread 类的 suspend() 和 resume() 方法，System.setIn（）、System.setOut（）、System.runFinalizersOnExit（）。</p><p><strong>线程安全的实现方法</strong>：</p><p>1、互斥同步</p><p>互斥同步（Mutual Exclusion &amp; Synchronization）是最常见的一种并发正确性保障手段，同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。而互斥是实现同步的一种手段，临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是主要的互斥实现方式。</p><p>2、非阻塞同步</p><p>互斥同步主要问题是进行现场阻塞和唤醒的性能问题，这种同步称为阻塞同步，另外它属于一种悲观的并发策略，总是认为不加锁肯定会出问题。随着硬件指令集的发展，我们有了另外一个选择：基于冲突检测的乐观并发策略，通俗讲就是先进行操作，没有冲突就成功，有冲突就进行补偿（如重试直到成功），这种乐观的并发策略成为非阻塞同步。</p><p>3、无同步方案</p><p>要保证线程安全，并不一定要进行同步，如果一个方法不涉及共享数据，那它就无须任何同步措施去保证正确性。</p><p><strong>可重入代码</strong>（Reentrant Code）：也叫做纯代码，可以在代码执行的任何时刻中断它，转而执行另一段代码，返回后不会出现任何错误。可重入代码有一些共同的特征：不依赖存储在堆上的数据和公用的系统资源、用到的状态都由参数传入、不调用非可重入的方法等。</p><p><strong>线程本地存储</strong>（Thread Local Storage）：把共享数据的可见范围限制在同一个线程内，无须同步，如：经典Web交互模型中的”一个请求对应一个服务器线程“的处理方式。java.lang.ThreadLocal 类来实现线程本地存储的功能，每个线程的 Thread 对象都有一个 ThreadLocalMap 对象，以 threadLocalHashCode 为键，以本地线程变量为值。</p><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><p>本部分介绍了一些锁优化的技术，如适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁等。</p><blockquote><p>本书也看完了，只是选择了比较重要的部分仔细阅读，其他的都是大概浏览一遍，后面有机会再读加深理解。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 虚拟机也是需要学习的一块内容 ，这次选择的书籍是 《深入理解Java虚拟机：JVM高级特性与最佳实践》。&lt;/p&gt;&lt;p&gt;Java 虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。 JVM 屏蔽了与具体操作系统平台相关的信息，使得 Java
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《深入理解Java虚拟机》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季中国银联实习生面试</title>
    <link href="https://www.wshunli.com/posts/60f1f107.html"/>
    <id>https://www.wshunli.com/posts/60f1f107.html</id>
    <published>2018-05-14T06:24:49.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（unionpay）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（unionpay）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春中国银联暑期实习生面试（系统与应用开发）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>我本将心向明月，奈何明月照沟渠</title>
    <link href="https://www.wshunli.com/posts/2739df62.html"/>
    <id>https://www.wshunli.com/posts/2739df62.html</id>
    <published>2018-05-08T06:06:23.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<p>我本将心向明月，奈何明月照沟渠，<br>落花有意随流水，流水无心恋落花。</p><p>简历初筛未通过，笔试机会都没有。</p><p>滴，好人卡。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我本将心向明月，奈何明月照沟渠，&lt;br&gt;落花有意随流水，流水无心恋落花。&lt;/p&gt;&lt;p&gt;简历初筛未通过，笔试机会都没有。&lt;/p&gt;&lt;p&gt;滴，好人卡。。&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《Java多线程编程核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/4e70966b.html"/>
    <id>https://www.wshunli.com/posts/4e70966b.html</id>
    <published>2018-05-05T14:47:09.000Z</published>
    <updated>2018-06-01T15:00:27.419Z</updated>
    
    <content type="html"><![CDATA[<p>前面面试什么的多线程部分问的比较多，需要加强下，这里记录总结 《Java多线程编程核心技术》 读书情况。</p><h1 id="第一章-Java-多线程技能"><a href="#第一章-Java-多线程技能" class="headerlink" title="第一章 Java 多线程技能"></a>第一章 Java 多线程技能</h1><p>本章主要介绍了线程概念、核心方法以及优先级。</p><p>1、进程和线程的区别</p><p><strong>进程</strong>是受操作系统管理的基本运行单元，是系统进行资源分配和调度的独立单位。<br><strong>线程</strong>是在进程中独立运行的子任务，CPU 在这些任务之间不停地切换，各子任务共享程序的内存空间。</p><p>线程和进程的区别是什么？ - 知乎：<br><a href="https://www.zhihu.com/question/25532384" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/25532384</a></p><p>2、线程的创建</p><p>（1）继承 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.html" rel="external nofollow noopener noreferrer" target="_blank">Thread</a> 类</p><p>（2）实现 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Runnable.html" rel="external nofollow noopener noreferrer" target="_blank">Runnable</a> 接口</p><p>其中 Thread 类实现了 Runable 接口，都需要重写里面 run 方法。</p><p>两种方式的区别：</p><p>实现 Runnable 的类更具有健壮性，避免了单继承的局限。<br>Runnable 更容易实现资源共享，能多个线程同时处理一个资源。</p><p>Java中 Thread和Runnable实现多线程的区别和联系 - CSDN博客:<br><a href="https://blog.csdn.net/oxuanboy1/article/details/51733279" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/oxuanboy1/article/details/51733279</a></p><p><strong>非线程安全</strong> 主要是指多个线程对同一对象中的同一变量实例进行操作时会出现值被修改、值不同步的现象。</p><p>3、线程的启动和停止</p><p>线程的启动可以使用 start() 或者 run() 方法，</p><p>调用 start() 方法，虚拟机会创建新的线程运行 run 方法；<br>调用 run() 方法后，会在调用的线程执行，不会创建新的线程。</p><p>线程的终止方法有三种：</p><p>（1）使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。<br>（2）使用 stop() 方法强行终止线程（这个方法不推荐使用，因为 stop() 和 suspend()、resume() 一样，也可能发生不可预料的结果）。<br>（3）使用 interrupt() 方法中断线程。</p><p>下面介绍了 interrupt() 方法停止线程，调用该方法知识在当前线程中打了一个停止的标记，并不是真的停止线程。</p><p>如何判断线程的状态是不是停止的：</p><p>（1）this.interrupted() 测试 <strong>当前线程</strong> 是否已经中断，会将状态标志置清为 false 。</p><pre><code class="Java">public static boolean interrupted() {}</code></pre><p>（2）this.isInterrupted() 测试线程是否已经中断，不清除状态标志。</p><pre><code class="Java">public boolean isInterrupted() {}</code></pre><p>Java并发（基础知识）—— 创建、运行以及停止一个线程 - Tim-Tom - 博客园：<br><a href="https://www.cnblogs.com/timlearn/p/4007982.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/timlearn/p/4007982.html</a></p><p>其他方法 stop()、suspend()、resume() 不推荐使用。</p><p>4、线程的主要方法</p><p>Thread.currentThread() 返回代码段正在被哪个线程调用的信息。</p><p>isAlive() 判断当前线程是否处于活动状态，即线程已经启动但尚未终止。</p><pre><code class="Java">package com.wshunli.thread;public class CountOperate extends Thread{    public CountOperate(){        System.out.println(&quot;CountOperate---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName()=&quot; + Thread.currentThread().getName());//获取线程名        System.out.println(&quot;Thread.currentThread().isAlive()=&quot; + Thread.currentThread().isAlive()); //查看线程是否存活        System.out.println(&quot;this.getName=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;CountOperate---end &quot;);        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));    }    @Override    public void run() {        System.out.println(&quot;run---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName=&quot; + Thread.currentThread().getName());        System.out.println(&quot;Thread.currentThread().isAlive()&quot; + Thread.currentThread().isAlive());        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));        System.out.println(&quot;this.getName()=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;run --- end&quot;);    }}package com.wshunli.thread;public class Main {    public static void main(String[] args) {        CountOperate c = new CountOperate();//        c.start();        Thread t1 = new Thread(c);        System.out.println(&quot;main begin t1 isAlive=&quot; + t1.isAlive());        t1.setName(&quot;A&quot;);        t1.start();        System.out.println(&quot;main end t1 isAlive=&quot; + t1.isAlive());    }}/* * CountOperate---begin * Thread.currentThread().getName()=main * Thread.currentThread().isAlive()=true * this.getName=Thread-0 * this.isAlive()=false * CountOperate---end * Thread.currentThread()==this :false * main begin t1 isAlive=false * main end t1 isAlive=true * run---begin * Thread.currentThread().getName=A * Thread.currentThread().isAlive()true * Thread.currentThread()==this :false * this.getName()=Thread-0 * this.isAlive()=false * run --- end */</code></pre><p>Thread.sleep() 方法是在指定的毫秒数内让“当前正在执行的线程”休眠（暂停执行）。</p><p>yield() 放弃当前 CPU 资源，将它让给其他任务占用 CPU 时间。</p><p>5、线程的优先级</p><p>在 Java 中线程的优先级分为 1 ~ 10 这 10 个等级，可以使用 setPriority​(int newPriority) 方法设置。</p><p>优先级较高的线程得到的 CPU 资源较多，CPU 会尽量优先执行，并不一定先执行完。</p><p>线程的优先级具有继承性。</p><p>6、守护线程</p><p>在 java 中线程有两种：用户线程、守护线程。</p><p>守护线程的作用是为其他线程提供便利服务，当进程中不存在非守护线程了，守护线程会自动销毁。</p><p>守护线程最典型的应用就是 GC （垃圾回收器）。</p><h1 id="第二章-对象及变量的并发访问"><a href="#第二章-对象及变量的并发访问" class="headerlink" title="第二章 对象及变量的并发访问"></a>第二章 对象及变量的并发访问</h1><h2 id="synchronized-同步方法"><a href="#synchronized-同步方法" class="headerlink" title="synchronized 同步方法"></a>synchronized 同步方法</h2><p>（1）方法内的变量线程安全，而 <strong>实例变量</strong> 非线程安全。</p><p>（2）多个对象多个锁</p><p>关键字 synchronized 取得的锁都是对象锁，而不是把方法或者代码段当作锁。</p><pre><code class="Java">class HasSelfPrivateNum {    public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class ThreadA extends Thread {    private HasSelfPrivateNum numRef;    public ThreadA(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;a&quot;);    }}class ThreadB extends Thread {    private HasSelfPrivateNum numRef;    public ThreadB(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;b&quot;);    }}class Main {    public static void main(String[] args) {        HasSelfPrivateNum numRef = new HasSelfPrivateNum();        ThreadA athread = new ThreadA(numRef);        athread.start();        ThreadB bthread = new ThreadB(numRef);        bthread.start();    }}/* * a set over! * b set over! * b num=200 * a num=100 */</code></pre><p>对于多个对象实例，会有多个对象锁，所以还是异步的、互不影响。</p><p>（3）synchronized 方法与对象锁</p><p>调用 synchronized 声明的方法是排队同步执行的。</p><p>把 HasSelfPrivateNum 类的 addI() 方法添加 synchronized 关键字，输出就变为：</p><pre><code class="java">class HasSelfPrivateNum {    synchronized public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * a set over! * a num=100 * b set over! * b num=200 */</code></pre><p>上面多个线程调用同一方法，下面再看调用 <strong>不同方法</strong> 的情况。</p><pre><code class="java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyObject object;    public ThreadA(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodA();    }}class ThreadB extends Thread {    private MyObject object;    public ThreadB(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodB();    }}public class Main {    public static void main(String[] args) {        MyObject object = new MyObject();        ThreadA a = new ThreadA(object);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(object);        b.setName(&quot;B&quot;);        a.start();        b.start();    }}/* * begin methodA threadName=A * end endTime=1526043906998 * begin methodB threadName=B begin time=1526043906998 * end */</code></pre><p>修改下 methodB() 方法，去除 synchronized 关键字。</p><pre><code class="Java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * begin methodA threadName=A * begin methodB threadName=B begin time=1526044084533 * end * end endTime=1526044089534 */</code></pre><p>由此可见：</p><p>A 线程先持有 object 对象锁，B 线程可以以异步方式调用 object 对象中的 <strong>非 synchronized 类型</strong> 的方法。<br>A 线程先持有 object 对象锁，B 线程如果在这时调用 object 对中的 <strong>synchronized 类型</strong> 的方法则需等待，也就是同步。</p><p>（4）脏读</p><p>脏读（dirtyRead）即赋值时进行了同步，但在取值时已经被其他线程修改过了。</p><p>跟上例类似，在方法上加 synchronized 关键字可以解决脏读问题。</p><p>（5）synchronized 锁重入</p><p>synchronized 具有锁重入功能，也就说当一个线程获得对象锁之后，再次请求此对象锁可以再次得到该对象的锁。</p><pre><code class="Java">public class Service {    synchronized public void service1() {        System.out.println(&quot;service1&quot;);        service2();    }    synchronized public void service2() {        System.out.println(&quot;service2&quot;);        service3();    }    synchronized public void service3() {        System.out.println(&quot;service3&quot;);    }}</code></pre><p>可重入锁的概念：自己可以再次获取自己的内部锁。假如说不可锁重入的话，线程一直等待释放对象锁，而对象锁自己拥有，就会造成死锁。</p><p><strong>可重入锁</strong> 也支持在父子类继承的环境中，即子类可以通过重入锁调用父类的同步方法。</p><p>（6）当线程执行的代码出现异常时，其所持有的锁会自动释放。</p><p>（7）同步不可以继承。</p><pre><code class="Java">class Super {    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int main 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int main 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class Sub extends Super {    @Override    public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class MyThreadA extends Thread {    private Sub sub;    public MyThreadA(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}class MyThreadB extends Thread {    private Sub sub;    public MyThreadB(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}public class Main {    public static void main(String[] args) {        Sub subRef = new Sub();        MyThreadA a = new MyThreadA(subRef);        a.setName(&quot;A&quot;);        a.start();        MyThreadB b = new MyThreadB(subRef);        b.setName(&quot;B&quot;);        b.start();    }}/* * int sub 下一步 sleep begin threadName=A time=1526046246540 * int sub 下一步 sleep begin threadName=B time=1526046246540 * int sub 下一步 sleep   end threadName=A time=1526046251541 * int sub 下一步 sleep   end threadName=B time=1526046251541 * int main 下一步 sleep begin threadName=A time=1526046251541 * int main 下一步 sleep   end threadName=A time=1526046256541 * int main 下一步 sleep begin threadName=B time=1526046256541 * int main 下一步 sleep   end threadName=B time=1526046261542 */</code></pre><p>子类方法添加 synchronized 关键字。</p><pre><code class="Java">class Sub extends Super {    @Override    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * int sub 下一步 sleep begin threadName=A time=1526046197787 * int sub 下一步 sleep   end threadName=A time=1526046202787 * int main 下一步 sleep begin threadName=A time=1526046202787 * int main 下一步 sleep   end threadName=A time=1526046207788 * int sub 下一步 sleep begin threadName=B time=1526046207788 * int sub 下一步 sleep   end threadName=B time=1526046212789 * int main 下一步 sleep begin threadName=B time=1526046212789 * int main 下一步 sleep   end threadName=B time=1526046217790 */</code></pre><p>由此可见：重写父类的同步方法并不能同步，还是要加 synchronized 关键字才行。</p><h2 id="synchronized-同步语句块"><a href="#synchronized-同步语句块" class="headerlink" title="synchronized 同步语句块"></a>synchronized 同步语句块</h2><p>（1）synchronized 同步语句块的使用</p><p>当两个线程同时访问同一对象 object 中的 synchronized (this) 同步代码块时，一段时间内只能有一个线程被执行，另一个线程要等这个线程执行完以后才能执行。</p><p>（2）用同步代码块解决同步方法的弊端</p><p>同步方法的弊端是有时候执行时间会比较长。</p><pre><code class="Java">// 使用同步方法public class Task {    private String getData1;    private String getData2;    public synchronized void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            getData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            getData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}// 使用同步代码块public class Task {    private String getData1;    private String getData2;    public void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            String privateGetData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            String privateGetData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            synchronized (this) {                getData1 = privateGetData1;                getData2 = privateGetData2;            }            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>其实也就是在耗时部分是异步执行的，从而缩短了代码的执行时长。</p><p>当一个线程访问 同步代码块 时，另一个线程仍然可以访问该对象的非同步代码块。即在 synchronized 块中就是同步执行，不在 synchronized 块中时异步执行。</p><p>（3）synchronized 代码块之间的同步性</p><p>在使用 synchronized (this) 代码块时，当线程访问 object 的一个 synchronized (this) 代码块时，其他线程对同一 object 中所有 synchronized (this) 同步代码块的访问将阻塞。</p><p>和 synchronized 方法一样，synchronized (this) 代码块也是锁定 <strong>当前对象</strong> 的。其他对象访问同一 object 中的 synchronized 方法也会阻塞。</p><p>（4）将任意对象作为对象监视器</p><p>多个线程调用同一个对象中的不同名称的 synchronized 同步方法或 synchronized(this) 同步代码块时，调用的效果就是按顺序执行，也就是 <strong>同步的，阻塞的</strong> 。</p><p>这说明 synchronized 同步方法或 synchronized(this) 同步代码块分别有 <strong>两种作用</strong> ：</p><ul><li>synchronized 同步 <strong>方法</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized 同步方法中的代码。</li></ul></li><li>synchronized(this) 同步 <strong>代码块</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized(this) 同步代码块中的代码。</li></ul></li></ul><p>类似，对于 synchronized(非this对象) 同步代码块：</p><p>当多个线程持有 “对象监视器” 为同一个对象的前提下，同一时间只有一个线程可以执行 synchronized(非this对象x) 同步代码块中的代码。</p><pre><code class="java">public class Service {    private String usernameParam;    private String passwordParam;    public void setUsernamePassword(String username, String password) {        try {            String anyString = new String();            synchronized (anyString) {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入同步块&quot;);                usernameParam = username;                Thread.sleep(3000);                passwordParam = password;                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开同步块&quot;);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>而多个线程持有的 “对象监视器” 不是同一对象时，还是异步执行的。</p><pre><code class="Java">public class Service {    private String anyString = new String();    public void a() {        try {            synchronized (anyString) {                System.out.println(&quot;a begin&quot;);                Thread.sleep(3000);                System.out.println(&quot;a   end&quot;);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void b() {        System.out.println(&quot;b begin&quot;);        System.out.println(&quot;b   end&quot;);    }}</code></pre><p>站在多个线程角度，多个线程调用同一方法先后顺序是随机的，只是对于单个线程而言，在同步方法/代码块内部是同步的。</p><p>（5）静态 synchronized 方法与 synchronized(class) 代码块</p><p>对于静态的 synchronized 方法，是对当前 Class 类进行封锁。<br>对于非静态 synchronized 方法，是对当前 对象 的封锁。</p><p>二者是不同的锁，但是 Class 锁可以对所有对象实例起作用。</p><pre><code class="Java">package com.wshunli.thread.sync5;class Service {    synchronized public static void printA() {        try {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);            Thread.sleep(3000);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public static void printB() {        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;进入printB&quot;);        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;离开printB&quot;);    }}class ThreadA extends Thread {    private Service service;    public ThreadA(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printA();    }}class ThreadB extends Thread {    private Service service;    public ThreadB(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printB();    }}public class Main {    public static void main(String[] args) {        Service service1 = new Service();        Service service2 = new Service();        ThreadA a = new ThreadA(service1);        a.setName(&quot;A&quot;);        a.start();        ThreadB b = new ThreadB(service2);        b.setName(&quot;B&quot;);        b.start();    }}/* * 线程名称为：A在1526136864655进入printA * 线程名称为：A在1526136867656离开printA * 线程名称为：B在1526136867656进入printB * 线程名称为：B在1526136867656离开printB */</code></pre><p>同步 synchronized(class) 代码块的作用其实和 synchronized static 方法的作用一样。</p><pre><code class="Java">class Service {    public static void printA() {        synchronized (Service.class) {            try {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);                Thread.sleep(3000);                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public static void printB() {        synchronized (Service.class) {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printB&quot;);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printB&quot;);        }    }}/* * 线程名称为：A在1526137124491进入printA * 线程名称为：A在1526137127492离开printA * 线程名称为：B在1526137127492进入printB * 线程名称为：B在1526137127492离开printB */</code></pre><p>（6）数据类型 String 的常量池特性</p><p>对于 synchronized(<strong>string</strong>) 同步块，string 值为相同 String 常量时，两个线程持有相同的锁。</p><p>所以在大多数情况下，synchronized 代码块不使用 String 作为锁对象。</p><p>（7）多线程的死锁</p><p>不同的线程都在等待根本不可能释放的锁，从而导致所有任务都无法继续完成。</p><p>线程互相持有对方的锁，然后等待对方释放锁就有可能出现死锁。</p><p>（8）内置类与静态内置类</p><p>对于内置类中有两个同步方法，只要是使用不同的锁，多线程还是异步的。</p><p>对于两个内置类 class1 class2 ，class1 中使用 synchronized(<strong>class2</strong>) 同步代码块时，其他线程只能以同步方式调用 class2 中的 synchronized 同步方法</p><p>（9）锁对象的改变</p><p>再将任何数据作为同步锁时，只需判断多线程是否同时持有相同的锁对象即可。</p><pre><code class="Java">class MyService {    private String lock = &quot;123&quot;;    public void testMethod() {        try {            synchronized (lock) {                System.out.println(Thread.currentThread().getName() + &quot; begin &quot;                        + System.currentTimeMillis());                lock = &quot;456&quot;;                Thread.sleep(2000);                System.out.println(Thread.currentThread().getName() + &quot;   end &quot;                        + System.currentTimeMillis());            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyService service;    public ThreadA(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.testMethod();    }}class ThreadB extends Thread {    private MyService service;    public ThreadB(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.testMethod();    }}public class Main {    public static void main(String[] args) throws InterruptedException {        MyService service = new MyService();        ThreadA a = new ThreadA(service);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(service);        b.setName(&quot;B&quot;);        a.start();        Thread.sleep(50);        b.start();    }}/* * A begin 1526217990101 * B begin 1526217990151 * A   end 1526217992101 * B   end 1526217992151 */</code></pre><p>运行到线程 B 时，对象锁已经改变，所以是异步。</p><p>但是对于对象而言，只是改变对象的属性时不行的，运行结果还是同步的。</p><h2 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h2><p>关键字 volatile 的主要作用是使变量在多个线程间可见。</p><p>（1）关键字 volatile 与死循环</p><pre><code class="Java">class PrintString {    private boolean isContinuePrint = true;    public boolean isContinuePrint() {        return isContinuePrint;    }    public void setContinuePrint(boolean isContinuePrint) {        this.isContinuePrint = isContinuePrint;    }    public void printStringMethod() {        try {            while (isContinuePrint == true) {                System.out.println(&quot;run printStringMethod threadName=&quot;                        + Thread.currentThread().getName());                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        PrintString printStringService = new PrintString();        printStringService.printStringMethod();        System.out.println(&quot;我要停止它！ stopThread=&quot;                + Thread.currentThread().getName());        printStringService.setContinuePrint(false);    }}</code></pre><p>这个程序停不下来，主要原因是 main 线程一直在处理 while() 循环，导致程序不能继续执行。</p><p>我们可以使用多线程技术解决这个问题，在子线程中执行 while() 循环，这样主线程就能继续执行了。</p><pre><code class="Java">class PrintString implements Runnable {    private boolean isContinuePrint = true;    public boolean isContinuePrint() {        return isContinuePrint;    }    public void setContinuePrint(boolean isContinuePrint) {        this.isContinuePrint = isContinuePrint;    }    public void printStringMethod() {        try {            while (isContinuePrint == true) {                System.out.println(&quot;run printStringMethod threadName=&quot;                        + Thread.currentThread().getName());                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    @Override    public void run() {        printStringMethod();    }}public class Run {    public static void main(String[] args) {        PrintString printStringService = new PrintString();        new Thread(printStringService).start();        System.out.println(&quot;我要停止它！ stopThread=&quot;                + Thread.currentThread().getName());        printStringService.setContinuePrint(false);    }}</code></pre><p>但是这种在 <code>-server</code> 服务器模式下，还是会出现死循环。<br>主要是因为在服务器模式下，为了提高线程运行的效率，线程一致在私有堆栈中取得 <code>isContinuePrint</code> 的值为 true 。</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/内存结构.png" alt="内存结构"></p><p>volatile 关键字增加了实例变量在多个线程之间的可见性，但不支持原子性。</p><p>也就是说同步私有堆栈中的值和公共堆栈中的值，强制从公共堆栈中进行取值，或者强制将值写入公共堆栈。</p><p><strong>synchronized 和 volatile 的比较</strong>：</p><p>1、关键字 volatile 是线程同步的轻量级实现，所以 volatile 性能肯定比 synchronized 要好，并且 volatile 只能修饰变量，而 synchronized 可以修饰方法和代码块。目前在开发中使用 synchronized 关键字的比率还是比较大的。<br>2、多线程访问 volatile 不会发生阻塞，而 synchronized 会出现阻塞。<br>3、volatile 能保证数据的可见性，但是不能保证原子性；而 synchronized 可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公有内存中的数据同步。<br>4、volatile 关键字是解决变量在多个线程之间的可见性；而 synchronized 关键字是解决多个线程之间访问资源同步性的。</p><p>所谓的线程安全包含 <strong>原子性和可见性</strong> 两个方面，Java 的同步机制都是围绕这两个方面量保证线程安全的。</p><p>volatile和synchronized的区别 - CSDN博客:<br><a href="https://blog.csdn.net/suifeng3051/article/details/52611233" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/suifeng3051/article/details/52611233</a></p><p>（2）volatile 关键字的非原子性</p><p>（3）原子类</p><p>原子操作是不可分割的整体，没有其他线程能够中断或检查正在原子操作中的变量。</p><pre><code class="Java">import java.util.concurrent.atomic.AtomicInteger;public class AddCountThread extends Thread {    private AtomicInteger count = new AtomicInteger(0);    @Override    public void run() {        for (int i = 0; i &lt; 10000; i++) {            System.out.println(count.incrementAndGet());        }    }}</code></pre><p>一个原子（atomic）类型就是一个原子操作可用的类型，它可以在没有锁的情况下做到线程安全（thread-safe）。</p><p>注意方法之间的调用不是原子操作。</p><p>（4）synchronized 代码块具有 volatile 同步功能。</p><p>关键字 synchronized 可以使多个线程访问统一资源具有同步性，而且它还具有将线程内存中的私有变量与公共内存中的变量同步的功能。</p><h1 id="第三章-线程间通信"><a href="#第三章-线程间通信" class="headerlink" title="第三章 线程间通信"></a>第三章 线程间通信</h1><p>进程间通信使系统之间的交互性更强大，在大大提高 CPU 利用率的同时，还可以对个线程任务在处理的过程中进行有效的把控和监督。</p><h2 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h2><p>（1）使用 wait/notify 实现进程间通信</p><p>java中等待通知机制（wait/notify） - CSDN博客：<br><a href="https://blog.csdn.net/joenqc/article/details/54981532" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/joenqc/article/details/54981532</a></p><p>wait() 和 notify() 需要在同步方法或者同步代码块中调用。</p><p>wait() 会使线程停止运行，而 notify() 使停止的线程继续运行。</p><pre><code class="Java">import java.util.ArrayList;import java.util.List;class MyList {    private static List list = new ArrayList();    public static void add() {        list.add(&quot;anyString&quot;);    }    public static int size() {        return list.size();    }}class ThreadA extends Thread {    private Object lock;    public ThreadA(Object lock) {        super();        this.lock = lock;    }    @Override    public void run() {        try {            synchronized (lock) {                if (MyList.size() != 5) {                    System.out.println(&quot;wait begin &quot;                            + System.currentTimeMillis());                    lock.wait();                    System.out.println(&quot;wait end  &quot;                            + System.currentTimeMillis());                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadB extends Thread {    private Object lock;    public ThreadB(Object lock) {        super();        this.lock = lock;    }    @Override    public void run() {        try {            synchronized (lock) {                for (int i = 0; i &lt; 10; i++) {                    MyList.add();                    if (MyList.size() == 5) {                        lock.notify();                        System.out.println(&quot;已发出通知！&quot;);                    }                    System.out.println(&quot;添加了&quot; + (i + 1) + &quot;个元素!&quot;);                    Thread.sleep(1000);                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}public class Main {    public static void main(String[] args){        try {            Object lock = new Object();            ThreadA a = new ThreadA(lock);            a.start();            Thread.sleep(50);            ThreadB b = new ThreadB(lock);            b.start();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * wait begin 1526377675223 * 添加了1个元素! * 添加了2个元素! * 添加了3个元素! * 添加了4个元素! * 已发出通知！ * 添加了5个元素! * 添加了6个元素! * 添加了7个元素! * 添加了8个元素! * 添加了9个元素! * 添加了10个元素! * wait end  1526377685276 */</code></pre><p>方法 wait() 被执行后，锁会自动释放；执行完 notify() 方法后，锁不会自动释放，只有同步方法或者代码块执行完后才会释放。</p><p>（2）Thread 中关于线程状态的 API</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/线程状态切换.png" alt="线程状态切换"></p><p>Java 线程一共有 6 个状态，分别是新建（New），RUNNABLE [ 就绪（Ready to run）、运行中（Running）]，睡眠（Sleeping），阻塞（Blocked），等待（Waiting），死亡（Dead/Terminate）。</p><p>java线程状态切换 - 简书：<br><a href="https://www.jianshu.com/p/531310753a64" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/531310753a64</a></p><p>每个锁对象都有两个队列：就绪队列、阻塞队列。就绪队列存储了将要获得锁的线程，阻塞队列存储了被阻塞的线程。</p><p>当一个线程被唤醒 (notify) 后，才会进入到就绪队列，等待 CPU 的调度，反之，当一个线程被等待 (wait) 后，就会进入阻塞队列，等待下一次被唤醒。</p><p>（3）wait() 方法的使用</p><p>wait() 方法会使线程进入等待状态。</p><p>wait(long) 方法是线程等待一段时间内是否被唤醒，超时则自动唤醒。</p><p>当线程在 wait() 状态时，调用线程的 interrupt() 方法会出现 InterruptedException 异常。</p><p>在以下情况下，持有锁的线程会释放锁：<br>1、执行完同步代码块。<br>2、在执行同步代码块的过程中，遇到异常而导致线程终止。<br>3、在执行同步代码块的过程中，执行了锁所属对象的 wait() 方法，这个线程会释放锁，进行对象的等待池。</p><p>（4）通知一个线程和唤醒所有线程</p><p>notify() 仅 <strong>随机</strong> 唤醒一个线程，多次调用也会随机将等待 wait 状态的线程进行唤醒。</p><p>notifyAll() 方法可以唤醒所有线程。</p><p>但是通知 notify() 方法在 wait() 方法之前调用，后面 wait 线程收不到通知就会一直处于等待状态。</p><p>注意线程在等待结束后其外部条件数据值可能发生改变。</p><p>（5）生产者/消费者模式</p><p>1、一生产者一消费者:</p><pre><code class="Java">class MyStack {    private List list = new ArrayList();    synchronized public void push() {        try {            if (list.size() == 1) {                this.wait();            }            list.add(&quot;anyString=&quot; + Math.random());            this.notify();            System.out.println(&quot;push=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public String pop() {        String returnValue = &quot;&quot;;        try {            if (list.size() == 0) {                System.out.println(&quot;pop操作中的：&quot;                        + Thread.currentThread().getName() + &quot; 线程呈wait状态&quot;);                this.wait();            }            returnValue = &quot;&quot; + list.get(0);            list.remove(0);            this.notify();            System.out.println(&quot;pop=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }        return returnValue;    }}class P {    private MyStack myStack;    public P(MyStack myStack) {        super();        this.myStack = myStack;    }    public void pushService() {        myStack.push();    }}class C {    private MyStack myStack;    public C(MyStack myStack) {        super();        this.myStack = myStack;    }    public void popService() {        System.out.println(&quot;pop=&quot; + myStack.pop());    }}class P_Thread extends Thread {    private P p;    public P_Thread(P p) {        super();        this.p = p;    }    @Override    public void run() {        while (true) {            p.pushService();        }    }}class C_Thread extends Thread {    private C r;    public C_Thread(C r) {        super();        this.r = r;    }    @Override    public void run() {        while (true) {            r.popService();        }    }}public class Main {    public static void main(String[] args) {        MyStack myStack = new MyStack();        P p = new P(myStack);        C r = new C(myStack);        P_Thread pThread = new P_Thread(p);        C_Thread rThread = new C_Thread(r);        pThread.start();        rThread.start();    }}</code></pre><p>2、一生产者多消费者：</p><pre><code class="Java">class MyStack {    private List list = new ArrayList();    synchronized public void push() {        try {            while (list.size() == 1) {                this.wait();            }            list.add(&quot;anyString=&quot; + Math.random());            this.notify();            System.out.println(&quot;push=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public String pop() {        String returnValue = &quot;&quot;;        try {            while (list.size() == 0) {                System.out.println(&quot;pop操作中的：&quot;                        + Thread.currentThread().getName() + &quot; 线程呈wait状态&quot;);                this.wait();            }            returnValue = &quot;&quot; + list.get(0);            list.remove(0);            this.notify();            System.out.println(&quot;pop=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }        return returnValue;    }}</code></pre><p>3、多生产者一消费者。</p><p>4、多生产者多消费者。</p><p>可能产生假死的情况，使用 notifyAll() 方法通知其他线程即可。</p><p>（6）通过管道进行进程间通信</p><p>在 Java 语言中提供了各种各样的输入/输出流，其中管道流 pipeStream 可用于不同线程间之间传送数据。</p><p>一个线程发送数据到输出管道，另一个线程从输入管道中读取数据。</p><pre><code class="Java">class WriteData {    public void writeMethod(PipedOutputStream out) {        try {            System.out.println(&quot;write :&quot;);            for (int i = 0; i &lt; 300; i++) {                String outData = &quot;&quot; + (i + 1);                out.write(outData.getBytes());                System.out.print(outData);            }            System.out.println();            out.close();        } catch (IOException e) {            e.printStackTrace();        }    }}class ReadData {    public void readMethod(PipedInputStream input) {        try {            System.out.println(&quot;read  :&quot;);            byte[] byteArray = new byte[20]; // 字节流            // char[] byteArray = new char[20]; //字符流            int readLength = input.read(byteArray);            while (readLength != -1) {                String newData = new String(byteArray, 0, readLength);                System.out.print(newData);                readLength = input.read(byteArray);            }            System.out.println();            input.close();        } catch (IOException e) {            e.printStackTrace();        }    }}class ThreadWrite extends Thread {    private WriteData write;    private PipedOutputStream out;    public ThreadWrite(WriteData write, PipedOutputStream out) {        super();        this.write = write;        this.out = out;    }    @Override    public void run() {        write.writeMethod(out);    }}class ThreadRead extends Thread {    private ReadData read;    private PipedInputStream input;    public ThreadRead(ReadData read, PipedInputStream input) {        super();        this.read = read;        this.input = input;    }    @Override    public void run() {        read.readMethod(input);    }}public class Main {    public static void main(String[] args) {        try {            WriteData writeData = new WriteData();            ReadData readData = new ReadData();            PipedInputStream inputStream = new PipedInputStream();            PipedOutputStream outputStream = new PipedOutputStream();            // inputStream.connect(outputStream);            outputStream.connect(inputStream);            ThreadRead threadRead = new ThreadRead(readData, inputStream);            threadRead.start();            Thread.sleep(2000);            ThreadWrite threadWrite = new ThreadWrite(writeData, outputStream);            threadWrite.start();        } catch (IOException e) {            e.printStackTrace();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><p>通过管道进行进程间通信可以传递，字节流和字符流。</p><h2 id="方法-join-的使用"><a href="#方法-join-的使用" class="headerlink" title="方法 join 的使用"></a>方法 join 的使用</h2><p>join() 方法具有使线程排队运行的作用，使所属线程 x 正常执行 run() 方法，而使当前线程 z 进行无限期阻塞，等待线程 x 销毁后继续执行线程 z 后面的代码。</p><pre><code class="Java">class MyThread extends Thread {    @Override    public void run() {        try {            int secondValue = (int) (Math.random() * 10000);            System.out.println(secondValue);            Thread.sleep(secondValue);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Test {    public static void main(String[] args) {        try {            MyThread threadTest = new MyThread();            threadTest.start();            threadTest.join();            System.out.println(&quot;我想当threadTest对象执行完毕后我再执行，我做到了&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><p>join 方法有点类似与同步的效果。</p><p>但是 join() 方法内部是由 wait() 方法进行等待，而 sychronized 关键字是使用 <strong>对象监视器</strong> 原理作为同步。</p><p>在 join 过程中，如果当前线程对象被终端，则当前线程出现异常，而 join 的线程正常执行。</p><p>方法 join(long) 中参数是设定等待时间。</p><p>long 是最长的等待时间，如果子线程提前结束，主线程也会结束等待。</p><pre><code class="Java">public final synchronized void join(long millis)throws InterruptedException {    long base = System.currentTimeMillis();    long now = 0;    if (millis &lt; 0) {        throw new IllegalArgumentException(&quot;timeout value is negative&quot;);    }    if (millis == 0) {        while (isAlive()) {            wait(0);        }    } else {        while (isAlive()) {            long delay = millis - now;            if (delay &lt;= 0) {                break;            }            wait(delay);            now = System.currentTimeMillis() - base;        }    }}</code></pre><p>方法 join() 内部由 wait() 方法实现会立即释放对象锁，而 Thread.sleep() 方法不会释放对象锁。</p><h2 id="类-ThreadLocal-的使用"><a href="#类-ThreadLocal-的使用" class="headerlink" title="类 ThreadLocal 的使用"></a>类 ThreadLocal 的使用</h2><p>类 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/ThreadLocal.html" rel="external nofollow noopener noreferrer" target="_blank">ThreadLocal</a> 是保证线程之间变量的隔离性。</p><pre><code class="Java">class Tools {    public static ThreadLocal tl = new ThreadLocal();}class ThreadA extends Thread {    @Override    public void run() {        try {            for (int i = 0; i &lt; 100; i++) {                if (Tools.tl.get() == null) {                    Tools.tl.set(&quot;ThreadA&quot; + (i + 1));                } else {                    System.out.println(&quot;ThreadA get Value=&quot; + Tools.tl.get());                }                Thread.sleep(200);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadB extends Thread {    @Override    public void run() {        try {            for (int i = 0; i &lt; 100; i++) {                if (Tools.tl.get() == null) {                    Tools.tl.set(&quot;ThreadB&quot; + (i + 1));                } else {                    System.out.println(&quot;ThreadB get Value=&quot; + Tools.tl.get());                }                Thread.sleep(200);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        try {            ThreadA a = new ThreadA();            ThreadB b = new ThreadB();            a.start();            b.start();            for (int i = 0; i &lt; 100; i++) {                if (Tools.tl.get() == null) {                    Tools.tl.set(&quot;Main&quot; + (i + 1));                } else {                    System.out.println(&quot;Main get Value=&quot; + Tools.tl.get());                }                Thread.sleep(200);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><h2 id="类-InheritableThreadLocal-的使用"><a href="#类-InheritableThreadLocal-的使用" class="headerlink" title="类 InheritableThreadLocal 的使用"></a>类 InheritableThreadLocal 的使用</h2><p>类 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/InheritableThreadLocal.html" rel="external nofollow noopener noreferrer" target="_blank">InheritableThreadLocal</a> 可以再子线程中取得父线程继承下来的值。</p><pre><code class="Java">class InheritableThreadLocalExt extends InheritableThreadLocal {    @Override    protected Object initialValue() {        return new Date().getTime();    }    @Override    protected Object childValue(Object parentValue) {        return parentValue + &quot; 我在子线程加的~!&quot;;    }}class Tools {    public static InheritableThreadLocalExt tl = new InheritableThreadLocalExt();}class ThreadA extends Thread {    @Override    public void run() {        try {            for (int i = 0; i &lt; 10; i++) {                System.out.println(&quot;在ThreadA线程中取值=&quot; + Tools.tl.get());                Thread.sleep(100);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        try {            for (int i = 0; i &lt; 10; i++) {                System.out.println(&quot;       在Main线程中取值=&quot; + Tools.tl.get());                Thread.sleep(100);            }            Thread.sleep(5000);            ThreadA a = new ThreadA();            a.start();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><p>在继承的同时可以对值进行进一步的处理。</p><p>但在子线程取得值的同时，主线程将 InheritableThreadLocal 中的值进行更改，子线程取得的值还是旧值。</p><h1 id="第四章-Lock-的使用"><a href="#第四章-Lock-的使用" class="headerlink" title="第四章 Lock 的使用"></a>第四章 Lock 的使用</h1><h2 id="ReentrantLock-类"><a href="#ReentrantLock-类" class="headerlink" title="ReentrantLock 类"></a>ReentrantLock 类</h2><p>（1）ReentrantLock 实现同步</p><pre><code class="Java">ReentrantLock reentrantLock = new ReentrantLock();reentrantLock.lock();// Do somethingreentrantLock.unlock();</code></pre><p>（2）使用 Condition 实现等待/通知</p><pre><code class="Java">class MyService {    private Lock lock = new ReentrantLock();    public Condition condition = lock.newCondition();    public void await() {        try {            lock.lock();            System.out.println(&quot; await时间为&quot; + System.currentTimeMillis());            condition.await();        } catch (InterruptedException e) {            e.printStackTrace();        } finally {            lock.unlock();        }    }    public void signal() {        try {            lock.lock();            System.out.println(&quot;signal时间为&quot; + System.currentTimeMillis());            condition.signal();        } finally {            lock.unlock();        }    }}class ThreadA extends Thread {    private MyService service;    public ThreadA(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.await();    }}public class Run {    public static void main(String[] args) throws InterruptedException {        MyService service = new MyService();        ThreadA a = new ThreadA(service);        a.start();        Thread.sleep(3000);        service.signal();    }}</code></pre><p>这样就实现了 Condition 的通知/等待功能。</p><p>对于多个 Condition 实现通知部分线程，可多次调用 lock.newCondition() 方法。</p><p>（3）公平锁和非公平锁</p><p>锁 Lock 分为公平锁和非公平锁：</p><p>公平锁表示线程获取锁的顺序是按照线程 <strong>加锁的顺序</strong> 来分配的。而非公平锁是抢占机制，是随机获取获取锁的。</p><p>ReentrantLock 可使用构造函数实例化公平锁和非公平锁。</p><p>（4）ReentrantLock 中的常用方法</p><p>getHoldCount() 当前线程保持锁定的个数，也就是调用 lock() 方法的次数。</p><p>getQueueLength() 返回等待获得锁定的线程的估计数。</p><p>getWaitQueueLength​(Condition condition) 返回等待与此锁定相关的给定条件 condition 的线程估计数。</p><p>hasQueuedThread​(Thread thread) 查询指定线程 thread 是否在等待获得此锁定；hasQueuedThreads() 查询是否有线程在等待次锁。</p><p>hasWaiters​(Condition condition) 查询是否有线程正在等待与此线程有关的 condition 条件。</p><p>isFair() 是不是公平锁。</p><p>isHeldByCurrentThread() 当前线程是否保持此锁。</p><p>isLocked() 查询此锁定是否由任意线程锁定。</p><p>lockInterruptibly() 如果当前线程未中断，则获得此锁；否则出现异常。</p><p>tryLock() 调用时未被另外一个线程保持的情况下，才获得此锁定；tryLock​(long timeout, TimeUnit unit) 在给定时间内。</p><h2 id="ReentrantReadWriteLock-类"><a href="#ReentrantReadWriteLock-类" class="headerlink" title="ReentrantReadWriteLock 类"></a>ReentrantReadWriteLock 类</h2><p>读写锁 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html" rel="external nofollow noopener noreferrer" target="_blank">ReentrantReadWriteLock</a> 表示也有两个锁，一个是与读有关的锁，也成为共享锁；另一个是与写有关的锁，也叫排他锁。</p><p>多个读锁之间不互斥，读锁和写锁互斥，写锁和写锁互斥。</p><p>（1）读读共享</p><pre><code class="java">import java.util.concurrent.locks.ReentrantReadWriteLock;class Service {    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    public void read() {        try {            try {                lock.readLock().lock();                System.out.println(&quot;获得读锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.readLock().unlock();            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class ThreadA extends Thread {    private Service service;    public ThreadA(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.read();    }}class ThreadB extends Thread {    private Service service;    public ThreadB(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.read();    }}public class Main {    public static void main(String[] args) {        Service service = new Service();        ThreadA a = new ThreadA(service);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(service);        b.setName(&quot;B&quot;);        a.start();        b.start();    }}/* * 获得读锁B 1526483245955 * 获得读锁A 1526483245955 */</code></pre><p>（2）写写互斥</p><pre><code class="Java">class Service {    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    public void write() {        try {            try {                lock.writeLock().lock();                System.out.println(&quot;获得写锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.writeLock().unlock();            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * 获得写锁B 1526483357433 * 获得写锁A 1526483367434 */</code></pre><p>（3）读写互斥、写读互斥</p><pre><code class="Java">class Service {    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    public void read() {        try {            try {                lock.readLock().lock();                System.out.println(&quot;获得读锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.readLock().unlock();            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void write() {        try {            try {                lock.writeLock().lock();                System.out.println(&quot;获得写锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.writeLock().unlock();            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * 获得读锁A 1526483561390 * 获得写锁B 1526483571390 *//* * 获得写锁B 1526483608487 * 获得读锁A 1526483618487 */</code></pre><h1 id="第五章-定时器-Timer"><a href="#第五章-定时器-Timer" class="headerlink" title="第五章 定时器 Timer"></a>第五章 定时器 Timer</h1><p>（1）Timer 的概念</p><p>类 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Timer.html" rel="external nofollow noopener noreferrer" target="_blank">Timer</a> 主要负责计划任务的功能，也就是在指定时间开始执行某一个任务。Timer 的封装类是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/TimerTask.html" rel="external nofollow noopener noreferrer" target="_blank">TimerTask</a> 。</p><p>（2）Timer 的常用方法</p><p>1、schedule​(TimerTask task, Date time) 在指定日期执行一次某一任务。</p><pre><code class="Java">public class Run {    private static Timer timer = new Timer();    // 守护线程方式，任务执行后自行销毁    // private static Timer timer = new Timer(true);    static public class MyTask extends TimerTask {        @Override        public void run() {            System.out.println(&quot;运行了！时间为：&quot; + new Date());        }    }    public static void main(String[] args) {        try {            MyTask task = new MyTask();            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);            String dateString = &quot;2014-10-12 11:55:00&quot;;            Date dateRef = sdf.parse(dateString);            System.out.println(&quot;字符串时间：&quot; + dateRef.toLocaleString() + &quot; 当前时间：&quot;                    + new Date().toLocaleString());            timer.schedule(task, dateRef);        } catch (ParseException e) {            e.printStackTrace();        }    }}</code></pre><p>如果 time 晚于当前时间，则按照计划执行；若早于当前时间，则立即执行。</p><p>TimerTask 是以任务队列的方式按照顺序知心话，如果前面的任务执行时间较长，后面的任务也会延迟。</p><p>2、schedule​(TimerTask task, Date firstTime, long period) 在指定日期后，按照指定时间间隔周期性无限循环地执行某一任务。</p><p>3、schedule​(TimerTask task, long delay) 以当前时间为参考，延迟指定地毫秒数之后执行一次 TimerTask 任务。</p><p>4、schedule​(TimerTask task, long delay, long period) 以当前时间为参考，延迟指定地毫秒数之后，再以指定时间间隔周期性无限循环地执行某一任务。</p><p>5、scheduleAtFixedRate​() 方法</p><p>主要有两个方法：</p><p>scheduleAtFixedRate​(TimerTask task, Date firstTime, long period)</p><p>scheduleAtFixedRate​(TimerTask task, long delay, long period)</p><p>方法 schedule 和 scheduleAtFixedRate​ 区别和联系：</p><p>1) 方法 schedule 和 scheduleAtFixedRate 都会顺序序执行，所以不要考虑非线程安全的情况。<br>2) 方法 schedule 和 scheduleAtFixedRate 主要的区别只在于不延时的情况。</p><ul><li>使用 schedule 方法:如果执行任务的时间没有被延时，那么下一次任务的执行时间参考的是上一次任务的“开始”时的时间来计算。</li><li>使用 scheduleAtFixedRate 方法:如果执行任务的时间没有被延时，那么下一次任务的执行时间参考的是上一次任务的“结束”时的时间来计算。</li></ul><p>3) 延时的情况则没有区别，也就是使用 schedule 或 scheduleAtFixedRate 方法都是如果执行任务的时间被延时，那么下一次任务的执行时间参考的是上一次任务“结束”时的时间来计算。<br>4) schedule 方法没有具有任务追赶执行性，而 scheduleAtFixedRate 是有的。</p><p><strong>不延时</strong> 是指 TimerTask 任务执行的时间比 period 周期要短，不会对下次任务执行造成延迟。<br><strong>追赶执行性</strong> 是指 任务执行时间 比当前时间早的情况下，过去时间段内的任务从现在开始执行。</p><h1 id="第六章-单例模式与多线程"><a href="#第六章-单例模式与多线程" class="headerlink" title="第六章 单例模式与多线程"></a>第六章 单例模式与多线程</h1><p>（1）单例模式概述</p><p>单例模式可分为两种：</p><p>1、立即执行/“饿汉模式”：使用类的时候已经将对象创建完毕。</p><pre><code class="Java">public class MyObject {    // 立即加载方式==饿汉模式    private static MyObject myObject = new MyObject();    private MyObject() {    }    public static MyObject getInstance() {        // 此代码版本为立即加载        // 此版本代码的缺点是不能有其它实例变量        // 因为getInstance()方法没有同步        // 所以有可能出现非线程安全问题        return myObject;    }}</code></pre><p>2、延迟加载/“懒汉模式”：在使用类的时候实例才被创建。</p><p>DCL 双检查锁机制。</p><pre><code class="Java">public class MyObject {    private volatile static MyObject myObject;    private MyObject() {    }    // 使用双检测机制来解决问题    // 即保证了不需要同步代码的异步    // 又保证了单例的效果    public static MyObject getInstance() {        try {            if (myObject != null) {            } else {                // 模拟在创建对象之前做一些准备性的工作                Thread.sleep(3000);                synchronized (MyObject.class) {                    if (myObject == null) {                        myObject = new MyObject();                    }                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }        return myObject;    }    // 此版本的代码称为：    // 双重检查Double-Check Locking}</code></pre><p>（2）单例模式的实现方式</p><p>单例模式还可以由静态内置类、static 代码块、enum 枚举数据类实现。</p><h1 id="第七章-拾遗增补"><a href="#第七章-拾遗增补" class="headerlink" title="第七章 拾遗增补"></a>第七章 拾遗增补</h1><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>线程在不同运行时期有不同的状态，状态信息存储在 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.State.html" rel="external nofollow noopener noreferrer" target="_blank">State</a> 枚举类中。</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/java_thread_state.png" alt="java_thread_state"></p><p>A thread can be in one of the following states:</p><ul><li>NEW ：A thread that has not yet started.</li><li>RUNNABLE ：A thread executing in the Java virtual machine.</li><li>BLOCKED ：A thread that is blocked waiting for a monitor lock.</li><li>WAITING ：A thread that is waiting indefinitely for another thread to perform a particular action.</li><li>TIMED_WAITING ：A thread that is waiting for another thread to perform an action for up to a specified waiting time.</li><li>TERMINATED ：A thread that has exited.</li></ul><p>A thread can be in only one state at a given point in time. These states are virtual machine states which do not reflect any operating system thread states.</p><h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><p>线程组中可以包含线程对象和线程组，对其进行批量管理和有效组织。</p><p>（1）线程组的关联</p><p>1 级关联，即没有子孙对象。</p><pre><code class="Java">ThreadA aRunnable = new ThreadA();ThreadB bRunnable = new ThreadB();ThreadGroup group = new ThreadGroup(&quot;线程组&quot;);Thread aThread = new Thread(group, aRunnable);Thread bThread = new Thread(group, bRunnable);aThread.start();bThread.start();</code></pre><p>多级关联，存在子孙对象。</p><pre><code class="Java">// 在main组中添加一个线程组A，然后在这个A组中添加线程对象ZThreadGroup mainGroup = Thread.currentThread().getThreadGroup();ThreadGroup group = new ThreadGroup(mainGroup, &quot;A&quot;);Runnable runnable = new Runnable() {    @Override    public void run() {        try {            System.out.println(&quot;runMethod!&quot;);            Thread.sleep(10000);// 线程必须在运行状态才可以受组管理        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }};Thread newThread = new Thread(group, runnable);newThread.setName(&quot;Z&quot;);newThread.start();// 线程必须启动然后才归到组A中</code></pre><p>（2）线程组自动归属特性</p><p>自动归属就是在实例化一个 ThreadGroup 线程组 x 时，如果不指定所属的线程组，则 x 线程组会自动归到当前线程对象所属的线程组中。</p><p>（3）线程组的操作</p><p>获取父线程组，ThreadGroup 的 getParent() 方法获取父线程组。</p><pre><code class="Java">Thread.currentThread().getThreadGroup().getParent()</code></pre><p>线程组内的线程批量停止，ThreadGroup 的 interrupt() 方法。</p><h2 id="SimpleDateFormat-非线程安全"><a href="#SimpleDateFormat-非线程安全" class="headerlink" title="SimpleDateFormat 非线程安全"></a>SimpleDateFormat 非线程安全</h2><p>类 SimpleDateFormat 主要负责日期的转化和格式化，但在多线程环境下，非常容易造成数据转换和处理的不准确，SimpleDateFormat 不是线程安全的。</p><h2 id="多线程出现异常的处理"><a href="#多线程出现异常的处理" class="headerlink" title="多线程出现异常的处理"></a>多线程出现异常的处理</h2><p>（1）线程中出现异常的处理</p><pre><code class="Java">// 指定线程对象设置异常处理类MyThread t1 = new MyThread();t1.setName(&quot;线程t1&quot;);t1.setUncaughtExceptionHandler(new UncaughtExceptionHandler() {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;线程:&quot; + t.getName() + &quot; 出现了异常：&quot;);        e.printStackTrace();    }});t1.start();// 指定线程类的所有对象设置默认异常处理类MyThread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;线程:&quot; + t.getName() + &quot; 出现了异常：&quot;);        e.printStackTrace();    }});</code></pre><p>（2）线程组中出现异常的处理</p><pre><code class="Java">public class MyThreadGroup extends ThreadGroup {    public MyThreadGroup(String name) {        super(name);    }    @Override    public void uncaughtException(Thread t, Throwable e) {        super.uncaughtException(t, e);        this.interrupt();    }}</code></pre><p>注意线程组中的线程对象 run() 方法内部不要有 catch 语句，否则 uncaughtException 不执行。</p><p>（3）线程组异常处理的传递</p><pre><code class="Java">package com.wshunli.thread.sync71;class MyThread extends Thread {    private String num = &quot;a&quot;;    public MyThread() {        super();    }    public MyThread(ThreadGroup group, String name) {        super(group, name);    }    @Override    public void run() {        int numInt = Integer.parseInt(num);        System.out.println(&quot;在线程中打印：&quot; + (numInt + 1));    }}class MyThreadGroup extends ThreadGroup {    public MyThreadGroup(String name) {        super(name);    }    @Override    public void uncaughtException(Thread t, Throwable e) {        super.uncaughtException(t, e);        System.out.println(&quot;线程组的异常处理&quot;);        e.printStackTrace();    }}class ObjectUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;对象的异常处理&quot;);        e.printStackTrace();    }}class StateUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;静态的异常处理&quot;);        e.printStackTrace();    }}public class Main {    public static void main(String[] args) {        MyThread myThread = new MyThread();        // 对象        myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        // MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 对象的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */public class Main {    public static void main(String[] args) {        MyThread myThread = new MyThread();        // 对象        // myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 静态的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */</code></pre><p>对于线程组而言：</p><pre><code class="Java">public class Main {    public static void main(String[] args) {        MyThreadGroup group = new MyThreadGroup(&quot;我的线程组&quot;);        MyThread myThread = new MyThread(group, &quot;我的线程&quot;);        // 对象        myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        // MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 对象的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */public class Main {    public static void main(String[] args) {        MyThreadGroup group = new MyThreadGroup(&quot;我的线程组&quot;);        MyThread myThread = new MyThread(group, &quot;我的线程&quot;);        // 对象        // myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 静态的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; * 线程组的异常处理 *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */</code></pre><blockquote><p>本书是阅读完了，也只是一些多线程的基础，距离实战还是有差距，后面再深入学习 《Java并发编程的艺术》、《Java并发编程实战》等书籍逐步提高。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面面试什么的多线程部分问的比较多，需要加强下，这里记录总结 《Java多线程编程核心技术》 读书情况。&lt;/p&gt;&lt;h1 id=&quot;第一章-Java-多线程技能&quot;&gt;&lt;a href=&quot;#第一章-Java-多线程技能&quot; class=&quot;headerlink&quot; title=&quot;第一章 J
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java多线程编程核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="https://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>https://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-06-01T15:00:27.415Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;&lt;p&gt;Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 
      
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="https://www.wshunli.com/posts/4cbab315.html"/>
    <id>https://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="https://www.wshunli.com/posts/b96eb139.html"/>
    <id>https://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-04-28T06:47:46.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里云实习生面试</title>
    <link href="https://www.wshunli.com/posts/b3a8426.html"/>
    <id>https://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="https://www.wshunli.com/posts/689a494.html"/>
    <id>https://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="https://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>https://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="https://www.wshunli.com/posts/3cb63fb.html"/>
    <id>https://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-06-01T15:00:27.423Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;&lt;p&gt;老是看书学习理论知识不太行，还得动手写代码啊。&lt;/p&gt;&lt;p&gt;1、赋值运算函数&lt;/p&gt;&lt;p&gt;2、单例设计模式&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;Java&quot;&gt;public class SingletonClass {

      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
</feed>
