<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-05-22T15:04:34.488Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Logger使用及源码解析</title>
    <link href="https://www.wshunli.com/posts/ca2fa1f1.html"/>
    <id>https://www.wshunli.com/posts/ca2fa1f1.html</id>
    <published>2018-05-22T14:46:58.000Z</published>
    <updated>2018-05-22T15:04:34.488Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 开发过程中打印日志必不可少，Logger 就是一款优秀的 Android 开源日志库。</p><p>Logger 使用简单，输出日志美观高效，支持 JSON 、XML 格式输出，支持打印 Arrays 、List 、Map 等对象。</p><p>Logger 地址 ：<a href="https://github.com/orhanobut/logger" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/orhanobut/logger</a></p><h1 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h1><p>在项目中添加依赖：</p><pre><code class="Gradle">implementation &#39;com.orhanobut:logger:2.2.0&#39;</code></pre><p>快速开始：</p><pre><code class="Java">Logger.addLogAdapter(new AndroidLogAdapter());Logger.d(&quot;hello&quot;);</code></pre><p>这样就可以打印日志了。</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Android 开发过程中打印日志必不可少，Logger 就是一款优秀的 Android 开源日志库。&lt;/p&gt;&lt;p&gt;Logger 使用简单，输出日志美观高效，支持 JSON 、XML 格式输出，支持打印 Arrays 、List 、Map 等对象。&lt;/p&gt;&lt;p&gt;Logg
      
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Logger" scheme="https://www.wshunli.com/tags/Logger/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Flutter开发环境与入门</title>
    <link href="https://www.wshunli.com/posts/a72058f7.html"/>
    <id>https://www.wshunli.com/posts/a72058f7.html</id>
    <published>2018-05-21T13:56:28.000Z</published>
    <updated>2018-05-22T15:04:34.488Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter 是 Google 的移动应用程序 SDK，用于在 iOS 和 Android 上构建高质量的原生界面。 Flutter 与现有的代码一起工作，被全世界的开发者和组织使用，并且是免费和开源的。</p><p>本文介绍在 Windows 环境下 Flutter 环境的搭建及入门。</p><p>1、获取 Flutter SDK</p><p>可以从下载页面获取 Flutter SDK： <a href="https://flutter.io/sdk-archive/#windows" rel="external nofollow noopener noreferrer" target="_blank">https://flutter.io/sdk-archive/#windows</a> .</p><p>将压缩包解压到合适位置，比如本文解压到 ：<code>D:\Android\flutter</code> .</p><p>然后双击文件夹下 <code>flutter_console.bat</code> 文件即可。</p><p>2、设置环境变量</p><p>将 <code>flutter\bin</code> 目录加到系统环境变量 Path 中。</p><p>如本文的目录就是：<code>D:\Android\flutter\bin</code> .</p><p>3、运行 flutter doctor</p><p>在命令行中运行 <code>flutter doctor</code> 可以检查 flutter 插件及依赖安装情况。</p><p>4、Android 环境</p><p>Android 环境安装配置就不多介绍了。</p><p>在 Android Studio 安装 Flutter 、Dart 两个插件就可以直接创建 Flutter 应用了。</p><p>创建过程也基本上和普通 Android 应用差别不大。</p><p>本文源代码：<a href="https://github.com/wshunli/flutter_demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/flutter_demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flutter 是 Google 的移动应用程序 SDK，用于在 iOS 和 Android 上构建高质量的原生界面。 Flutter 与现有的代码一起工作，被全世界的开发者和组织使用，并且是免费和开源的。&lt;/p&gt;&lt;p&gt;本文介绍在 Windows 环境下 Flutter 环
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Flutter" scheme="https://www.wshunli.com/tags/Flutter/"/>
    
      <category term="跨平台" scheme="https://www.wshunli.com/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>《设计模式之禅》读书笔记</title>
    <link href="https://www.wshunli.com/posts/ed1425c1.html"/>
    <id>https://www.wshunli.com/posts/ed1425c1.html</id>
    <published>2018-05-21T09:43:14.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式也是比较欠缺的一方面，这次看的是 《设计模式之禅》 ，前面看了一点 《Head First 设计模式》感觉都是图片有点乱。</p><h1 id="第一部分-设计原则"><a href="#第一部分-设计原则" class="headerlink" title="第一部分 设计原则"></a>第一部分 设计原则</h1><p>单一职责原则：应该有且仅有一个原因引起类的变更，对于接口设计时要做到单一职责。</p><p>里氏替换原则：只要有父类出现的地方，替换为子类也不会产生任何问题或异常。<br>　　<br>依赖倒置原则：模块间的依赖关系是通过接口或抽象类产生的（面向接口编程）。</p><p>接口隔离原则：客户不应该依赖它不需要的接口；类间的依赖关系应建立在最小的接口上；尽量使用多个专门的接口。</p><p>迪米特法则：一个对象应对其他对象有最少的了解；只和直接朋友交流，朋友间也是有距离的；一个方法中尽量不引入类中不存在的对象；减少 public 方法和属性。</p><p>开闭原则：对扩展开放，对修改关闭；通过扩展来实现变化；不允许出现接口或抽象方法中不存在的 public 方法。</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;设计模式也是比较欠缺的一方面，这次看的是 《设计模式之禅》 ，前面看了一点 《Head First 设计模式》感觉都是图片有点乱。&lt;/p&gt;&lt;h1 id=&quot;第一部分-设计原则&quot;&gt;&lt;a href=&quot;#第一部分-设计原则&quot; class=&quot;headerlink&quot; title=&quot;第一
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>中兴事件，比罚单更沉重的反思</title>
    <link href="https://www.wshunli.com/posts/8cba90ed.html"/>
    <id>https://www.wshunli.com/posts/8cba90ed.html</id>
    <published>2018-05-20T08:59:46.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<p>分享下《工程伦理》的 PPT ，不是最终的版本，后来又修改了。</p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片1.PNG" alt="幻灯片1"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片2.PNG" alt="幻灯片2"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片3.PNG" alt="幻灯片3"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片4.PNG" alt="幻灯片4"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片5.PNG" alt="幻灯片5"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片6.PNG" alt="幻灯片6"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片7.PNG" alt="幻灯片7"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片8.PNG" alt="幻灯片8"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片9.PNG" alt="幻灯片9"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片10.PNG" alt="幻灯片10"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片11.PNG" alt="幻灯片11"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片12.PNG" alt="幻灯片12"></p><p><img src="https://img.wshunli.com/胡思乱想/ZTE/幻灯片13.PNG" alt="幻灯片13"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分享下《工程伦理》的 PPT ，不是最终的版本，后来又修改了。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.wshunli.com/胡思乱想/ZTE/幻灯片1.PNG&quot; alt=&quot;幻灯片1&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img.wshunl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>唯代码与爱不可辜负</title>
    <link href="https://www.wshunli.com/posts/d51d2546.html"/>
    <id>https://www.wshunli.com/posts/d51d2546.html</id>
    <published>2018-05-20T05:14:00.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<p>唯代码与爱不可辜负</p><p>认真做技术，永远做极客</p><p>愿往后有房有车有姑娘 能吹能闹能干架 纵情豁达</p><p>愿今后能哭能笑能随性 敢爱敢恨敢追逐 干净明亮</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;唯代码与爱不可辜负&lt;/p&gt;&lt;p&gt;认真做技术，永远做极客&lt;/p&gt;&lt;p&gt;愿往后有房有车有姑娘 能吹能闹能干架 纵情豁达&lt;/p&gt;&lt;p&gt;愿今后能哭能笑能随性 敢爱敢恨敢追逐 干净明亮&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《深入理解Java虚拟机》读书笔记</title>
    <link href="https://www.wshunli.com/posts/7eb96b02.html"/>
    <id>https://www.wshunli.com/posts/7eb96b02.html</id>
    <published>2018-05-17T04:53:59.000Z</published>
    <updated>2018-05-22T15:04:34.492Z</updated>
    
    <content type="html"><![CDATA[<p>Java 虚拟机也是需要学习的一块内容 ，这次选择的书籍是 《深入理解Java虚拟机：JVM高级特性与最佳实践》。</p><p>Java 虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。 JVM 屏蔽了与具体操作系统平台相关的信息，使得 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p><blockquote align="center">第一部分 走进 Java</blockquote><h1 id="第一章-走进-Java"><a href="#第一章-走进-Java" class="headerlink" title="第一章 走进 Java"></a>第一章 走进 Java</h1><p>主要介绍了 Java 的历史、现在和未来的发展趋势。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Java技术体系.png" alt="Java技术体系"></p><p align="center">Java 技术体系</p><blockquote align="center">第二部分 自动内存管理机制</blockquote><h1 id="第二章-Java-内存区域与内存溢出异常"><a href="#第二章-Java-内存区域与内存溢出异常" class="headerlink" title="第二章 Java 内存区域与内存溢出异常"></a>第二章 Java 内存区域与内存溢出异常</h1><p>本章介绍 Java 虚拟机内存的各个区域的作用、服务对象及其可能出现的问题。</p><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Java虚拟机运行时数据区.png" alt="Java虚拟机运行时数据区"></p><p>1、程序计数器</p><p>当前线程所执行的字节码的行号指示器。</p><p>唯一一个没有规定任何 OOM 情况的区域。</p><p>2、Java 虚拟机栈</p><p>虚拟机栈描述的是 Java 方法执行的内存模型。</p><p>每个方法在执行的同时都会创建一个栈帧(Stack Frame)（指向堆的地址）用于存储局部变量表、操作数栈、动态连接、方法出口等信息<br>每个方法从调用直至执行完成的过程==&gt;一个栈帧在虚拟机栈中入栈到出栈的过程</p><p>3、本地方法栈</p><p>本地方法栈为虚拟机使用到的 Native 方法服务。</p><p>4、Java 堆</p><p>所有线程共享的一块内存区域，在虚拟机启动时创建，用于存放对象实例。</p><p>5、方法区</p><p>各线程共享内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p><strong>运行时常量池</strong>：</p><p>运行时常量池是方法区的一部分。</p><p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池(Constant Pool Table)，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><p><strong>直接内存</strong>：</p><p>不是虚拟机运行时数据区的一部分，也与 Java 虚拟机规范中定义的内存区域无关。</p><p>基于通道(Channel)与缓冲区(Buffer)的I/O方式。</p><p>它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。<br>这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</p><p>Java虚拟机运行时数据区-学习记录-51CTO博客：<br><a href="http://blog.51cto.com/turnsole/2057198" rel="external nofollow noopener noreferrer" target="_blank">http://blog.51cto.com/turnsole/2057198</a></p><h2 id="HotSpot-虚拟机对象"><a href="#HotSpot-虚拟机对象" class="headerlink" title="HotSpot 虚拟机对象"></a>HotSpot 虚拟机对象</h2><p>本节主要介绍了对象的创建、内存布局及访问定位的问题。</p><h2 id="OutOfMemoryError-异常"><a href="#OutOfMemoryError-异常" class="headerlink" title="OutOfMemoryError 异常"></a>OutOfMemoryError 异常</h2><p>在 Java 虚拟机规范的描述中，除程序计数器外，虚拟机内存的其他几个运行区域都有可能发生 OOM 异常。</p><h1 id="第三章-垃圾收集器与内存分配策略"><a href="#第三章-垃圾收集器与内存分配策略" class="headerlink" title="第三章 垃圾收集器与内存分配策略"></a>第三章 垃圾收集器与内存分配策略</h1><p>前面介绍了 Java 内存运行时各区域，其中程序计数器、虚拟机栈、本地方法栈随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊得执行者出栈和入栈操作。而每个栈帧分配的内存基本确定，内存的分配和回收也就确定了，方法结束或者线程结束后，内存自然就跟着回收了。</p><p>而 <strong>Java 堆和方法区</strong> 不一样，这部分的内训分配和回收都是动态的，所以垃圾收集器主要关注的指这部分内容。</p><h2 id="对象是否存活"><a href="#对象是否存活" class="headerlink" title="对象是否存活"></a>对象是否存活</h2><p>垃圾收集器在对堆进行回收前，应该确定对象是否存活。</p><p>（1）引用计数法</p><p>给对象中添加一个引用计数器，每当一个地方引用它时，计数器值就加 1，当引用失效时，计数器值就减 1；任何时刻计数器为 0 的对象就是不可能再被使用的。</p><p>引用计数法很难解决对象之间的相互循环引用问题。</p><pre><code class="Java">ReferenceCountingGC objA = new ReferenceCountingGC();ReferenceCountingGC objB = new ReferenceCountingGC();objA.instance = objB;objB.instance = objA;objA = null;objB = null;// 假设在这行发生GC，objA和objB是否能被回收？System.gc();</code></pre><p>上述代码，当方法运行完成后，对象就不能再被访问，可是 objA &lt;&gt; objB 循环引用着。</p><p>而 Java 垃圾收集器会回收内存，所以 Java 虚拟机不是通过引用计数器来判断对象是否存活的。</p><p>（2）可达性分析算法</p><p>通过一系列的称为 “GC Roots” 的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到 GC Roots 没有任何引用链相连（用图论的话来说，就是从 GC Roots 到这个对象不可达）时，则证明此对象是不可用的。</p><p>在 Java 语言中，可作为 GC Roots 的对象包括下面几种：</p><p>1、虚拟机栈（栈帧中的本地变量表）中引用的对象。<br>2、方法区中类静态属性引用的对象。<br>3、方法区中常量引用的对象。<br>4、本地方法栈中JNI（即一般说的Native方法）引用的对象。</p><p>（3）对象引用</p><p>Java 对象引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）4中，这 4 中引用强度异常逐渐减弱。</p><p>1、强引用就是指在程序代码之中普遍存在的，类似 <code>Object obj = new Object()</code> 这类的引用，只要强引用还存在，来及收集器永远不会回收掉被引用的对象。</p><p>2、软引用是用来描述一些还在用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。在 JDK1.2 之后，提供了 SoftReference 类来实现软引用。</p><p>3、弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论是当前内存是否足够，都会回收掉只被若引用关联的对象。在 JDK1.2 之后，提供了 WeakReference 类来实现弱引用。</p><p>4、虚引用也成为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间过长影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知，在 JDK1.2 之后，提供了 PhantomReference 类来实现虚引用。</p><p>（4）对象的回收的两次标记过程</p><p>在可达性分析算法中不可达的对象被回收，要警告过两次标记过程：</p><p>1、第一次标记的同时会进行一次筛选，筛选此对象是否有必要执行 finalize() 方法。</p><p>当对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p><p>2、如果有必要执行 finalize() 方法，此对象会放到 F-Queue 队列中，稍后由一个由虚拟机自动建立的、低优先级的 Finalizer 线程去执行它。</p><p>对象只要在 finalize() 方法中重新与引用链上的任何一个对象建立关联即可避免被回收。</p><pre><code class="java">/** * 此代码演示了两点：  * 1.对象可以在被GC时自我拯救。  * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次 */public class FinalizeEscapeGC {    public static FinalizeEscapeGC SAVE_HOOK = null;    public void isAlive() {        System.out.println(&quot;yes, i am still alive :)&quot;);    }    @Override    protected void finalize() throws Throwable {        super.finalize();        System.out.println(&quot;finalize mehtod executed!&quot;);        FinalizeEscapeGC.SAVE_HOOK = this;    }    public static void main(String[] args) throws Throwable {        SAVE_HOOK = new FinalizeEscapeGC();        //对象第一次成功拯救自己        SAVE_HOOK = null;        System.gc();        // 因为Finalizer方法优先级很低，暂停0.5秒，以等待它        Thread.sleep(500);        if (SAVE_HOOK != null) {            SAVE_HOOK.isAlive();        } else {            System.out.println(&quot;no, i am dead :(&quot;);        }        // 下面这段代码与上面的完全相同，但是这次自救却失败了        SAVE_HOOK = null;        System.gc();        // 因为Finalizer方法优先级很低，暂停0.5秒，以等待它        Thread.sleep(500);        if (SAVE_HOOK != null) {            SAVE_HOOK.isAlive();        } else {            System.out.println(&quot;no, i am dead :(&quot;);        }    }}</code></pre><p>注意，finalize() 方法只会被系统自动调用一次。</p><p>（5）回收方法区</p><p>方法区垃圾收集主要回收两部分：废弃常量和无用的类。</p><p>对于常量，没有任何对象引用常量池中的常量，虚拟机就可以把常量清出常量池。</p><p>对于类，同时满足以下三个条件才能算是 “无用的类”：</p><p>1、该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。<br>2、加载该类的 ClassLoader 已经被回收。<br>3、该类对应的 java.lang.Class 对象没有在任何地方被引用，无法再任何地方通过反射访问该类的方法。</p><p>虚拟机 <strong>可以</strong> 对满足上述3个条件的无用类进行回收。</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>（1）标记 — 清除算法（Mark-Sweep）</p><p>首先标记处所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集算法1.png" alt="垃圾收集算法1"></p><p>它的主要不足有两个：<br>1、效率问题，标记和清除两个过程的效率都不高；<br>2、标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序中运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p><p>（2）复制算法（Copying）</p><p>将可用内存按容量划分为大小相等的两块，每次只是用其中的一块，当这一块的内存用完了，就将存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集算法2.png" alt="垃圾收集算法2"></p><p>现在的商业虚拟机都采用这种收集算法来回收 <strong>新生代</strong> ，新生代的对象98%是“朝生夕死”的，所以并不需要按照 1:1 比例来划分内存空间。</p><p>（3）标记 — 整理算法（Mark-Compact）</p><p>“标记-整理”算法，标记过程任然与“标记-清理”算法一样，但后续步骤不是直接可对回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集算法3.png" alt="垃圾收集算法3"></p><p>（4）分代收集算法（Generational Collection）</p><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法，一般是 Java 堆分成新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p><p>在新生代中，每次垃圾收集时都发现有大批量的对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成手机。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或者“标记-整理”算法来进行回收。</p><p>Java虚拟机内存分配策略 | hua的博客：<br><a href="http://www.zhangrenhua.com/2016/11/09/Java虚拟机内存分配策略/" rel="external nofollow noopener noreferrer" target="_blank">http://www.zhangrenhua.com/2016/11/09/Java虚拟机内存分配策略/</a></p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>垃圾收集器就是内存回收的具体实现。新生代的垃圾回收器包括 Serial、ParNew、Parallel Scavenge，老年代的垃圾回收器包括 CMS、Serial Old、Parallel Old。其中新生代的三种垃圾回收器都采用了复制算法。</p><center><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器.png" alt="垃圾收集器"></center><p>1、Serial 收集器</p><p>Serial 收集器是一个单线程收集器，这个“单线程”不只是说它只会使用一个 CPU 或者一条线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它垃圾收集结束。它对于运行在 client 模式下的虚拟机来说是一个不错的选择。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器1.png" alt="垃圾收集器1"></p><p>2、ParNew 收集器</p><p>ParNew 收集器其实就是 Serial 收集器的多线程版本，由于除了 Serial 收集器外，只有它能够与 CMS 收集器配合工作，因此，在运行在 Server 模式下的虚拟机中，ParNew 收集器是首选的新生代收集器。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器2.png" alt="垃圾收集器2"></p><p>3、Parallel Scavenge 收集器</p><p>Parallel Scavenge 收集器也是一个并行的新生代垃圾收集器，不同于其他收集器（以尽可能缩短垃圾收集时用户线程的停顿时间为目的），它是唯一一个以达到一个可控制的吞吐量为目标的垃圾收集器。</p><p>吞吐量 = 运行用户代码的时间 / 总时间（垃圾收集时间＋运行用户代码的时间）。</p><p>在后台运算的任务中，不需要太多的交互，保证运行的高吞吐量可以高效地利用CPU时间，尽快完成程序的运算任务。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器3.png" alt="垃圾收集器3"></p><p>4、Serial Old 收集器</p><p>Serial Old 收集器是 Serial 收集器的老年代版本，同样是单线程的收集器，使用标记–整理算法对老年代垃圾进行回收。</p><p>它主要的两大用途：1. 配合 Parallel Scavenge 收集器；2. 作为 CMS 收集器在并发收集出现 Concurrent Mode Failure 时使用的后备预案。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器4.png" alt="垃圾收集器4"></p><p>5、Parallel Old 收集器</p><p>Parallel Old 收集器是 Parallel Scavenge 收集器的老年代版本，使用多线程和标记整理算法。</p><p>在注重吞吐量和 CPU 资源敏感的场合，优先考虑使用 Parallel Scavenge + Parallel Old 收集器的组合，切记 Parallel Scavenge 是无法与 CMS 收集器组合使用的。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器5.png" alt="垃圾收集器5"></p><p>6、Concurrent Mark Sweep 收集器</p><p>CMS 收集器是一款并发收集器，是一种以获取最短回收停顿时间为目标的收集器，它是基于标记–清除算法实现的。</p><p>它整个过程包含四个有效的步骤：</p><p>1) 初始标记（CMS initial mark）<br>2) 并发标记（CMS concurrent mark）<br>3) 重新标记（CMS remark）<br>4) 并发清除（CMS concurrent sweep）</p><p>CMS的主要优点是并发收集、低停顿，也称之为并发收集低停顿收集器（Concurrent Low Pause Collector）。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/垃圾收集器6.png" alt="垃圾收集器6"></p><p>7、 G1 收集器</p><p>G1 基于“标记–整理”算法实现，不会产生空间碎片，对于长时间运行的应用系统来说非常重要；另外它可以非常精准地控制停顿，既能让使用者指定一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p><p>G1 收集器可以实现在基本不牺牲吞吐的前提下完成低停顿的内存回收，这是由于它能够避免全区域的垃圾回收，而 G1 将 Java 堆（包括新生代、老生代）划分成多个大小固定的独立区域，并且跟踪这些区域里面的垃圾堆积程度，在后台维护一个优先列表，每次根据允许的收集时间，优先回收垃圾最多的区域（这就是Garbage First名称的由来）。</p><p>JVM（二）垃圾收集算法与收集器 – charles：<br><a href="http://alicharles.com/article/jvm-gc/" rel="external nofollow noopener noreferrer" target="_blank">http://alicharles.com/article/jvm-gc/</a></p><h2 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h2><p>Java 技术体系中所提倡的自动内存管理最终可归结为自动化解决两个问题：给对象分配内存以及回收分配给对象的内存。</p><p>1、对象优先分配在 Eden 区</p><p>大多数情况下，对象首先会被分配到新生代 Eden 区，当 Eden 区满了，会触发一次 Minor GC 。</p><p>2、大对象直接进入老年区</p><p>所谓的大对象是指，需要大量连续内存空间的 Java 对象，最典型的大对象就是那种很长的字符串以及数组（笔者列出的例子中的 byte[] 数组就是典型的大对象）。</p><p>虚拟机提供了一个 -XX：PretenureSizeThreshold 参数，令大于这个设置值的对象直接在老年代分配。这样做的目的是避免在 Eden 区及两个 Survivor 区之间发生大量的内存复制（新生代采用复制算法收集内存）。</p><p>3、长期存活的对象进入老年区</p><p>对象在 Survivor 区中每“熬过”一次 Minor GC ，年龄就增加 1 岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。</p><p>对象晋升老年代的年龄阈值，可以通过参数 -XX：MaxTenuringThreshold 设置。</p><p>4、动态对象年龄的判断</p><p>虚拟机并不是永远地要求对象的年龄必须达到了 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到 MaxTenuringThreshold 中要求的年龄。</p><p>5、空间分配担保</p><p>在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么 Minor GC 可以确保是安全的。</p><p>如果不成立，则虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败。</p><p>如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC ，尽管这次 Minor GC 是有风险的，如果担保失败则会进行一次 Full GC ；如果小于，或者 HandlePromotionFailure 设置不允许冒险，那这时也要改为进行一次 Full GC 。</p><p>读《深入理解Java虚拟机》 - 轩宇一页 - 博客园：<br><a href="http://www.cnblogs.com/zhouxuanyu/p/6942417.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/zhouxuanyu/p/6942417.html</a></p><p>本章介绍了垃圾收集的算法、垃圾收集器的特点及运作原理、Java 虚拟机中的自动内存分配与回收机制。</p><h1 id="第四章-虚拟机性能监控与故障处理工具"><a href="#第四章-虚拟机性能监控与故障处理工具" class="headerlink" title="第四章 虚拟机性能监控与故障处理工具"></a>第四章 虚拟机性能监控与故障处理工具</h1><p>本章介绍了一些命令行及可视化的故障处理工具。</p><h1 id="第五章-调优案例分析与实战"><a href="#第五章-调优案例分析与实战" class="headerlink" title="第五章 调优案例分析与实战"></a>第五章 调优案例分析与实战</h1><p>本章介绍了一些案例及调优方法。</p><blockquote align="center">第三部分 虚拟机执行子系统</blockquote><h1 id="第六章-类文件结构"><a href="#第六章-类文件结构" class="headerlink" title="第六章 类文件结构"></a>第六章 类文件结构</h1><p>Sun 公司及其他虚拟机提供商发布了许多可以运行在各种不同平台上的虚拟机，这些虚拟机都可以载入和执行同一种平台无关的字节码，从而实现“一次编写，到处运行”。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/语言无关性2.png" alt="语言无关性"></p><p>Java Class文件结构如下图所示:</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Class文件结构.png" alt="Class文件结构"></p><p>对于以下 Java 源文件代码:</p><pre><code class="Java">public class Main {    public static void main(String[] args) {        System.out.println(&quot;Hello World!&quot;);    }}</code></pre><p>生成的类文件字节码为:</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/Java字节码.png" alt="Java字节码"></p><p>JVM（四）类文件结构解析 – charles:<br><a href="http://alicharles.com/article/jvm-class/" rel="external nofollow noopener noreferrer" target="_blank">http://alicharles.com/article/jvm-class/</a></p><h1 id="第七章-虚拟机类加载机制"><a href="#第七章-虚拟机类加载机制" class="headerlink" title="第七章 虚拟机类加载机制"></a>第七章 虚拟机类加载机制</h1><p>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 java 类型，这就是虚拟机的类加载机制。</p><h2 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h2><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括以下7个阶段：加载，验证，准备，解析，初始化，使用，卸载。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/类的生命周期2.png" alt="类的生命周期"></p><p>其中加载，验证，准备，初始化，卸载这5个阶段的顺序是确定。而解析阶段则不一定，它在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的运行时绑定（也称为动态绑定或晚期绑定）。</p><h2 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h2><p>类加载的过程也就是类加载机制，分为 加载，验证，准备，解析，初始化 这 5 个阶段。</p><p>1、加载</p><p>“加载”是“类加载”过程中的一个阶段。在加载阶段，虚拟机会做 3 件事：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</li></ul><p>2、验证</p><p>验证是连接阶段的第一步。目的是确保 Class 文件的字节流中包含的信息不会危害到虚拟机自身的安全。</p><p>包含：文件格式验证，元数据验证，字节码验证，符号引用验证。</p><p>3、准备</p><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。</p><p>其中初始值“通常情况下”是数据类型的零值。</p><p>4、解析</p><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。符号引用和直接引用的关联如下：</p><p>符号引用（Symbol References）： 符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须一致，因为符号引用的字面量形式明确定义在Java虚拟机规范的 Class 文件格式中。</p><p>直接引用（Direct References）： 直接引用可以是直接目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局有关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那么引用的目标必定已经在内存中存在。</p><p>5、初始化</p><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由 JVM 主导。到了初始阶段，才开始真正执行类中定义的 Java 程序代码。</p><p>在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源，简单说，初始化阶段即虚拟机执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程。</p><p>下面来详细讲解<code>&lt;clinit&gt;()</code>方法是怎么生成的，首先来了解此方法执行过程中可能会影响到程序运行行为的特点和细节：</p><p>1) <code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中所有类变量的赋值动作和静态语句块（ <code>static{}</code> 块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定，特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：</p><pre><code class="Java">public class Test {    static {        i = 0;  // 给变量复制可以正常编译通过        System.out.print(i);  // 这句编译器会提示“非法向前引用”      }    static int i = 1;}</code></pre><p>2) <code>&lt;clinit&gt;()</code>方法与类的构造函数（或者说实例构造器 <code>&lt;init&gt;()</code> 方法）不同，不需要显式的调用父类的()方法。虚拟机会自动保证在子类的<code>&lt;clinit&gt;()</code>方法运行之前，父类的<code>&lt;clinit&gt;()</code>方法已经执行结束。因此虚拟机中第一个执行<code>&lt;clinit&gt;()</code>方法的类肯定为java.lang.Object。</p><p>3) 由于父类的<code>&lt;clinit&gt;()</code>方法先执行，也就意味着父类中定义的静态语句块要优于子类的变量赋值操作。例如以下代码：</p><pre><code class="Java">static class Parent {        public static int A = 1;        static {            A = 2;        }}static class Sub extends Parent {        public static int B = A;}public static void main(String[] args) {        System.out.println(Sub.B);//输出结果是父类中的静态变量值A，也就是2}</code></pre><p>4) <code>&lt;clinit&gt;()</code>方法对于类或接口不是必须的，如果一个类中不包含静态语句块，也没有对类变量的赋值操作，编译器可以不为该类生成<code>&lt;clinit&gt;()</code>方法。<br>接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成<code>&lt;clinit&gt;()</code>方法。但接口与类不同的是，执行接口的</p><p>5) <code>&lt;clinit&gt;()</code>方法不需要先执行父接口的<code>&lt;clinit&gt;()</code>方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;()</code>方法。</p><p>6) 虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的<code>&lt;clinit&gt;()</code>方法，其它线程都会阻塞等待，直到活动线程执行<code>&lt;clinit&gt;()</code>方法完毕。如果在一个类的<code>&lt;clinit&gt;()</code>方法中有耗时的操作，就可能造成多个进程阻塞，在实际过程中此种阻塞很隐蔽。</p><p>深入理解JVM(5)——虚拟机类加载机制 - 王泽远的博客 | Crow’s Blog :<br><a href="https://crowhawk.github.io/2017/08/21/jvm_5/" rel="external nofollow noopener noreferrer" target="_blank">https://crowhawk.github.io/2017/08/21/jvm_5/</a></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器负责，通过一个类的全限定类名来获取描述此类的二进制字节流。</p><p>对于任意一个类，都需要由他的类加载器和这个类本身共同确立其在 Java 虚拟机中的唯一性。</p><pre><code class="Java">package com.wshunli.jvm.demo;import java.io.IOException;import java.io.InputStream;public class ClassLoaderTest {    public static void main(String[] args) throws Exception {        ClassLoader myLoader = new ClassLoader() {            @Override            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException {                try {                    String fileName = name.substring(name.lastIndexOf(&quot;.&quot;) + 1) + &quot;.class&quot;;                    InputStream is = getClass().getResourceAsStream(fileName);                    if (is == null) {                        return super.loadClass(name);                    }                    byte[] b = new byte[is.available()];                    is.read(b);                    return defineClass(name, b, 0, b.length);                } catch (IOException e) {                    throw new ClassNotFoundException(name);                }            }        };        Object obj = myLoader.loadClass(&quot;com.wshunli.jvm.demo.ClassLoaderTest&quot;).newInstance();        System.out.println(obj.getClass());        System.out.println(obj instanceof com.wshunli.jvm.demo.ClassLoaderTest);    }}/* * class com.wshunli.jvm.demo.ClassLoaderTest * false */</code></pre><p>每一个类加载器，都拥有一个独立的类名称空间。简言之，比较两个类是否“相等”只有在这两个类是由同一个类加载器加载的前提下才有意义。</p><p>（1）双亲委派模型</p><p>从 Java 虚拟机的角度来讲，只存在两种不同的类加载器：</p><p>一种是启动类加载器（Bootstrap ClassLoader），这个类加载器使用 C++ 语言实现，是虚拟机自身的一部分；<br>另一种就是所有其他的类加载器，这些类加载器都由 Java 语言实现，独立于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。</p><p>从Java开发人员的角度来看，有三种类加载器：</p><p><strong>启动类加载器</strong> (Bootstrap ClassLoader)：负责加载<code>&lt;JAVA_HOME&gt;\lib</code>目录或者由参数 -Xbootclasspath 指定路径中并且是虚拟机识别的类库加载到虚拟机内存中。</p><p><strong>扩展类加载器</strong> (Extension ClassLoader)：负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中或者被 java.ext.dirs 系统变量指定路径中所有的类库。</p><p><strong>应用程序加载器</strong> (Application ClassLoader)：负责加载由 CLASSPATH 指定的类库，如果程序没有自定义类加载器，程序默认使用该加载器。</p><p>类加载器的双亲委派模型：</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/类加载器2.png" alt="类加载器"></p><p><strong>双亲委派模型的工作过程是</strong>：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p><p>实现双亲委派的代码都集中在 java.lang.ClassLoader 的 loadClass() 方法之中，实现如下：</p><pre><code class="Java">protected Class&lt;?&gt; loadClass(String name, boolean resolve)        throws ClassNotFoundException    {        synchronized (getClassLoadingLock(name)) {            // First, check if the class has already been loaded            Class&lt;?&gt; c = findLoadedClass(name);            if (c == null) {                long t0 = System.nanoTime();                try {                    if (parent != null) {                        c = parent.loadClass(name, false);                    } else {                        c = findBootstrapClassOrNull(name);                    }                } catch (ClassNotFoundException e) {                    // ClassNotFoundException thrown if class not found                    // from the non-null parent class loader                }                if (c == null) {                    // If still not found, then invoke findClass in order                    // to find the class.                    long t1 = System.nanoTime();                    c = findClass(name);                    // this is the defining class loader; record the stats                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);                    sun.misc.PerfCounter.getFindClasses().increment();                }            }            if (resolve) {                resolveClass(c);            }            return c;        }    }</code></pre><p><strong>双亲委派模型的实现逻辑</strong>：先检查是否已经被加载过，若没有加载则调用父加载器的loadClass() 方法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，抛出 ClassNotFoundException 异常后，再调用自己的findClass() 方法进行加载。</p><h1 id="第八章-虚拟机字节码执行引擎"><a href="#第八章-虚拟机字节码执行引擎" class="headerlink" title="第八章 虚拟机字节码执行引擎"></a>第八章 虚拟机字节码执行引擎</h1><p>本章从虚拟机字节码执行引擎的概念模型角度来介绍虚拟机方法调用和字节码执行。</p><h2 id="运行时帧栈结构"><a href="#运行时帧栈结构" class="headerlink" title="运行时帧栈结构"></a>运行时帧栈结构</h2><p>栈帧是用于支持虚拟机进行方法调用和方法执行的数据结构。</p><p>栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。</p><p>每一个方法从调用开始到执行完成的过程都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/运行时栈帧结构.png" alt="运行时栈帧结构"></p><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>方法调用并不等同于方法执行，方法调用阶段唯一的任务就是确定被调用方法的版本(即调用哪一个方法)，暂时还不涉及方法内部的具体运行过程。</p><p>按照调用方式共分为两类：</p><p><strong>解析调用</strong> 是静态的过程，在编译期间就完全确定目标方法。</p><p><strong>分派调用</strong> 即可能是静态，也可能是动态的，根据分派标准可以分为单分派和多分派。两两组合有形成了静态单分派、静态多分派、动态单分派、动态多分派。</p><p>（1）解析</p><p>所有方法调用中的目标方法在 Class 文件里面都是一个常量池中的符号引用，在类加载的解析阶段，会将其中的一部分符号引用转化为直接引用。</p><p>（2）分派</p><p>1、静态分派</p><p>所有依赖静态类型3来定位方法执行版本的分派成为静态分派，发生在编译阶段，典型应用是方法重载。</p><p>2、动态分派</p><p>在运行期间根据实际类型4来确定方法执行版本的分派成为动态分派，发生在程序运行期间，典型的应用是方法的重写。</p><h2 id="基于栈的字节码解释执行引擎"><a href="#基于栈的字节码解释执行引擎" class="headerlink" title="基于栈的字节码解释执行引擎"></a>基于栈的字节码解释执行引擎</h2><p>Java 编译器输入的指令流基本上是一种基于栈的指令集架构，指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。</p><p>另外一种指令集架构则是基于寄存器的指令集架构，典型的应用是 x86 的二进制指令集，比如传统的 PC 以及 Android 的 Davlik 虚拟机。</p><p>两者之间最直接的区别是：<br>基于栈的指令集架构不需要硬件的支持，而基于寄存器的指令集架构则完全依赖硬件，<br>这意味基于寄存器的指令集架构执行效率更高，单可移植性差，而基于栈的指令集架构的移植性更高，但执行效率相对较慢，除此之外，相同的操作，基于栈的指令集往往需要更多的指令。</p><h1 id="第九章-类加载级执行子系统的案例及实战"><a href="#第九章-类加载级执行子系统的案例及实战" class="headerlink" title="第九章 类加载级执行子系统的案例及实战"></a>第九章 类加载级执行子系统的案例及实战</h1><p>本章主要介绍了类加载器和字节码的案例。</p><blockquote align="center">第四部分 程序编译与代码优化</blockquote><h1 id="第十章-早期（编译器）优化"><a href="#第十章-早期（编译器）优化" class="headerlink" title="第十章 早期（编译器）优化"></a>第十章 早期（编译器）优化</h1><h1 id="第十一章-晚期（运行器）优化"><a href="#第十一章-晚期（运行器）优化" class="headerlink" title="第十一章 晚期（运行器）优化"></a>第十一章 晚期（运行器）优化</h1><p>第四部分主要介绍了 Java 源程序从源代码编译成字节码和从字节码编译成本地机器码的过程，从 javac 字节码编译器到虚拟机内的 JIT 编译器执行过程合并起来其实就等同于一个传统编译器所执行的编译工程。</p><blockquote align="center">第五部分 高效并发</blockquote><h1 id="Java-内存模型与线程"><a href="#Java-内存模型与线程" class="headerlink" title="Java 内存模型与线程"></a>Java 内存模型与线程</h1><p>Java 虚拟机规范试图定义一种内存模型 （Java Memory Model，JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，实现 Java 程序在各种平台下都能达到一致的内存访问效果。</p><h2 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h2><p>Java 内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样底层细节。</p><p>此处的变量与 Java 编程时所说的变量不一样，指包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，后者是线程私有的，不会被共享。</p><p><img src="https://img.wshunli.com/Java/深入理解Java虚拟机/jvm_memory_thread2.png" alt="Java内存模型"></p><p>Java 内存模型中规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存（可以与前面将的处理器的高速缓存类比），线程的工作内存中保存了该线程使用到的变量到主内存副本拷贝，线程对变量的所有操作（读取、赋值）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程之间无法直接访问对方工作内存中的变量，线程间变量值的传递均需要在主内存来完成，线程、主内存和工作内存的交互关系如图所示。</p><p>(1) 内存间交互操作</p><p>一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，JMM 定义了一下八种操作来完成：</p><ul><li>lock（锁定）：作用域主内存的变量，它把一个变量标识为一条线程独占的状态。</li><li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存变量，它变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。</li></ul><p>如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行 read 和 load 操作，如果把变量从工作内存中同步回主内存中，就要按顺序地执行 store 和 write 操作。Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。也就是 read 和 load 之间，store 和 write 之间是可以插入其他指令的，如对主内存中的变量 a、b 进行访问时，可能的顺序是 read a，read b，load b， load a。</p><p>Java 内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：</p><ul><li>不允许 read 和 load、store 和 write 操作之一单独出现，如不允许从主内存读取了但工作内存不接受</li><li>不允许一个线程丢弃它的最近 assign 的操作，即变量在工作内存中改变了之后必须同步到主内存中。</li><li>不允许一个线程无原因地（没有发生过任何 assign 操作）把数据从工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施 use 和 store 操作之前，必须先执行过了 assign 和 load 操作。</li><li>一个变量在同一时刻只允许一条线程对其进行 lock 操作，lock 和 unlock 必须成对出现。</li><li>如果对一个变量执行 lock 操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行 load 或 assign 操作初始化变量的值</li><li>如果一个变量事先没有被 lock 操作锁定，则不允许对它执行 unlock 操作；也不允许去 unlock 一个被其他线程锁定的变量。</li><li>对一个变量执行 unlock 操作之前，必须先把此变量同步到主内存中（执行 store 和 write 操作）。</li></ul><p>深入理解JVM之高效并发 - 倔强的荔枝：<br><a href="http://wanglizhi.github.io/2016/07/16/JVM-JMM-And-Thread/" rel="external nofollow noopener noreferrer" target="_blank">http://wanglizhi.github.io/2016/07/16/JVM-JMM-And-Thread/</a></p><p>(2) 对于volatile型变量的特殊规则</p><p>使用 volatile 变量可以保证线程之间的可见性，再者禁止指令重排序优化。</p><p>由于 volatile 变量只能保证可见性，在 <strong>不符合</strong> 以下两条规则的运算场景中，我们仍然要通过加锁来保证原子性。</p><ul><li>运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值</li><li>变量不需要与其他状态变量共同参与不变约束</li></ul><p>(3) 对于long和double型变量的特殊规则</p><p>JVM 规范允许虚拟机将没有被 volatile 修饰的 64 位数据的读写操作划分为两次 32 位的操作来进行。</p><p>但是各种虚拟机实现几乎把 64 位数据的读写作为原子操作来对待。</p><p>(4) 原子性、可见性和有序性</p><p>原子性（Atomicity）：大致认为基本数据类型的访问读写是具备原子性的。JMM 提供 lock 和 unlock 保证原子性，对应代码中的 synchronized 关键字。</p><p>可见性（Visibility）：当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。volatile 保证新值能立即同步到主内存，以及每次使用前立即从主内存刷新。除了volatile外，synchronized 和 final 两个关键字也能实现可见性，其中同步块是有 lock 和 unloc k机制决定的，而 final 关键字一旦初始化完成，其他线程就能看见 final 字段的值。</p><p>有序性（Ordering）：如果在本线程内观察，所有的操作都是有序的；如果在一个线程内观察另一个线程，所有操作都是无序的。Java 提供了 volatile 和synchronized 关键字来保证线程之间操作的有序性。</p><p>(5) 先行发生原则</p><p>先行发生原则：如果操作 A 先发生于操作 B，操作 A 产生的影响能被操作 B 观察到，“影响”包括：修改了内存中共享变量的值、发送了消息、调用了方法。</p><ul><li>程序次序规则：写在程序签名的操作先行发生于书写在后面的操作</li><li>管程锁定规则：一个 unlock 操作先行发生于后面对 <strong>同一个锁</strong> 的 lock 操作</li><li>volatile变量规则：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作</li><li>线程启动规则：Thread 对象的 start 方法先行发生于此线程的每一个动作</li><li>线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测</li><li>线程中断规则：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生</li><li>对象终结规则：一个对象初始化完成先行发生于它的 finalize 方法的开始</li><li>传递性：如果操作 A 先于操作 B，操作 B 先行于操作 C，那么操作A先行发生于操作 C</li></ul><h2 id="Java-与线程"><a href="#Java-与线程" class="headerlink" title="Java 与线程"></a>Java 与线程</h2><p>（1）线程的实现</p><p>实现线程主要有三种方式：使用内核线程实现、使用用户线程实现和使用用户线程加轻量级混合线程实现。</p><p>（2）Java 线程调度</p><p>线程调剂是指系统为线程分配处理器使用权过程：协同式线程调度、抢占式线程调度。</p><p>协同式调度：线程的执行时间由线程本身来控制，线程把自己的工作执行完后，要主动通知系统切换到另一个线程上去。</p><p>抢占式调度：每个线程由系统来分配执行时间，线程切换不由线程本身来决定。Java 使用的就是抢占式调度。</p><p>Java 一种设置了 10 个级别的线程优先级，在两个线程同时处于 Ready 状态时，优先级越高的线程越容易被系统选择执行。但是并不是太靠谱，优先级可能会被系统自行改变。</p><p>（3）线程状态转换</p><p>Java 语言定义了六种线程状态。</p><ol><li><p>新建（New）：创建后尚未启动的线程处于这种状态。</p></li><li><p>运行（Runable）：包括了操作系统线程状态中的 Running 和 Ready，可能正在执行，也可能等待着CPU为它分配执行时间。</p></li><li><p>无限期等待（Waiting）：处于这种状态的线程不会被分配 CPU 执行时间，它们要等待被其他线程显式地唤醒。</p></li><li><p>限期等待（Timed Waiting）：处于这种状态也不会被分配 CPU 执行时间，在一定时间之后它们由系统自动唤醒。</p></li><li><p>阻塞（Blocked）：在等待获取一个排它锁，这个时间将在另外一个小城放弃这个锁的时候发生；在等待进入同步区域的时候。</p></li><li><p>结束（Terminated）：已终止线程的线程状态。</p></li></ol><p>深入理解Java虚拟机——高效并发 - CSDN博客：<br><a href="https://blog.csdn.net/hanxueyu666/article/details/53729491" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hanxueyu666/article/details/53729491</a></p><h1 id="第十三章-线程安全与锁优化"><a href="#第十三章-线程安全与锁优化" class="headerlink" title="第十三章 线程安全与锁优化"></a>第十三章 线程安全与锁优化</h1><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>当多个线程接见一个对象时，若不考虑这些线程在运行时环境下的调度和交替执行，也不须要进行额外的同步，或者调用方进行任何其他的协调操纵，调用这个对象的行动都可以获得正确的成果，那这个对象就是线程安全的。</p><p>线程安全强弱分成五类：</p><p>1、不可变：只要一个不可变的对象被正确地构建出来。</p><p>应用 final 关键字修饰的基本数据类型；若是共享数据是一个对象，那就须要保证对象的行动不会对其状况产生任何影响（String 类的对象）。</p><p>办法：把对象中带有状况的变量都申明为 final ，如 Integer 类。除 String 以外还有列举类型、Number 的部分子类（AtomicInteger 和 AtomicLong 除外）。</p><p>2、绝对线程安全：不管运行时环境如何，调用者都不需要任何额外的同步措施。大部分 Java API 都不是绝对的线程安全。</p><p>3、相对线程安全：它需要包成对这个对象单独的操作时线程安全的，对于一些特定的顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p><p>4、线程兼容：对象本身并不是线程安全的，需要经由过程调用规矩确地应用同步手段来保证对象在并发环境中安全地应用。</p><p>5、线程对立：不管调用端是否采取了同步措施，都无法在多线程环境中并发应用的代码。</p><p>如：Thread 类的 suspend() 和 resume() 方法，System.setIn（）、System.setOut（）、System.runFinalizersOnExit（）。</p><p><strong>线程安全的实现方法</strong>：</p><p>1、互斥同步</p><p>互斥同步（Mutual Exclusion &amp; Synchronization）是最常见的一种并发正确性保障手段，同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。而互斥是实现同步的一种手段，临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是主要的互斥实现方式。</p><p>2、非阻塞同步</p><p>互斥同步主要问题是进行现场阻塞和唤醒的性能问题，这种同步称为阻塞同步，另外它属于一种悲观的并发策略，总是认为不加锁肯定会出问题。随着硬件指令集的发展，我们有了另外一个选择：基于冲突检测的乐观并发策略，通俗讲就是先进行操作，没有冲突就成功，有冲突就进行补偿（如重试直到成功），这种乐观的并发策略成为非阻塞同步。</p><p>3、无同步方案</p><p>要保证线程安全，并不一定要进行同步，如果一个方法不涉及共享数据，那它就无须任何同步措施去保证正确性。</p><p><strong>可重入代码</strong>（Reentrant Code）：也叫做纯代码，可以在代码执行的任何时刻中断它，转而执行另一段代码，返回后不会出现任何错误。可重入代码有一些共同的特征：不依赖存储在堆上的数据和公用的系统资源、用到的状态都由参数传入、不调用非可重入的方法等。</p><p><strong>线程本地存储</strong>（Thread Local Storage）：把共享数据的可见范围限制在同一个线程内，无须同步，如：经典Web交互模型中的”一个请求对应一个服务器线程“的处理方式。java.lang.ThreadLocal 类来实现线程本地存储的功能，每个线程的 Thread 对象都有一个 ThreadLocalMap 对象，以 threadLocalHashCode 为键，以本地线程变量为值。</p><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><p>本部分介绍了一些锁优化的技术，如适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁等。</p><blockquote><p>本书也看完了，只是选择了比较重要的部分仔细阅读，其他的都是大概浏览一遍，后面有机会再读加深理解。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 虚拟机也是需要学习的一块内容 ，这次选择的书籍是 《深入理解Java虚拟机：JVM高级特性与最佳实践》。&lt;/p&gt;&lt;p&gt;Java 虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。 JVM 屏蔽了与具体操作系统平台相关的信息，使得 Java
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《深入理解Java虚拟机》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季中国银联实习生面试</title>
    <link href="https://www.wshunli.com/posts/60f1f107.html"/>
    <id>https://www.wshunli.com/posts/60f1f107.html</id>
    <published>2018-05-14T06:24:49.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（unionpay）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（unionpay）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春中国银联暑期实习生面试（系统与应用开发）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>我本将心向明月，奈何明月照沟渠</title>
    <link href="https://www.wshunli.com/posts/2739df62.html"/>
    <id>https://www.wshunli.com/posts/2739df62.html</id>
    <published>2018-05-08T06:06:23.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<p>我本将心向明月，奈何明月照沟渠，<br>落花有意随流水，流水无心恋落花。</p><p>简历初筛未通过，笔试机会都没有。</p><p>滴，好人卡。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我本将心向明月，奈何明月照沟渠，&lt;br&gt;落花有意随流水，流水无心恋落花。&lt;/p&gt;&lt;p&gt;简历初筛未通过，笔试机会都没有。&lt;/p&gt;&lt;p&gt;滴，好人卡。。&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《Java多线程编程核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/4e70966b.html"/>
    <id>https://www.wshunli.com/posts/4e70966b.html</id>
    <published>2018-05-05T14:47:09.000Z</published>
    <updated>2018-05-22T15:04:34.492Z</updated>
    
    <content type="html"><![CDATA[<p>前面面试什么的多线程部分问的比较多，需要加强下，这里记录总结 《Java多线程编程核心技术》 读书情况。</p><h1 id="第一章-Java-多线程技能"><a href="#第一章-Java-多线程技能" class="headerlink" title="第一章 Java 多线程技能"></a>第一章 Java 多线程技能</h1><p>本章主要介绍了线程概念、核心方法以及优先级。</p><p>1、进程和线程的区别</p><p><strong>进程</strong>是受操作系统管理的基本运行单元，是系统进行资源分配和调度的独立单位。<br><strong>线程</strong>是在进程中独立运行的子任务，CPU 在这些任务之间不停地切换，各子任务共享程序的内存空间。</p><p>线程和进程的区别是什么？ - 知乎：<br><a href="https://www.zhihu.com/question/25532384" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/25532384</a></p><p>2、线程的创建</p><p>（1）继承 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.html" rel="external nofollow noopener noreferrer" target="_blank">Thread</a> 类</p><p>（2）实现 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Runnable.html" rel="external nofollow noopener noreferrer" target="_blank">Runnable</a> 接口</p><p>其中 Thread 类实现了 Runable 接口，都需要重写里面 run 方法。</p><p>两种方式的区别：</p><p>实现 Runnable 的类更具有健壮性，避免了单继承的局限。<br>Runnable 更容易实现资源共享，能多个线程同时处理一个资源。</p><p>Java中 Thread和Runnable实现多线程的区别和联系 - CSDN博客:<br><a href="https://blog.csdn.net/oxuanboy1/article/details/51733279" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/oxuanboy1/article/details/51733279</a></p><p><strong>非线程安全</strong> 主要是指多个线程对同一对象中的同一变量实例进行操作时会出现值被修改、值不同步的现象。</p><p>3、线程的启动和停止</p><p>线程的启动可以使用 start() 或者 run() 方法，</p><p>调用 start() 方法，虚拟机会创建新的线程运行 run 方法；<br>调用 run() 方法后，会在调用的线程执行，不会创建新的线程。</p><p>线程的终止方法有三种：</p><p>（1）使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。<br>（2）使用 stop() 方法强行终止线程（这个方法不推荐使用，因为 stop() 和 suspend()、resume() 一样，也可能发生不可预料的结果）。<br>（3）使用 interrupt() 方法中断线程。</p><p>下面介绍了 interrupt() 方法停止线程，调用该方法知识在当前线程中打了一个停止的标记，并不是真的停止线程。</p><p>如何判断线程的状态是不是停止的：</p><p>（1）this.interrupted() 测试 <strong>当前线程</strong> 是否已经中断，会将状态标志置清为 false 。</p><pre><code class="Java">public static boolean interrupted() {}</code></pre><p>（2）this.isInterrupted() 测试线程是否已经中断，不清除状态标志。</p><pre><code class="Java">public boolean isInterrupted() {}</code></pre><p>Java并发（基础知识）—— 创建、运行以及停止一个线程 - Tim-Tom - 博客园：<br><a href="https://www.cnblogs.com/timlearn/p/4007982.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/timlearn/p/4007982.html</a></p><p>其他方法 stop()、suspend()、resume() 不推荐使用。</p><p>4、线程的主要方法</p><p>Thread.currentThread() 返回代码段正在被哪个线程调用的信息。</p><p>isAlive() 判断当前线程是否处于活动状态，即线程已经启动但尚未终止。</p><pre><code class="Java">package com.wshunli.thread;public class CountOperate extends Thread{    public CountOperate(){        System.out.println(&quot;CountOperate---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName()=&quot; + Thread.currentThread().getName());//获取线程名        System.out.println(&quot;Thread.currentThread().isAlive()=&quot; + Thread.currentThread().isAlive()); //查看线程是否存活        System.out.println(&quot;this.getName=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;CountOperate---end &quot;);        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));    }    @Override    public void run() {        System.out.println(&quot;run---begin&quot;);        System.out.println(&quot;Thread.currentThread().getName=&quot; + Thread.currentThread().getName());        System.out.println(&quot;Thread.currentThread().isAlive()&quot; + Thread.currentThread().isAlive());        System.out.println(&quot;Thread.currentThread()==this :&quot;+ (Thread.currentThread() == this));        System.out.println(&quot;this.getName()=&quot; + this.getName());        System.out.println(&quot;this.isAlive()=&quot; + this.isAlive());        System.out.println(&quot;run --- end&quot;);    }}package com.wshunli.thread;public class Main {    public static void main(String[] args) {        CountOperate c = new CountOperate();//        c.start();        Thread t1 = new Thread(c);        System.out.println(&quot;main begin t1 isAlive=&quot; + t1.isAlive());        t1.setName(&quot;A&quot;);        t1.start();        System.out.println(&quot;main end t1 isAlive=&quot; + t1.isAlive());    }}/* * CountOperate---begin * Thread.currentThread().getName()=main * Thread.currentThread().isAlive()=true * this.getName=Thread-0 * this.isAlive()=false * CountOperate---end * Thread.currentThread()==this :false * main begin t1 isAlive=false * main end t1 isAlive=true * run---begin * Thread.currentThread().getName=A * Thread.currentThread().isAlive()true * Thread.currentThread()==this :false * this.getName()=Thread-0 * this.isAlive()=false * run --- end */</code></pre><p>Thread.sleep() 方法是在指定的毫秒数内让“当前正在执行的线程”休眠（暂停执行）。</p><p>yield() 放弃当前 CPU 资源，将它让给其他任务占用 CPU 时间。</p><p>5、线程的优先级</p><p>在 Java 中线程的优先级分为 1 ~ 10 这 10 个等级，可以使用 setPriority​(int newPriority) 方法设置。</p><p>优先级较高的线程得到的 CPU 资源较多，CPU 会尽量优先执行，并不一定先执行完。</p><p>线程的优先级具有继承性。</p><p>6、守护线程</p><p>在 java 中线程有两种：用户线程、守护线程。</p><p>守护线程的作用是为其他线程提供便利服务，当进程中不存在非守护线程了，守护线程会自动销毁。</p><p>守护线程最典型的应用就是 GC （垃圾回收器）。</p><h1 id="第二章-对象及变量的并发访问"><a href="#第二章-对象及变量的并发访问" class="headerlink" title="第二章 对象及变量的并发访问"></a>第二章 对象及变量的并发访问</h1><h2 id="synchronized-同步方法"><a href="#synchronized-同步方法" class="headerlink" title="synchronized 同步方法"></a>synchronized 同步方法</h2><p>（1）方法内的变量线程安全，而 <strong>实例变量</strong> 非线程安全。</p><p>（2）多个对象多个锁</p><p>关键字 synchronized 取得的锁都是对象锁，而不是把方法或者代码段当作锁。</p><pre><code class="Java">class HasSelfPrivateNum {    public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class ThreadA extends Thread {    private HasSelfPrivateNum numRef;    public ThreadA(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;a&quot;);    }}class ThreadB extends Thread {    private HasSelfPrivateNum numRef;    public ThreadB(HasSelfPrivateNum numRef) {        super();        this.numRef = numRef;    }    @Override    public void run() {        super.run();        numRef.addI(&quot;b&quot;);    }}class Main {    public static void main(String[] args) {        HasSelfPrivateNum numRef = new HasSelfPrivateNum();        ThreadA athread = new ThreadA(numRef);        athread.start();        ThreadB bthread = new ThreadB(numRef);        bthread.start();    }}/* * a set over! * b set over! * b num=200 * a num=100 */</code></pre><p>对于多个对象实例，会有多个对象锁，所以还是异步的、互不影响。</p><p>（3）synchronized 方法与对象锁</p><p>调用 synchronized 声明的方法是排队同步执行的。</p><p>把 HasSelfPrivateNum 类的 addI() 方法添加 synchronized 关键字，输出就变为：</p><pre><code class="java">class HasSelfPrivateNum {    synchronized public void addI(String username) {        try {            int num = 0;            if (username.equals(&quot;a&quot;)) {                num = 100;                System.out.println(&quot;a set over!&quot;);                Thread.sleep(2000);            } else {                num = 200;                System.out.println(&quot;b set over!&quot;);            }            System.out.println(username + &quot; num=&quot; + num);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * a set over! * a num=100 * b set over! * b num=200 */</code></pre><p>上面多个线程调用同一方法，下面再看调用 <strong>不同方法</strong> 的情况。</p><pre><code class="java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyObject object;    public ThreadA(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodA();    }}class ThreadB extends Thread {    private MyObject object;    public ThreadB(MyObject object) {        super();        this.object = object;    }    @Override    public void run() {        super.run();        object.methodB();    }}public class Main {    public static void main(String[] args) {        MyObject object = new MyObject();        ThreadA a = new ThreadA(object);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(object);        b.setName(&quot;B&quot;);        a.start();        b.start();    }}/* * begin methodA threadName=A * end endTime=1526043906998 * begin methodB threadName=B begin time=1526043906998 * end */</code></pre><p>修改下 methodB() 方法，去除 synchronized 关键字。</p><pre><code class="Java">class MyObject {    synchronized public void methodA() {        try {            System.out.println(&quot;begin methodA threadName=&quot;                    + Thread.currentThread().getName());            Thread.sleep(5000);            System.out.println(&quot;end endTime=&quot; + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void methodB() {        try {            System.out.println(&quot;begin methodB threadName=&quot;                    + Thread.currentThread().getName() + &quot; begin time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;end&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * begin methodA threadName=A * begin methodB threadName=B begin time=1526044084533 * end * end endTime=1526044089534 */</code></pre><p>由此可见：</p><p>A 线程先持有 object 对象锁，B 线程可以以异步方式调用 object 对象中的 <strong>非 synchronized 类型</strong> 的方法。<br>A 线程先持有 object 对象锁，B 线程如果在这时调用 object 对中的 <strong>synchronized 类型</strong> 的方法则需等待，也就是同步。</p><p>（4）脏读</p><p>脏读（dirtyRead）即赋值时进行了同步，但在取值时已经被其他线程修改过了。</p><p>跟上例类似，在方法上加 synchronized 关键字可以解决脏读问题。</p><p>（5）synchronized 锁重入</p><p>synchronized 具有锁重入功能，也就说当一个线程获得对象锁之后，再次请求此对象锁可以再次得到该对象的锁。</p><pre><code class="Java">public class Service {    synchronized public void service1() {        System.out.println(&quot;service1&quot;);        service2();    }    synchronized public void service2() {        System.out.println(&quot;service2&quot;);        service3();    }    synchronized public void service3() {        System.out.println(&quot;service3&quot;);    }}</code></pre><p>可重入锁的概念：自己可以再次获取自己的内部锁。假如说不可锁重入的话，线程一直等待释放对象锁，而对象锁自己拥有，就会造成死锁。</p><p><strong>可重入锁</strong> 也支持在父子类继承的环境中，即子类可以通过重入锁调用父类的同步方法。</p><p>（6）当线程执行的代码出现异常时，其所持有的锁会自动释放。</p><p>（7）同步不可以继承。</p><pre><code class="Java">class Super {    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int main 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int main 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class Sub extends Super {    @Override    public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class MyThreadA extends Thread {    private Sub sub;    public MyThreadA(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}class MyThreadB extends Thread {    private Sub sub;    public MyThreadB(Sub sub) {        super();        this.sub = sub;    }    @Override    public void run() {        sub.serviceMethod();    }}public class Main {    public static void main(String[] args) {        Sub subRef = new Sub();        MyThreadA a = new MyThreadA(subRef);        a.setName(&quot;A&quot;);        a.start();        MyThreadB b = new MyThreadB(subRef);        b.setName(&quot;B&quot;);        b.start();    }}/* * int sub 下一步 sleep begin threadName=A time=1526046246540 * int sub 下一步 sleep begin threadName=B time=1526046246540 * int sub 下一步 sleep   end threadName=A time=1526046251541 * int sub 下一步 sleep   end threadName=B time=1526046251541 * int main 下一步 sleep begin threadName=A time=1526046251541 * int main 下一步 sleep   end threadName=A time=1526046256541 * int main 下一步 sleep begin threadName=B time=1526046256541 * int main 下一步 sleep   end threadName=B time=1526046261542 */</code></pre><p>子类方法添加 synchronized 关键字。</p><pre><code class="Java">class Sub extends Super {    @Override    synchronized public void serviceMethod() {        try {            System.out.println(&quot;int sub 下一步 sleep begin threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            Thread.sleep(5000);            System.out.println(&quot;int sub 下一步 sleep   end threadName=&quot;                    + Thread.currentThread().getName() + &quot; time=&quot;                    + System.currentTimeMillis());            super.serviceMethod();        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}/* * int sub 下一步 sleep begin threadName=A time=1526046197787 * int sub 下一步 sleep   end threadName=A time=1526046202787 * int main 下一步 sleep begin threadName=A time=1526046202787 * int main 下一步 sleep   end threadName=A time=1526046207788 * int sub 下一步 sleep begin threadName=B time=1526046207788 * int sub 下一步 sleep   end threadName=B time=1526046212789 * int main 下一步 sleep begin threadName=B time=1526046212789 * int main 下一步 sleep   end threadName=B time=1526046217790 */</code></pre><p>由此可见：重写父类的同步方法并不能同步，还是要加 synchronized 关键字才行。</p><h2 id="synchronized-同步语句块"><a href="#synchronized-同步语句块" class="headerlink" title="synchronized 同步语句块"></a>synchronized 同步语句块</h2><p>（1）synchronized 同步语句块的使用</p><p>当两个线程同时访问同一对象 object 中的 synchronized (this) 同步代码块时，一段时间内只能有一个线程被执行，另一个线程要等这个线程执行完以后才能执行。</p><p>（2）用同步代码块解决同步方法的弊端</p><p>同步方法的弊端是有时候执行时间会比较长。</p><pre><code class="Java">// 使用同步方法public class Task {    private String getData1;    private String getData2;    public synchronized void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            getData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            getData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}// 使用同步代码块public class Task {    private String getData1;    private String getData2;    public void doLongTimeTask() {        try {            System.out.println(&quot;begin task&quot;);            Thread.sleep(3000);            String privateGetData1 = &quot;长时间处理任务后从远程返回的值1 threadName=&quot;                    + Thread.currentThread().getName();            String privateGetData2 = &quot;长时间处理任务后从远程返回的值2 threadName=&quot;                    + Thread.currentThread().getName();            synchronized (this) {                getData1 = privateGetData1;                getData2 = privateGetData2;            }            System.out.println(getData1);            System.out.println(getData2);            System.out.println(&quot;end task&quot;);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>其实也就是在耗时部分是异步执行的，从而缩短了代码的执行时长。</p><p>当一个线程访问 同步代码块 时，另一个线程仍然可以访问该对象的非同步代码块。即在 synchronized 块中就是同步执行，不在 synchronized 块中时异步执行。</p><p>（3）synchronized 代码块之间的同步性</p><p>在使用 synchronized (this) 代码块时，当线程访问 object 的一个 synchronized (this) 代码块时，其他线程对同一 object 中所有 synchronized (this) 同步代码块的访问将阻塞。</p><p>和 synchronized 方法一样，synchronized (this) 代码块也是锁定 <strong>当前对象</strong> 的。其他对象访问同一 object 中的 synchronized 方法也会阻塞。</p><p>（4）将任意对象作为对象监视器</p><p>多个线程调用同一个对象中的不同名称的 synchronized 同步方法或 synchronized(this) 同步代码块时，调用的效果就是按顺序执行，也就是 <strong>同步的，阻塞的</strong> 。</p><p>这说明 synchronized 同步方法或 synchronized(this) 同步代码块分别有 <strong>两种作用</strong> ：</p><ul><li>synchronized 同步 <strong>方法</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized 同步方法中的代码。</li></ul></li><li>synchronized(this) 同步 <strong>代码块</strong><ul><li>对其他 synchronized 同步方法或 synchronized(this) 同步代码块呈阻塞状态。</li><li>同一时间只有一个线程可以执行 synchronized(this) 同步代码块中的代码。</li></ul></li></ul><p>类似，对于 synchronized(非this对象) 同步代码块：</p><p>当多个线程持有 “对象监视器” 为同一个对象的前提下，同一时间只有一个线程可以执行 synchronized(非this对象x) 同步代码块中的代码。</p><pre><code class="java">public class Service {    private String usernameParam;    private String passwordParam;    public void setUsernamePassword(String username, String password) {        try {            String anyString = new String();            synchronized (anyString) {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入同步块&quot;);                usernameParam = username;                Thread.sleep(3000);                passwordParam = password;                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开同步块&quot;);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}</code></pre><p>而多个线程持有的 “对象监视器” 不是同一对象时，还是异步执行的。</p><pre><code class="Java">public class Service {    private String anyString = new String();    public void a() {        try {            synchronized (anyString) {                System.out.println(&quot;a begin&quot;);                Thread.sleep(3000);                System.out.println(&quot;a   end&quot;);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public void b() {        System.out.println(&quot;b begin&quot;);        System.out.println(&quot;b   end&quot;);    }}</code></pre><p>站在多个线程角度，多个线程调用同一方法先后顺序是随机的，只是对于单个线程而言，在同步方法/代码块内部是同步的。</p><p>（5）静态 synchronized 方法与 synchronized(class) 代码块</p><p>对于静态的 synchronized 方法，是对当前 Class 类进行封锁。<br>对于非静态 synchronized 方法，是对当前 对象 的封锁。</p><p>二者是不同的锁，但是 Class 锁可以对所有对象实例起作用。</p><pre><code class="Java">package com.wshunli.thread.sync5;class Service {    synchronized public static void printA() {        try {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);            Thread.sleep(3000);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public static void printB() {        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;进入printB&quot;);        System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName() + &quot;在&quot;                + System.currentTimeMillis() + &quot;离开printB&quot;);    }}class ThreadA extends Thread {    private Service service;    public ThreadA(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printA();    }}class ThreadB extends Thread {    private Service service;    public ThreadB(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.printB();    }}public class Main {    public static void main(String[] args) {        Service service1 = new Service();        Service service2 = new Service();        ThreadA a = new ThreadA(service1);        a.setName(&quot;A&quot;);        a.start();        ThreadB b = new ThreadB(service2);        b.setName(&quot;B&quot;);        b.start();    }}/* * 线程名称为：A在1526136864655进入printA * 线程名称为：A在1526136867656离开printA * 线程名称为：B在1526136867656进入printB * 线程名称为：B在1526136867656离开printB */</code></pre><p>同步 synchronized(class) 代码块的作用其实和 synchronized static 方法的作用一样。</p><pre><code class="Java">class Service {    public static void printA() {        synchronized (Service.class) {            try {                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printA&quot;);                Thread.sleep(3000);                System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                        + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printA&quot;);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public static void printB() {        synchronized (Service.class) {            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;进入printB&quot;);            System.out.println(&quot;线程名称为：&quot; + Thread.currentThread().getName()                    + &quot;在&quot; + System.currentTimeMillis() + &quot;离开printB&quot;);        }    }}/* * 线程名称为：A在1526137124491进入printA * 线程名称为：A在1526137127492离开printA * 线程名称为：B在1526137127492进入printB * 线程名称为：B在1526137127492离开printB */</code></pre><p>（6）数据类型 String 的常量池特性</p><p>对于 synchronized(<strong>string</strong>) 同步块，string 值为相同 String 常量时，两个线程持有相同的锁。</p><p>所以在大多数情况下，synchronized 代码块不使用 String 作为锁对象。</p><p>（7）多线程的死锁</p><p>不同的线程都在等待根本不可能释放的锁，从而导致所有任务都无法继续完成。</p><p>线程互相持有对方的锁，然后等待对方释放锁就有可能出现死锁。</p><p>（8）内置类与静态内置类</p><p>对于内置类中有两个同步方法，只要是使用不同的锁，多线程还是异步的。</p><p>对于两个内置类 class1 class2 ，class1 中使用 synchronized(<strong>class2</strong>) 同步代码块时，其他线程只能以同步方式调用 class2 中的 synchronized 同步方法</p><p>（9）锁对象的改变</p><p>再将任何数据作为同步锁时，只需判断多线程是否同时持有相同的锁对象即可。</p><pre><code class="Java">class MyService {    private String lock = &quot;123&quot;;    public void testMethod() {        try {            synchronized (lock) {                System.out.println(Thread.currentThread().getName() + &quot; begin &quot;                        + System.currentTimeMillis());                lock = &quot;456&quot;;                Thread.sleep(2000);                System.out.println(Thread.currentThread().getName() + &quot;   end &quot;                        + System.currentTimeMillis());            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadA extends Thread {    private MyService service;    public ThreadA(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.testMethod();    }}class ThreadB extends Thread {    private MyService service;    public ThreadB(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.testMethod();    }}public class Main {    public static void main(String[] args) throws InterruptedException {        MyService service = new MyService();        ThreadA a = new ThreadA(service);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(service);        b.setName(&quot;B&quot;);        a.start();        Thread.sleep(50);        b.start();    }}/* * A begin 1526217990101 * B begin 1526217990151 * A   end 1526217992101 * B   end 1526217992151 */</code></pre><p>运行到线程 B 时，对象锁已经改变，所以是异步。</p><p>但是对于对象而言，只是改变对象的属性时不行的，运行结果还是同步的。</p><h2 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h2><p>关键字 volatile 的主要作用是使变量在多个线程间可见。</p><p>（1）关键字 volatile 与死循环</p><pre><code class="Java">class PrintString {    private boolean isContinuePrint = true;    public boolean isContinuePrint() {        return isContinuePrint;    }    public void setContinuePrint(boolean isContinuePrint) {        this.isContinuePrint = isContinuePrint;    }    public void printStringMethod() {        try {            while (isContinuePrint == true) {                System.out.println(&quot;run printStringMethod threadName=&quot;                        + Thread.currentThread().getName());                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        PrintString printStringService = new PrintString();        printStringService.printStringMethod();        System.out.println(&quot;我要停止它！ stopThread=&quot;                + Thread.currentThread().getName());        printStringService.setContinuePrint(false);    }}</code></pre><p>这个程序停不下来，主要原因是 main 线程一直在处理 while() 循环，导致程序不能继续执行。</p><p>我们可以使用多线程技术解决这个问题，在子线程中执行 while() 循环，这样主线程就能继续执行了。</p><pre><code class="Java">class PrintString implements Runnable {    private boolean isContinuePrint = true;    public boolean isContinuePrint() {        return isContinuePrint;    }    public void setContinuePrint(boolean isContinuePrint) {        this.isContinuePrint = isContinuePrint;    }    public void printStringMethod() {        try {            while (isContinuePrint == true) {                System.out.println(&quot;run printStringMethod threadName=&quot;                        + Thread.currentThread().getName());                Thread.sleep(1000);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    @Override    public void run() {        printStringMethod();    }}public class Run {    public static void main(String[] args) {        PrintString printStringService = new PrintString();        new Thread(printStringService).start();        System.out.println(&quot;我要停止它！ stopThread=&quot;                + Thread.currentThread().getName());        printStringService.setContinuePrint(false);    }}</code></pre><p>但是这种在 <code>-server</code> 服务器模式下，还是会出现死循环。<br>主要是因为在服务器模式下，为了提高线程运行的效率，线程一致在私有堆栈中取得 <code>isContinuePrint</code> 的值为 true 。</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/内存结构.png" alt="内存结构"></p><p>volatile 关键字增加了实例变量在多个线程之间的可见性，但不支持原子性。</p><p>也就是说同步私有堆栈中的值和公共堆栈中的值，强制从公共堆栈中进行取值，或者强制将值写入公共堆栈。</p><p><strong>synchronized 和 volatile 的比较</strong>：</p><p>1、关键字 volatile 是线程同步的轻量级实现，所以 volatile 性能肯定比 synchronized 要好，并且 volatile 只能修饰变量，而 synchronized 可以修饰方法和代码块。目前在开发中使用 synchronized 关键字的比率还是比较大的。<br>2、多线程访问 volatile 不会发生阻塞，而 synchronized 会出现阻塞。<br>3、volatile 能保证数据的可见性，但是不能保证原子性；而 synchronized 可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公有内存中的数据同步。<br>4、volatile 关键字是解决变量在多个线程之间的可见性；而 synchronized 关键字是解决多个线程之间访问资源同步性的。</p><p>所谓的线程安全包含 <strong>原子性和可见性</strong> 两个方面，Java 的同步机制都是围绕这两个方面量保证线程安全的。</p><p>volatile和synchronized的区别 - CSDN博客:<br><a href="https://blog.csdn.net/suifeng3051/article/details/52611233" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/suifeng3051/article/details/52611233</a></p><p>（2）volatile 关键字的非原子性</p><p>（3）原子类</p><p>原子操作是不可分割的整体，没有其他线程能够中断或检查正在原子操作中的变量。</p><pre><code class="Java">import java.util.concurrent.atomic.AtomicInteger;public class AddCountThread extends Thread {    private AtomicInteger count = new AtomicInteger(0);    @Override    public void run() {        for (int i = 0; i &lt; 10000; i++) {            System.out.println(count.incrementAndGet());        }    }}</code></pre><p>一个原子（atomic）类型就是一个原子操作可用的类型，它可以在没有锁的情况下做到线程安全（thread-safe）。</p><p>注意方法之间的调用不是原子操作。</p><p>（4）synchronized 代码块具有 volatile 同步功能。</p><p>关键字 synchronized 可以使多个线程访问统一资源具有同步性，而且它还具有将线程内存中的私有变量与公共内存中的变量同步的功能。</p><h1 id="第三章-线程间通信"><a href="#第三章-线程间通信" class="headerlink" title="第三章 线程间通信"></a>第三章 线程间通信</h1><p>进程间通信使系统之间的交互性更强大，在大大提高 CPU 利用率的同时，还可以对个线程任务在处理的过程中进行有效的把控和监督。</p><h2 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h2><p>（1）使用 wait/notify 实现进程间通信</p><p>java中等待通知机制（wait/notify） - CSDN博客：<br><a href="https://blog.csdn.net/joenqc/article/details/54981532" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/joenqc/article/details/54981532</a></p><p>wait() 和 notify() 需要在同步方法或者同步代码块中调用。</p><p>wait() 会使线程停止运行，而 notify() 使停止的线程继续运行。</p><pre><code class="Java">import java.util.ArrayList;import java.util.List;class MyList {    private static List list = new ArrayList();    public static void add() {        list.add(&quot;anyString&quot;);    }    public static int size() {        return list.size();    }}class ThreadA extends Thread {    private Object lock;    public ThreadA(Object lock) {        super();        this.lock = lock;    }    @Override    public void run() {        try {            synchronized (lock) {                if (MyList.size() != 5) {                    System.out.println(&quot;wait begin &quot;                            + System.currentTimeMillis());                    lock.wait();                    System.out.println(&quot;wait end  &quot;                            + System.currentTimeMillis());                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadB extends Thread {    private Object lock;    public ThreadB(Object lock) {        super();        this.lock = lock;    }    @Override    public void run() {        try {            synchronized (lock) {                for (int i = 0; i &lt; 10; i++) {                    MyList.add();                    if (MyList.size() == 5) {                        lock.notify();                        System.out.println(&quot;已发出通知！&quot;);                    }                    System.out.println(&quot;添加了&quot; + (i + 1) + &quot;个元素!&quot;);                    Thread.sleep(1000);                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}public class Main {    public static void main(String[] args){        try {            Object lock = new Object();            ThreadA a = new ThreadA(lock);            a.start();            Thread.sleep(50);            ThreadB b = new ThreadB(lock);            b.start();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * wait begin 1526377675223 * 添加了1个元素! * 添加了2个元素! * 添加了3个元素! * 添加了4个元素! * 已发出通知！ * 添加了5个元素! * 添加了6个元素! * 添加了7个元素! * 添加了8个元素! * 添加了9个元素! * 添加了10个元素! * wait end  1526377685276 */</code></pre><p>方法 wait() 被执行后，锁会自动释放；执行完 notify() 方法后，锁不会自动释放，只有同步方法或者代码块执行完后才会释放。</p><p>（2）Thread 中关于线程状态的 API</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/线程状态切换.png" alt="线程状态切换"></p><p>Java 线程一共有 6 个状态，分别是新建（New），RUNNABLE [ 就绪（Ready to run）、运行中（Running）]，睡眠（Sleeping），阻塞（Blocked），等待（Waiting），死亡（Dead/Terminate）。</p><p>java线程状态切换 - 简书：<br><a href="https://www.jianshu.com/p/531310753a64" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/531310753a64</a></p><p>每个锁对象都有两个队列：就绪队列、阻塞队列。就绪队列存储了将要获得锁的线程，阻塞队列存储了被阻塞的线程。</p><p>当一个线程被唤醒 (notify) 后，才会进入到就绪队列，等待 CPU 的调度，反之，当一个线程被等待 (wait) 后，就会进入阻塞队列，等待下一次被唤醒。</p><p>（3）wait() 方法的使用</p><p>wait() 方法会使线程进入等待状态。</p><p>wait(long) 方法是线程等待一段时间内是否被唤醒，超时则自动唤醒。</p><p>当线程在 wait() 状态时，调用线程的 interrupt() 方法会出现 InterruptedException 异常。</p><p>在以下情况下，持有锁的线程会释放锁：<br>1、执行完同步代码块。<br>2、在执行同步代码块的过程中，遇到异常而导致线程终止。<br>3、在执行同步代码块的过程中，执行了锁所属对象的 wait() 方法，这个线程会释放锁，进行对象的等待池。</p><p>（4）通知一个线程和唤醒所有线程</p><p>notify() 仅 <strong>随机</strong> 唤醒一个线程，多次调用也会随机将等待 wait 状态的线程进行唤醒。</p><p>notifyAll() 方法可以唤醒所有线程。</p><p>但是通知 notify() 方法在 wait() 方法之前调用，后面 wait 线程收不到通知就会一直处于等待状态。</p><p>注意线程在等待结束后其外部条件数据值可能发生改变。</p><p>（5）生产者/消费者模式</p><p>1、一生产者一消费者:</p><pre><code class="Java">class MyStack {    private List list = new ArrayList();    synchronized public void push() {        try {            if (list.size() == 1) {                this.wait();            }            list.add(&quot;anyString=&quot; + Math.random());            this.notify();            System.out.println(&quot;push=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public String pop() {        String returnValue = &quot;&quot;;        try {            if (list.size() == 0) {                System.out.println(&quot;pop操作中的：&quot;                        + Thread.currentThread().getName() + &quot; 线程呈wait状态&quot;);                this.wait();            }            returnValue = &quot;&quot; + list.get(0);            list.remove(0);            this.notify();            System.out.println(&quot;pop=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }        return returnValue;    }}class P {    private MyStack myStack;    public P(MyStack myStack) {        super();        this.myStack = myStack;    }    public void pushService() {        myStack.push();    }}class C {    private MyStack myStack;    public C(MyStack myStack) {        super();        this.myStack = myStack;    }    public void popService() {        System.out.println(&quot;pop=&quot; + myStack.pop());    }}class P_Thread extends Thread {    private P p;    public P_Thread(P p) {        super();        this.p = p;    }    @Override    public void run() {        while (true) {            p.pushService();        }    }}class C_Thread extends Thread {    private C r;    public C_Thread(C r) {        super();        this.r = r;    }    @Override    public void run() {        while (true) {            r.popService();        }    }}public class Main {    public static void main(String[] args) {        MyStack myStack = new MyStack();        P p = new P(myStack);        C r = new C(myStack);        P_Thread pThread = new P_Thread(p);        C_Thread rThread = new C_Thread(r);        pThread.start();        rThread.start();    }}</code></pre><p>2、一生产者多消费者：</p><pre><code class="Java">class MyStack {    private List list = new ArrayList();    synchronized public void push() {        try {            while (list.size() == 1) {                this.wait();            }            list.add(&quot;anyString=&quot; + Math.random());            this.notify();            System.out.println(&quot;push=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }    }    synchronized public String pop() {        String returnValue = &quot;&quot;;        try {            while (list.size() == 0) {                System.out.println(&quot;pop操作中的：&quot;                        + Thread.currentThread().getName() + &quot; 线程呈wait状态&quot;);                this.wait();            }            returnValue = &quot;&quot; + list.get(0);            list.remove(0);            this.notify();            System.out.println(&quot;pop=&quot; + list.size());        } catch (InterruptedException e) {            e.printStackTrace();        }        return returnValue;    }}</code></pre><p>3、多生产者一消费者。</p><p>4、多生产者多消费者。</p><p>可能产生假死的情况，使用 notifyAll() 方法通知其他线程即可。</p><p>（6）通过管道进行进程间通信</p><p>在 Java 语言中提供了各种各样的输入/输出流，其中管道流 pipeStream 可用于不同线程间之间传送数据。</p><p>一个线程发送数据到输出管道，另一个线程从输入管道中读取数据。</p><pre><code class="Java">class WriteData {    public void writeMethod(PipedOutputStream out) {        try {            System.out.println(&quot;write :&quot;);            for (int i = 0; i &lt; 300; i++) {                String outData = &quot;&quot; + (i + 1);                out.write(outData.getBytes());                System.out.print(outData);            }            System.out.println();            out.close();        } catch (IOException e) {            e.printStackTrace();        }    }}class ReadData {    public void readMethod(PipedInputStream input) {        try {            System.out.println(&quot;read  :&quot;);            byte[] byteArray = new byte[20]; // 字节流            // char[] byteArray = new char[20]; //字符流            int readLength = input.read(byteArray);            while (readLength != -1) {                String newData = new String(byteArray, 0, readLength);                System.out.print(newData);                readLength = input.read(byteArray);            }            System.out.println();            input.close();        } catch (IOException e) {            e.printStackTrace();        }    }}class ThreadWrite extends Thread {    private WriteData write;    private PipedOutputStream out;    public ThreadWrite(WriteData write, PipedOutputStream out) {        super();        this.write = write;        this.out = out;    }    @Override    public void run() {        write.writeMethod(out);    }}class ThreadRead extends Thread {    private ReadData read;    private PipedInputStream input;    public ThreadRead(ReadData read, PipedInputStream input) {        super();        this.read = read;        this.input = input;    }    @Override    public void run() {        read.readMethod(input);    }}public class Main {    public static void main(String[] args) {        try {            WriteData writeData = new WriteData();            ReadData readData = new ReadData();            PipedInputStream inputStream = new PipedInputStream();            PipedOutputStream outputStream = new PipedOutputStream();            // inputStream.connect(outputStream);            outputStream.connect(inputStream);            ThreadRead threadRead = new ThreadRead(readData, inputStream);            threadRead.start();            Thread.sleep(2000);            ThreadWrite threadWrite = new ThreadWrite(writeData, outputStream);            threadWrite.start();        } catch (IOException e) {            e.printStackTrace();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><p>通过管道进行进程间通信可以传递，字节流和字符流。</p><h2 id="方法-join-的使用"><a href="#方法-join-的使用" class="headerlink" title="方法 join 的使用"></a>方法 join 的使用</h2><p>join() 方法具有使线程排队运行的作用，使所属线程 x 正常执行 run() 方法，而使当前线程 z 进行无限期阻塞，等待线程 x 销毁后继续执行线程 z 后面的代码。</p><pre><code class="Java">class MyThread extends Thread {    @Override    public void run() {        try {            int secondValue = (int) (Math.random() * 10000);            System.out.println(secondValue);            Thread.sleep(secondValue);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Test {    public static void main(String[] args) {        try {            MyThread threadTest = new MyThread();            threadTest.start();            threadTest.join();            System.out.println(&quot;我想当threadTest对象执行完毕后我再执行，我做到了&quot;);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><p>join 方法有点类似与同步的效果。</p><p>但是 join() 方法内部是由 wait() 方法进行等待，而 sychronized 关键字是使用 <strong>对象监视器</strong> 原理作为同步。</p><p>在 join 过程中，如果当前线程对象被终端，则当前线程出现异常，而 join 的线程正常执行。</p><p>方法 join(long) 中参数是设定等待时间。</p><p>long 是最长的等待时间，如果子线程提前结束，主线程也会结束等待。</p><pre><code class="Java">public final synchronized void join(long millis)throws InterruptedException {    long base = System.currentTimeMillis();    long now = 0;    if (millis &lt; 0) {        throw new IllegalArgumentException(&quot;timeout value is negative&quot;);    }    if (millis == 0) {        while (isAlive()) {            wait(0);        }    } else {        while (isAlive()) {            long delay = millis - now;            if (delay &lt;= 0) {                break;            }            wait(delay);            now = System.currentTimeMillis() - base;        }    }}</code></pre><p>方法 join() 内部由 wait() 方法实现会立即释放对象锁，而 Thread.sleep() 方法不会释放对象锁。</p><h2 id="类-ThreadLocal-的使用"><a href="#类-ThreadLocal-的使用" class="headerlink" title="类 ThreadLocal 的使用"></a>类 ThreadLocal 的使用</h2><p>类 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/ThreadLocal.html" rel="external nofollow noopener noreferrer" target="_blank">ThreadLocal</a> 是保证线程之间变量的隔离性。</p><pre><code class="Java">class Tools {    public static ThreadLocal tl = new ThreadLocal();}class ThreadA extends Thread {    @Override    public void run() {        try {            for (int i = 0; i &lt; 100; i++) {                if (Tools.tl.get() == null) {                    Tools.tl.set(&quot;ThreadA&quot; + (i + 1));                } else {                    System.out.println(&quot;ThreadA get Value=&quot; + Tools.tl.get());                }                Thread.sleep(200);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}class ThreadB extends Thread {    @Override    public void run() {        try {            for (int i = 0; i &lt; 100; i++) {                if (Tools.tl.get() == null) {                    Tools.tl.set(&quot;ThreadB&quot; + (i + 1));                } else {                    System.out.println(&quot;ThreadB get Value=&quot; + Tools.tl.get());                }                Thread.sleep(200);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        try {            ThreadA a = new ThreadA();            ThreadB b = new ThreadB();            a.start();            b.start();            for (int i = 0; i &lt; 100; i++) {                if (Tools.tl.get() == null) {                    Tools.tl.set(&quot;Main&quot; + (i + 1));                } else {                    System.out.println(&quot;Main get Value=&quot; + Tools.tl.get());                }                Thread.sleep(200);            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><h2 id="类-InheritableThreadLocal-的使用"><a href="#类-InheritableThreadLocal-的使用" class="headerlink" title="类 InheritableThreadLocal 的使用"></a>类 InheritableThreadLocal 的使用</h2><p>类 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/InheritableThreadLocal.html" rel="external nofollow noopener noreferrer" target="_blank">InheritableThreadLocal</a> 可以再子线程中取得父线程继承下来的值。</p><pre><code class="Java">class InheritableThreadLocalExt extends InheritableThreadLocal {    @Override    protected Object initialValue() {        return new Date().getTime();    }    @Override    protected Object childValue(Object parentValue) {        return parentValue + &quot; 我在子线程加的~!&quot;;    }}class Tools {    public static InheritableThreadLocalExt tl = new InheritableThreadLocalExt();}class ThreadA extends Thread {    @Override    public void run() {        try {            for (int i = 0; i &lt; 10; i++) {                System.out.println(&quot;在ThreadA线程中取值=&quot; + Tools.tl.get());                Thread.sleep(100);            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}public class Run {    public static void main(String[] args) {        try {            for (int i = 0; i &lt; 10; i++) {                System.out.println(&quot;       在Main线程中取值=&quot; + Tools.tl.get());                Thread.sleep(100);            }            Thread.sleep(5000);            ThreadA a = new ThreadA();            a.start();        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><p>在继承的同时可以对值进行进一步的处理。</p><p>但在子线程取得值的同时，主线程将 InheritableThreadLocal 中的值进行更改，子线程取得的值还是旧值。</p><h1 id="第四章-Lock-的使用"><a href="#第四章-Lock-的使用" class="headerlink" title="第四章 Lock 的使用"></a>第四章 Lock 的使用</h1><h2 id="ReentrantLock-类"><a href="#ReentrantLock-类" class="headerlink" title="ReentrantLock 类"></a>ReentrantLock 类</h2><p>（1）ReentrantLock 实现同步</p><pre><code class="Java">ReentrantLock reentrantLock = new ReentrantLock();reentrantLock.lock();// Do somethingreentrantLock.unlock();</code></pre><p>（2）使用 Condition 实现等待/通知</p><pre><code class="Java">class MyService {    private Lock lock = new ReentrantLock();    public Condition condition = lock.newCondition();    public void await() {        try {            lock.lock();            System.out.println(&quot; await时间为&quot; + System.currentTimeMillis());            condition.await();        } catch (InterruptedException e) {            e.printStackTrace();        } finally {            lock.unlock();        }    }    public void signal() {        try {            lock.lock();            System.out.println(&quot;signal时间为&quot; + System.currentTimeMillis());            condition.signal();        } finally {            lock.unlock();        }    }}class ThreadA extends Thread {    private MyService service;    public ThreadA(MyService service) {        super();        this.service = service;    }    @Override    public void run() {        service.await();    }}public class Run {    public static void main(String[] args) throws InterruptedException {        MyService service = new MyService();        ThreadA a = new ThreadA(service);        a.start();        Thread.sleep(3000);        service.signal();    }}</code></pre><p>这样就实现了 Condition 的通知/等待功能。</p><p>对于多个 Condition 实现通知部分线程，可多次调用 lock.newCondition() 方法。</p><p>（3）公平锁和非公平锁</p><p>锁 Lock 分为公平锁和非公平锁：</p><p>公平锁表示线程获取锁的顺序是按照线程 <strong>加锁的顺序</strong> 来分配的。而非公平锁是抢占机制，是随机获取获取锁的。</p><p>ReentrantLock 可使用构造函数实例化公平锁和非公平锁。</p><p>（4）ReentrantLock 中的常用方法</p><p>getHoldCount() 当前线程保持锁定的个数，也就是调用 lock() 方法的次数。</p><p>getQueueLength() 返回等待获得锁定的线程的估计数。</p><p>getWaitQueueLength​(Condition condition) 返回等待与此锁定相关的给定条件 condition 的线程估计数。</p><p>hasQueuedThread​(Thread thread) 查询指定线程 thread 是否在等待获得此锁定；hasQueuedThreads() 查询是否有线程在等待次锁。</p><p>hasWaiters​(Condition condition) 查询是否有线程正在等待与此线程有关的 condition 条件。</p><p>isFair() 是不是公平锁。</p><p>isHeldByCurrentThread() 当前线程是否保持此锁。</p><p>isLocked() 查询此锁定是否由任意线程锁定。</p><p>lockInterruptibly() 如果当前线程未中断，则获得此锁；否则出现异常。</p><p>tryLock() 调用时未被另外一个线程保持的情况下，才获得此锁定；tryLock​(long timeout, TimeUnit unit) 在给定时间内。</p><h2 id="ReentrantReadWriteLock-类"><a href="#ReentrantReadWriteLock-类" class="headerlink" title="ReentrantReadWriteLock 类"></a>ReentrantReadWriteLock 类</h2><p>读写锁 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html" rel="external nofollow noopener noreferrer" target="_blank">ReentrantReadWriteLock</a> 表示也有两个锁，一个是与读有关的锁，也成为共享锁；另一个是与写有关的锁，也叫排他锁。</p><p>多个读锁之间不互斥，读锁和写锁互斥，写锁和写锁互斥。</p><p>（1）读读共享</p><pre><code class="java">import java.util.concurrent.locks.ReentrantReadWriteLock;class Service {    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    public void read() {        try {            try {                lock.readLock().lock();                System.out.println(&quot;获得读锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.readLock().unlock();            }        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }}class ThreadA extends Thread {    private Service service;    public ThreadA(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.read();    }}class ThreadB extends Thread {    private Service service;    public ThreadB(Service service) {        super();        this.service = service;    }    @Override    public void run() {        service.read();    }}public class Main {    public static void main(String[] args) {        Service service = new Service();        ThreadA a = new ThreadA(service);        a.setName(&quot;A&quot;);        ThreadB b = new ThreadB(service);        b.setName(&quot;B&quot;);        a.start();        b.start();    }}/* * 获得读锁B 1526483245955 * 获得读锁A 1526483245955 */</code></pre><p>（2）写写互斥</p><pre><code class="Java">class Service {    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    public void write() {        try {            try {                lock.writeLock().lock();                System.out.println(&quot;获得写锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.writeLock().unlock();            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * 获得写锁B 1526483357433 * 获得写锁A 1526483367434 */</code></pre><p>（3）读写互斥、写读互斥</p><pre><code class="Java">class Service {    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();    public void read() {        try {            try {                lock.readLock().lock();                System.out.println(&quot;获得读锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.readLock().unlock();            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }    public void write() {        try {            try {                lock.writeLock().lock();                System.out.println(&quot;获得写锁&quot; + Thread.currentThread().getName()                        + &quot; &quot; + System.currentTimeMillis());                Thread.sleep(10000);            } finally {                lock.writeLock().unlock();            }        } catch (InterruptedException e) {            e.printStackTrace();        }    }}/* * 获得读锁A 1526483561390 * 获得写锁B 1526483571390 *//* * 获得写锁B 1526483608487 * 获得读锁A 1526483618487 */</code></pre><h1 id="第五章-定时器-Timer"><a href="#第五章-定时器-Timer" class="headerlink" title="第五章 定时器 Timer"></a>第五章 定时器 Timer</h1><p>（1）Timer 的概念</p><p>类 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Timer.html" rel="external nofollow noopener noreferrer" target="_blank">Timer</a> 主要负责计划任务的功能，也就是在指定时间开始执行某一个任务。Timer 的封装类是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/TimerTask.html" rel="external nofollow noopener noreferrer" target="_blank">TimerTask</a> 。</p><p>（2）Timer 的常用方法</p><p>1、schedule​(TimerTask task, Date time) 在指定日期执行一次某一任务。</p><pre><code class="Java">public class Run {    private static Timer timer = new Timer();    // 守护线程方式，任务执行后自行销毁    // private static Timer timer = new Timer(true);    static public class MyTask extends TimerTask {        @Override        public void run() {            System.out.println(&quot;运行了！时间为：&quot; + new Date());        }    }    public static void main(String[] args) {        try {            MyTask task = new MyTask();            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);            String dateString = &quot;2014-10-12 11:55:00&quot;;            Date dateRef = sdf.parse(dateString);            System.out.println(&quot;字符串时间：&quot; + dateRef.toLocaleString() + &quot; 当前时间：&quot;                    + new Date().toLocaleString());            timer.schedule(task, dateRef);        } catch (ParseException e) {            e.printStackTrace();        }    }}</code></pre><p>如果 time 晚于当前时间，则按照计划执行；若早于当前时间，则立即执行。</p><p>TimerTask 是以任务队列的方式按照顺序知心话，如果前面的任务执行时间较长，后面的任务也会延迟。</p><p>2、schedule​(TimerTask task, Date firstTime, long period) 在指定日期后，按照指定时间间隔周期性无限循环地执行某一任务。</p><p>3、schedule​(TimerTask task, long delay) 以当前时间为参考，延迟指定地毫秒数之后执行一次 TimerTask 任务。</p><p>4、schedule​(TimerTask task, long delay, long period) 以当前时间为参考，延迟指定地毫秒数之后，再以指定时间间隔周期性无限循环地执行某一任务。</p><p>5、scheduleAtFixedRate​() 方法</p><p>主要有两个方法：</p><p>scheduleAtFixedRate​(TimerTask task, Date firstTime, long period)</p><p>scheduleAtFixedRate​(TimerTask task, long delay, long period)</p><p>方法 schedule 和 scheduleAtFixedRate​ 区别和联系：</p><p>1) 方法 schedule 和 scheduleAtFixedRate 都会顺序序执行，所以不要考虑非线程安全的情况。<br>2) 方法 schedule 和 scheduleAtFixedRate 主要的区别只在于不延时的情况。</p><ul><li>使用 schedule 方法:如果执行任务的时间没有被延时，那么下一次任务的执行时间参考的是上一次任务的“开始”时的时间来计算。</li><li>使用 scheduleAtFixedRate 方法:如果执行任务的时间没有被延时，那么下一次任务的执行时间参考的是上一次任务的“结束”时的时间来计算。</li></ul><p>3) 延时的情况则没有区别，也就是使用 schedule 或 scheduleAtFixedRate 方法都是如果执行任务的时间被延时，那么下一次任务的执行时间参考的是上一次任务“结束”时的时间来计算。<br>4) schedule 方法没有具有任务追赶执行性，而 scheduleAtFixedRate 是有的。</p><p><strong>不延时</strong> 是指 TimerTask 任务执行的时间比 period 周期要短，不会对下次任务执行造成延迟。<br><strong>追赶执行性</strong> 是指 任务执行时间 比当前时间早的情况下，过去时间段内的任务从现在开始执行。</p><h1 id="第六章-单例模式与多线程"><a href="#第六章-单例模式与多线程" class="headerlink" title="第六章 单例模式与多线程"></a>第六章 单例模式与多线程</h1><p>（1）单例模式概述</p><p>单例模式可分为两种：</p><p>1、立即执行/“饿汉模式”：使用类的时候已经将对象创建完毕。</p><pre><code class="Java">public class MyObject {    // 立即加载方式==饿汉模式    private static MyObject myObject = new MyObject();    private MyObject() {    }    public static MyObject getInstance() {        // 此代码版本为立即加载        // 此版本代码的缺点是不能有其它实例变量        // 因为getInstance()方法没有同步        // 所以有可能出现非线程安全问题        return myObject;    }}</code></pre><p>2、延迟加载/“懒汉模式”：在使用类的时候实例才被创建。</p><p>DCL 双检查锁机制。</p><pre><code class="Java">public class MyObject {    private volatile static MyObject myObject;    private MyObject() {    }    // 使用双检测机制来解决问题    // 即保证了不需要同步代码的异步    // 又保证了单例的效果    public static MyObject getInstance() {        try {            if (myObject != null) {            } else {                // 模拟在创建对象之前做一些准备性的工作                Thread.sleep(3000);                synchronized (MyObject.class) {                    if (myObject == null) {                        myObject = new MyObject();                    }                }            }        } catch (InterruptedException e) {            e.printStackTrace();        }        return myObject;    }    // 此版本的代码称为：    // 双重检查Double-Check Locking}</code></pre><p>（2）单例模式的实现方式</p><p>单例模式还可以由静态内置类、static 代码块、enum 枚举数据类实现。</p><h1 id="第七章-拾遗增补"><a href="#第七章-拾遗增补" class="headerlink" title="第七章 拾遗增补"></a>第七章 拾遗增补</h1><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>线程在不同运行时期有不同的状态，状态信息存储在 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.State.html" rel="external nofollow noopener noreferrer" target="_blank">State</a> 枚举类中。</p><p><img src="https://img.wshunli.com/Java/Java多线程编程核心技术/java_thread_state.png" alt="java_thread_state"></p><p>A thread can be in one of the following states:</p><ul><li>NEW ：A thread that has not yet started.</li><li>RUNNABLE ：A thread executing in the Java virtual machine.</li><li>BLOCKED ：A thread that is blocked waiting for a monitor lock.</li><li>WAITING ：A thread that is waiting indefinitely for another thread to perform a particular action.</li><li>TIMED_WAITING ：A thread that is waiting for another thread to perform an action for up to a specified waiting time.</li><li>TERMINATED ：A thread that has exited.</li></ul><p>A thread can be in only one state at a given point in time. These states are virtual machine states which do not reflect any operating system thread states.</p><h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><p>线程组中可以包含线程对象和线程组，对其进行批量管理和有效组织。</p><p>（1）线程组的关联</p><p>1 级关联，即没有子孙对象。</p><pre><code class="Java">ThreadA aRunnable = new ThreadA();ThreadB bRunnable = new ThreadB();ThreadGroup group = new ThreadGroup(&quot;线程组&quot;);Thread aThread = new Thread(group, aRunnable);Thread bThread = new Thread(group, bRunnable);aThread.start();bThread.start();</code></pre><p>多级关联，存在子孙对象。</p><pre><code class="Java">// 在main组中添加一个线程组A，然后在这个A组中添加线程对象ZThreadGroup mainGroup = Thread.currentThread().getThreadGroup();ThreadGroup group = new ThreadGroup(mainGroup, &quot;A&quot;);Runnable runnable = new Runnable() {    @Override    public void run() {        try {            System.out.println(&quot;runMethod!&quot;);            Thread.sleep(10000);// 线程必须在运行状态才可以受组管理        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }};Thread newThread = new Thread(group, runnable);newThread.setName(&quot;Z&quot;);newThread.start();// 线程必须启动然后才归到组A中</code></pre><p>（2）线程组自动归属特性</p><p>自动归属就是在实例化一个 ThreadGroup 线程组 x 时，如果不指定所属的线程组，则 x 线程组会自动归到当前线程对象所属的线程组中。</p><p>（3）线程组的操作</p><p>获取父线程组，ThreadGroup 的 getParent() 方法获取父线程组。</p><pre><code class="Java">Thread.currentThread().getThreadGroup().getParent()</code></pre><p>线程组内的线程批量停止，ThreadGroup 的 interrupt() 方法。</p><h2 id="SimpleDateFormat-非线程安全"><a href="#SimpleDateFormat-非线程安全" class="headerlink" title="SimpleDateFormat 非线程安全"></a>SimpleDateFormat 非线程安全</h2><p>类 SimpleDateFormat 主要负责日期的转化和格式化，但在多线程环境下，非常容易造成数据转换和处理的不准确，SimpleDateFormat 不是线程安全的。</p><h2 id="多线程出现异常的处理"><a href="#多线程出现异常的处理" class="headerlink" title="多线程出现异常的处理"></a>多线程出现异常的处理</h2><p>（1）线程中出现异常的处理</p><pre><code class="Java">// 指定线程对象设置异常处理类MyThread t1 = new MyThread();t1.setName(&quot;线程t1&quot;);t1.setUncaughtExceptionHandler(new UncaughtExceptionHandler() {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;线程:&quot; + t.getName() + &quot; 出现了异常：&quot;);        e.printStackTrace();    }});t1.start();// 指定线程类的所有对象设置默认异常处理类MyThread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler() {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;线程:&quot; + t.getName() + &quot; 出现了异常：&quot;);        e.printStackTrace();    }});</code></pre><p>（2）线程组中出现异常的处理</p><pre><code class="Java">public class MyThreadGroup extends ThreadGroup {    public MyThreadGroup(String name) {        super(name);    }    @Override    public void uncaughtException(Thread t, Throwable e) {        super.uncaughtException(t, e);        this.interrupt();    }}</code></pre><p>注意线程组中的线程对象 run() 方法内部不要有 catch 语句，否则 uncaughtException 不执行。</p><p>（3）线程组异常处理的传递</p><pre><code class="Java">package com.wshunli.thread.sync71;class MyThread extends Thread {    private String num = &quot;a&quot;;    public MyThread() {        super();    }    public MyThread(ThreadGroup group, String name) {        super(group, name);    }    @Override    public void run() {        int numInt = Integer.parseInt(num);        System.out.println(&quot;在线程中打印：&quot; + (numInt + 1));    }}class MyThreadGroup extends ThreadGroup {    public MyThreadGroup(String name) {        super(name);    }    @Override    public void uncaughtException(Thread t, Throwable e) {        super.uncaughtException(t, e);        System.out.println(&quot;线程组的异常处理&quot;);        e.printStackTrace();    }}class ObjectUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;对象的异常处理&quot;);        e.printStackTrace();    }}class StateUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {    @Override    public void uncaughtException(Thread t, Throwable e) {        System.out.println(&quot;静态的异常处理&quot;);        e.printStackTrace();    }}public class Main {    public static void main(String[] args) {        MyThread myThread = new MyThread();        // 对象        myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        // MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 对象的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */public class Main {    public static void main(String[] args) {        MyThread myThread = new MyThread();        // 对象        // myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 静态的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */</code></pre><p>对于线程组而言：</p><pre><code class="Java">public class Main {    public static void main(String[] args) {        MyThreadGroup group = new MyThreadGroup(&quot;我的线程组&quot;);        MyThread myThread = new MyThread(group, &quot;我的线程&quot;);        // 对象        myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        // MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 对象的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */public class Main {    public static void main(String[] args) {        MyThreadGroup group = new MyThreadGroup(&quot;我的线程组&quot;);        MyThread myThread = new MyThread(group, &quot;我的线程&quot;);        // 对象        // myThread.setUncaughtExceptionHandler(new ObjectUncaughtExceptionHandler());        // 类        MyThread.setDefaultUncaughtExceptionHandler(new StateUncaughtExceptionHandler());        myThread.start();    }}/* * 静态的异常处理 * java.lang.NumberFormatException: For input string: &quot;a&quot; * 线程组的异常处理 *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) * java.lang.NumberFormatException: For input string: &quot;a&quot; *     at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) *     at java.lang.Integer.parseInt(Integer.java:580) *     at java.lang.Integer.parseInt(Integer.java:615) *     at com.wshunli.thread.sync71.MyThread.run(Main.java:17) */</code></pre><blockquote><p>本书是阅读完了，也只是一些多线程的基础，距离实战还是有差距，后面再深入学习 《Java并发编程的艺术》、《Java并发编程实战》等书籍逐步提高。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面面试什么的多线程部分问的比较多，需要加强下，这里记录总结 《Java多线程编程核心技术》 读书情况。&lt;/p&gt;&lt;h1 id=&quot;第一章-Java-多线程技能&quot;&gt;&lt;a href=&quot;#第一章-Java-多线程技能&quot; class=&quot;headerlink&quot; title=&quot;第一章 J
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java多线程编程核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="https://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>https://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-22T15:04:34.488Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;&lt;p&gt;Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 
      
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="https://www.wshunli.com/posts/4cbab315.html"/>
    <id>https://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="https://www.wshunli.com/posts/b96eb139.html"/>
    <id>https://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-04-28T06:47:46.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1/R3Rntppqe4dfoz/AJd2VqgWM2Ri8DPodLVe8I5YiIfV3JuAckqarHXuWn7fssMaaHDqaIJxJcxGTkJ28KxhKUvN0n8+fj7OFxKPwa+DEKxYSiin7u7sILw9v669Yc/N363qhR2Sx0oXuO4GEPv15fJCvPTm5rE+JyaNi+cG/pruvxuXXSgBfRoXupya9pwuCTAp7j9yl/jcDAhUdBES5kIWhDsLo/HM3MGRh5SoMrQHIfvOv3RmO1psCmyC1JpqPelRbrLLDj2LOI0mlgb3EilLfcAGR5b0kQQH+eBUQ67xLxDawEchGRuDdWXtE2kHt7PjSGTLfz3ddyv2LrgM0fP02Zvocni1sRffO/Z3gAVpbVNIpexWVIcybYaRqyJXmMM9g+i6LTha9/zhu0aQh50+tzvkElWRQZZp2XCuRcn2pk5oBu+VxTRcAtt1MXuSxNvQRyWPpu1iEzJUM4TE0dYl9A4lEvaMPhlu7ryozCodLyLZF58qVmnV2YH0fX4FoBXXxxxzYNQz8NowbdeB04FMeGwUjHfzXAxeUw4UAo5kxJ93jv+J90Wz51DrJ6ylGcJYaBPEPrf+3iD0PGOveQTmxITf+o5jywZb5DpYBepN+CZgZty/2UjdWcTp1pmY/dX2+T5Ltoah4/CnarTkFOy6e+detV6WsufxqH1SJ52UaXHtvhuEiOC0X92Y0EFUWy+F+nVDG78G5Psg222MmLABGgemitqNZg9EYnch1XpXrhMx0Ni9Npa+drq5jF02OvzwCbpAmXhS+2aAP9MYu1/w/xF/JaLxIEt/D5HpIdt/9j8w1yqFth//zBNJUo3Kjt4dZHLhhWSmAcYZtyWBSOVjm7i2XRxAN+q857xZBixcgRu960GPXwpa4Gum2eOWRcoFquULUVu6OPyNU4HMJtAWZHoCXsQ6/HFhhKOAIOaJuYWAULSvnYlTCNxdgLj2zeBqaAI/S5j0GzkfKO14mDkVnwEDOoRoA4Wqqohj6Y4UoI3s5UMsmHd0Ri8FLWRYb6OYN3pbtV5N+ea2Up4A/f66hkppiJ3KATCXtitbwT15XfwI3nvPelVPXgBnlSJp7x8qzxsJmKwEGSwJDBoAMbXiEpMkP5AEe+fo8rw8xZ9wJaJsHrI9kIhrgBYCLNi+J8+Dvyjt2qkU3R3ikn7WPIlhpc9vIx0CAVzxje87+H472+VuJwAGALMNHqIVlFxtMBCXEfLsuHjEU6AEdwRgfB8VrBlGXG1RlXVAVESt0ZZEk8QieFBUCTkx23KSPyg4j8SddHRfLyC0yOaLE8/t57fU8rvuEG63Le8gvcCf5+gELjR0k22WLVlg4LQ2+Yihyh2pgWxW2tkMgzzi+5wGpab8LpavexfmJu98AH8r3wDvai504kvA5fAELodR0prGLwhkxbr0AZVnoL0w6vbgRBFHxZwv56EU8U7mCmVJQ6R+M7cHlxhy5RP/bRQE0aB/FjRj3OX0H/PVVQhcVtJ89MprgbGgI3ew1HzlroXXOfkCh+gUsOJwngJXLk+ptVOlA70I0XjfcrqWJKBfxKLzcGWY/YGqvOCiZm0Mp/tuVJ9YcSdkcgBb9tMUqRwwa3rCY8W+vb0aYEc8S1ZE+WbEPEU7YmTKaa+I4n8YZnW+5AOn4cxMv6FRSqhCjgaoc7/ZRZqkc0pwwsIlxq8k81KZdk4kn4eeGJaF9K5ZhfsYfXnZui/0htlgJeGF12/E2hpWEOMjoluCIpEtufLfP+LZU7djDwtWNSgrLkugu75e1gMnug/iL10LBtNpQLwdjY9WDVIGvqTY/5Mb3/WAdYYVbAdNmyrr/H1ze853nYS0UnvcrjioSLTUSAm60Z8397sF7kKv/pIDyGx6nYQbXZmtHo45DPZLIl37zj6w826tVbL+oWnbg9jY8VVsd+4g7yrAk5yiMywEZm6lDZBhGlHCBNl4WjC6ubmcxpsxykmYkLmj0KGkYwpHC3ZehXgGJSxHSOGakixUygf5zO3u72144txjGVSF5VcPaBszeDKQGU+YWHgkiWBi9otklhfodpzjoMcA+rF0hLrb64weZfyjfVR4KXOZDfI8x/EXDFNQ4RfkHv04y3/fQxOOL4LHG5aTqur6LVfkluA2n6pkb/9RvONLRPlDyypFZTl4u72eKKdFocVB8APfEtAUMybL9Kq3nHOBhqDBmMUipl2jTTNqKJ+EAeSSj81S/qKK5HlM3V3M8qmnZQM+mEpjml+o3yCm+Yph0Yl2GdSixwRiECMC2PmI7uwJejv8jtsB3B1tKGRmHSQ+aMjtxRInoDWILDwolHCMeiopY29UlZbHHoaepj34IJlwT82lDNonlt6li3qPd1TFU5L+WX50a4YfNVUA8y71uKCRhu1g== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里云实习生面试</title>
    <link href="https://www.wshunli.com/posts/b3a8426.html"/>
    <id>https://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="https://www.wshunli.com/posts/689a494.html"/>
    <id>https://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="https://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>https://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="https://www.wshunli.com/posts/3cb63fb.html"/>
    <id>https://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-22T15:04:34.492Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;&lt;p&gt;老是看书学习理论知识不太行，还得动手写代码啊。&lt;/p&gt;&lt;p&gt;1、赋值运算函数&lt;/p&gt;&lt;p&gt;2、单例设计模式&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;Java&quot;&gt;public class SingletonClass {

      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/9c87288c.html"/>
    <id>https://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-22T15:04:34.492Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><p>第十四章 并发</p><p>这部分大概地看了下，后面再看本书仔细学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;&lt;p&gt;前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。&lt;/p&gt;&lt;p&gt;《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎&lt;br&gt;&lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="https://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>https://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（amap）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（amap）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="https://www.wshunli.com/posts/4e05997a.html"/>
    <id>https://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-05-22T15:04:34.496Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
</feed>
