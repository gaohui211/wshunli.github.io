<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  <subtitle>wshunli`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-09-09T03:53:54.560Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式（六）原型模式</title>
    <link href="https://www.wshunli.com/posts/b7ba42b9.html"/>
    <id>https://www.wshunli.com/posts/b7ba42b9.html</id>
    <published>2018-09-07T14:31:45.000Z</published>
    <updated>2018-09-09T03:53:54.560Z</updated>
    
    <content type="html"><![CDATA[<p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/6.Prototype.png" alt="原型模式"></p><p>原型模式的参与角色:</p><p>(1) 客户角色：客户类提出创建对象的请求。</p><p>(2) 抽象原型角色：这是一个抽象角色，通常由一个java接口或抽象类实现，具体原型都需要实现该接口。</p><p>(3) 具体原型角色：客户端所需要的被复制的对象。</p><p>1、创建抽象原型角色</p><pre><code class="lang-Java">public class Prototype implements Cloneable {    @Override    protected Object clone() throws CloneNotSupportedException {        return super.clone();    }}</code></pre><p>2、创建具体原型角色</p><pre><code class="lang-Java">public class ConcretePrototype1 extends Prototype {    public static int classFlag = 1;    @Override    protected ConcretePrototype1 clone() throws CloneNotSupportedException {        return (ConcretePrototype1) super.clone();    }}public class ConcretePrototype2 extends Prototype {    public static int classFlag = 2;    @Override    protected ConcretePrototype2 clone() throws CloneNotSupportedException {        return (ConcretePrototype2) super.clone();    }}</code></pre><p>3、原型模式的使用</p><pre><code class="lang-Java">public class PrototypePatternMain {    public static void main(String[] args) throws CloneNotSupportedException {        Prototype prototype1 = new ConcretePrototype1();        ConcretePrototype1 concretePrototype1 = (ConcretePrototype1) prototype1.clone();        System.out.println(concretePrototype1.classFlag);        Prototype prototype2 = new ConcretePrototype2();        ConcretePrototype2 concretePrototype2 = (ConcretePrototype2) prototype2.clone();        System.out.println(concretePrototype2.classFlag);    }}</code></pre><p>优点：1、性能提高。2、逃避构造函数的约束。</p><p>缺点：1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。2、必须实现 Cloneable 接口。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch06" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch06</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之原型模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/04/11/2439387.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/04/11/2439387.html</a><br>2、23种设计模式（5）：原型模式 - CSDN博客<br><a href="https://blog.csdn.net/zhengzhb/article/details/7393528" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/zhengzhb/article/details/7393528</a><br>3、java中的原型模式 - 简书<br><a href="https://www.jianshu.com/p/4e1f2d090f20" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/4e1f2d090f20</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;&lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（五）建造者模式</title>
    <link href="https://www.wshunli.com/posts/325f89c7.html"/>
    <id>https://www.wshunli.com/posts/325f89c7.html</id>
    <published>2018-09-07T10:07:47.000Z</published>
    <updated>2018-09-09T03:53:54.560Z</updated>
    
    <content type="html"><![CDATA[<p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>建造者模式将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/5.Builder.png" alt="建造者模式"></p><p>建造者模式中的四个要素：</p><p>(1) 产品类：一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有比较多的代码量。在本类图中，产品类是一个具体的类，而非抽象类。实际编程中，产品类可以是由一个抽象类与它的不同实现组成，也可以是由多个抽象类与他们的实现组成。</p><p>(2) 抽象建造者：引入抽象建造者的目的，是为了将建造的具体过程交与它的子类来实现。这样更容易扩展。一般至少会有两个抽象方法，一个用来建造产品，一个是用来返回产品。</p><p>(3) 建造者：实现抽象类的所有未实现的方法，具体来说一般是两项任务：组建产品；返回组建好的产品。</p><p>(4) 导演类：负责调用适当的建造者来组建产品，导演类一般不与产品类发生依赖关系，与导演类直接交互的是建造者类。一般来说，导演类被用来封装程序中易变的部分。</p><p>1、构造产品实例类</p><pre><code class="lang-Java">public class Product {    private String name;    private String type;    private String size;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getType() {        return type;    }    public void setType(String type) {        this.type = type;    }    public String getSize() {        return size;    }    public void setSize(String size) {        this.size = size;    }    @Override    public String toString() {        return &quot;Product{&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, type=&#39;&quot; + type + &#39;\&#39;&#39; +                &quot;, size=&#39;&quot; + size + &#39;\&#39;&#39; +                &#39;}&#39;;    }    public void show() {        System.out.println(this.toString());    }}</code></pre><p>2、抽象建造者</p><pre><code class="lang-Java">public abstract class Builder {    public abstract void name(String name);    public abstract void type(String type);    public abstract void size(String size);    public abstract Product build();}</code></pre><p>3、建造者实例</p><pre><code class="lang-Java">public class ConcreteBuilder extends Builder {    private Product product = new Product();    @Override    public void name(String name) {        product.setName(name);    }    @Override    public void type(String type) {        product.setType(type);    }    @Override    public void size(String size) {        product.setSize(size);    }    public Product build() {        return product;    }}</code></pre><p>4、导演类</p><pre><code class="lang-Java">public class Director {    private Builder builder = new ConcreteBuilder();    public Product getAProduct() {        builder.name(&quot;Burger&quot;);        builder.type(&quot;Wrapper&quot;);        builder.size(&quot;big&quot;);        return builder.build();    }    public Product getBProduct() {        builder.name(&quot;Coke&quot;);        builder.type(&quot;Bottle&quot;);        builder.size(&quot;small&quot;);        return builder.build();    }}</code></pre><p>5、建造者模式的使用</p><pre><code class="lang-Java">public class BuilderPatternMain {    public static void main(String[] args) {        Director director = new Director();        Product aProduct = director.getAProduct();        aProduct.show();        Product bProduct = director.getBProduct();        bProduct.show();    }}</code></pre><p>优点：1、建造者独立，易扩展。2、便于控制细节风险。</p><p>缺点：1、产品必须有共同点，范围有限制。2、如内部变化复杂，会有很多的建造类。</p><p>使用场景：1、需要生成的对象具有复杂的内部结构。2、需要生成的对象内部属性本身相互依赖。</p><p>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch05" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch05</a></p><blockquote><p>参考资料<br>1、建造者模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/builder-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/builder-pattern.html</a><br>2、建造者模式（Builder Pattern）- 最易懂的设计模式解析 - CSDN博客<br><a href="https://blog.csdn.net/carson_ho/article/details/54910597" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/carson_ho/article/details/54910597</a><br>3、23种设计模式（4）：建造者模式 - CSDN博客<br><a href="https://blog.csdn.net/zhengzhb/article/details/7375966" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/zhengzhb/article/details/7375966</a><br>4、Java 设计模式 — 建造者模式 - 简书<br><a href="https://www.jianshu.com/p/7d16da4e61b8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/7d16da4e61b8</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;&lt;h1 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（四）抽象工厂模式</title>
    <link href="https://www.wshunli.com/posts/4e3be4ad.html"/>
    <id>https://www.wshunli.com/posts/4e3be4ad.html</id>
    <published>2018-09-07T07:45:07.000Z</published>
    <updated>2018-09-09T03:53:54.560Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：</p><p>1）简单工厂模式（Simple Factory）<br>2）工厂方法模式（Factory Method）<br>3）抽象工厂模式（Abstract Factory）</p><p>本文及主要介绍抽象工厂模式。</p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式 (Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为 Kit 模式，属于对象创建型模式。</p><p>抽象工厂模式中，一个工厂可以提供多个不同种类产品对象，而不是单一种类的产品对象。</p><p>为了更清晰地理解工厂方法模式，需要先引入两个概念：</p><p><strong>产品等级结构</strong>： 产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</p><p><strong>产品族</strong>： 在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</p><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用抽象工厂模式。</p><p>抽象工厂模式与工厂方法模式最大的区别在于，<strong>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</strong>，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建 。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/4.AbstractFactory.png" alt="抽象工厂模式"></p><p>抽象工厂模式包含角色和工厂方法模式相同。</p><p>假设有一个移动终端工厂，可以制造苹果系列的移动产品和华为系列的移动产品。<br>这个工厂下有两个子厂，一个负责制造苹果系列的 Pad 和华为系列的 Pad ，另一个负责制造苹果系列的手机和华为系列的手机。这便是一个典型的抽象工厂的实例。</p><p>1、创建产品产品接口</p><pre><code class="lang-Java">// 苹果系列public interface Apple {    void AppleStyle();}// 华为系列public interface Huawei {    void HuaweiStyle();}</code></pre><p>2、实现具体产品角色</p><pre><code class="lang-Java">// 苹果系列产品public class iPhone implements Apple {    @Override    public void AppleStyle() {        System.out.println(&quot;Apple&#39;s style: iPhone!&quot;);    }}public class iPad implements Apple {    @Override    public void AppleStyle() {        System.out.println(&quot;Apple&#39;s style: iPad!&quot;);    }}// 华为系列产品public class Honor implements Huawei {    @Override    public void HuaweiStyle() {        System.out.println(&quot;Huawei&#39;s style: Honor!&quot;);    }}public class HuaweiPad implements Huawei {    @Override    public void HuaweiStyle() {        System.out.println(&quot;Huawei&#39;s style: HuaweiPad!&quot;);    }}</code></pre><p>3、创建抽象工厂接口</p><pre><code class="lang-Java">public interface Factory {    Apple createAppleProduct();    Huawei createHuaweiProduct();}</code></pre><p>4、实现具体工厂类，生成实例对象，和工厂方法模式的核心区别</p><pre><code class="lang-Java">// 手机工厂public class PhoneFactory implements Factory {    @Override    public Apple createAppleProduct() {        return new iPhone();    }    @Override    public Huawei createHuaweiProduct() {        return new Honor();    }}// 平板工厂public class PadFactory implements Factory {    @Override    public Apple createAppleProduct() {        return new iPad();    }    @Override    public Huawei createHuaweiProduct() {        return new HuaweiPad();    }}</code></pre><p>5、调用不同工厂的方法生成实例对象</p><pre><code class="lang-Java">public class AbstractFactoryMain {    public static void main(String[] args) {        Factory factory = new PhoneFactory();        Apple apple = factory.createAppleProduct();        apple.AppleStyle();        Huawei huawei = factory.createHuaweiProduct();        huawei.HuaweiStyle();        factory = new PadFactory();        apple = factory.createAppleProduct();        apple.AppleStyle();        huawei = factory.createHuaweiProduct();        huawei.HuaweiStyle();    }}</code></pre><p><strong>抽象工厂模式优缺点</strong>:</p><p>优点:<br>1、抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛的应用。<br>2、增加新的具体工厂和产品族很方便，因为一个具体的工厂实现代表的是一个产品族，无须修改已有系统，符合“开闭原则”。</p><p>缺点：<br>1、在添加新的产品对象（不同于现有的产品等级结构）时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。<br>2、开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。</p><p><strong>适用环境</strong>：</p><p>1、一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。<br>2、系统中有多于一个的产品族，而每次只使用其中某一产品族。<strong>与工厂方法模式的区别</strong>。<br>3、属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。<br>4、系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch04" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch04</a></p><blockquote><p>参考资料<br>1、java中的工厂模式 - 简书<br><a href="https://www.jianshu.com/p/bf8341c75304" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/bf8341c75304</a><br>2、《JAVA与模式》之抽象工厂模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/03/28/2418836.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/03/28/2418836.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。&lt;/p&gt;&lt;p&gt;工厂模式可以分为三类：&lt;/p&gt;&lt;p&gt;1）简单工厂模式（Simple Factory）&lt;br&gt;2）工厂方法模式（Factory Method）&lt;br&gt;3）抽象工厂模
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（三）工厂方法模式</title>
    <link href="https://www.wshunli.com/posts/4982f93c.html"/>
    <id>https://www.wshunli.com/posts/4982f93c.html</id>
    <published>2018-09-07T07:40:09.000Z</published>
    <updated>2018-09-09T03:53:54.560Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：</p><p>1）简单工厂模式（Simple Factory）<br>2）工厂方法模式（Factory Method）<br>3）抽象工厂模式（Abstract Factory）</p><p>本文及主要介绍工厂方法模式。</p><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>工厂方法模式 (Factory Method Pattern) 又称为工厂模式，也叫虚拟构造器 (Virtual Constructor) 模式或者多态工厂( Polymorphic Factory) 模式，它属于类创建型模式。</p><p>在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/3.FactoryMethod.png" alt="工厂方法模式"></p><p>工厂方法模式包含如下角色：</p><p>(1) Product：抽象产品，工厂方法模式所创建的对象的超类，也就是所有产品类的共同父类或共同拥有的接口。在实际的系统中，这个角色也常常使用抽象类实现。</p><p>(2) ConcreteProduct：具体产品，这个角色实现了抽象产品（Product）所声明的接口，工厂方法模式所创建的每一个对象都是某个具体产品的实例。</p><p>(3) Factory：抽象工厂，担任这个角色的是工厂方法模式的核心，任何在模式中创建对象的工厂类必须实现这个接口。在实际的系统中，这个角色也常常使用抽象类实现。</p><p>(4) ConcreteFactory：具体工厂，担任这个角色的是实现了抽象工厂接口的具体 Java 类。具体工厂角色含有与业务密切相关的逻辑，并且受到使用者的调用以创建具体产品对象。</p><p>1、创建抽象产品接口</p><pre><code class="lang-Java">public interface Shape {    void draw();}</code></pre><p>2、实现具体产品角色</p><pre><code class="lang-Java">public class Point implements Shape {    @Override    public void draw() {        System.out.println(&quot;Point.draw()&quot;);    }}public class Line implements Shape {    @Override    public void draw() {        System.out.println(&quot;Line.draw()&quot;);    }}public class Plane implements Shape {    @Override    public void draw() {        System.out.println(&quot;Plane.draw()&quot;);    }}</code></pre><p>以上内容和简单工厂模式相同。</p><p>3、创建抽象工厂接口</p><pre><code class="lang-Java">public interface ICreator {    Shape getShape();}</code></pre><p>4、实现具体工厂类，生成实例对象</p><pre><code class="lang-Java">public class PointCreator implements ICreator {    @Override    public Shape getShape() {        return new Point();    }}public class LineCreator implements ICreator {    @Override    public Shape getShape() {        return new Line();    }}public class PlaneCreator implements ICreator {    @Override    public Shape getShape() {        return new Plane();    }}</code></pre><p>5、调用不同工厂的方法生成实例对象</p><pre><code class="lang-Java">public class FactoryMethodMain {    public static void main(String[] args) {        ICreator creator = new PointCreator();        Shape shape = creator.getShape();        shape.draw();        creator = new LineCreator();        shape = creator.getShape();        shape.draw();        creator = new PlaneCreator();        shape = creator.getShape();        shape.draw();    }}</code></pre><p><strong>工厂方法模式的优缺点</strong>:</p><p>优点：<br>1、在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。<br>2、基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。<br>3、使用工厂方法模式的另一个优点是在系统中加入新产品时，只要添加一个具体工厂和具体产品就可以了。</p><p>缺点：<br>1、在添加新产品时，需要编写新的具体产品类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度。<br>2、由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</p><p><strong>适用场景</strong>：</p><p>1、一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。<br>2、一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。<br>3、将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch03" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch03</a></p><blockquote><p>参考资料<br>1、java中的工厂模式 - 简书<br><a href="https://www.jianshu.com/p/bf8341c75304" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/bf8341c75304</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。&lt;/p&gt;&lt;p&gt;工厂模式可以分为三类：&lt;/p&gt;&lt;p&gt;1）简单工厂模式（Simple Factory）&lt;br&gt;2）工厂方法模式（Factory Method）&lt;br&gt;3）抽象工厂模
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（二）简单工厂模式</title>
    <link href="https://www.wshunli.com/posts/6ae09785.html"/>
    <id>https://www.wshunli.com/posts/6ae09785.html</id>
    <published>2018-09-07T07:39:09.000Z</published>
    <updated>2018-09-09T03:53:54.560Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。</p><p>工厂模式可以分为三类：</p><p>1）简单工厂模式（Simple Factory）<br>2）工厂方法模式（Factory Method）<br>3）抽象工厂模式（Abstract Factory）</p><p>本文及主要介绍简单工厂模式。</p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。</p><p>在简单工厂模式中，可以根据参数的不同返回不同类的实例。</p><p>简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><p><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/2.SimpleFactory.png" alt="简单工厂模式"></p><p>简单工厂模式包含如下角色：</p><p>(1) Factory：工厂角色<br>工厂角色负责实现创建所有实例的内部逻辑。</p><p>(2) Product：抽象产品角色<br>抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的 <strong>公共接口</strong> 。</p><p>(3) ConcreteProduct：具体产品角色<br>具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</p><p>1、创建抽象产品接口</p><pre><code class="lang-Java">public interface Shape {    void draw();}</code></pre><p>2、实现具体产品角色</p><pre><code class="lang-Java">public class Point implements Shape {    @Override    public void draw() {        System.out.println(&quot;Point.draw()&quot;);    }}public class Line implements Shape {    @Override    public void draw() {        System.out.println(&quot;Line.draw()&quot;);    }}public class Plane implements Shape {    @Override    public void draw() {        System.out.println(&quot;Plane.draw()&quot;);    }}</code></pre><p>3、工厂角色，生成基于给定信息的实体类的对象</p><pre><code class="lang-Java">public class ShapeFactory {    // 使用 getShape 方法获取形状类型的对象    public Shape getShape(String shapeType) {        if (shapeType == null) {            return null;        }        if (shapeType.equalsIgnoreCase(&quot;POINT&quot;)) {            return new Point();        } else if (shapeType.equalsIgnoreCase(&quot;LINE&quot;)) {            return new Line();        } else if (shapeType.equalsIgnoreCase(&quot;PLANE&quot;)) {            return new Plane();        }        return null;    }}</code></pre><p>4、使用该工厂，通过传递类型信息来获取实体类的对象</p><pre><code class="lang-Java">public class SimpleFactoryMain {    public static void main(String[] args) {        ShapeFactory shapeFactory = new ShapeFactory();        //获取 Point 的对象，并调用它的 draw 方法        Shape shape1 = shapeFactory.getShape(&quot;POINT&quot;);        //调用 Point 的 draw 方法        shape1.draw();        //获取 Line 的对象，并调用它的 draw 方法        Shape shape2 = shapeFactory.getShape(&quot;LINE&quot;);        //调用 Line 的 draw 方法        shape2.draw();        //获取 Plane 的对象，并调用它的 draw 方法        Shape shape3 = shapeFactory.getShape(&quot;PLANE&quot;);        //调用 Plane 的 draw 方法        shape3.draw();    }}</code></pre><p><strong>简单工厂模式优缺点</strong>:</p><p>优点：<br>通过使用工厂类，外界不再需要关心如何创造各种具体的产品，只要提供一个产品的名称作为参数传给工厂，就可以直接得到一个想要的产品对象，并且可以按照接口规范来调用产品对象的所有功能（方法）。构造容易，逻辑简单。</p><p>缺点：<br>1、简单工厂模式中的 if else 判断非常多，当系统中的具体产品类不断增多时候，就要不断的修改工厂类，对系统的维护和扩展不利。<br>2、一个工厂类中集合了所有的类的实例创建逻辑，什么时候它不能工作了，整个系统都会受到影响。<br>3、简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</p><p><strong>适用场景</strong>：</p><p>1、工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。<br>2、客户端只知道传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch02" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch02</a></p><blockquote><p>参考资料<br>1、工厂模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/factory-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/factory-pattern.html</a><br>2、JAVA设计模式之工厂模式(简单工厂模式+工厂方法模式) - CSDN博客<br><a href="https://blog.csdn.net/jason0539/article/details/23020989" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/jason0539/article/details/23020989</a><br>3、java中的工厂模式 - 简书<br><a href="https://www.jianshu.com/p/bf8341c75304" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/bf8341c75304</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工厂模式主要是为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。&lt;/p&gt;&lt;p&gt;工厂模式可以分为三类：&lt;/p&gt;&lt;p&gt;1）简单工厂模式（Simple Factory）&lt;br&gt;2）工厂方法模式（Factory Method）&lt;br&gt;3）抽象工厂模
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘数字政通面试</title>
    <link href="https://www.wshunli.com/posts/93b729e9.html"/>
    <id>https://www.wshunli.com/posts/93b729e9.html</id>
    <published>2018-09-06T13:48:00.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘数字政通面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘中海达面试</title>
    <link href="https://www.wshunli.com/posts/c783f06d.html"/>
    <id>https://www.wshunli.com/posts/c783f06d.html</id>
    <published>2018-09-06T02:43:04.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘中海达面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图解数据结构-算法部分（Java语言实现）</title>
    <link href="https://www.wshunli.com/posts/444e2c0f.html"/>
    <id>https://www.wshunli.com/posts/444e2c0f.html</id>
    <published>2018-09-04T06:48:13.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。</p><p>前面一直学习的数据结构，下面排序、查找属于算法的范畴了。</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>所谓 “排序” (Sorting) 就是指将一组数据，按特定规则调换位置，使数据具有某种顺序关系（递增或递减）。</p><p><strong>排序分类</strong>，可分为内部（内存中）和外部（外部存储器）排序两大类。</p><p>常见的内部排序法有：冒泡排序法、选择排序法、插入排序法、合并排序法、快速排序 法、堆积排序法、希尔排序法、基数排序法等。 至于比较常见的外部排序法有：直接合并排序法、K 路合并法、多相合并法等。</p><p><strong>排序算法分析</strong>：算法是否稳定、时间复杂度、空间复杂度。</p><p>稳定的排序是指数据在经过排序后，两个相同键值的记录仍然保待原来的次序。</p><h2 id="内部排序法"><a href="#内部排序法" class="headerlink" title="内部排序法"></a>内部排序法</h2><p>内部排序法的时间复杂度及键值整理。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/内部排序法.png" alt="内部排序法"></p><p>1、<strong>冒泡排序法</strong></p><p>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/冒泡排序法.gif" alt="冒泡排序法"></p><p>实现算法：</p><pre><code class="lang-Java">int i, j, tmp;int data[] = {6, 5, 9, 7, 2, 8};    //原始数据for (i = 5; i &gt; 0; i--)             //扫描次数{    for (j = 0; j &lt; i; j++)         //比较、交换次数    {        // 比较相邻两数，如第一数较大则交换        if (data[j] &gt; data[j + 1]) {            tmp = data[j];            data[j] = data[j + 1];            data[j + 1] = tmp;        }    }}</code></pre><p>但是这样如论如何都会执行 $ n(n-1)/2 $ 次，我们可以加一个判断在没有可替换的数据时终止程序。</p><pre><code class="lang-Java">public void bubble() {    int i, j, tmp, flag;    for (i = 5; i &gt;= 0; i--) {        flag = 0;           //flag用来判断是否有执行交换的动作        for (j = 0; j &lt; i; j++) {            if (data[j + 1] &lt; data[j]) {                tmp = data[j];                data[j] = data[j + 1];                data[j + 1] = tmp;                flag++;    //如果有执行过交换，则flag不为0            }        }        //当执行完一次扫描就判断是否做过交换动作，如果没有交换过数据，        //表示此时数组已完成排序，故可直接跳出循环        if (flag == 0) {            break;        }    }</code></pre><p>冒泡排序是最容易实现的排序, 最坏的情况是每次都需要交换, 共需遍历并交换将近 n²/2 次, 时间复杂度为 O(n²) . 最佳的情况是内循环遍历一次后发现排序是对的, 因此退出循环, 时间复杂度为O(n).</p><p>平均来讲, 时间复杂度为O(n²). 由于冒泡排序中只有缓存的 temp 变量需要内存空间, 因此空间复杂度为常量O(1).</p><p>Tips: 由于冒泡排序只在相邻元素大小不符合要求时才调换他们的位置, 它并不改变相同元素之间的相对顺序, 因此它是稳定的排序算法.</p><p>2、<strong>选择排序法</strong></p><p>在未排序序列中找到最小（大）元素，存放到未排序序列的起始位置。</p><p>算法描述：</p><p>(1) 从待排序序列中，找到关键字最小的元素；<br>(2) 如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；<br>(3) 从余下的 N - 1 个元素中，找出关键字最小的元素，重复 (1)、(2) 步，直到排序结束。</p><pre><code class="lang-Java">void select() {    int i, j, tmp;    for (i = 0; i &lt; 5; i++) {            //扫描 5 次        for (j = i + 1; j &lt; 6; j++) {    //由 i+1 比较起，比较 5 次            if (data[i] &gt; data[j]) {     //比较第 i 及第 j 个元素                tmp = data[i];                data[i] = data[j];                data[j] = tmp;            }        }    }}</code></pre><p>选择排序的简单和直观名副其实，这也造就了它 “出了名的慢性子” ，无论是哪种情况，哪怕原数组已排序完成，它也将花费将近 n²/2 次遍历来确认一遍。即便是这样，它的排序结果也还是不稳定的。 唯一值得高兴的是，它并不耗费额外的内存空间。</p><p>3、<strong>插入排序法</strong></p><p>将数组中的所有元素依次跟前面已经排好的元素相比较，再将数组元素插入合适的位置。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/插入排序法.gif" alt="插入排序法"></p><p>实现算法：</p><pre><code class="lang-Java">void insert() {    int i;     // i 为扫描次数    int j;     // j 来定位比较的元素    int tmp;   // tmp 用来暂存数据    for (i = 1; i &lt; size; i++) {  // 扫描循环次数为 SIZE-1        tmp = data[i];        j = i - 1;        while (j &gt;= 0 &amp;&amp; tmp &lt; data[j]) {  // 如果第二元素小于第一元素            data[j + 1] = data[j]; // 就把所有元素往后推一个位置            j--;        }        data[j + 1] = tmp;       // 最小的元素放到第一个元素    }}</code></pre><p>Tips: 由于直接插入排序每次只移动一个元素的位，并不会改变值相同的元素之间的排序，因此它是一种稳定排序。</p><p>4、<strong>希尔排序法</strong></p><p>希尔排序是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录 “基本有序” 时，再对全体记录进行依次直接插入排序。</p><p>实现算法：</p><pre><code class="lang-Java">void shell() {    int i;        // i 为扫描次数    int j;        // j 来定位比较的元素    int k = 1;    // k 打印计数    int tmp;      // tmp 用来暂存数据    int jmp;      // 设定间隔位移量    jmp = size / 2;    while (jmp != 0) {        for (i = jmp; i &lt; size; i++) {            tmp = data[i];            j = i - jmp;            while (j &gt;= 0 &amp;&amp; tmp &lt; data[j])  //插入排序法            {                data[j + jmp] = data[j];                j = j - jmp;            }            data[jmp + j] = tmp;        }        jmp = jmp / 2;    //控制循环数    }}</code></pre><p>5、<strong>合并排序法</strong></p><p>合并排序算法是将两个（或两个以上）有序表合并成一个新的有序表；<br>即把待排序序列分为若干个子序列，每个子序列是有序的，然后再把有序子序列合并为整体有序序列。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/合并排序法.gif" alt="合并排序法"></p><p>6、<strong>快速排序法</strong></p><p>快速排序法又称分割交换排序法，是目前公认最佳的排序法。</p><p>它的原理和冒泡排序法一样都是用交换的方式，不过它会先在数据中找到一个虚拟的中间值，把小于中间值的数据放在左边，而大于中间值的数据放在右边，再以同样的方式分别处理左右两边的数据，直到完成为止。</p><p><img src="https://img.wshunli.com/数据结构与算法/排序/快速排序法.gif" alt="快速排序法"></p><p>7、<strong>堆积排序法</strong></p><p>堆排序的过程就是将待排序的序列构造成一个堆，选出堆中最大的移走，再把剩余的元素调整成堆，找出最大的再移走，重复直至有序。</p><p>8、<strong>基数排序法</strong></p><p>基数排序（Radix sort）是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><h2 id="外部排序法"><a href="#外部排序法" class="headerlink" title="外部排序法"></a>外部排序法</h2><p>直接合井排序法 (Direct Merge Sort) 是外部存储设备最常用的排序方法。</p><p>它可以分为两个步骤：<br>步骤1: 将要排序的文件分为几个大小可以加载到内存空间的小文件，再使用内部排序法将各文件内的数据排序。<br>步骤2: 将第一步所建立的小文件每两个合并成一个文件。两两合井后，把所有文件合并成一个文件后就可以完成排序了。</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>所谓查找，就是从数据文件中，寻找符合某特定条件的记录。而用来查找的条件就称为 “键值” 。</p><p>一般来说，如果数据在查找前经过排序，将可大幅减少查找的时间。至于查找技巧中比 较常见的方法有顺序法、二分查找法、斐波那契法、插值法、哈希法、m 路查找树、B-tree 等。</p><p>数据结构：<a href="https://www.wshunli.com/posts/850e5c53.html">https://www.wshunli.com/posts/850e5c53.html</a><br>算法：<a href="https://www.wshunli.com/posts/444e2c0f.html">https://www.wshunli.com/posts/444e2c0f.html</a></p><blockquote><p>参考资料<br>1、八大排序算法总结与java实现 | iTimeTraveler<br><a href="https://itimetraveler.github.io/2017/07/18/八大排序算法总结与java实现/" rel="external nofollow noopener noreferrer" target="_blank">https://itimetraveler.github.io/2017/07/18/八大排序算法总结与java实现/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。&lt;/p&gt;&lt;p&gt;前面一直学习的数据结构，下面排序、查找属于算法的范畴了。&lt;/p&gt;&lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="算法" scheme="https://www.wshunli.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘数文科技面试</title>
    <link href="https://www.wshunli.com/posts/244dd89b.html"/>
    <id>https://www.wshunli.com/posts/244dd89b.html</id>
    <published>2018-08-31T12:46:52.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘数文科技面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘（GIS行业）</title>
    <link href="https://www.wshunli.com/posts/9aef7ef9.html"/>
    <id>https://www.wshunli.com/posts/9aef7ef9.html</id>
    <published>2018-08-31T09:10:41.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季（2019届应届生）校园招聘（GIS行业）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>图解数据结构（Java语言实现）</title>
    <link href="https://www.wshunli.com/posts/850e5c53.html"/>
    <id>https://www.wshunli.com/posts/850e5c53.html</id>
    <published>2018-08-29T12:41:03.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。</p><p>这次选择看的书籍是 《图解数据结构-使用Java》 ，先入门，后面再深入学习。</p><p>算法的时间复杂度，用来度量算法的运行时间，记作: T(n) = O(f(n))。它表示随着 输入大小 n 的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。</p><p>线性表是 n 个元素的有限序列（n &gt;= 0），是计算机科学中一种相当基础的数据结构。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><strong>数组</strong> 其实是一排紧密相邻的可读内存，并提供一个能够 <strong>直接访问</strong> 单一数据内容的计算方法。</p><p>这样能够直接通过计算，并访问任一位置的数据，即所谓的数组的 <strong>随机读取</strong> 。</p><p>当 Java 数组声明时会在内存中分配一定的暂存空间，空间大小以数据类型和数组数量为依据。</p><p>一维数据、二维数组、三维数组、n 维数组。</p><p>数组可用于矩阵、多项式等的运算。</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><strong>链表</strong> 是由许多相同数据类型的元素按照特定顺序排列而成的线性表，其在内存中是不连续与随机存储的。</p><p>这样就不能像数组那样随机读取数据，而要 <strong>按照顺序</strong> 找到所需数据。</p><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p>单向链表是由节点组成，指针方向相同的链表。其中节点由数据字段和链接字段组成。</p><p>在 Java 中，声明节点：</p><pre><code class="lang-Java">public class Node {    int data;    Node next;    public Node(int data) {        this.data = data;        this.next = null;    }}</code></pre><p>而 Java 中没有指针的概念，我们声明两个对象分别指向第一个和最后一个节点：</p><pre><code class="lang-Java">public class LinkedList {    private Node first;    private Node last;    ...}</code></pre><p>1、<strong>单向链表的创建</strong></p><p>下面创建简单单向链表类：</p><pre><code class="lang-Java">public class LinkedList {    private Node first;    private Node last;    public boolean isEmpty() {        return first == null;    }    public void insert(int data) {        Node node = new Node(data);        if (this.isEmpty()) {            first = node;            last = node;        } else {            last.next = node;            last = node;        }    }    public void print() {        Node current = first;        while (current != null) {            System.out.println(&quot;current.data=&quot; + current.data);            current = current.next;        }    }}</code></pre><p>然后实例化链表对象即可：</p><pre><code class="lang-Java">public class Main {    public static void main(String[] args) {        LinkedList linkedList = new LinkedList();        linkedList.insert(99);        linkedList.insert(90);        linkedList.insert(95);        linkedList.print();    }}</code></pre><p>这样所有节点都知道下个节点在哪里，只要有首节点的存在，就可以对整个列表进行遍历、插入及删除节点等动作。</p><p>2、<strong>单向链表节点的删除</strong></p><p>将欲删除节点的前一个节点的指针指向欲删除节点的下一个节点即可。</p><p>如果删除 <strong>首节点</strong>，将首节点的下个节点设置为首节点；如果删除 <strong>末节点</strong>，将前一个节点指向 null 即可。</p><pre><code class="lang-Java">  public void delete(Node node) {      Node newNode;      Node temp;      if (first.data == node.data) {          first = first.next;      } else if (last.data == node.data) {          temp = first;          while (temp.next != last) {              temp = temp.next;          }          temp.next = last.next; // temp.next = null;          last = temp; // 设置末节点      } else {          newNode = first;          temp = first;          while (temp.data != node.data) {              newNode = temp;              temp = temp.next;          }          newNode.next = temp.next;      }  }</code></pre><p>这样删除有点弊端，根据 node 节点的值判断是否是同一节点，并且没有对节点是否存在做判断。</p><p>3、<strong>单向链表节点的添加</strong></p><p>添加节点和删除节点有点类似，将前一个节点指向新添加的节点，然后将新添加节点指向下一个节点即可。</p><p>如果添加为 <strong>首节点</strong> ，将欲添加节点指向首节点；如果添加为 <strong>末节点</strong> ，将原末节点指向新节点即可。</p><pre><code class="lang-Java">public void insert(Node node) {    Node newNode;    Node temp;    if (node.next == first) {        node.next = first;        first = node;    } else if (node.next == null) {        last.next = node;        node.next = null;    } else {        newNode = first;        temp = first;        while (node.next != newNode.next) {            temp = newNode;            newNode = newNode.next;        }        temp.next = node;        node.next = newNode;    }}</code></pre><p>这样在节点位置的判断上还是有弊端的。</p><p>4、<strong>单向链表的反转</strong></p><p>面试有时候会让手写这个代码。</p><p><strong>遍历法</strong>: 从链表头部开始，逐个反转节点。</p><pre><code class="lang-Java">public Node reverse(Node head) {    if (head == null) return null;      // 空链表    if (head.next == null) return head; // 一个元素的链表    Node preNode = null;    Node nowNode = head;    while (nowNode != null) {        Node nextNode = nowNode.next;   // 保存下一个结点        nowNode.next = preNode;         // 当前结点指向前一个结点        preNode = nowNode;              // 前任结点 到现任节点        nowNode = nextNode;             // 现任节点到下一结点    }    return preNode;}</code></pre><p><strong>递归法</strong>：从链表尾部开始，逐个反转节点。</p><pre><code class="lang-Java">public Node reverse(Node node) {    if (node == null || node.next == null) return node;    Node headNode = reverse(node.next);    node.next.next = node;    node.next = null;    return headNode;}</code></pre><p>以上算法都需要传入链表的头部节点，打印时需要注意头部和尾部节点引用。</p><p>5、<strong>单向链表的串联</strong></p><p>将列表的首位节点相连即可。</p><pre><code class="lang-Java">public LinkedList connect(LinkedList list1, LinkedList list2) {    LinkedList list = list1;//  while (list.last.next != null) {//     list.last = list.last.next;//  }    list.last.next = list2.first;    return list;}</code></pre><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p>我们把单向链表的尾部指向头部，整个链表就成为单向环形结构。</p><p>这里创建链表、插入节点、删除节点、链表串联都很类似。</p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>双向链表基本结构和单项连链表类似，至少一个节点存放数据，另外它有两个字段存放指针。</p><h1 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h1><p>堆栈是一种抽象的数据结构：只能从堆栈的 <strong>顶端</strong> 访问数据；数据访问符合 <strong>后进先出</strong> 的原则。</p><h2 id="堆栈的数组实现"><a href="#堆栈的数组实现" class="headerlink" title="堆栈的数组实现"></a>堆栈的数组实现</h2><pre><code class="lang-Java">class StackByArray { //以数组模拟堆栈的类声明    private int[] stack; //在类中声明数组    private int top;  //指向堆栈顶端的索引    //StackByArray类构造函数    public StackByArray(int stack_size) {        stack = new int[stack_size]; //建立数组        top = -1;    }    //类方法：push    //存放顶端数据，并更正新堆栈的内容    public boolean push(int data) {        if (top &gt;= stack.length) { //判断堆栈顶端的索引是否大于数组大小            System.out.println(&quot;堆栈已满，无法再加入&quot;);            return false;        } else {            stack[++top] = data; //将数据存入堆栈            return true;        }    }    //类方法：empty    //判断堆栈是否为空堆栈，是则返回true，不是则返回false    public boolean empty() {        if (top == -1) return true;        else return false;    }    //类方法：pop    //从堆栈取出数据    public int pop() {        if (empty()) //判断堆栈是否为空，如果是则返回-1值            return -1;        else            return stack[top--]; //先将数据取出后，再将堆栈指针往下移    }}</code></pre><h2 id="堆栈的链表实现"><a href="#堆栈的链表实现" class="headerlink" title="堆栈的链表实现"></a>堆栈的链表实现</h2><pre><code class="lang-Java">class Node //链接节点的声明{    int data;    Node next;    public Node(int data) {        this.data = data;        this.next = null;    }}class StackByLink {    public Node front; //指向堆栈底端的指针    public Node rear;  //指向堆栈顶端的指针    //类方法：isEmpty()    //判断堆栈如果为空堆栈,则front==null;    public boolean isEmpty() {        return front == null;    }    //打印堆栈内容    public void output_of_Stack() {        Node current = front;        while (current != null) {            System.out.print(&quot;[&quot; + current.data + &quot;]&quot;);            current = current.next;        }        System.out.println();    }    //在堆栈顶端加入数据    public void insert(int data) {        Node newNode = new Node(data);        if (this.isEmpty()) {            front = newNode;            rear = newNode;        } else {            rear.next = newNode;            rear = newNode;        }    }    //在堆栈顶端删除数据    public void pop() {        Node newNode;        if (this.isEmpty()) {            System.out.print(&quot;===目前为空堆栈===\n&quot;);            return;        }        newNode = front;        if (newNode == rear) {            front = null;            rear = null;            System.out.print(&quot;===目前为空堆栈===\n&quot;);        } else {            while (newNode.next != rear)                newNode = newNode.next;            newNode.next = rear.next;            rear = newNode;        }    }}</code></pre><h2 id="堆栈的应用"><a href="#堆栈的应用" class="headerlink" title="堆栈的应用"></a>堆栈的应用</h2><p>二叉树及森林的遍历；图形的深度优先遍历；递归程序的调用及返回等等。</p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列是一种抽象的数据结构：只能从队列的 <strong>两端</strong> 访问数据；数据访问符合 <strong>先进先出</strong> 的原则。</p><h2 id="队列的数组实现"><a href="#队列的数组实现" class="headerlink" title="队列的数组实现"></a>队列的数组实现</h2><pre><code class="lang-Java">public class ArrayQueue {    private int[] data;    private int size;//元素个数    private int front;//队列中第一个对象的位置    private int rear;//队列中当前对象的位置    public ArrayQueue() {        data = new int[10];        size = 0;        front = 0;        rear = 0;    }    public void add(int t) {        if (isFull()) {            resize();            front = 0;        }        rear = (front + size) % data.length;        System.out.println(rear);        data[rear] = t;        size++;    }    public int remove() {        if (isEmpty()) {            throw new RuntimeException(&quot;队列为空!&quot;);        }        int tempData = data[front];        data[front] = 0;        front = (front + 1) % (data.length);        size--;        return tempData;    }    public int size() {        return size;    }    public boolean isEmpty() {        return size == 0;    }    public boolean isFull() {        return size == data.length;    }    public void resize() {        /*注意重新扩容的时候并不需要去设置size         * 队列的大小并不能通过数组的大小直观的显示出来。         * 但是栈就可以直观的通过数组的大小显示出来*/        int[] tmp = new int[data.length * 2];        System.arraycopy(data, 0, tmp, 0, data.length);        data = tmp;        tmp = null;//引用置为空，便于gc处理      }}</code></pre><h2 id="队列的链表实现"><a href="#队列的链表实现" class="headerlink" title="队列的链表实现"></a>队列的链表实现</h2><pre><code class="lang-Java">class QueueNode                 // 队列节点类{    int data;                    // 节点数据    QueueNode next;              // 指向下一个节点    //构造函数    public QueueNode(int data) {        this.data = data;        next = null;    }}class Linked_List_Queue { //队列类    public QueueNode front; //队列的前端指针    public QueueNode rear;  //队列的尾端指针    //构造函数    public Linked_List_Queue() {        front = null;        rear = null;    }    //方法enqueue:队列数据的存入    public boolean enqueue(int value) {        QueueNode node = new QueueNode(value); //建立节点        //检查是否为空队列        if (rear == null)            front = node; //新建立的节点成为第一个节点        else            rear.next = node; //将节点加入到队列的尾端        rear = node; //将队列的尾端指针指向新加入的节点        return true;    }    //方法dequeue:队列数据的取出    public int dequeue() {        int value;        //检查队列是否为空队列        if (!(front == null)) {            if (front == rear) rear = null;            value = front.data; //将队列数据取出            front = front.next; //将队列的前端指针指向下一个            return value;        } else return -1;    }} //队列类声明结束</code></pre><p>环形队列、优先队列、双向队列</p><h1 id="树状结构"><a href="#树状结构" class="headerlink" title="树状结构"></a>树状结构</h1><p>树是一种用来表述有 <strong>分支</strong> 的数据结构，是由一个或者一个以上的节点组成的有限集合。</p><p><strong>树的专有名词</strong>：</p><p>结点度：结点子树的个数；树的度：树中最大的结点度。</p><p>叶子节点：没有子节点的节点，即度为 0 的节点。</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树最多有两个子节点，即度 &lt;= 2 的树。</p><p><strong>特殊的二叉树</strong>：</p><p>1、满二叉树，树的高度为 h 树的节点为 $2^h-1$ 我们称为满二叉树。</p><p>2、完全二叉树，树的高度为 h 树的节点小于 $2^h-1$ ，但是其节点和满二叉树从左到右，从上到下的顺序一一对应。</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/二叉树-特殊的二叉树.png" alt="特殊的二叉树"></p><p>3、歪二叉树，当一个二叉树完全没有右节点/左节点时。</p><p>4、严格二叉树，每个二叉树都有非空的左右子树。成为严格二叉树。</p><h2 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h2><p>1、<strong>数组表示法</strong></p><p>首先将二叉树想象为满二叉树，然后依次存放入数组中，空位为 null 即可。</p><blockquote><p>以数组建立二叉树，要求小于父节点的值放在左子节点，反之放在右边。</p></blockquote><pre><code class="lang-Java">public class CH06_01 {    public static void main(String args[]) throws IOException    {        int i, level;        int data[] = {6, 3, 5, 9, 7, 8, 4, 2}; /*原始数组*/        int btree[] = new int[16];        for (i = 0; i &lt; 16; i++) btree[i] = 0;        System.out.print(&quot;原始数组内容: \n&quot;);        for (i = 0; i &lt; 8; i++)            System.out.print(&quot;[&quot; + data[i] + &quot;] &quot;);        System.out.println();        for (i = 0; i &lt; 8; i++)                    /*把原始数组中的值逐一对比*/ {            for (level = 1; btree[level] != 0; )   /*比较树根及数组内的值*/ {                if (data[i] &gt; btree[level])        /*如果数组内的值大于树根，则往右子树比较*/                    level = level * 2 + 1;                else                               /*如果数组内的值小于或等于树根，则往左子树比较*/                    level = level * 2;            }                                      /*如果子树节点的值不为0，则再与数组内的值比较一次*/            btree[level] = data[i];                /*把数组值放入二叉树*/        }        System.out.print(&quot;二叉树内容：\n&quot;);        for (i = 1; i &lt; 16; i++)            System.out.print(&quot;[&quot; + btree[i] + &quot;] &quot;);        System.out.print(&quot;\n&quot;);    }}</code></pre><p>2、链表表示法</p><p>二叉链表结构主要由一个数据域和两个分别指向左、右孩子的结点组成，其结构如下：</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/二叉树-链表表示法.png" alt="链表表示法"></p><p>TreeNode 及 BinaryTree 声明如下：</p><pre><code class="lang-Java">class TreeNode {    int value;    TreeNode left_Node;    TreeNode right_Node;    // TreeNode构造函数    public TreeNode(int value) {        this.value = value;        this.left_Node = null;        this.right_Node = null;    }}//二叉树类声明class BinaryTree {    public TreeNode rootNode; //二叉树的根节点    //构造函数:利用传入一个数组的参数来建立二叉树    public BinaryTree(int[] data) {        for (int i = 0; i &lt; data.length; i++)            Add_Node_To_Tree(data[i]);    }    //将指定的值加入到二叉树中适当的节点    void Add_Node_To_Tree(int value) {        TreeNode currentNode = rootNode;        if (rootNode == null) { //建立树根            rootNode = new TreeNode(value);            return;        }        //建立二叉树        while (true) {            if (value &lt; currentNode.value) { //在左子树                if (currentNode.left_Node == null) {                    currentNode.left_Node = new TreeNode(value);                    return;                } else currentNode = currentNode.left_Node;            } else { //在右子树                if (currentNode.right_Node == null) {                    currentNode.right_Node = new TreeNode(value);                    return;                } else currentNode = currentNode.right_Node;            }        }    }}</code></pre><p>这样增删很容易，但是不容易找到父节点，除非增加字段。</p><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树的遍历：即“访问树中所有节点各一次”。按照二叉树特性，一律从左向右。</p><p>根据访问根节点的顺序，二叉树的遍历规则主要有四种，先根次序遍历，中根次序遍历，后根次序遍历以及层次遍历。</p><pre><code class="lang-Java">// 中序遍历public void InOrder(TreeNode node) {    if (node != null) {        InOrder(node.left_Node);        System.out.print(&quot;[&quot; + node.value + &quot;] &quot;);        InOrder(node.right_Node);    }}// 前序遍历public void PreOrder(TreeNode node) {    if (node != null) {        System.out.print(&quot;[&quot; + node.value + &quot;] &quot;);        PreOrder(node.left_Node);        PreOrder(node.right_Node);    }}// 后序遍历public void PostOrder(TreeNode node) {    if (node != null) {        PostOrder(node.left_Node);        PostOrder(node.right_Node);        System.out.print(&quot;[&quot; + node.value + &quot;] &quot;);    }}</code></pre><h1 id="图形结构"><a href="#图形结构" class="headerlink" title="图形结构"></a>图形结构</h1><p>图形结构是用来探讨两个顶点间是否相连的关系图，若在边上加权值，这类图成为“网络”。</p><h2 id="图形介绍"><a href="#图形介绍" class="headerlink" title="图形介绍"></a>图形介绍</h2><p>图形有两种：有向图、无向图。</p><p>图形的专业术语：</p><p>度：一个顶点所拥有边的总数。<br>入/出度：在有向图中，定点为箭头终点的边的个数为入度；出度为起点边的个数。</p><h2 id="图形的表示法"><a href="#图形的表示法" class="headerlink" title="图形的表示法"></a>图形的表示法</h2><p>1、邻接矩阵法/相邻表法</p><p>2、相邻多元列表法/索引表格法</p><h2 id="图形的遍历"><a href="#图形的遍历" class="headerlink" title="图形的遍历"></a>图形的遍历</h2><p>图形的遍历方法有两种：深度优先遍历、广度优先遍历。</p><p>1、深度优先使用递归与 <strong>堆栈</strong> 的技巧</p><p>从图形的某一顶点开始遍历，被访问过的顶点就做上已访问的记号，接着遍历此顶点的所有相邻且未访问过的顶点中的任意一个顶点，并做上已访问的记号，再以该点为新的起点继续进行先深后广的搜索。</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/图形-图的遍历.png" alt="图形-图的遍历"></p><p>（1）从起点 1 开始，将相邻的 2 3 放入堆栈</p><p>3 2</p><p>（2）将 2 取出，并将与 2 相邻且未访问的 4 5 放入堆栈</p><p>3 5 4</p><p>（3）将 4 取出，并将与 4 相邻且未访问的 8 放入堆栈</p><p>3 5 8</p><p>（4）将 8 取出，并将与 8 相邻且未访问的 5 放入堆栈</p><p>3 5 5</p><p>（5）将 5 取出，发现与 5 相邻的节点都访问过了，这里就舍去</p><p>3</p><p>（6）将 3 取出，并将与 3 相邻且未访问的 6 7 放入堆栈</p><p>7 6</p><p>（7）最后将堆栈的节点逐个判断即可。</p><p>7 7</p><p>最终遍历顺序为：1 -&gt; 2 -&gt; 4 -&gt; 8 -&gt; 5 -&gt; 3 -&gt; 6 -&gt; 7</p><pre><code class="lang-Java">public static void dfs(int current){    run[current] = 1;    System.out.print(&quot;[&quot; + current + &quot;]&quot;);    while ((Head[current].first) != null) {        if (run[Head[current].first.x] == 0) //如果顶点尚未遍历，就进行dfs的递归调用            dfs(Head[current].first.x);        Head[current].first = Head[current].first.next;    }}</code></pre><p>2、广度优先使用递归与 <strong>队列</strong> 的技巧</p><p>从图形的某顶点开始遍历，被访问过的顶点就做上已访问的记号，接着遍历此顶点的所有相邻且未访问过的顶点中的任意个顶点，并做上已访问的记号，再以该点为新的起点继续进行先广后深的搜索。</p><p><img src="https://img.wshunli.com/数据结构与算法/图解数据结构/图形-图的遍历.png" alt="图形-图的遍历"></p><p>（1）从起点 1 开始，将相邻的 2 3 放入堆栈</p><p>2 3</p><p>（2）将 2 取出，并将与 2 相邻且未访问的 4 5 放入堆栈</p><p>3 4 5</p><p>（3）将 3 取出，并将与 3 相邻且未访问的 6 7 放入堆栈</p><p>4 5 6 7</p><p>（4）将 4 取出，并将与 4 相邻且未访问的 8 放入堆栈</p><p>5 6 7 8</p><p>（5）将 5 取出，并将与 5 相邻且未访问的 8 放入堆栈</p><p>6 7 8 8</p><p>（6）将 6 取出，并将与 6 相邻且未访问的 7 放入堆栈</p><p>7 8 8 7</p><p>（7）将 7 取出，发现与 7 相邻的节点都访问过了，这里就舍去</p><p>8 8 7</p><p>（8）最后将队列的节点逐个判断即可。</p><p>8 7</p><p>最终遍历顺序为：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8</p><pre><code class="lang-Java">public void bfs(int current) {    Node tempnode; //临时的节点指针    enqueue(current); //将第一个顶点存入队列    run[current] = 1; //将遍历过的顶点设定为1    System.out.print(&quot;[&quot; + current + &quot;]&quot;); //打印该遍历过的顶点    while (front != rear) { //判断目前是否为空队列        current = dequeue(); //将顶点从队列中取出        tempnode = Head[current].first; //先记录目前顶点的位置        while (tempnode != null) {            if (run[tempnode.x] == 0) {                enqueue(tempnode.x);                run[tempnode.x] = 1; //记录已遍历过                System.out.print(&quot;[&quot; + tempnode.x + &quot;]&quot;);            }            tempnode = tempnode.next;        }    }}</code></pre><h2 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h2><p>一个图形的生成树以最少的边来连接图形中所有的顶点，且不造成回路(Cycle)的树状结构。</p><p>深度优先生成树、广度优先生成树。</p><p>MST 生成树，即在加权图（网络）上，计算路径成本最小的的生成树。有 Peim 算法和 Kruskal 算法等。</p><blockquote><p>前面一直学习的数据结构，下面排序、查找属于算法的范畴了。</p></blockquote><p>数据结构：<a href="https://www.wshunli.com/posts/850e5c53.html">https://www.wshunli.com/posts/850e5c53.html</a><br>算法：<a href="https://www.wshunli.com/posts/444e2c0f.html">https://www.wshunli.com/posts/444e2c0f.html</a></p><blockquote><p>参考资料<br>1、《图解数据结构-使用Java》<br>2、（数据结构）十分钟搞定时间复杂度（算法的时间复杂度） - 简书<br><a href="https://www.jianshu.com/p/f4cca5ce055a" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f4cca5ce055a</a><br>3、单链表反转的两种实现（Java） - CSDN博客<br><a href="https://blog.csdn.net/acquaintanceship/article/details/73011169" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/acquaintanceship/article/details/73011169</a><br>4、data structures - Reversing a linked list in Java, recursively - Stack Overflow<br><a href="https://stackoverflow.com/questions/354875/reversing-a-linked-list-in-java-recursively" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/354875/reversing-a-linked-list-in-java-recursively</a><br>5、【算法】如何判断链表有环 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/78896293" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/78896293</a><br>6、队列的实现(JAVA) - CSDN博客<br><a href="https://blog.csdn.net/lcore/article/details/8868078" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lcore/article/details/8868078</a><br>7、树和二叉树定义、基本术语和性质 - CSDN博客<br><a href="https://blog.csdn.net/lsh_2013/article/details/43121373" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lsh_2013/article/details/43121373</a><br>8、java数据结构与算法之树基本概念及二叉树（BinaryTree）的设计与实现 - CSDN博客<br><a href="https://blog.csdn.net/javazejian/article/details/53727333" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/javazejian/article/details/53727333</a><br>9、data structures - Difference between “Complete binary tree”, “strict binary tree”,”full binary Tree”? - Stack Overflow<br><a href="https://stackoverflow.com/questions/12359660/difference-between-complete-binary-tree-strict-binary-tree-full-binary-tre" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/12359660/difference-between-complete-binary-tree-strict-binary-tree-full-binary-tre</a><br>10、数据结构 - 图的基本术语 - CSDN博客<br><a href="https://blog.csdn.net/wangzi11322/article/details/45417081" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/wangzi11322/article/details/45417081</a><br>11、《图论》——图的存储与遍历（Java） - CSDN博客<br><a href="https://blog.csdn.net/Gamer_gyt/article/details/51498546" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/Gamer_gyt/article/details/51498546</a><br>12、Java 与图 - 简书<br><a href="https://www.jianshu.com/p/a47a147ec92c" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/a47a147ec92c</a><br>13、DFS（深度优先搜索）和BFS(广度优先搜索) - 简书<br><a href="https://www.jianshu.com/p/b086986969e6" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/b086986969e6</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据结构与算法一直是比较薄弱的地方，不仅在面试的时候会问相关问题、手写代码，而且在笔试的时候发挥重要作用。&lt;/p&gt;&lt;p&gt;这次选择看的书籍是 《图解数据结构-使用Java》 ，先入门，后面再深入学习。&lt;/p&gt;&lt;p&gt;算法的时间复杂度，用来度量算法的运行时间，记作: T(n) =
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="数据结构与算法" scheme="https://www.wshunli.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="https://www.wshunli.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘阿里巴巴面试</title>
    <link href="https://www.wshunli.com/posts/964a7017.html"/>
    <id>https://www.wshunli.com/posts/964a7017.html</id>
    <published>2018-08-29T07:51:07.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘阿里巴巴面试（客户端开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘金山软件面试</title>
    <link href="https://www.wshunli.com/posts/52954f8e.html"/>
    <id>https://www.wshunli.com/posts/52954f8e.html</id>
    <published>2018-08-29T03:01:12.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘金山软件面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins及C++自动检测流水线搭建流程方法</title>
    <link href="https://www.wshunli.com/posts/22a0081c.html"/>
    <id>https://www.wshunli.com/posts/22a0081c.html</id>
    <published>2018-08-17T02:18:16.000Z</published>
    <updated>2018-09-09T03:53:54.560Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要整理 UK 代码自动检测流水线搭建流程方法。</p><h1 id="UK-代码自动检测流水线搭建概述"><a href="#UK-代码自动检测流水线搭建概述" class="headerlink" title="UK 代码自动检测流水线搭建概述"></a>UK 代码自动检测流水线搭建概述</h1><p>依托 Atlas 实现 Pclint、Compile、CodeDEX、Cmetrics 流水线，自动 check 代码和 UK 要求的符合度。</p><h1 id="流水线-Cmetrics-代码量检测任务创建配置"><a href="#流水线-Cmetrics-代码量检测任务创建配置" class="headerlink" title="流水线 Cmetrics 代码量检测任务创建配置"></a>流水线 Cmetrics 代码量检测任务创建配置</h1><p>2.0、Cmetrics 环境</p><p>主要涉及 Python 环境搭建、Cmetrics 插件安装及其脚本部署。前面介绍已经比较详细，不再赘述。</p><p>2.1、Jenkins 中创建配置 Cmetrics 任务</p><p>创建 Cmetrics 任务前面也有介绍，但是配置任务时，我们可以将 Cmetrics 脚本路径写入环境参数，比如 cmetrics_dir ： /usr1/cmetrics 。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image001.png" alt="image"></p><p>执行以下 shell 脚本：</p><pre><code class="lang-shell">cd $cmetrics_dirpython cmetrics.py -p 8 -fp /usr1/HEAD_OSP_Version/Version/USP_ONE_TRUNK/CI_USP_CONFIG -ft xml -d all -o /usr1/HEAD_OSP_Version/Version/cmetrics_CI_USP_CONFIG.xml</code></pre><p>最后收集报告即可。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image002.png" alt="image"></p><p>2.2、代码量较大相关问题解决方法</p><p>代码量过大，因而生成报告过大，脚本进程被杀死。</p><p>1、代码量较大导致构建失败</p><p>可以在一个任务里写七条脚本，这样会顺序队列执行，但是这样 Cmetrics 插件无法解析结果，并且无法与 Atalas 对接，不过可以正确生成报告。本文推荐拆分为七个 Jenkins 任务执行，每个个任务检查一个仓库。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image003.png" alt="image"></p><p>2、代码量较大导致同步时间较长</p><p>可以配置 RsyncFiles 和 RsyncExcludeFiles 参数减少代码的同步量，以提高效率。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image004.png" alt="image"></p><h1 id="流水线-Compile-代码编译任务创建配置"><a href="#流水线-Compile-代码编译任务创建配置" class="headerlink" title="流水线 Compile 代码编译任务创建配置"></a>流水线 Compile 代码编译任务创建配置</h1><p>3.1、编译任务创建配置</p><p>编译任务主要由 HWCompile 插件处理。</p><p>工作空间：USP_ONE_TRUNK/domain/trunk/ci_onetrunk/entrance/v1r17/OSP<br>编译脚本：osp_head_packet.sh</p><p>具体详细配置可参考：<br><a href="http://100.112.230.148:9999/job/UTS_V1R7_OSP_T_TEST_compile_version/" rel="external nofollow noopener noreferrer" target="_blank">http://100.112.230.148:9999/job/UTS_V1R7_OSP_T_TEST_compile_version/</a></p><p>3.2、编译告警日志收集</p><p>1、编译前删除所有日志，执行以下 shell 脚本：</p><pre><code class="lang-shell">find $workspace_pom -name &quot;*.log&quot; -type f -print -exec rm -rf {} \;</code></pre><p>2、编译后收集日志，执行以下 shell 脚本：</p><pre><code class="lang-shell">cd $workspace_pommkdir ./VersionLogfind . -name &quot;*.log&quot; -type f -print -exec cp {} ./VersionLog \;cd VersionLogfind . -name &quot;*.log&quot; -type f -print -exec cat {} \; &gt; build.txtcp /usr1/tools/ccgs/cwarning/cwarning.sh $workspace_pom/VersionLogchmod -R 755 ./cwarning.shsh ./cwarning.sh ./build.txt ./cwarning_result.txtexit 0</code></pre><p>思路流程如下：</p><p>（1）首先在工作空间创建日志目录，然后找到所有 .log 日志拷贝至日志目录；<br>（2）将所有日志合并为一个文件；<br>（3）执行 cwarning.sh 脚本并退出。</p><p>此脚本成功执行并正确生成结果，还是会导致 Jenkins 任务失败。</p><h1 id="流水线-Pclint-代码检测任务创建配置"><a href="#流水线-Pclint-代码检测任务创建配置" class="headerlink" title="流水线 Pclint 代码检测任务创建配置"></a>流水线 Pclint 代码检测任务创建配置</h1><p>Pclint 任务可由 Atalas 模板创建，使用 Windows 机器。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image005.png" alt="image"></p><p>其中：<br>ToolPath：Pclint 工具路径；SrcRootPath：代码根目录。<br>DefaultLntFile：默认的 lnt 文件路径；DefaultEnv： lnt 文件中的默认的环境变量。</p><p>模块配置中：<br>Include：需要检查的文件路径；Exclude：需要排除的文件路径。Env：环境变量。</p><p>本任务没有运行成功，问题已定位、正在解决。</p><h1 id="流水线-CodeDEX-代码检测任务创建配置"><a href="#流水线-CodeDEX-代码检测任务创建配置" class="headerlink" title="流水线 CodeDEX 代码检测任务创建配置"></a>流水线 CodeDEX 代码检测任务创建配置</h1><p>CodeDEX 任务同样可由 Atlas 创建，配置如下，其他为空。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image006.png" alt="image"></p><p>其中：<br>Tool Home 和 Tool Version 分别表示 CodeDEX 工具包安装路径及系统版本；<br>Executable：对代码进行编译的脚本；Working Dir：可执行编译脚本的执行路径。<br>具体到 Jenkins 任务中的配置如下，其实 Atlas 创建的任务是不能直接用的。</p><p><img src="https://img.wshunli.com/Jenkins/cplusplus/image007.png" alt="image"></p><p>需要注意一下几点：<br>1、 CodeDEX 插件不支持参数化，需要把具体内容填死，没有内容为空。<br>2、 注意 upload the middle file 参数，点开隐藏参数删除。<br>3、 注意 layerpath 参数，需要以 / 符号开头，表示文件夹。<br>4、 参数 mailto 为必填项，填工号即可。<br>5、 根据系统环境选择合适的检查脚本。<br>6、可选配置 RsyncFiles 和 RsyncExcludeFiles 参数，同步所需仓库，排除 .git 文件夹。</p><blockquote><p>参考资料：<br>1、【P&amp;S】 Cmetrics工具试用指南 - 云核心网系统工程能力中心 - 3MS知识管理社区<br><a href="http://3ms.[wshunli].com/km/groups/2033815/blogs/details/5582855" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/groups/2033815/blogs/details/5582855</a><br>2、CGPS/cmetrics/tree/master | iSource 5.0<br><a href="http://isource.[wshunli].com/CGPS/cmetrics/tree/master" rel="external nofollow noopener noreferrer" target="_blank">http://isource.[wshunli].com/CGPS/cmetrics/tree/master</a><br>3、linux中find与rm实现查找并删除目录或文件 - CSDN博客<br><a href="https://blog.csdn.net/wbaction/article/details/72794251" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/wbaction/article/details/72794251</a><br>4、Linux下用find查找并复制指定文件到指定目录下 - CSDN博客<br><a href="https://blog.csdn.net/mydriverc2/article/details/78805287" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/mydriverc2/article/details/78805287</a><br>5、bash - find: missing argument to -exec - Stack Overflow<br><a href="https://stackoverflow.com/questions/2961673/find-missing-argument-to-exec" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/2961673/find-missing-argument-to-exec</a><br>6、一起学shell（一）：合并文件夹下所有文件 - CSDN博客<br><a href="https://blog.csdn.net/navylq/article/details/9496573" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/navylq/article/details/9496573</a><br>7、l00370463/Atlas_Config_Com/tree/CodeGate | iSource 5.0<br><a href="http://rnd-isourceb.[wshunli].com/Atlas_Config_Com/CodeGate/ctrl_compile_warning/x86_warning_ctrl.sh" rel="external nofollow noopener noreferrer" target="_blank">http://rnd-isourceb.[wshunli].com/Atlas_Config_Com/CodeGate/ctrl_compile_warning/x86_warning_ctrl.sh</a><br>8、jenkins上windows的pclint插件使用指导 - 开发工具社区 - 3ms知识管理社区<br><a href="http://3ms.[wshunli].com/hi/group/6373/wiki_4440979.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/6373/wiki_4440979.html</a><br>9、Jenkins PCLint配置（CloudUGW18.10） - 李海燕的博客<br><a href="http://3ms.[wshunli].com/km/blogs/details/5351877" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/blogs/details/5351877</a><br>10、基于Jenkins的CodeDEX检查 - 云核心网系统工程能力中心 - 3ms知识管理社区<br><a href="http://3ms.[wshunli].com/hi/group/2033815/wiki_4383101.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/2033815/wiki_4383101.html</a><br>11、CodeDEX搭建指导 - 处理器基础软件『芯随我动』 - 3ms知识管理社区<br><a href="http://3ms.[wshunli].com/hi/group/1503481/thread_5128047.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/1503481/thread_5128047.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要整理 UK 代码自动检测流水线搭建流程方法。&lt;/p&gt;&lt;h1 id=&quot;UK-代码自动检测流水线搭建概述&quot;&gt;&lt;a href=&quot;#UK-代码自动检测流水线搭建概述&quot; class=&quot;headerlink&quot; title=&quot;UK 代码自动检测流水线搭建概述&quot;&gt;&lt;/a&gt;UK 代码
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins与Atlas中间层系统对接流程方法</title>
    <link href="https://www.wshunli.com/posts/c74848c1.html"/>
    <id>https://www.wshunli.com/posts/c74848c1.html</id>
    <published>2018-08-11T01:59:05.000Z</published>
    <updated>2018-09-09T03:53:54.560Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要整理 Jenkins 与 Atlas 对接流程方法。</p><h1 id="Jenkins-与-Atlas-对接概述"><a href="#Jenkins-与-Atlas-对接概述" class="headerlink" title="Jenkins 与 Atlas 对接概述"></a>Jenkins 与 Atlas 对接概述</h1><p>Atlas 是中间层的系统，负责工程和任务的执行流程、构建、结果展示，Jenkins 是最底层的应用系统，集成了任务和工程的基本配置，工程的任务执行、结果回收、机器调用和管理，都是 Jenkins 实现的。</p><p>新建流水线有两种方式：模板（Template Pipeline）和非模板流水线（Pipeline）。</p><p>前者可以使用 Atlas 创建 Jenkins 任务（并不是所有的 Jenkins 任务都可以模板创建），尤其是涉及到代码同步时，提高配置 Jenkins 任务准确度和效率，减少重复劳动。</p><p>后者主要用于 Atals 和 Jenkins 任务关联，需要先导入 Jenkins 视图，也可以在 Jenkins 中通过复制模板任务来创建，建议将下载和编译设置在同一任务。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image001.png" alt="image"></p><h1 id="Jenkins-与-Atlas-对接流程（Template-Pipeline）"><a href="#Jenkins-与-Atlas-对接流程（Template-Pipeline）" class="headerlink" title="Jenkins 与 Atlas 对接流程（Template Pipeline）"></a>Jenkins 与 Atlas 对接流程（Template Pipeline）</h1><p>首先在右上角选择合适的版本，没有权限时，注意添加权限。在基础信息设置流水线类型及名称；在流水线参数中设置工作空间及主源码仓库即可。</p><p>然后系统会自动添加 Stage 阶段，我们在相应的 Stage 添加合适的 Task 任务即可，如下图示。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image002.png" alt="image"></p><p>详细的模板创建可参考：<a href="http://3ms.[wshunli].com/hi/group/3211543/file_12423313.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/3211543/file_12423313.html</a></p><h1 id="Jenkins-与-Atlas-对接流程（Pipeline）"><a href="#Jenkins-与-Atlas-对接流程（Pipeline）" class="headerlink" title="Jenkins 与 Atlas 对接流程（Pipeline）"></a>Jenkins 与 Atlas 对接流程（Pipeline）</h1><p>非模板和模板非常类似，首先在基础信息选择流水线构建类型、名称，代码仓库地址、分支等信息。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image003.png" alt="image"></p><p>然后会进入和模板类似的界面，在这里关联 Jenkins 任务即可。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image004.png" alt="image"></p><p>关联 Jenkins 任务的流程方法如下：<br>1、 首先导入所需 Jenkins 视图；<br>2、 然后新建 Task 选择合适的 Jenkins 任务即可。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image005.png" alt="image"></p><p>最后流水线执行报告和非模板相同。</p><h1 id="相关问题及解决方法"><a href="#相关问题及解决方法" class="headerlink" title="相关问题及解决方法"></a>相关问题及解决方法</h1><p>1、 权限问题，联系添加权限解决。<br>2、 流水线重复执行问题，删除多余流水线，重新提交 MR 解决。<br>3、 Windows 从机无法下载源码，更新 tbs-git 插件至 2.7.7 ，安装 rsync 软件。<br>4、 Jenkins 任务不执行，更新 notification 插件版本至 1.9.7 。<br>5、 工程构建失败，注意 Maven 环境及镜像设置。</p><p>首先应该准备好 Jenkins 环境及插件，尤其注意其版本，其次注意 Slaver 机器的环境安装配置，比如任务所需操作系统，工具软件环境配置，针对 Java 流水线包括，Java 环境、Maven 构建工具等等。</p><p><img src="https://img.wshunli.com/Jenkins/atlas/image006.png" alt="image"></p><blockquote><p>参考资料：<br>1、精益流水线Atlas快速上手 - 李永峰的博客<br><a href="http://3ms.[wshunli].com/km/blogs/details/5488779" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/blogs/details/5488779</a><br>2、atlas、jenkins、cloudbuild、isource、smartide关联关系介绍 - 精益流水线 - 3ms知识管理社区<br><a href="http://3ms.[wshunli].com/hi/group/3211543/thread_7146097.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/3211543/thread_7146097.html</a><br>3、用rsync在linux编译机和windows桌面之间同步代码 - 黄岩的博客<br><a href="http://3ms.[wshunli].com/km/blogs/details/2652181" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/blogs/details/2652181</a><br>4、导入jenkins任务到atlas - 精益流水线 - 3MS知识管理社区<br><a href="http://3ms.[wshunli].com/km/groups/3211543/blogs/details/5535979" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/groups/3211543/blogs/details/5535979</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要整理 Jenkins 与 Atlas 对接流程方法。&lt;/p&gt;&lt;h1 id=&quot;Jenkins-与-Atlas-对接概述&quot;&gt;&lt;a href=&quot;#Jenkins-与-Atlas-对接概述&quot; class=&quot;headerlink&quot; title=&quot;Jenkins 与 Atlas
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘中国银联面试</title>
    <link href="https://www.wshunli.com/posts/b372432c.html"/>
    <id>https://www.wshunli.com/posts/b372432c.html</id>
    <published>2018-08-08T05:22:35.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘中国银联面试（客户端开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘</title>
    <link href="https://www.wshunli.com/posts/8dfab246.html"/>
    <id>https://www.wshunli.com/posts/8dfab246.html</id>
    <published>2018-07-30T01:24:39.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季（2019届应届生）校园招聘。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（十一）</title>
    <link href="https://www.wshunli.com/posts/a7e2fd51.html"/>
    <id>https://www.wshunli.com/posts/a7e2fd51.html</id>
    <published>2018-07-27T06:41:47.000Z</published>
    <updated>2018-09-09T03:53:54.568Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】算是人生的第一份工作吧
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins安装Java代码质量分析工具</title>
    <link href="https://www.wshunli.com/posts/57f40b04.html"/>
    <id>https://www.wshunli.com/posts/57f40b04.html</id>
    <published>2018-07-25T01:15:32.000Z</published>
    <updated>2018-09-09T03:53:54.560Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Checkstyle、PMD、FindBugs 三款主流的 Java 静态分析工具，以及 SourceMonitor 代码度量工具，Simian 代码重复检查工具等。</p><h1 id="Jenkins-安装-Java-代码质量分析工具"><a href="#Jenkins-安装-Java-代码质量分析工具" class="headerlink" title="Jenkins 安装 Java 代码质量分析工具"></a>Jenkins 安装 Java 代码质量分析工具</h1><p>在 Java 世界中，Checkstyle、PMD、FindBugs 插件是三款主流的静态分析工具。</p><p>1、Checkstyle 擅长检查编码标准和约定，编码行为以及其他的一些质量指标（如代码复杂度）。</p><p>Checkstyle（<a href="http://checkstyle.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">http://checkstyle.sourceforge.net/</a> ） 是 SourceForge 下的一个项目，提供了一个帮助 JAVA 开发人员遵守某些编码规范的工具。</p><p>CheckStyle 检验的主要内容包括：Javadoc 注释、命名约定、标题、Import 语句、体积大小、空白、修饰符、块、代码问题、类设计和混合检查（包括一些有用的比如非必须的 System.out 和 printstackTrace）。</p><p>在 Jenkins 中安装 CheckStyle 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="lang-XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;        &lt;version&gt;2.16&lt;/version&gt;        &lt;configuration&gt;            &lt;configLocation&gt;checkstyle.xml&lt;/configLocation&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>checkstyle:checkstyle</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/Checkstyle+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Checkstyle+Plugin</a></p><p>2、PMD 类似于 Checkstyle ，它更加专注于编码和设计实践。</p><p>PMD（<a href="https://pmd.github.io/" rel="external nofollow noopener noreferrer" target="_blank">https://pmd.github.io/</a> ） An extensible cross-language static code analyzer.</p><p>专注于潜在的编码问题，比如未使用或者次优化的代码，代码大小和复杂性，以及良好的编码行为。</p><p>PMD 也附带了 CPD ，以支持探测重复或者近似重复代码。</p><p>在 Jenkins 中安装 PMD 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="lang-XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-pmd-plugin&lt;/artifactId&gt;        &lt;version&gt;3.5&lt;/version&gt;    &lt;/plugin&gt;            ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>pmd:pmd</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/PMD+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/PMD+Plugin</a></p><p>3、FindBugs 专注于识别潜在的危险和错误的代码。</p><p>FindBugs（<a href="http://findbugs.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">http://findbugs.sourceforge.net/</a> ） 检查应用程序的字节码来找出潜在的 bug 、性能问题或者差的编码行为。</p><p>在 Jenkins 中安装 FindBugs 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="lang-XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;        &lt;artifactId&gt;findbugs-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.5.2&lt;/version&gt;        &lt;configuration&gt;            &lt;findbugsXmlOutput&gt;true&lt;/findbugsXmlOutput&gt;            &lt;findbugsXmlWithMessages&gt;true&lt;/findbugsXmlWithMessages&gt;            &lt;xmlOutput&gt;true&lt;/xmlOutput&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>findbugs:findbugs</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/FindBugs+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/FindBugs+Plugin</a></p><p>4、Static Analysis Collector 插件汇总静态分析结果</p><p>插件地址：<a href="https://wiki.jenkins.io/display/JENKINS/Analysis+Collector+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Analysis+Collector+Plugin</a></p><h1 id="Jenkins-安装-SourceMonitor-代码度量工具"><a href="#Jenkins-安装-SourceMonitor-代码度量工具" class="headerlink" title="Jenkins 安装 SourceMonitor 代码度量工具"></a>Jenkins 安装 SourceMonitor 代码度量工具</h1><p>SourceMonitor（<a href="http://www.campwoodsw.com/sourcemonitor.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.campwoodsw.com/sourcemonitor.html</a> ） 允许查看软件源代码内部，以了解项目拥有的代码量，并确定模块的相对复杂度。</p><p>在 Jenkins 中也有 SourceMonitor（<a href="https://github.com/jenkinsci/sourcemonitor-plugin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/jenkinsci/sourcemonitor-plugin</a> ）插件，但是好久没更新了，也存在一些问题（<a href="https://issues.jenkins-ci.org/browse/JENKINS-5741" rel="external nofollow noopener noreferrer" target="_blank">https://issues.jenkins-ci.org/browse/JENKINS-5741</a> ）。</p><p>报错如下：</p><pre><code class="lang-TXT">Parsing sourcemonitor resultshudson.AbortException: Parsing file error    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorParser.invoke(SourceMonitorParser.java:70)    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorParser.invoke(SourceMonitorParser.java:45)    at hudson.FilePath.act(FilePath.java:1047)    at hudson.FilePath.act(FilePath.java:1025)    at com.thalesgroup.hudson.plugins.sourcemonitor.SourceMonitorPublisher.perform(SourceMonitorPublisher.java:80)    at hudson.tasks.BuildStepMonitor$3.perform(BuildStepMonitor.java:45)    at hudson.model.AbstractBuild$AbstractBuildExecution.perform(AbstractBuild.java:744)    at hudson.model.AbstractBuild$AbstractBuildExecution.performAllBuildSteps(AbstractBuild.java:690)    at hudson.model.Build$BuildExecution.post2(Build.java:186)    at hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:635)    at hudson.model.Run.execute(Run.java:1819)    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)    at hudson.model.ResourceController.execute(ResourceController.java:97)    at hudson.model.Executor.run(Executor.java:429)Build step &#39;Publish SourceMonitor results&#39; changed build result to FAILUREBuild step &#39;Publish SourceMonitor results&#39; marked build as failureFinished: FAILURE</code></pre><p>原因是在构建的时候需要添加 <code>sourcemonitor:sourcemonitor</code> 参数。</p><p>SourceMonitor 插件地址：<a href="https://plugins.jenkins.io/sourcemonitor" rel="external nofollow noopener noreferrer" target="_blank">https://plugins.jenkins.io/sourcemonitor</a></p><p>这里可以安装公司内部的 <code>hwSourceMonitor.hpi</code> 插件</p><p>参考资料：<br>1、<a href="http://3ms.[wshunli].com/km/blogs/details/2503631" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/blogs/details/2503631</a><br>2、<a href="http://3ms.[wshunli].com/hi/group/2033815/wiki_4496373.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/2033815/wiki_4496373.html</a></p><p><del>也可以使用 HTML Publisher 插件解析 SourceMonitor 输出的 xml 结果。</del></p><p>0、准备 SourceMonitor 并安装 Jenkins Server 上。</p><p>本文安装在 <code>C:\Program Files (x86)\SourceMonitor\SourceMonitor.exe</code> 目录。</p><p>1、安装 HTML Publisher 插件。</p><p>HTML Publisher Plugin 用来把 SourceMonitor 检测的结果可视化。</p><p>2、在构建后添加 Windows 批处理命令。</p><pre><code class="lang-Shell">&quot;C:\Program Files (x86)\SourceMonitor\SourceMonitor.exe&quot; /C &quot;C:\CI_Tools\SourceMonitorCommand.xml&quot;&quot;C:\CI_Tools\msxsl.exe&quot; SourceMonitorReport.xml &quot;C:\CI_Tools\SourceMonitorSummaryGeneration.xsl&quot; -o SourceMonitorSummaryGeneration.xml&quot;C:\CI_Tools\msxsl.exe&quot; SourceMonitorSummaryGeneration.xml &quot;C:\CI_Tools\SourceMonitor.xsl&quot; -o SourceMonitorResult.html</code></pre><p>其中 <code>SourceMonitorCommand.xml</code> 来自</p><p><code>C:\Program Files (x86)\SourceMonitor\Samples\sample_commands.xml</code></p><pre><code class="lang-XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;sourcemonitor_commands&gt;    &lt;write_log&gt;true&lt;/write_log&gt;    &lt;command&gt;        &lt;project_file&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\target/sourcemonitor\project.smp&lt;/project_file&gt;        &lt;project_language&gt;Java&lt;/project_language&gt;        &lt;source_directory&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\src\main\java&lt;/source_directory&gt;        &lt;parse_utf8_files&gt;true&lt;/parse_utf8_files&gt;        &lt;file_extensions&gt;*.java&lt;/file_extensions&gt;        &lt;include_subdirectories&gt;true&lt;/include_subdirectories&gt;        &lt;export&gt;            &lt;export_file&gt;C:\Windows\System32\config\systemprofile\.jenkins\workspace\findbugs-demo\target/sourcemonitor\sourcemonitor.xml&lt;/export_file&gt;            &lt;export_type&gt;2 (project details as XML)&lt;/export_type&gt;            &lt;export_option&gt;Include method metrics: option 3&lt;/export_option&gt;        &lt;/export&gt;    &lt;/command&gt;&lt;/sourcemonitor_commands&gt;</code></pre><p>需要下载 <code>msxsl</code> 工具（<a href="http://www.microsoft.com/en-us/download/details.aspx?id=21714" rel="external nofollow noopener noreferrer" target="_blank">http://www.microsoft.com/en-us/download/details.aspx?id=21714</a> ）并放置到 <code>C:\CI_Tools</code> 目录下。</p><p>3、最后添加 Publish HTML reports 即可。</p><p>不过我没有配置成功，总是提示找不到 <code>SourceMonitorReport.xml</code> 文件。</p><p>如果使用 SourceMonitor 插件遇到如下 OutOfMemoryError 错误。</p><pre><code class="lang-TXT">FATAL: Java heap spacejava.lang.OutOfMemoryError: Java heap space</code></pre><p>解决办法：<a href="https://wiki.jenkins.io/display/JENKINS/Builds+failing+with+OutOfMemoryErrors" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Builds+failing+with+OutOfMemoryErrors</a></p><h1 id="Jenkins-安装-Simian-代码重复检查工具"><a href="#Jenkins-安装-Simian-代码重复检查工具" class="headerlink" title="Jenkins 安装 Simian 代码重复检查工具"></a>Jenkins 安装 Simian 代码重复检查工具</h1><p>Simian（<a href="http://www.harukizaemon.com/simian/" rel="external nofollow noopener noreferrer" target="_blank">http://www.harukizaemon.com/simian/</a> ） 是一个检查重复代码的工具。</p><p>这里可以使用公司内部的插件</p><p><a href="http://3ms.[wshunli].com/hi/group/2964/wiki_4145693.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/2964/wiki_4145693.html</a></p><h1 id="Jenkins-安装-Cobertura-代码测试覆盖率工具"><a href="#Jenkins-安装-Cobertura-代码测试覆盖率工具" class="headerlink" title="Jenkins 安装 Cobertura 代码测试覆盖率工具"></a>Jenkins 安装 Cobertura 代码测试覆盖率工具</h1><p>Cobertura（<a href="https://sourceforge.net/projects/cobertura/" rel="external nofollow noopener noreferrer" target="_blank">https://sourceforge.net/projects/cobertura/</a> ） 一项衡量是否所有代码都被测到的工具。</p><p>在 Jenkins 中安装 Cobertura 插件并重启。</p><p>在项目中配置 <code>pom.xml</code> （可选）</p><pre><code class="lang-XML">&lt;plugins&gt;    &lt;plugin&gt;        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;        &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;        &lt;version&gt;2.6&lt;/version&gt;        &lt;configuration&gt;            &lt;instrumentation&gt;                &lt;ignoreTrivial&gt;false&lt;/ignoreTrivial&gt;            &lt;/instrumentation&gt;            &lt;formats&gt;                &lt;format&gt;html&lt;/format&gt;                &lt;format&gt;xml&lt;/format&gt;            &lt;/formats&gt;        &lt;/configuration&gt;    &lt;/plugin&gt;    ....&lt;/plugins&gt;</code></pre><p>在 Maven 构建中添加 <code>cobertura:cobertura</code> 参数。</p><p><code>compile -D cobertura.report.format=xml clean compile cobertura:cobertura</code></p><p>这里注意添加 <code>-D cobertura.report.format=xml</code> 参数。</p><p>构建完成后输出 XML 分析结果，文件在 <code>target</code> 目录下。</p><p>关于插件使用的更多信息可参考：<br><a href="https://wiki.jenkins.io/display/JENKINS/Cobertura+Plugin" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.jenkins.io/display/JENKINS/Cobertura+Plugin</a></p><blockquote><p>参考资料<br>1、jenkins+maven配置Checkstyle+FindBugs+PMD - 简书<br><a href="https://www.jianshu.com/p/03b9e38d03b2" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/03b9e38d03b2</a><br>2、CheckStyle提高代码质量 - CSDN博客<br><a href="https://blog.csdn.net/lx_yoyo/article/details/73332590" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/lx_yoyo/article/details/73332590</a><br>3、Jenkins+maven+checkstyle对java代码进行静态代码分析 - CSDN博客<br><a href="https://blog.csdn.net/hwhua1986/article/details/48339545" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hwhua1986/article/details/48339545</a><br>4、Jenkins+maven+pmd对java代码进行静态代码分析 - CSDN博客<br><a href="https://blog.csdn.net/hwhua1986/article/details/48342745" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hwhua1986/article/details/48342745</a><br>5、[Jenkins]持续集成环境下fingbug插件的安装使用与配置 - Amberly - 博客园<br><a href="https://www.cnblogs.com/amberly/p/7201041.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/amberly/p/7201041.html</a><br>6、静态检查———SourceMonitor的学习和使用 - CSDN博客<br><a href="https://blog.csdn.net/yf210yf/article/details/17535713" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yf210yf/article/details/17535713</a><br>7、[料理佳餚] Jenkins 增加 SourceMonitor Plugin | 軟體主廚的程式料理廚房 - 點部落<br><a href="https://dotblogs.com.tw/supershowwei/2015/10/14/153562" rel="external nofollow noopener noreferrer" target="_blank">https://dotblogs.com.tw/supershowwei/2015/10/14/153562</a><br>8、CI Server 16 - 整合程式碼複雜度及深度報表 (Source Monitor) - iT 邦幫忙<br><a href="https://ithelp.ithome.com.tw/articles/10107051" rel="external nofollow noopener noreferrer" target="_blank">https://ithelp.ithome.com.tw/articles/10107051</a><br>8、重复代码检查工具simian的基本用法 | 知行一<br><a href="http://purecpp.org/?p=92" rel="external nofollow noopener noreferrer" target="_blank">http://purecpp.org/?p=92</a><br>9、Jenkins集成Simian插件_百度经验<br><a href="https://jingyan.baidu.com/article/c45ad29ccbfd3a051653e272.html" rel="external nofollow noopener noreferrer" target="_blank">https://jingyan.baidu.com/article/c45ad29ccbfd3a051653e272.html</a><br>10、[料理佳餚] Jenkins 增加 Simian Plugin | 軟體主廚的程式料理廚房 - 點部落<br><a href="https://dotblogs.com.tw/supershowwei/2015/10/14/153561" rel="external nofollow noopener noreferrer" target="_blank">https://dotblogs.com.tw/supershowwei/2015/10/14/153561</a><br>11、代码测试覆盖率Cobertura使用 - CSDN博客<br><a href="https://blog.csdn.net/cathy_sunshine/article/details/75258298" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cathy_sunshine/article/details/75258298</a><br>12、jenkins集成cobertura，调用显示cobertura的report - CSDN博客<br><a href="https://blog.csdn.net/yaominhua/article/details/40684647" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/yaominhua/article/details/40684647</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Checkstyle、PMD、FindBugs 三款主流的 Java 静态分析工具，以及 SourceMonitor 代码度量工具，Simian 代码重复检查工具等。&lt;/p&gt;&lt;h1 id=&quot;Jenkins-安装-Java-代码质量分析工具&quot;&gt;&lt;a href=&quot;#J
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins服务搭建及环境配置</title>
    <link href="https://www.wshunli.com/posts/5d09cdc2.html"/>
    <id>https://www.wshunli.com/posts/5d09cdc2.html</id>
    <published>2018-07-24T11:16:40.000Z</published>
    <updated>2018-09-09T03:53:54.560Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 是一款优秀的开源自动化服务器，允许持续集成和持续交付。Jenkins 支持数百个插件，以支持项目的构建、部署和自动化。</p><p>Jenkins 官网：<a href="https://jenkins.io/" rel="external nofollow noopener noreferrer" target="_blank">https://jenkins.io/</a></p><p>「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」这三个概念的解释。</p><p><strong>持续集成</strong> 强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p><p><strong>持续交付</strong> 在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。</p><p><strong>持续部署</strong> 则是在持续交付的基础上，把部署到生产环境的过程自动化。</p><h2 id="Jenkins-基础环境"><a href="#Jenkins-基础环境" class="headerlink" title="Jenkins 基础环境"></a>Jenkins 基础环境</h2><p>Jenkins 使用 Java 编写，支持所有主流操作系统。</p><p>本文仅介绍在 Windows 操作系统下 Jenkins 单机本地部署。</p><p>首先应配置 Java 环境，然后部署 Tomcat 服务。</p><p>然后即可安装 Jenkins 应用。</p><p>安装步骤可参考：<a href="https://www.cnblogs.com/hdwang/p/6081994.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/hdwang/p/6081994.html</a></p><p>最后推荐安装一些工具包括：</p><p>1、Apache Maven 软件（特别是Java软件）项目管理及自动构建工具。</p><p>推荐 Maven 配置镜像。</p><pre><code class="lang-XML">&lt;mirror&gt;    &lt;!--This sends everything else to /public --&gt;    &lt;id&gt;nexus-aliyun&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Nexus aliyun&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>Maven 仓库阿里云镜像配置 - CSDN博客<br><a href="https://blog.csdn.net/cwenyifan/article/details/54864504" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/cwenyifan/article/details/54864504</a></p><p>在公司内部推荐使用</p><pre><code class="lang-XML">&lt;mirror&gt;&lt;id&gt;rnd-[wshunli]&lt;/id&gt;    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;    &lt;name&gt;Maven China Mirror&lt;/name&gt;      &lt;url&gt;http://rnd-mirrors.[wshunli].com/maven/&lt;/url&gt;&lt;/mirror&gt;</code></pre><p>参考链接：MAVEN公司内部镜像配置&amp;Intellij IDEA MAVEN配置 - CE中间件与系统集成 - 3ms知识管理社区<br><a href="http://3ms.[wshunli].com/hi/group/2027489/wiki_4781465.html" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/hi/group/2027489/wiki_4781465.html</a></p><p>2、Git SVN 源代码版本控制工具。</p><p>具体安装配置操作可参考资料。</p><h2 id="Jenkins-全局工具配置"><a href="#Jenkins-全局工具配置" class="headerlink" title="Jenkins 全局工具配置"></a>Jenkins 全局工具配置</h2><p>JDK 配置 JAVA_HOME 目录即可</p><p>比如 <code>C:\Program Files\Java\jdk1.8.0_171</code></p><p>Git 配置 git.exe 文件即可</p><p>比如 <code>C:\Program Files\Git\bin\git.exe</code></p><p>Maven 配置 MAVEN_HOME 目录即可</p><p>比如 <code>D:\apache-maven\</code></p><h2 id="Jenkins-插件管理高级配置"><a href="#Jenkins-插件管理高级配置" class="headerlink" title="Jenkins 插件管理高级配置"></a>Jenkins 插件管理高级配置</h2><p>推荐配置 <strong>升级站点</strong></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json" rel="external nofollow noopener noreferrer" target="_blank">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json</a></p><p>公司内部推荐使用</p><p><a href="http://cmc-cd-mirror.rnd.[wshunli].com/jenkins-updates/update-center.json" rel="external nofollow noopener noreferrer" target="_blank">http://cmc-cd-mirror.rnd.[wshunli].com/jenkins-updates/update-center.json</a></p><p>参考链接：公司Jenkins插件中心上线啦，只需两步，免代理配置和漫长等待，轻松实现Jenkins插件在线自动安装和升级 - 刘珍珍的博客<br><a href="http://3ms.[wshunli].com/km/blogs/details/5544279" rel="external nofollow noopener noreferrer" target="_blank">http://3ms.[wshunli].com/km/blogs/details/5544279</a></p><blockquote><p>参考资料<br>1、jenkins详解 - CSDN博客<br><a href="https://blog.csdn.net/qq_26848099/article/details/78901240" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_26848099/article/details/78901240</a><br>2、如何理解持续集成、持续交付、持续部署？ - 知乎<br><a href="https://www.zhihu.com/question/23444990" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/23444990</a><br>3、使用jekins自动构建部署java maven项目（jdk1.7+tomcat7.0+jenkins2.19.3） - 追极 - 博客园<br><a href="https://www.cnblogs.com/hdwang/p/6081994.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/hdwang/p/6081994.html</a><br>4、Jenkins：插件安装失败问题 - 简书<br><a href="https://www.jianshu.com/p/2b7288e77ff8" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/2b7288e77ff8</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jenkins 是一款优秀的开源自动化服务器，允许持续集成和持续交付。Jenkins 支持数百个插件，以支持项目的构建、部署和自动化。&lt;/p&gt;&lt;p&gt;Jenkins 官网：&lt;a href=&quot;https://jenkins.io/&quot; rel=&quot;external nofollow
      
    
    </summary>
    
      <category term="持续集成" scheme="https://www.wshunli.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Jenkins" scheme="https://www.wshunli.com/tags/Jenkins/"/>
    
  </entry>
  
</feed>
