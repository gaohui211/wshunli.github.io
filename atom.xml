<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wshunli.com/"/>
  <updated>2018-04-16T14:53:08.387Z</updated>
  <id>http://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="http://www.wshunli.com/posts/25842bb5.html"/>
    <id>http://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-04-16T14:53:08.387Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="http://www.wshunli.com/posts/9c87288c.html"/>
    <id>http://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-04-16T14:53:08.387Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><p>第十四章 并发</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年高德地图实习生面试</title>
    <link href="http://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>http://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-04-16T14:53:08.387Z</updated>
    
    <content type="html"><![CDATA[<p>记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）</p><a id="more"></a><p>首先介绍下大概背景，这次来招聘的是高德地图(数据中心)部门，招聘的岗位也只有地图质量工程师和地图工艺工程师(也是面试的工程中逐渐了解到的)。</p><p>前天下午在国重有高德的技术分享会，然后就想去看看，最后竟然慢慢变成了高德地图的宣讲会了，然后就投了简历，晚上就接到通知让第二天参加面试。</p><p>也是我第一次真正的面试，还是太渣了前面投了那么多都石沉大海啊，都有点小失落了。</p><p>一共面了三面，都是连着的，中间吃了午饭，下午继续。<br>感觉我少了最后一轮 HR 面，估计凉了，说是这两天给结果，难道是套路？？</p><p>我觉得面试非技术岗也好，增加下面试经验也行啊。</p><p><strong>一面</strong>：</p><p>首先做下自我介绍，也就是那些内容，还是比较紧张的，说话也特别快，一直提醒我慢点不要急。</p><p>然后就从简历里面的项目说起，中间可能打断问一些问题主要还是：</p><p>做这个项目的初衷是什么？</p><p>在项目里面做了什么工作？具体点？</p><p>项目里面是怎么分工的？</p><p>然后某些功能点具体是怎么做的介绍下？</p><p>然后从项目里学到了哪些东西？</p><p>然后就是职业规划问题：</p><p>问以后的职业规划？</p><p>面试官也介绍了大概招聘的职位，问我倾向于那个？<br>其实到现在我才发现好像都是非技术岗，还一直以为一面就是简历面呢。</p><p>说下自己的性格特点？</p><p>可以开始实习的时间？</p><p>最后有什么问题要问我吗？</p><p>一面的感觉并不是特别好，没有太深入地介绍到自己的的优势。</p><p><strong>二面</strong>：</p><p>然后中间间隔了一二十分钟吧，紧接着就是二面。</p><p>首先也是做下自我介绍，这次好很多，就是那个套路了。</p><p>然后还是从简历里面的项目谈起，也是我主动介绍的，哈哈哈。</p><p>然后面试官翻到第二页开始从后往前看，有了经验就好了，上来就介绍我们项目的初衷。</p><p>第一的项目是《基于增强现实的校园导航系统》，我是这样说的：</p><p>当时我们是2015年上半年，接触的专业东西并不多，当时Esri中国组织了一个 GIS 大赛，我们就想参加下。也发现有些非 GIS 的人自称路痴，分不清东西南北，也看不懂地图，我们就想怎样去解决这个问题。也恰巧当时 AR 技术比较火，我们就想把 AR 和 GIS 结合起来。这就是我们的初衷。然后介绍具体是怎么做的，布拉布拉一大堆。</p><p>基本上每个项目都是这种套路。</p><p>面试官问的也特别仔细，详细到，每个项目人数、分工、具体怎么实现的等等。</p><p>和一面有点不同的是，问在项目里遇到什么困难，然后是怎么解决的？学到了哪些东西？</p><p>主要还是拿 ArcGIS 加载天地图来举例说的。</p><p>这些问题自我感觉答得不错，都聊 high 了，面试官的表情，哈哈哈。</p><p>然后问，项目的需求是不是老师事先提好的？<br>当然不是了，事实上也确实不是，我就拿 AR + 地下管线来说，是我们的自主科研项目，然后获得了学校的创新创业项目资助，全校只有30个名额云云。</p><p>然后是问到三维建模云平台了，那就直接拿出手机来看了，哈哈哈。</p><p>最后说做的都是 Android ，他们那边可能会有一些后台的开发。</p><p>我说 Android 主要用的是 Java ，Java 也可以做后端开发，其实可以很快上手的，然后就说前面那个项目的后端就是用 Java 写的，很快就上手了。</p><p>还有一些问题是和项目无关的：</p><p>对同类的地图厂商有了解吗？<br>平常会不会关注行业内的资讯？</p><p>平时有什么爱好？性格特点？</p><p>家是哪里的？</p><p>最后有什么问题要问我吗？</p><p>最后还谈到是优秀班干部，然后我趁机吹了下优秀毕业论文 前3% ，哈哈哈。</p><p>二面的感觉还是不错的，大概也是四五十分钟吧。</p><p><strong>三面</strong>：</p><p>三面是交叉面，时间是午饭后了，等得还挺久的，最后感觉好像处处都是坑啊。</p><p>两位面试官，一位主要负责提问，另一位主要负责记录。</p><p>第一个问题我很深刻，问你觉得你为什么能到第三轮面试？</p><p>接着是问这一路面试下来感觉怎么样？<br>我说最大的感觉是刚开始紧张，越来越不紧张了。（我是不是太实诚了）</p><p>为什么有这种感觉？<br>我是拿自我介绍来举例，一回生而回熟。</p><p>然后面试官就说我们这次不自我介绍了（我感觉面试官们应该沟通过了，当时10点场的刷得差不多了），刚刚是最后这个项目谈得比较好是吧，我们这次谈点其他的，说下原来没有说过的优势吧。（一身冷汗，都怀疑是不是二面的时候应该保留一点）这个回答不太好，面试官脸上的笑容消失了。</p><p>后面我感觉都是产品经理关的内容了，一环套一环的。</p><p>问这些项目需求是老师提的吗？</p><p>项目里面是怎么分工的？</p><p>如果有同学不干活怎么办？</p><p>假如做产品经理，研发不想做怎么办？<br>忘了回答：量小、领导要、求求你了好不好，头天晚上刚刚听的讲座啊。。</p><p>一个项目要想做好，最重要的是什么？</p><p>怎么获取用户需求？答调查问卷。。除了调查问卷呢？</p><p>对产品经理岗位怎么理解？</p><p>说下项目从立项到最后交付，过程是怎样的？</p><p>实现的时候遇到问题怎么解决，从中得到最大的收获是什么？</p><p>如果遇到以前从未出现过的功能怎么办，怎么选择实现的路径？<br>我是拿三维建模平台辅助拍摄来举例的。</p><p>平常测试是怎么做的？<br>怀疑当时脑袋是不是有问题，平常总说阿尔法测试、贝塔测试都没说。。</p><p>产品经理相关的内容大概就那么多吧，然后 GIS 相关的内容了：</p><p>问你所了解的 地图公司 有哪些？<br>说实话我对地图公司这个概念比较模糊，就回答了一些数据采集、提供地图服务的公司、GIS公司等等。</p><p>地图未来的发展趋势？<br>我从数据的获取、处理、可视化三个方面回答的。</p><p>目前自动驾驶等新技术不断发展，我们怎么适应这些变化，或者对我们提出了哪些要求？</p><p>然后还问了一些问题：</p><p>你的性格特点？有什么缺点？</p><p>有女朋友吗？为什么？</p><p>家在哪里？家里几口人？排行老几？</p><p>平常父母对工作的地点什么的有要求吗？</p><p>怎么看待父母的观点和自己有冲突的情况？<br>或者父母管和不管你更倾向于那种？</p><p>平常有什么爱好吗？</p><p>最后有什么问题要问我吗？</p><p>三面大概是七八十分钟吧，感觉不是太好，中间面试官有笑容消失的情况。</p><p>然后就让回来等结果了，说是这两天出结果，不过我感觉少了最后一面 HR 面，应该凉了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="http://www.wshunli.com/posts/4e05997a.html"/>
    <id>http://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-04-16T14:53:08.387Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. "/> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="http://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>http://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-04-16T14:53:08.387Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="http://www.wshunli.com/posts/96840e7.html"/>
    <id>http://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-04-16T14:53:08.387Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="http://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="http://www.wshunli.com/posts/4e57ccd.html"/>
    <id>http://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-04-16T14:53:08.383Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="http://www.wshunli.com/posts/91672bd7.html"/>
    <id>http://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-04-16T14:53:08.383Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="http://www.wshunli.com/posts/84f52548.html"/>
    <id>http://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-04-16T14:53:08.387Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="http://www.wshunli.com/posts/b4e3c990.html"/>
    <id>http://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-04-16T14:53:08.387Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="http://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（六）</title>
    <link href="http://www.wshunli.com/posts/9c05eee5.html"/>
    <id>http://www.wshunli.com/posts/9c05eee5.html</id>
    <published>2018-01-22T02:44:25.000Z</published>
    <updated>2018-04-16T14:53:08.387Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. "/> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      【加密文章】生活是一条路，走走停停，停停走走
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="http://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK 开发入门</title>
    <link href="http://www.wshunli.com/posts/3eae2406.html"/>
    <id>http://www.wshunli.com/posts/3eae2406.html</id>
    <published>2018-01-19T13:00:14.000Z</published>
    <updated>2018-04-16T14:53:08.379Z</updated>
    
    <content type="html"><![CDATA[<p>Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。<a id="more"></a>在开发某些类型应用时，这有助于您重复使用以这些语言编写的代码库。</p><p>那我们为什么要使用 NDK 呢?</p><ul><li>代码的保护。由于 apk 的 Java 层代码很容易被反编译，而 C/C++ 库反汇难度较大。</li><li>可以方便地使用现存的开源库。大部分现存的开源库都是 用C/C++ 代码编写的。</li><li>提高程序的执行效率。将要求高性能的应用逻辑使用 C 开发，从而提高应用程序的执行效率。</li><li>便于移植。用 C/C++ 写得库可以方便在其他的嵌入式平台上再次使用。</li></ul><p>上述文字致谢 <a href="http://www.cnblogs.com/devinzhang/archive/2012/02/29/2373729.html" rel="external nofollow noopener noreferrer" target="_blank">Devin Zhang</a> 提供理论支持</p><p>本文默认已配置好 Android 开发环境，<br>关于 Android 开发环境配置可参考：<a href="http://www.wshunli.com/posts/f6977dbb.html">http://www.wshunli.com/posts/f6977dbb.html</a></p><h1 id="NDK-环境配置"><a href="#NDK-环境配置" class="headerlink" title="NDK 环境配置"></a>NDK 环境配置</h1><p>1、首先应该下载 NDK</p><p>官方指定的下载地址：<a href="https://developer.android.google.cn/ndk/downloads/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.google.cn/ndk/downloads/index.html</a></p><p>可能因为网络原因打不开，而且我们也不要那么新的。</p><p>本文以 Android NDK r10e 版本为例：</p><p>下载地址：<a href="https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip" rel="external nofollow noopener noreferrer" target="_blank">https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip</a></p><p>下载好之后，解压即可，我们解压到：<code>D:\Android\android-ndk-r10e</code></p><p>2、和配置 Android 环境类似，配置 NDK 环境</p><p>新建变量：<code>ANDROID_NDK</code></p><pre><code class="TXT">D:\Android\android-ndk-r10e</code></pre><p>在 <code>Path</code> 中添加</p><pre><code class="TXT">%ANDROID_NDK%</code></pre><p>3、验证 NDK 环境</p><p>在 命令控制符 中输入 <code>ndk-build -version</code> 存在输出即可。</p><h1 id="第一个-Android-NDK-项目"><a href="#第一个-Android-NDK-项目" class="headerlink" title="第一个 Android NDK 项目"></a>第一个 Android NDK 项目</h1><p>在 Android Studio 中新建 Android NDK 项目特别简单，</p><p>只需在新建项目时，勾选 <code>include C++ support</code> 即可：</p><p><img src="https://img.wshunli.com/Android/NDK/1.新建NDK项目.png" alt="1.新建NDK项目.png"></p><p>点击运行即可看到效果：</p><p><img src="https://img.wshunli.com/Android/NDK/1.Screenshot_1516414188.png-hexo.png" alt="1.Screenshot_1516414188.png"></p><h1 id="向现有项目添加-C-C-代码"><a href="#向现有项目添加-C-C-代码" class="headerlink" title="向现有项目添加 C/C++ 代码"></a>向现有项目添加 C/C++ 代码</h1><p>如果您希望向现有项目添加原生代码，请执行以下步骤：</p><p>1、<a href="#创建新的原生源文件">创建新的原生源文件</a>并将其添加到您的 Android Studio 项目中。</p><p>如果您已经拥有原生代码或想要导入预构建的原生库，则可以跳过此步骤。</p><p>2、<a href="#创建CMake构建脚本">创建 CMake 构建脚本</a>，将您的原生源代码构建到库中。如果导入和关联预构建库或平台库，您也需要此构建脚本。</p><p>如果您的现有原生库已经拥有 <code>CMakeLists.txt</code> 构建脚本或者使用 ndk-build 并包含 Android.mk 构建脚本，则可以跳过此步骤。</p><p>3、提供一个指向您的 CMake 或 ndk-build 脚本文件的路径，<a href="#将Gradle关联到您的原生库">将 Gradle 关联到您的原生库</a>。Gradle 使用构建脚本将源代码导入您的 Android Studio 项目并将原生库（SO 文件）打包到 APK 中。</p><h2 id="创建新的原生源文件"><a href="#创建新的原生源文件" class="headerlink" title="创建新的原生源文件"></a>创建新的原生源文件</h2><p>1、选择 Project 视图，在 main 目录下，新建 cpp 文件夹；</p><p>2、在 cpp 文件夹下新建 C/C++ Source File ，本文以 <code>native-lib</code> 为例。</p><p><img src="https://img.wshunli.com/Android/NDK/1.创建新的原生源文件.png" alt="1.创建新的原生源文件.png"></p><h2 id="创建CMake构建脚本"><a href="#创建CMake构建脚本" class="headerlink" title="创建CMake构建脚本"></a>创建CMake构建脚本</h2><p>CMake 构建脚本是一个纯文本文件，您必须将其命名为 CMakeLists.txt。</p><p>在 Android 视图下，在 app 模块下右键，新建 File，文件名为 <code>CMakeLists.txt</code>。</p><p>文件内容如下：</p><pre><code class="TXT"># For more information about using CMake with Android Studio, read the# documentation: https://d.android.com/studio/projects/add-native-code.html# Sets the minimum version of CMake required to build the native library.cmake_minimum_required(VERSION 3.4.1)# 指示 CMake 从原生源代码创建一个原生库add_library( # Sets the name of the library.             native-lib             # Sets the library as a shared library.             SHARED             # Provides a relative path to your source file(s).             src/main/cpp/native-lib.cpp )# 添加引用 NDK 库find_library( # Sets the name of the path variable.              log-lib              # Specifies the name of the NDK library that              # you want CMake to locate.              log )# 关联 NDK 库target_link_libraries( # Specifies the target library.                       native-lib                       # Links the target library to the log library                       # included in the NDK.                       ${log-lib} )</code></pre><h2 id="将Gradle关联到您的原生库"><a href="#将Gradle关联到您的原生库" class="headerlink" title="将Gradle关联到您的原生库"></a>将Gradle关联到您的原生库</h2><p>在 Android 视图下，右键点击您想要关联到原生库的模块（例如 app 模块），并从菜单中选择 <code>Link C++ Project with Gradle</code>。</p><p><img src="https://img.wshunli.com/Android/NDK/1.将Gradle关联到您的原生库.png" alt="1.将Gradle关联到您的原生库.png"></p><p>或者手动配置：</p><pre><code class="Gradle">android {  ...  defaultConfig {...}  buildTypes {...}  // Encapsulates your external native build configurations.  externalNativeBuild {    // Encapsulates your CMake build configurations.    cmake {      // Provides a relative path to your CMake build script.      path &quot;CMakeLists.txt&quot;    }  }}</code></pre><p>可选配置，可以包裹一些特定的示例代码：</p><pre><code class="Gradle">android {    compileSdkVersion 26    defaultConfig {        ···        externalNativeBuild {            cmake {                cppFlags &quot;-frtti -fexceptions&quot;            }        }        ndk {            // Specifies the ABI configurations of your native            // libraries Gradle should build and package with your APK.            abiFilters &#39;x86&#39;, &#39;x86_64&#39;, &#39;armeabi&#39;, &#39;armeabi-v7a&#39;, &#39;arm64-v8a&#39;        }    }</code></pre><p>最后运行即可，效果是一样的。</p><h1 id="添加-native-方法流程"><a href="#添加-native-方法流程" class="headerlink" title="添加 native 方法流程"></a>添加 native 方法流程</h1><p>在 <code>MainActivity</code> 中添加 native 方法：</p><pre><code class="Java">    public native void printLog();</code></pre><p>在 <code>native-lib.cpp</code> 中添加头文件及宏定义</p><pre><code class="C">#include &lt;android/log.h&gt;#define TAG &quot;native-lib&quot;#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, TAG, __VA_ARGS__)</code></pre><p>实现 native 方法，我们这里打印个日志：</p><pre><code class="C">extern &quot;C&quot;JNIEXPORT void JNICALLJava_com_wshunli_android_ndk_demo_MainActivity_printLog(JNIEnv *env, jobject instance) {    LOGV(&quot;log from native&quot;);}</code></pre><p>这个方法可以自动生成，在 native 方法下 <code>Alt + Enter</code> 即可。</p><p>本文源码：<a href="https://github.com/wshunli/android-ndk-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/android-ndk-demo</a></p><blockquote><p>参考资料<br>1、Android NDK | Android Developers<br><a href="https://developer.android.com/ndk/index.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/ndk/index.html</a><br>2、Android-NDK入门-慕课网<br><a href="https://www.imooc.com/learn/411" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/411</a><br>3、Android-NDK进阶-慕课网<br><a href="https://www.imooc.com/learn/918" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/918</a><br>4、Android NDK开发(一) 入门 - 简书<br><a href="https://www.jianshu.com/p/0261e6cceb3e" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0261e6cceb3e</a><br>5、向您的项目添加 C 和 C++ 代码 | Android Studio<br><a href="https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="NDK" scheme="http://www.wshunli.com/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>Android图片加载框架Glide简单使用</title>
    <link href="http://www.wshunli.com/posts/d82d8606.html"/>
    <id>http://www.wshunli.com/posts/d82d8606.html</id>
    <published>2018-01-19T12:14:17.000Z</published>
    <updated>2018-04-16T14:53:08.383Z</updated>
    
    <content type="html"><![CDATA[<p>Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。<a id="more"></a>Glide 提供了易用的 API，高性能、可扩展的图片解码管道（decode pipeline），以及自动的资源池技术。</p><h1 id="Glide-介绍"><a href="#Glide-介绍" class="headerlink" title="Glide 介绍"></a>Glide 介绍</h1><p>Glide 支持拉取，解码和展示视频快照，图片，和GIF动画。Glide的Api是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide使用的是一个定制化的基于HttpUrlConnection的栈，但同时也提供了与Google Volley和Square OkHttp快速集成的工具库。</p><p>虽然Glide 的主要目标是让任何形式的图片列表的滚动尽可能地变得更快、更平滑，但实际上，Glide几乎能满足你对远程图片的拉取/缩放/显示的一切需求。</p><h1 id="Glide-简单使用"><a href="#Glide-简单使用" class="headerlink" title="Glide 简单使用"></a>Glide 简单使用</h1><p>0、添加 Glide 依赖</p><pre><code class="gradle">dependencies {  implementation &#39;com.github.bumptech.glide:glide:4.5.0&#39;  annotationProcessor &#39;com.github.bumptech.glide:compiler:4.5.0&#39;}</code></pre><p>1、准备图片容器</p><p>我们在布局文件中添加 ImageView 控件：</p><pre><code class="XML">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;    android:background=&quot;#8f8f8f&quot;    tools:context=&quot;com.wshunli.glidedemo.MainActivity&quot;&gt;    &lt;Button        android:id=&quot;@+id/bt&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;@string/app_name&quot; /&gt;    &lt;ImageView        android:id=&quot;@+id/img&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot; /&gt;&lt;/LinearLayout&gt;</code></pre><p>2、加载图片</p><p>我们以加载 <a href="https://img.wshunli.com/Android/Glide/Glide.min.png" rel="external nofollow noopener noreferrer" target="_blank">https://img.wshunli.com/Android/Glide/Glide.min.png</a> 为例。</p><pre><code class="Java">Glide.with(MainActivity.this)        .load(&quot;https://img.wshunli.com/Android/Glide/Glide.min.png&quot;)        .into(img);</code></pre><p>真的超级简单。</p><p>MainActivity 完整代码如下：</p><pre><code class="Java">package com.wshunli.glidedemo;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.Button;import android.widget.ImageView;import com.bumptech.glide.Glide;public class MainActivity extends AppCompatActivity {    private ImageView img;    private Button bt;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        img = findViewById(R.id.img);        bt = findViewById(R.id.bt);        bt.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Glide.with(MainActivity.this)                        .load(&quot;https://img.wshunli.com/Android/Glide/Glide.min.png&quot;)                        .into(img);            }        });    }}</code></pre><p>注意别忘了声明权限：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code></pre><p>3、取消加载图片</p><pre><code class="Java">Glide.with(MainActivity.this).clear(img);</code></pre><p>取消加载也超级简单。</p><p>4、最终加载效果</p><p><img src="https://img.wshunli.com/Android/Glide/Screenshot_1516366180.png-hexo.png" alt="Glide加载图图片"></p><h1 id="ProGuard-混淆规则"><a href="#ProGuard-混淆规则" class="headerlink" title="ProGuard 混淆规则"></a>ProGuard 混淆规则</h1><pre><code class="gradle">-keep public class * implements com.bumptech.glide.module.GlideModule-keep public class * extends com.bumptech.glide.module.AppGlideModule-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {  **[] $VALUES;  public *;}# for DexGuard only-keepresourcexmlelements manifest/application/meta-data@value=GlideModule</code></pre><blockquote><p>参考资料<br>1、bumptech/glide: An image loading and caching library for Android focused on smooth scrolling<br><a href="https://github.com/bumptech/glide" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/bumptech/glide</a><br>2、Android图片加载框架最全解析（一），Glide的基本用法 - 郭霖的专栏 - CSDN博客<br><a href="http://blog.csdn.net/guolin_blog/article/details/53759439" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/guolin_blog/article/details/53759439</a><br>3、Glide v4 : 快速高效的Android图片加载库<br><a href="https://muyangmin.github.io/glide-docs-cn/" rel="external nofollow noopener noreferrer" target="_blank">https://muyangmin.github.io/glide-docs-cn/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="Glide" scheme="http://www.wshunli.com/tags/Glide/"/>
    
  </entry>
  
  <entry>
    <title>Android注入框架Butter Knife使用入门</title>
    <link href="http://www.wshunli.com/posts/896cb4b5.html"/>
    <id>http://www.wshunli.com/posts/896cb4b5.html</id>
    <published>2018-01-18T04:54:15.000Z</published>
    <updated>2018-04-16T14:53:08.383Z</updated>
    
    <content type="html"><![CDATA[<p>Butter Knife 是一个专注于 Android 系统的 View 注入框架<a id="more"></a>，可以减少大量的 findViewById 以及 setOnClickListener 代码，可视化一键生成。</p><h1 id="Butter-Knife-概述"><a href="#Butter-Knife-概述" class="headerlink" title="Butter Knife 概述"></a>Butter Knife 概述</h1><p>1.强大的View绑定和Click事件处理功能，简化代码，提升开发效率<br>2.方便的处理Adapter里的ViewHolder绑定问题<br>3.运行时不会影响APP效率，使用配置方便<br>4.代码清晰，可读性强</p><h1 id="Butter-Knife-上手使用"><a href="#Butter-Knife-上手使用" class="headerlink" title="Butter Knife 上手使用"></a>Butter Knife 上手使用</h1><p>0、首先为项目添加 Butter Knife 依赖：</p><pre><code class="gradle">dependencies {  compile &#39;com.jakewharton:butterknife:8.8.1&#39;  annotationProcessor &#39;com.jakewharton:butterknife-compiler:8.8.1&#39;}</code></pre><p>1、简单使用示例:</p><p>首先在 onCreate 绑定 Activity 实例。</p><pre><code class="Java">package com.wshunli.butterknifedemo;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.widget.Button;import android.widget.Toast;import butterknife.BindString;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;public class MainActivity extends AppCompatActivity {    @BindView(R.id.button)    Button button;    @BindString(R.string.app_name)    String appName;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        ButterKnife.bind(this);    }    @OnClick(R.id.button)    void clickButton() {        Toast.makeText(this, appName, Toast.LENGTH_LONG).show();    }}</code></pre><p>其中：<code>@BindView</code> 根据控件 id 绑定；<code>@BindString</code> 绑定资源中的字符串；<code>@OnClick</code> 绑定按钮的单击事件。</p><p>3、最终效果：</p><p>点击按钮，显示app名称。</p><p><img src="https://img.wshunli.com/Android/ButterKnife/Screenshot_1516251143.png-hexo.png" alt="最终效果"></p><h1 id="Butter-Knife-方法详解"><a href="#Butter-Knife-方法详解" class="headerlink" title="Butter Knife 方法详解"></a>Butter Knife 方法详解</h1><p>1、绑定 Activity 和 Fragment</p><p>在 onCreate 中绑定 Activity</p><pre><code class="Java">@Override public void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.simple_activity);    ButterKnife.bind(this);    // TODO Use fields...  }</code></pre><p>在 onCreateView 中绑定 Fragment</p><pre><code class="Java"> @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {    View view = inflater.inflate(R.layout.fancy_fragment, container, false);    ButterKnife.bind(this, view);    // TODO Use fields...    return view;  }</code></pre><p>2、绑定布局中的 View</p><pre><code class="Java">  @BindView(R.id.title) TextView title;  @BindView(R.id.subtitle) TextView subtitle;  @BindView(R.id.footer) TextView footer;</code></pre><p>3、在 Adapter ViewHolder 中绑定 View</p><pre><code class="Java">  static class ViewHolder {    @BindView(R.id.title) TextView name;    @BindView(R.id.job_title) TextView jobTitle;    public ViewHolder(View view) {      ButterKnife.bind(this, view);    }  }</code></pre><p>4、绑定资源</p><pre><code class="Java">  @BindString(R.string.title) String title;  @BindDrawable(R.drawable.graphic) Drawable graphic;  @BindColor(R.color.red) int red; // int or ColorStateList field  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field  // ...</code></pre><p>5、绑定方法</p><pre><code class="Java">@OnClick(R.id.submit)public void submit() {  // TODO submit data to server...}</code></pre><p>或者</p><pre><code class="Java">@OnClick(R.id.submit)public void submit(View view) {  // TODO submit data to server...}</code></pre><p>甚至自动类型转换：</p><pre><code class="Java">@OnClick(R.id.submit)public void sayHi(Button button) {  button.setText(&quot;Hello!&quot;);}</code></pre><p>多个 View 绑定同一个事件：</p><pre><code class="Java">@OnClick({ R.id.door1, R.id.door2, R.id.door3 })public void pickDoor(DoorView door) {  if (door.hasPrizeBehind()) {    Toast.makeText(this, &quot;You win!&quot;, LENGTH_SHORT).show();  } else {    Toast.makeText(this, &quot;Try again&quot;, LENGTH_SHORT).show();  }}</code></pre><p>本文内容基于 Butter Knife 8.8.1 ，时间原因部分方法可能过时，最新版可参考 <a href="http://jakewharton.github.io/butterknife/" rel="external nofollow noopener noreferrer" target="_blank">http://jakewharton.github.io/butterknife/</a></p><blockquote><p>参考资料<br>1、JakeWharton/butterknife: Bind Android views and callbacks to fields and methods.<br><a href="https://github.com/JakeWharton/butterknife" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/JakeWharton/butterknife</a><br>2、ButterKnife使用详解 - ITjianghuxiaoxiong的专栏 - CSDN博客<br><a href="http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Butter Knife 是一个专注于 Android 系统的 View 注入框架
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="ButterKnife" scheme="http://www.wshunli.com/tags/ButterKnife/"/>
    
  </entry>
  
  <entry>
    <title>Android事件总线EventBus使用总结</title>
    <link href="http://www.wshunli.com/posts/6a115a99.html"/>
    <id>http://www.wshunli.com/posts/6a115a99.html</id>
    <published>2018-01-17T04:36:06.000Z</published>
    <updated>2018-04-16T14:53:08.379Z</updated>
    
    <content type="html"><![CDATA[<p>EventBus是一款针对Android优化的<strong>发布/订阅</strong>事件总线<a id="more"></a>，简化了应用程序内各组件间、组件与后台线程间的通信。</p><p><img src="https://img.wshunli.com/Android/EventBus/EventBus-Publish-Subscribe.min.png" alt="EventBus 发布订阅模式"></p><p>主要是替代 handler BroadCast 在 Fragment 、Activity 、Service 线程之间传递消息。</p><h1 id="EventBus-概述"><a href="#EventBus-概述" class="headerlink" title="EventBus 概述"></a>EventBus 概述</h1><p>1、EventBus 有三个主要的元素：</p><ul><li>Event：事件，可以是任意类型的对象。</li><li>Subscriber：事件订阅者，<del>在EventBus3.0之前消息处理的方法只能限定于onEvent、onEventMainThread、onEventBackgroundThread和onEventAsync，他们分别代表四种线程模型</del>。而在EventBus3.0之后，事件处理的方法可以随便取名，但是需要添加一个注解@Subscribe，并且要指定线程模型（默认为POSTING），四种线程模型下面会讲到。</li><li>Publisher：事件发布者，可以在任意线程任意位置发送事件，直接调用EventBus的post(Object)方法。可以自己实例化EventBus对象，但一般使用EventBus.getDefault()就好了，根据post函数参数的类型，会自动调用订阅相应类型事件的函数。</li></ul><p>2、EventBus3.0有以下四种ThreadMode（线程模型）：</p><ul><li>POSTING（默认）：<strong>发布事件和接收事件在同一个线程</strong>，也就是说该事件在哪个线程发布出来的，事件处理函数就会在这个线程中运行。</li><li>MAIN: 事件的处理<strong>总是在UI线程</strong>中执行。</li><li>ASYNC：无论事件在哪个线程发布，该事件处理函数<strong>总是在新建的子线程</strong>中执行，同样，此事件处理函数中禁止进行UI更新操作。</li><li>BACKGROUND：如果事件是在UI线程中发布出来的，那么该事件处理函数就会在新的线程中运行，如果事件本来就是子线程中发布出来的，那么该事件处理函数直接在发布事件的线程中执行。</li></ul><h1 id="EventBus-快速入门"><a href="#EventBus-快速入门" class="headerlink" title="EventBus 快速入门"></a>EventBus 快速入门</h1><p>0、首先为项目添加 EventBus 依赖：</p><pre><code class="gradle">compile &#39;org.greenrobot:eventbus:3.1.1&#39;</code></pre><p>1、定义事件类:</p><pre><code class="java">public static class MessageEvent { /* Additional fields if needed */ }</code></pre><p>2、准备订阅者:</p><pre><code class="java">@Subscribe(threadMode = ThreadMode.MAIN)public void onMessageEvent(MessageEvent event) {/* Do something */};</code></pre><p>3、发送事件:</p><pre><code class="java">EventBus.getDefault().post(new MessageEvent());</code></pre><h1 id="EventBus-实际应用"><a href="#EventBus-实际应用" class="headerlink" title="EventBus 实际应用"></a>EventBus 实际应用</h1><p>这里举例子具体介绍 EventBus 的用法，实现Activity之间传值。</p><p>1、定义消息事件类</p><pre><code class="java">package com.wshunli.eventbusdemo;public class MessageEvent {    private String message;    public MessageEvent(String message) {        this.message = message;    }    public String getMessage() {        return message;    }    public void setMessage(String message) {        this.message = message;    }    @Override    public String toString() {        return &quot;MessageEvent{&quot; +                &quot;message=&#39;&quot; + message + &#39;\&#39;&#39; +                &#39;}&#39;;    }}</code></pre><p>2、注册和取消订阅事件</p><p>根据组件的声明周期，在 MainActivity.java 中注册/取消订阅事件。</p><pre><code class="java">package com.wshunli.eventbusdemo;import android.content.Intent;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import android.widget.TextView;import android.widget.Toast;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;public class MainActivity extends AppCompatActivity {    private TextView textView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        // 注册订阅事件        EventBus.getDefault().register(this);        // 跳转到 SecondActivity        findViewById(R.id.bt).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                startActivity(new Intent(MainActivity.this, SecondActivity.class));            }        });        textView = findViewById(R.id.text);    }    @Override    protected void onDestroy() {        super.onDestroy();        // 取消订阅事件        EventBus.getDefault().unregister(this);    }}</code></pre><p>3、添加消息处理函数</p><p>在 MainActivity.java 中添加事件的处理函数：</p><pre><code class="java">    @Subscribe(threadMode = ThreadMode.MAIN)    public void onMessageEvent(MessageEvent event) {        textView.setText(String.format(&quot;接收到发送的事件：%s&quot;, event.getMessage()));    }</code></pre><p>我们选择 <code>threadMode = ThreadMode.MAIN</code> 表示总是在 <strong>主线程</strong> 中执行。</p><p>4、发布事件</p><p>在 SecondActivity 中发布事件：</p><pre><code class="java">package com.wshunli.eventbusdemo;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import org.greenrobot.eventbus.EventBus;public class SecondActivity extends AppCompatActivity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_second);        findViewById(R.id.bt).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                EventBus.getDefault().post(new MessageEvent(&quot;来自SecondActivity的消息&quot;));                finish();            }        });    }}</code></pre><p>5、接收到消息</p><p>在 MainActivity 接受到来自 SecondActivity 中发送的消息：</p><p><img src="https://img.wshunli.com/Android/EventBus/Screenshot_1516247350.png-hexo.png" alt="EventBus消息"></p><h1 id="ProGuard-混淆规则"><a href="#ProGuard-混淆规则" class="headerlink" title="ProGuard 混淆规则"></a>ProGuard 混淆规则</h1><pre><code class="gradle">-keepattributes *Annotation*-keepclassmembers class ** {    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;}-keep enum org.greenrobot.eventbus.ThreadMode { *; }# Only required if you use AsyncExecutor-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {    &lt;init&gt;(java.lang.Throwable);}</code></pre><blockquote><p>参考资料<br>1、greenrobot/EventBus: Event bus for Android and Java that simplifies communication between Activities, Fragments, Threads, Services, etc. Less code, better quality.<br><a href="https://github.com/greenrobot/EventBus" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/greenrobot/EventBus</a><br>2、Android事件总线（一）EventBus3.0用法全解析 - 刘望舒的专栏 - CSDN博客<br><a href="http://blog.csdn.net/itachi85/article/details/52205464" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/itachi85/article/details/52205464</a><br>3、EventBus 3.0的用法详解（一） - neu - SegmentFault<br><a href="https://segmentfault.com/a/1190000004279679" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000004279679</a><br>4、Android事件分发库的使用-慕课网<br><a href="https://www.imooc.com/learn/871" rel="external nofollow noopener noreferrer" target="_blank">https://www.imooc.com/learn/871</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EventBus是一款针对Android优化的&lt;strong&gt;发布/订阅&lt;/strong&gt;事件总线
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="EventBus" scheme="http://www.wshunli.com/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>ClassNotFoundException</title>
    <link href="http://www.wshunli.com/posts/774f73e1.html"/>
    <id>http://www.wshunli.com/posts/774f73e1.html</id>
    <published>2018-01-10T12:23:30.000Z</published>
    <updated>2018-04-16T14:53:08.383Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ClassNotFoundException</strong> 是 java.lang.ClassNotFoundException 的简称<a id="more"></a>，是 Java 语言中的一个异常类，位于 java.lang 包中，父类是 java.lang.ReflectiveOperationException ，该异常指找不到指定的 Class。</p><p>常见的场景就是：</p><p>1 调用class的forName方法时，找不到指定的类。<br>2 ClassLoader 中的 findSystemClass() 方法时，找不到指定的类。<br>3 ClassLoader 中的 loadClass() 方法时，找不到指定的类。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ClassNotFoundException&lt;/strong&gt; 是 java.lang.ClassNotFoundException 的简称
    
    </summary>
    
      <category term="技术分享" scheme="http://www.wshunli.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="ClassNotFoundException" scheme="http://www.wshunli.com/tags/ClassNotFoundException/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Hello Spring Boot !</title>
    <link href="http://www.wshunli.com/posts/b93d59e.html"/>
    <id>http://www.wshunli.com/posts/b93d59e.html</id>
    <published>2018-01-05T03:19:35.000Z</published>
    <updated>2018-04-16T14:53:08.383Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 入门 Hello Spring Boot !</p><a id="more"></a><p>前面在师兄的带领下，基于 nodejs 写了机房管理系统后端，也根据需要实现了简单三维重建的后端服务。<br>但是总感觉怪怪的，前者基于 Eggjs 后端框架，后者基于 Express 后端框架，好像跟 Java 没啥关系啊。</p><p>这几天刻意学习下 Spring Boot 后端框架，并把三维重建服务后端重写了。下面记录下学习过程。</p><h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p><p>Spring Boot 可以使用 Maven 或 Gradle 这样的构建系统，本文是基于 Maven（现在用得比较多，其实我更熟悉Gradle）。</p><h2 id="Spring-Boot-特性"><a href="#Spring-Boot-特性" class="headerlink" title="Spring Boot 特性"></a>Spring Boot 特性</h2><p>Spring将很多魔法带入了 Spring 应用程序的开发之中，其中最重要的是以下四个核心。</p><ul><li>自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置。</li><li>起步依赖：告诉Spring Boot需要什么功能，它就能引入需要的库。</li><li>命令行界面：这是Spring Boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建。</li><li>Actuator：让你能够深入运行中的Spring Boot应用程序，一探究竟。</li></ul><h2 id="Spring-Boot-环境"><a href="#Spring-Boot-环境" class="headerlink" title="Spring Boot 环境"></a>Spring Boot 环境</h2><p>首先 Spring Boot 需要 java 环境，需要使用 Gradle 2.3+ 或者 Maven 3.0+ 构建。</p><p>本文环境是 Java 1.8，Spring Boot (v1.5.9.RELEASE) 以及 Maven3.3.9 构建。开发工具使用 IntelliJ IDEA。</p><h1 id="初始化Spring-Boot项目"><a href="#初始化Spring-Boot项目" class="headerlink" title="初始化Spring Boot项目"></a>初始化Spring Boot项目</h1><p>本文使用 Spring Initializr 初始化 Spring Boot项目。</p><h2 id="通过-Spring-官网"><a href="#通过-Spring-官网" class="headerlink" title="通过 Spring 官网"></a>通过 Spring 官网</h2><p>1、打开 <a href="http://start.spring.io/" rel="external nofollow noopener noreferrer" target="_blank">http://start.spring.io/</a></p><p>2、选择构建工具 Maven Project、Spring Boot版本1.5.9 以及一些依赖，输入 Web 即可，如下图所示：</p><p><img src="https://img.wshunli.com/SpringBoot/1HelloSpringBoot/1.png" alt="初始化Spring Boot项目"></p><p>3、点击 <code>Generate Project</code> 即可下载项目压缩包</p><h2 id="通过IntelliJ-IDEA"><a href="#通过IntelliJ-IDEA" class="headerlink" title="通过IntelliJ IDEA"></a>通过IntelliJ IDEA</h2><p>1、在 IntelliJ IDEA 中新建项目，选择 Spring Initializr ，如下图所示：</p><p><img src="https://img.wshunli.com/SpringBoot/1HelloSpringBoot/2.png" alt="初始化Spring Boot项目2"></p><p>2、配置项目的基本信息</p><p><img src="https://img.wshunli.com/SpringBoot/1HelloSpringBoot/3.png" alt="初始化Spring Boot项目3"></p><p>3、配置项目的依赖，这里选择添加 Web 模块</p><p><img src="https://img.wshunli.com/SpringBoot/1HelloSpringBoot/4.png" alt="初始化Spring Boot项目4"></p><p>4、设置项目存储位置</p><p><img src="https://img.wshunli.com/SpringBoot/1HelloSpringBoot/5_1.png" alt="初始化Spring Boot项目5"></p><p>初始化Spring Boot项目完成</p><h2 id="Spring-Boot-项目结构"><a href="#Spring-Boot-项目结构" class="headerlink" title="Spring Boot 项目结构"></a>Spring Boot 项目结构</h2><p>Spring Boot 项目 初始化完成后，项目如下图所示：</p><p><img src="https://img.wshunli.com/SpringBoot/1HelloSpringBoot/6.png" alt="Spring Boot 项目结构"></p><p>SpringBootDemoApplication 是 Spring Boot 的程序的入口。</p><p>我们添加 <code>@RestController</code> 注解，及 <code>home()</code> 方法</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@SpringBootApplicationpublic class SpringBootDemoApplication {    @RequestMapping(&quot;/&quot;)    String home() {        return &quot;Hello Spring Boot !&quot;;    }    public static void main(String[] args) {        SpringApplication.run(SpringBootDemoApplication.class, args);    }}</code></pre><h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><p>1、可以在 IntelliJ IDEA 中点击 run 按钮启动应用。</p><p><img src="https://img.wshunli.com/SpringBoot/1HelloSpringBoot/7.png" alt="Spring Boot 项目启动"></p><p>2、也可以在项目根目录使用 <code>mvnw spring-boot:run</code> 命令。</p><p><img src="https://img.wshunli.com/SpringBoot/1HelloSpringBoot/8.png" alt="Spring Boot 项目启动"></p><p>如果提示无法识别 <code>mvnw</code> 命令，可改为 <code>.\mvnw spring-boot:run</code></p><p>3、使用 <code>mvnw clean package</code> 命令打包后启动</p><p><img src="https://img.wshunli.com/SpringBoot/1HelloSpringBoot/9.png" alt="Spring Boot 项目启动"></p><p>再执行一下命令启动：</p><pre><code class="bash">java -jar  target/demo-0.0.1-SNAPSHOT.jar</code></pre><p>其中 <code>demo-0.0.1-SNAPSHOT.jar</code> 替换为自己的 jar 包名字。</p><p>最后 打开 <a href="http://127.0.0.1:8080/" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/</a> 即可看到 <code>Hello Spring Boot !</code></p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p><blockquote><p>参考资料<br>1、Getting Started · Building an Application with Spring Boot<br><a href="https://spring.io/guides/gs/spring-boot/" rel="external nofollow noopener noreferrer" target="_blank">https://spring.io/guides/gs/spring-boot/</a><br>2、Spring Boot干货系列：（一）优雅的入门篇 | 嘟嘟独立博客<br><a href="http://tengj.top/2017/02/26/springboot1/" rel="external nofollow noopener noreferrer" target="_blank">http://tengj.top/2017/02/26/springboot1/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 入门 Hello Spring Boot !&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="http://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>2017年终总结，我这一年的点点滴滴</title>
    <link href="http://www.wshunli.com/posts/33b6fcdd.html"/>
    <id>http://www.wshunli.com/posts/33b6fcdd.html</id>
    <published>2017-12-30T13:37:12.000Z</published>
    <updated>2018-04-16T14:53:08.379Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. "/> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      【加密文章】 深自缄默，如云漂泊
    
    </summary>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="年终总结" scheme="http://www.wshunli.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
      <category term="沉迷学术" scheme="http://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（三）</title>
    <link href="http://www.wshunli.com/posts/fba26489.html"/>
    <id>http://www.wshunli.com/posts/fba26489.html</id>
    <published>2017-12-27T07:05:30.000Z</published>
    <updated>2018-04-16T14:53:08.387Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 Service</p><a id="more"></a><h1 id="第10章-后台默默的劳动者"><a href="#第10章-后台默默的劳动者" class="headerlink" title="第10章 后台默默的劳动者"></a>第10章 后台默默的劳动者</h1><p>Service 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。</p><p>服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。</p><h2 id="Android-多线程编程"><a href="#Android-多线程编程" class="headerlink" title="Android 多线程编程"></a>Android 多线程编程</h2><p>Android 多线程 和 Java 多线程基本相同。</p><p>定义一个线程只需要新建一个类继承自 Thread 或者 实现 Runnable 接口，然后重写或者实现 run() 方法。</p><pre><code class="Java">new Thread(new Runnable() {    @Override    public void run() {      // 异步操作    }}).start();</code></pre><p>1、Service 与 Thread 的区别：</p><p>Service 是一个可以在后台执行长时间运行操作而不提供用户界面的应用组件。<br>服务在其托管进程的主线程中运行，它既不创建自己的线程，也不在单独的进程中运行（除非另行指定）。<br>Thread 是程序执行的最小单元，可以用 Thread 来执行一些异步的操作。</p><p><a href="http://blog.csdn.net/wei_chong_chong/article/details/52251193" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/wei_chong_chong/article/details/52251193</a></p><p>2、在子线程中更新 UI</p><p>(1) Activity 的 runOnUiThread() 方法</p><pre><code class="Java">runOnUiThread(new Runnable() {    @Override    public void run() {        // 更新 UI 操作    }});</code></pre><p>(2) View.post(Runnable r)</p><pre><code class="Java">textView.post(new Runnable() {    @Override    public void run() {        // 更新 UI 操作    }});</code></pre><p>其中 <code>textView</code> 可替换为其他 View 。</p><p>(3) Handler</p><p>新建 Handler 对象，重写 handleMessage() 方法，对 Message 进行处理。</p><pre><code class="Java">private Handler handler = new Handler() {    public void handleMessage(Message msg) {        switch (msg.what) {            case UPDATE_TEXT:                textView.setText(&quot;Nice to meet you!&quot;);        }    }};</code></pre><p>在子线程中使用 Hander 对象发送 Message 对象即可。</p><pre><code class="Java">Message message = new Message();message.what = UPDATE_TEXT;handler.sendMessage(message);</code></pre><p>3、异步消息处理机制</p><p>Message：消息，其中包含了消息ID，消息处理对象及处理的数据等，由MessageQueue统一列队，终由 Handler 处理。<br>Handler：处理者，负责 Message 的发送及处理。使用 Handler 时，需要实现 handleMessage(Message msg) 方法来对特定的 Message 进行处理，例如更新 UI 等。<br>MessageQueue：消息队列，用来存放 Handler 发送过来的消息，并按照 FIFO 规则执行。当然，存放 Message 并非实际意义的保存，而是将 Message 以链表的方式串联起来的，等待 Looper 的抽取。<br>Looper：消息泵，不断地从 MessageQueue 中抽取 Message 执行。因此，一个 MessageQueue 需要一个 Looper。</p><p><strong>Handler 的工作机制</strong>简单来说是这样的：</p><p>首先在主线程中新建 Handler 对象，并重写 handleMessage() 方法。然后当子线程中想更新 UI 时，就创建一个 Message 对象，并通过 Handler 将消息发送出去。之后消息会被添加到 MessageQueue 中等待被处理，而 Looper 则会一直尝试从 MessageQueue 中取出待处理的消息，最后分发回 Handler 的 handlerMessage() 方法中。</p><p><img src="https://img.wshunli.com/Android/第一行代码/3.Handler.png" alt="Handler"></p><p><a href="https://www.jianshu.com/p/9e4d1fab0f36" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/9e4d1fab0f36</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/9991569" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/guolin_blog/article/details/9991569</a></p><p>4、AsyncTask 的基本用法</p><p>AsyncTask 是一个抽象类，我们创建一个子类继承它。</p><p>AsyncTask 可以指定三个泛型参数：</p><p>(1) Params，在执行 AsyncTask 时需要传入的参数。<br>(2) Progress，后台计算过程中的进度单元类型。<br>(3) Result，后台运行的结果类型。</p><pre><code class="Java">private class AsyncTaskDemo extends AsyncTask&lt;Void, Integer, Boolean&gt; {    @Override    protected Boolean doInBackground(Void... voids) {        return true;    }}</code></pre><p>AsyncTask 常用的方法：</p><p><code>onPreExecute()</code> 此方法会在后台任务执行前被调用，用于进行一些准备工作。<br><code>doInBackground(Params… params)</code> 此方法中定义要执行的后台任务，在这个方法中可以调用 publishProgress() 来更新任务进度（publishProgress 内部会调用 onProgressUpdate 方法）。<br><code>onProgressUpdate(Progress… values)</code> 由 publishProgress() 内部调用，表示任务进度更新。<br><code>onPostExecute(Result result)</code> 后台任务执行完毕后，此方法会被调用，参数即为后台任务的返回结果。<br><code>onCancelled()</code> 此方法会在后台任务被取消时被调用。</p><h2 id="服务的基本用法"><a href="#服务的基本用法" class="headerlink" title="服务的基本用法"></a>服务的基本用法</h2><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><p>要创建服务，您必须创建 Service 的子类（或使用它的一个现有子类），并且在使用清单文件声明服务。</p><pre><code class="Java">public class HelloService extends Service {    public HelloService() {    }    @Override    public IBinder onBind(Intent intent) {        // TODO: Return the communication channel to the service.        throw new UnsupportedOperationException(&quot;Not yet implemented&quot;);    }}</code></pre><h3 id="启动及停止服务"><a href="#启动及停止服务" class="headerlink" title="启动及停止服务"></a>启动及停止服务</h3><p>通过将 Intent（指定要启动的服务）传递给 startService()，从 Activity 或其他应用组件启动服务。Android 系统调用服务的 onStartCommand() 方法，并向其传递 Intent。（切勿直接调用 onStartCommand()。）</p><pre><code class="Java">Intent intent = new Intent(this, HelloService.class);startService(intent);</code></pre><p>服务必须通过调用 stopSelf() 自行停止运行，或者由另一个组件通过调用 stopService() 来停止它。<br>一旦请求使用 stopSelf() 或 stopService() 停止服务，系统就会尽快销毁服务。</p><pre><code class="Java">Intent intent = new Intent(this, HelloService.class);stopService(intent);</code></pre><h3 id="活动与服务进行通信"><a href="#活动与服务进行通信" class="headerlink" title="活动与服务进行通信"></a>活动与服务进行通信</h3><p>Activity 与 Service 进行通信可以通过创建 Binder 对象来实现。</p><p>创建 Bindler 的子类，然后在内部提供自定义的方法，在 Service 的 onBind() 方法中返回 Bindler 对象。</p><pre><code class="Java">public class HelloService extends Service {    private static final String TAG = &quot;HelloService&quot;;    private DownloadBinder mBinder = new DownloadBinder();    public HelloService() {    }    @Override    public IBinder onBind(Intent intent) {        // TODO: Return the communication channel to the service.        return mBinder;    }    class DownloadBinder extends Binder {        public void startDownlaod() {            Log.d(TAG, &quot;startDownlaod: &quot;);        }        public int getProgress() {            Log.d(TAG, &quot;getProgress: &quot;);            return 0;        }    }}</code></pre><p>然后 绑定 Activity 和 Service ，就可以调用 Binder 提供的方法了。</p><p>1、首先创建 ServiceConnection 的匿名类，重写方法。</p><pre><code class="java">private HelloService.DownloadBinder downloadBinder;private ServiceConnection connection = new ServiceConnection() {    @Override    public void onServiceConnected(ComponentName componentName, IBinder iBinder) {        downloadBinder = (HelloService.DownloadBinder) iBinder;        downloadBinder.startDownlaod();        downloadBinder.getProgress();    }    @Override    public void onServiceDisconnected(ComponentName componentName) {    }};</code></pre><p>2、然后使用 bindService() 方法绑定 Service 。</p><pre><code class="Java">bindService(new Intent(this, MyService.class), connection, BIND_AUTO_CREATE);</code></pre><h2 id="服务的声明周期"><a href="#服务的声明周期" class="headerlink" title="服务的声明周期"></a>服务的声明周期</h2><p>服务生命周期（从创建到销毁）可以遵循两条不同的路径：</p><ul><li>启动服务</li></ul><p>该服务在其他组件调用 startService() 时创建，然后无限期运行，且必须通过调用 stopSelf() 来自行停止运行。此外，其他组件也可以通过调用 stopService() 来停止服务。服务停止后，系统会将其销毁。</p><ul><li>绑定服务</li></ul><p>该服务在另一个组件（客户端）调用 bindService() 时创建。然后，客户端通过 IBinder 接口与服务进行通信。客户端可以通过调用 unbindService() 关闭连接。</p><p><img src="https://img.wshunli.com/Android/第一行代码/3.service_lifecycle.png" alt="3.service_lifecycle"></p><h2 id="前台服务"><a href="#前台服务" class="headerlink" title="前台服务"></a>前台服务</h2><p>前台服务被认为是用户主动意识到的一种服务，因此在内存不足时，系统也不会考虑将其终止。 前台服务必须为状态栏提供通知，放在“正在进行”标题下方，这意味着除非服务停止或从前台移除，否则不能清除通知。</p><p>要请求让服务运行于前台，在 Service 中调用 startForeground()。此方法采用两个参数：唯一标识通知的整型数和状态栏的 Notification。例如：</p><pre><code class="Java">Notification notification = new Notification(R.drawable.icon, getText(R.string.ticker_text), System.currentTimeMillis());Intent notificationIntent = new Intent(this, ExampleActivity.class);PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);notification.setLatestEventInfo(this, getText(R.string.notification_title), getText(R.string.notification_message), pendingIntent);startForeground(ONGOING_NOTIFICATION_ID, notification);</code></pre><h2 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h2><p>IntentService 是一种异步的、可以自动停止的服务。</p><p>IntentService 执行以下操作：</p><ul><li>创建默认的工作线程，用于在应用的主线程外执行传递给 onStartCommand() 的所有 Intent。</li><li>创建工作队列，用于将 Intent 逐一传递给 onHandleIntent() 实现，这样您就永远不必担心多线程问题。</li><li>在处理完所有启动请求后停止服务，因此您永远不必调用 stopSelf()。</li><li>提供 onBind() 的默认实现（返回 null）。</li><li>提供 onStartCommand() 的默认实现，可将 Intent 依次发送到工作队列和 onHandleIntent() 实现。</li></ul><p>综上所述，您只需实现 onHandleIntent() 来完成客户端提供的工作即可。</p><pre><code class="Java">public class HelloIntentService extends IntentService {  /**   * A constructor is required, and must call the super IntentService(String)   * constructor with a name for the worker thread.   */  public HelloIntentService() {      super(&quot;HelloIntentService&quot;);  }  /**   * The IntentService calls this method from the default worker thread with   * the intent that started the service. When this method returns, IntentService   * stops the service, as appropriate.   */  @Override  protected void onHandleIntent(Intent intent) {      // Normally we would do some work here, like download a file.      // For our sample, we just sleep for 5 seconds.      try {          Thread.sleep(5000);      } catch (InterruptedException e) {          // Restore interrupt status.          Thread.currentThread().interrupt();      }  }}</code></pre><blockquote><p>参考资料<br>1、Service | Android Developers<br><a href="https://developer.android.com/guide/components/services.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/services.html</a><br>2、Service与Thread区别 - CSDN博客<br><a href="http://blog.csdn.net/wei_chong_chong/article/details/52251193" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/wei_chong_chong/article/details/52251193</a><br>3、android的消息机制——Handler机制 - 简书<br><a href="https://www.jianshu.com/p/9e4d1fab0f36" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/9e4d1fab0f36</a><br>4、Android异步消息处理机制完全解析，带你从源码的角度彻底理解 - CSDN博客<br><a href="http://blog.csdn.net/guolin_blog/article/details/9991569" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/guolin_blog/article/details/9991569</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 Service&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="http://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="http://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统下搭建Android开发环境</title>
    <link href="http://www.wshunli.com/posts/80d94eb7.html"/>
    <id>http://www.wshunli.com/posts/80d94eb7.html</id>
    <published>2017-12-26T05:25:55.000Z</published>
    <updated>2018-04-16T14:53:08.383Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 16.04 LTS 系统下搭建 Android 开发环境</p><a id="more"></a><p>昨天圣诞节在机房装了台 Ubuntu ，主要是想试下管理系统的部署，<br>原来在虚拟机下部署的没问题，在真机上部署基本上也没有什么问题。</p><p>有台 Ubuntu 还是很有必要的，后面编译软件会方便很多。<br>现在先学习搭建下 Android 开发环境。</p><h1 id="Java-环境"><a href="#Java-环境" class="headerlink" title="Java 环境"></a>Java 环境</h1><p>在比较新的版本 Android Studio 里面已经有 OpenJDK 了，但是 Oracle Java 更好点，我们直接使用命令安装。</p><pre><code class="bash">sudo add-apt-repository ppa:webupd8team/javasudo apt-get updatesudo apt-get install java-common oracle-java8-installer</code></pre><p>在安装的过程会询问是否同意许可，选择同意即可。</p><p>配置 Java 环境变量，依次执行以下命令：</p><pre><code class="bash">sudo apt-get install oracle-java8-set-defaultsource /etc/profile</code></pre><p>默认安装路径在 <code>/usr/lib/jvm/java-8-oracle</code> .</p><h1 id="Android-环境"><a href="#Android-环境" class="headerlink" title="Android 环境"></a>Android 环境</h1><p>安装 Android Studio 和 安装 JDK 类似，执行一下命令：</p><pre><code class="bash">sudo add-apt-repository ppa:maarten-fonville/android-studiosudo apt updatesudo apt install android-studio`</code></pre><p>JDK 默认安装路径在 <code>/opt/android-studio</code> .</p><h2 id="配置-Android-环境变量："><a href="#配置-Android-环境变量：" class="headerlink" title="配置 Android 环境变量："></a>配置 Android 环境变量：</h2><pre><code class="bash">gedit ~/.bashrc</code></pre><p>在文件的末尾添加如下代码并保存</p><pre><code class="bash">export ANDROID_HOME=/home/wshunli/Android/Sdkexport PATH=$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH</code></pre><p>其中 <code>/home/wshunli/Android/Sdk</code> 替换为自己 SDK 的安装位置，一般在 <code>android-studio</code> 同级目录下。</p><p>应用环境变量：</p><pre><code class="bash">source ~/.bashrc</code></pre><p>测试下查看原来设置的目录：</p><pre><code class="bash">echo $ANDROID_HOME</code></pre><p>返回 SDK 所在目录，配置正确。</p><p>接下来就可以启动 Android Studio 了。</p><h2 id="NDK-安装及环境配置（可选）："><a href="#NDK-安装及环境配置（可选）：" class="headerlink" title="NDK 安装及环境配置（可选）："></a>NDK 安装及环境配置（可选）：</h2><p>可以在 Android Studio 中下载，也执行以下命令下载并解压</p><pre><code class="bash">wget -c https://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zipunzip android-ndk-r10e-linux-x86_64.zip</code></pre><p>配置 NDK 环境变量，和 SDK 类似：</p><pre><code class="bash">gedit ~/.bashrc</code></pre><p>在文件的末尾添加如下代码并保存</p><pre><code class="bash">export ANDROID_NDK=/home/wshunli/Android/android-ndk-r10eexport PATH=$ANDROID_NDK:$PATH</code></pre><p>其中 <code>/home/wshunli/Android/android-ndk-r10e</code> 替换为自己 NDK 的安装位置</p><p>应用环境变量：</p><pre><code class="bash">source ~/.bashrc</code></pre><p>测试下查看原来设置的目录：</p><pre><code class="bash">echo $ANDROID_NDK</code></pre><p>Android Studio 中文社区(官网)下载所需开发工具。<br><a href="http://www.android-studio.org/" rel="external nofollow noopener noreferrer" target="_blank">http://www.android-studio.org/</a></p><blockquote><p>参考资料<br>1、2 Ways to Install Android Studio in Ubuntu 16.04 and Ubuntu 17.04 - LinuxBabe.Com<br><a href="https://www.linuxbabe.com/ubuntu/install-android-studio-ubuntu-16-04" rel="external nofollow noopener noreferrer" target="_blank">https://www.linuxbabe.com/ubuntu/install-android-studio-ubuntu-16-04</a><br>2、Ubuntu系统下配置Android开发环境 - 简书<br><a href="https://www.jianshu.com/p/949a5a2ddceb" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/949a5a2ddceb</a><br>3、Ubuntu 16.04 搭建Android开发环境 - Droi - 博客园<br><a href="http://www.cnblogs.com/droi/p/5399975.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/droi/p/5399975.html</a><br>4、Ubuntu下安装Android NDK - 简书<br><a href="https://www.jianshu.com/p/b12d714435bc" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/b12d714435bc</a><br>5、NDK:Linux下NDK安装和配置 - 简书<br><a href="https://www.jianshu.com/p/abdad7fd1367" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/abdad7fd1367</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu 16.04 LTS 系统下搭建 Android 开发环境&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="http://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://www.wshunli.com/tags/Android/"/>
    
      <category term="Ubuntu" scheme="http://www.wshunli.com/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
