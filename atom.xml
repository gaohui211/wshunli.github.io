<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  <subtitle>wshunli`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-09-22T15:53:58.474Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录2018年秋季校园招聘猿辅导面试</title>
    <link href="https://www.wshunli.com/posts/c00883be.html"/>
    <id>https://www.wshunli.com/posts/c00883be.html</id>
    <published>2018-09-21T14:26:48.000Z</published>
    <updated>2018-09-22T15:53:58.474Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘猿辅导面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘极验验证面试</title>
    <link href="https://www.wshunli.com/posts/d3039901.html"/>
    <id>https://www.wshunli.com/posts/d3039901.html</id>
    <published>2018-09-20T14:02:46.000Z</published>
    <updated>2018-09-22T15:53:58.474Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】【Offer】记录2018年秋季校园招聘极验验证面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘合众思壮面试</title>
    <link href="https://www.wshunli.com/posts/d5b4b71d.html"/>
    <id>https://www.wshunli.com/posts/d5b4b71d.html</id>
    <published>2018-09-20T14:02:42.000Z</published>
    <updated>2018-09-22T15:53:58.474Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+jTs34OsS7Z6DN2ngcQu09laqCw0IyqsF5HgpWirmPQMNURM0nf58SmGrx3BIv7T3d33LmQXkafptyHzFCiqdsewVRehMSXxqUJM4KDQbMIlJISy4BT30c9O9UHM8qHN+cCfwcc8Ctawueh80wipirKN2Qz4pZuVZ+XZvUQr4uGoYjZ42GQpdwQMOgfQZleLie8pNYlggNo0zCrpjJ4NtUSNJPLrl/eWXyB4yT0IhbQlJPAWZ8obzUn/3Fubl9gyU5bEjmU1IUyLoSikOhgczMwaKHaiVhwOPVhiTaLDCZM5n1qaJzFCLPqDEkW43FGzt1dJZ0gzFnm6q/QO8gYm2gf/+QRfE7GGSlN/ey41x61/Yh2dND6Dk3sG9BP2UpeZEvsuVlkE5sGd9Br5Pyf6cVL0j4APvSuPScK55ZnZ15dQXVhCItpTtmj9IfR6MRpi0batIWtkiIQdv212EIEMttE6XJc3LhHnExutxAT3byMR09iMicr3AwUOhQ5vaVkqal/SiJhln9bMlbq2nfgrJaV8kSasZEyLrSKSNPIekFWeSV8ZFd0D9U3Uw2UD1WFvfoRtlDOGU8JqwECNG3qGS0Ca82+7Yu1xKpsIb0s0sHFoVp0GU6qfXS80HYFpBXE7mACX2RkWWo4Mmnf1vgZiJ5fOJJMk3D25RmJZyXvVr2FrdW3HjaAjK0LJBvhYelpShUx+rRnLBRpqdyXvSWf/N/YI1WueAUb8I85C0JRTTwfVyuu3zqSytrFUf0sig92p5U/Gbvg/ALEqRD2ehPhgHjYaukl1JJdwkt8XtKoT9Zmb6maqPVLk6yIGPnIDo/yR35BSviKVmx2IXjOHKVHcVgBa0OeEdedNi9a3O6Zn6dtJ4jk5sZ+moKhuQftpAVNCQUgskQyiIFb9awRGyeVEALmlqoZ9yc5T7nSfSPvrGXVNe+KFU6z9asJYHKIXNghoBKHL10XzoFwjgnehG0O8HuGs7iQMIpY4qyJwbMBgcme0HvqiYR4v1FTYxMAubQ2F+aad1kboACTOrVk0oHZMtZQdqpan/nOHcSHosZRXdieda0F1GVvcnFdaTgyXyWu2CnNrgnctW4VHYhfBBj3I+0Ba5l3iSzAsFrH+tOhGkVw7DNylR6oHoKkAIdB+EspceYOM/KvJYpJkh8DmdMXwqwV0zmLYLhQHBNbxBOwU1Xkk1yF9ab0NS9kpv1n9PfpioH4WXCg4PRNxweDIzZYqUqIdqZW4RHTdf0RXFL78L08t+MIvWdD2ylT8GBIuHOLbeMqj7s1npfOpLTuKsly4zwVlsEXze1s5KlqX/Oy351g2b1fNaK4ft4RWoDKh/tSkupx8CW61nN+By58mT+cjBlLMhOcdOKhAXxRZhTa4SMIf63i3WK9koitX8aQNFZGh1NWlaU+OLOtNfteVf736UuFYrG/zmM7Fdti8cqo7PW7CO2T4uuYTm2l2CeU1U9zHSSM2gCcy66iLZfIg96K4lmlLLYRTyY7ZW+iZ2/q1IAy8LY+GweGOabsat0wchTSBhDCP6CDEGSOg+7hmJtNXStQ69V2GIz6+Qizh0G46mNpW+Frwy0c5KUyEB/wpQVYDw8yZZueiMA6K519VkvOhP/qZhR6R4b0eUDIFWPebOXT49wLquGl1gfwCLbA6QbV+yPWDmgumXi8k7GoujKG5GRzAqHvRBhso0H+5njcVB0swU8LE8eUpbtHUDjJd3LCN+VFQfVrBRCh51nnrvuTnKP0DZuj9ScQMFxYWFu+uF/3hnDFTo3k8cryAKladdY2tTKUOr0sRlw8ZI/hcATDmtjnp65oeWB6x8ashqPMGgKyG71tEHh7c0vN9FD18xWGFg7AMot3g7y5b7xSX+27F9Ds/rwwBQQt+1EdOezmhcrPtm7QUMFX+n7P7S4OF4gxiCjo4XCP1Z3h4dWmM2qo0wD57wuZ8p5DMByfR488M4LNr1Go0zU0Upl1fwCO5sM9GSuvyPsvO5Ol4/1xKwExmKjUijtOUIABc/Sk9y2/3F/IOfbSg0qPmI4ovqg6pq4Mxl/Etrrf3pNdXrp7UJpd0JodN8t0HAv69F8f1v5lWr7pcbrB83EVGAx8dJefiOoM96/1FaXlLpEGx7m5DgfNxRxANK7IxqLip0GevKxl5tqcadX9WM8v8ExUNHP9KxpCh6iRp8ou5githAoThuKcVmiIy0T7HtIMT9U7j9JHUuoFwiyWN3MMejeZ1z1pSGgqCdmdbUzkHDlBdE+qR5N/Lwa9DOLMdLqgX23Zs3MUOjlC9eoLuL196tnDxhWmypcxZbRAifYU47zvkrUPdaAKPLVDKxlbQkQ7PW5c7aKChcEIlmhUB96ytDOM3fYg66vl6WPCfros6+mDM8pwvMIzUuibJmrILPwOfZTQ1KrXXjUzpQpLX7Rz7LEwXNIymalVUSH1kQZAn/u+kfZkTfsQKZG8TRAQnhKWMwiS7P3zLDOPwyTX9kSR7ZmTG4dCpzBvikVbVYqfu7P65tMImGzSxKnhmKbmJ6WK3JvCETKt1mfnqBo5EEJqiRVeknId1+SuXLCz/Zs1DcPghd3YdQuly8RLj6ix9ecZ5fFbfLroRKf8r6HVyLJzbgvowQHEIrmUjVYDvXInxpm35GXsSmUKoNTwuolNfUPaBISoiGUrxSnc2TljubW9cVcOpOSfj00a/oshKWvJGHjpQeHT7609QE+Oz3lG8wXh/rgat3Yea+iqetabHyixjarNMCtLg6bSY/64xjujV7RPQNNZKLpExZlsuho1xUfWERYMvg9T1W08y3fkfnHis+SUxu/DQCSke60pi0AoNijNNLfCOV3IbZG/2LE3Vz+avavtgshT8NpzGSAcLn+bpG273CLZhI9htnWpLpQstgqWq45kRQyYgQgNHzUBaksPOBjr/0uI67AzUH9Ii6wltg52fAqw0xyn3lxpN7oT7dMpGMJiiswFZ/GuKS5frbx4UXsiADAJPYiIivksmSRknOAumOCuUdvJLt+NQ2kWGr6Fiy10CAtYjvOmdB39zWZO0HAiDjMzgcIROag/Dksor3DvhNZywGZn8SLp7dEPM9TSHP+K/w3eZmGdBJ5dI71Bxk8KVx04hpUtM4Vg/dPTVYB2UUZEqKjNhrHQqjKQAW7cpnvfgFmES0jdBN3UZOrOSYZ3JB7p7DTa4NXKIXhMe2HlmhaTLODRg7eHDOh/nzBaCvATCi6RZoDnwgvO53YLP3pjXeUdGEcT/l4nfiz+fAZy0vH3KNwKwG/fvi2901BERui/Y3GYpJ8hQn16vkPgJpTM6J9CdXY3R8dfLvGZwdl9QN+1kbb60Sqi5c4sBlkiUCB5RH3fKU/xT2oH/Qw9Ggyg7r1OzVouBJgxrcwyKB3Tb46Zi++fAzuu8OmRr8waxbZwVj34/uReDd73TfTL54+6uaG0BkCQ6OOdvr2/G+Fd1KlW8MPEP9ByU51Pf9wMFYQb3BUNgjIbMieaBrcgUI+ZyHFxEV4rGDWiR6ly0raA5cCeLZt3g46xubFYZ3UdDOVIOxJ3GGm/RN9YPb2F9arzgsUv8XC0UkF9zrVZTRGjmu5CUsom0BJQkA74o5V1JUgQ3kPYGw0rBwhQTS3qPa+Myez3tArh8ZFhm2pWdT6GXYGKJLr/xM+qaDlap+CyMJG9JhC9wTWD5w3THC3fpEc/7iymV2OdZ4Y6ivs6q68L2cN2BVDrJTcNocearhfeJfRz7VrJt1hwcllg2QeXEwLWEB0guYib/OoEEz4PAaiDJRKE6GOtmNYJrHZAwlh8vOy/tZKrE802FPWtzvQBB/d0eqM7RLEysKUHMYoSsUzkfA1ngFm7zJiHzgGqP6/8Qvv91+lmiqXm1BueJWKr7Vq4GeHt3mgQsj2lTCFpxE0q7oB7T80LBfPoPA6xL6ebpDSZhVLl0nC31rmmCmsvAT2SeuicZXxCJ3zpKS3eAYLQMFNcflNEY5iLrv++lszYtuQf/68SME+0Dhk3TdPHI34zfVqhxymoRBHmyP9TDyxSQgCHpBuWipXMOe/JOUcZMllSTamYVVb/esRQSZ5b4BwpOY62L6p8juZ1kI1ykeQerdYKVNRsJNbOBxk1338OA2q4uQ8SYXjeHzC2XViyEYJ9VvDmTOEfB1zxkpMNDcBFoq7x1JbwChZdA0raUVObdwpqyBK+c0/QERE0zGarkNIpC6ZusVDqJutk3kezJuPIAWreckBiMAmyKVOEcLQDG4Iy7YhWOU2Yyz2HxRHh7lqp6ElBNy65D2S92CSFXFSj0KDFhcgWkMyBq7RSXrEBvuJKD9k9GeGpXPUW3UBO4pUbpXRCOVNhZgCRl6YfMC0lZZp5Xu/CdpFkEWeHGpkXQ7z9mTd7qfZJ8W7Tmm0wZcqSx00jx5H762WOA0EmY1co8H56JodgCEqlY9SU0UMKAQWIkpjwD+CkjTvE6Lwv1WCS9ro8C83Nop6NmfGIP0lJrpNJPiV3133d2gV7TfrW5Yi6VIs8dyRVbiHE8hdwS0OKPOYcz38HdJVuw1v6D98+ss46OJa4bWDcPNoOQ+VjbHC1Mqu+P8Xp8QSqbt2VZOraazTL6+OKj1pExQboum0fHObELQjoNxXxkJWuK8A4MpSE5zo+asAKNm89fT++mtdeS1LOiqrbE78QqYVP/B3RyAfMC8bE7DiopCmrWWyYxem9adBDSs50OHDTa8Dg6bNncbQgkQ+cOrnSjMKRBdW1RAyUKiLdFjmLQG8EMAve3s6krmiOABQRa5WVb/WeT34CfcajanqYeW6biH0IJpOOeIGF9xmxnsEM1HS1AlitNRFTkxg0NgpppL0+80ELXxn6hLLWWWk8e2oSMLtIWbO2DxPSY8ViIXd3GR87zyELZO0wfqNIEb0kXopVb/kWjcvmRvarpjin0xNL9qtOMzQZLGP6TdYglSvwkelO4iWBOXk0Q+LoyqeC61FFVQnY+2iv54pc14Jpx+GL7xnsI8ZJ51o7uPJa9n63MdYnzfbFRBLg+VXqhY7pNhQ02RYhGXXBLKTPFigeBdm70PeviHMWHcoskYMjF9wCbnKuo9P5G1Sja77tCo5mYgmpYQvbS1EFXrORa18+NCCmK7h5IaQNP1+kRaCVn3ywaOUrsAEVi3lbKvSLfPMzJrNtwwawYg+32guA86YVpOEakuHWaQ58AMVKWP4MogiKWuMyP7+N5w/upXM+2igJlbgedcLHRyyB8laE49lXSKLf94sf/G5V9fafaOI/8zQCKpbILEcNC/EEaBkf8zANhewHzoO+cKlc0qraxqOOPQ5eijY4rTbWCQ+/uFXTSbJz8M7MF6YBA08ogNtrsPOAo8C6ff8o5m3y1bO9hlzyRXIsCJTRC3amA77tpfK9QIpmsJWri9S3dkekM6IzB2Qjp+0LLoU2BA+lLc2GqWS+EoDx1hw8NpoEQefswSAPPvgXUjJVdM63bgwPi7WGDjRjHi1hLsTGiXYjQ1eEBLqGpBf1a5dUv3F3ZFxWAESO4HWT8CWorSjRR2Y22r22NDoNDLNkHSyclThX+pHou6+hoPBd4x95ipireuLeUCYRCNkgtJCl0kvqBvRTgIQDq4SsVOaWIcyxUlfF2GkLbbOFzNZA83Dkxtjp9v5F0uwco6Ho1/VrfdSadLIm7k5BniEHBDl7M43ygclyjYla4zW/bAe8Xn8B90j8B75n5jNdmApwKphTquJ9GtheA9mft2kPy//GJSTk8gfPnMSitf6vD75MQXg6N3FZfZv1mEVKQt32fGudBuhOSHsrwikV8vIqaeSiqnZikkIwce37fd5qILbeRmt6a7RXmm53OdsTzsRh2jgXUnqI6OVHUX7PCqO/n0DlgAdbUE05tFgghKkx7dLAnQnBgDbWgazNn6J/u/OQVBuswvN6VVSebeLKENW0pGWUgYY/mpxHTC7ssQqQ276XERqOq325wBVELbtRGkM6ZHJa5gdog== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘合众思壮面试。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘四维图新面试</title>
    <link href="https://www.wshunli.com/posts/48b7610a.html"/>
    <id>https://www.wshunli.com/posts/48b7610a.html</id>
    <published>2018-09-19T12:09:23.000Z</published>
    <updated>2018-09-22T15:53:58.474Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+pVl+UuyOFkuscjNGVc+JvPUJcXePKpT9bO8Lb6KKe9h5D6+NjDnEriLjNgJla63Y/Zo7SfQNFqdc1yxabOzWUmXMFQl3r+pQ8J35u4YXkswvQ86ujoQ8dJXRYj4q/g3G3CfzWUoidGPazPTSgU8hU9VfqZ9xE4xqnEWOwulkOpSGKdcMDmsr8JdbUez2nH7DIKLl/8+3gWpWkqIzjmECcabIJZax5PuuemHfWxG1crlcxiAh2wdB4h5hslvjh7I4S0RHeJeHT9u+RrX7XIZ6S+bp4ChRBykCaqc11llkaHlPeCLvLaz9e </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘四维图新面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘网易杭州面试</title>
    <link href="https://www.wshunli.com/posts/2fbed755.html"/>
    <id>https://www.wshunli.com/posts/2fbed755.html</id>
    <published>2018-09-19T12:09:17.000Z</published>
    <updated>2018-09-22T15:53:58.474Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19Nb4YrkPKiUgyS29TyMOnrO+Du85sc7RfHXzarnNt2UJd9bZ9F+k8N6rwM9d5CrV8eiOnvhD7V3jEWSBagBY1vjNhBvoTT78QG0RDtxaej+j2RPnSTSvhyCJR/KUd1zE0+KX2XgiTJsGBAmANdmFCMgjlw+V1E74okGla6ytmxGfnth0WBj7ZQeNxu86/hzOIg0mK3mVt3tKPDm4FyhSX68b1PQN9PeEzs01RXnAQTwnAqJUoq0dNt </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘网易杭州面试。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘金山办公面试</title>
    <link href="https://www.wshunli.com/posts/ec86f75.html"/>
    <id>https://www.wshunli.com/posts/ec86f75.html</id>
    <published>2018-09-19T12:09:13.000Z</published>
    <updated>2018-09-22T15:53:58.474Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+7S/vGkTlTsIECTUUiJTYmwaxp6x7llJ/awmvL45IpaKz4j39g8zWJCnpeb0wlJn/ugbV98MXxAdyZgU1uUsI2wgbiNJaegPP9zdKJlrzOwU/TpnJWCtGcM/BxHSdfY7SpKFSD2WNdTQ0rsxZjzPgWWX5qPUFV6O9LnQ9wXYdF2g43aTYhrqMU/e4ucr/HGKc1YgaUaUzQSA+sNpXGrZPdFWL2GltP+6/9uRoRt8ZpRAyk1NxAEU4dQgYuT5yALOB041Vk8FU9iYqBudVznnlXt4nFHind7drtHMtM1wd/HcZxka/iaK2x87PjGgi7KFxvyamTlPgYBQ== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘金山办公面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘中兴通讯面试</title>
    <link href="https://www.wshunli.com/posts/7189e0ee.html"/>
    <id>https://www.wshunli.com/posts/7189e0ee.html</id>
    <published>2018-09-18T13:55:52.000Z</published>
    <updated>2018-09-22T15:53:58.474Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘中兴通讯面试（软件开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘顺丰科技面试</title>
    <link href="https://www.wshunli.com/posts/b8083d29.html"/>
    <id>https://www.wshunli.com/posts/b8083d29.html</id>
    <published>2018-09-18T10:05:15.000Z</published>
    <updated>2018-09-22T15:53:58.474Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘顺丰科技面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘视源股份面试</title>
    <link href="https://www.wshunli.com/posts/1f4b1509.html"/>
    <id>https://www.wshunli.com/posts/1f4b1509.html</id>
    <published>2018-09-18T09:46:07.000Z</published>
    <updated>2018-09-22T15:53:58.474Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX189Ol8ltnZHMCdsJXPrxgff4YOWWLhAKo7MWAVMot6fvB6j4g3ipjFPAx2CZuF+uHgn+0Yfgjp2ThcRaAU4ugJerXqobaBpFnE0fD6Dtkg5ywNcf/Opfi/6gFJFI0ltO0I7qvCqCLfLXqvKTiNib7Jbju1JXZErh0IWedbxX7RvBYhBrxjaPNjhqSrlvETWTSk+TIpzxMwdSkBJJJ53R9vuoM7V473W2tLSp6yyB5N5vZ2DPuT0vpT0T41tzmlsncouHJWIKgpbi7mga0HBi2s6dhur4sCAAp9046fmZ3C0NXyKrAroDXEoeK31stzYvU7Ce9MT7JNLFfnuySAZd4ODfFOBeeKK4Wd0nuLE18wj9++WN+3IlJpW6Nq5JC2ZGLRdcgXDhubZBVcf65AZMeIzgKtTkjM001JEC95UxuvWrNP4Dy3SWgI6xvN0bxGT3ayKHAeHKfDblXghKZ7cysFTlSbmUdwMzcvtXzWt8QsLCZOdTEowgDKOBz8eSKwUf7rhZFeJ9azYQYHRIgHJeZt9VeGjjpJV7FeNFC6FubW1VryeDuf7CBP0oGQYe7lJIMj2pzAni+/4btptfz5Xb8ZxEiE5tVxFuaMXHGVQl9KNOGp4zkG5du+Vp6G062LXAZQmLSrtYuoThRL9hIHG4JAHrIZNzvVSpenSXI6P6ak4+cfQ+JqXn3muQbh96ht3umrKvQ9tRSX6ydTPtXcukiDU2I6v6OpTLaNVA3VyYFf37ZbQiFFt4ay4+nJIUOdfu9sb1S+kFri+TJCOCW+zGtHBT6M2EcWgAo75GbKHnrAzZhczJu5EUNyUBixIuuGU7R8K0vZTSAGfuQq8QLK8fJN4fFZ9/Y/kejyCNa7QKLxW7RGdWuRfg9XnXiVOI10KCs19tXeb7s9XVo14kr+ib2p9HghJJA701V2+WQZRvPHKBSAfnxrHiBgslw2/sY0oZ3a16PoXKG8/wQkVoLS0V9iqx88GC1ggGgHQH5cTe6JDL4PXRIoIhKJd1JJZjR9ey2MaNm0ZIy5doRFnnn4LJiLoUzoGJBFskyPyK+UGGl4UBznteGKB0/yy1LB/4pZl3O2kfHKa4ykZmMFW13+z/1l8DR8ap1KK2wFbU6hjshBD+IrOq2Ngp8ngiKXu0ZZRFldg1RPITxmQ/mIyvtvYqJeUDDeq8vK+Z5ynoZy/KG7mW4QQJj4egMCBg2wasu7edNDZtYQ2uo2p2P9ool9bdUoqxaEW7KUBmQeMwy3oSULflQXC5lngqx4r0n3NB5dKY31Q+0OV/T4m04SRi4byqX5LZ9GgfPyKjaBb04KjEBd57nweotdLjNXz0K6PbvVrQFrR/5p42LYUTxauu/0Md0eYg0TEBG6SyCHxQxOgwOy2SifkrGrOZ2tRE9+nj+9lhMG3IP9AxF2FlO77K5QsZIt20g5dcMU3s0wE4uN6UmfF2OFXOqiph1AoJTiycl7iiI4SKtH0fFlGZMhqFf1Z2H+lNLwUD88KZsb7INDPC8Q5E25GBOK5m2z6b3AHTqNasb9uPpzAS286R9ur30kW0j3Q8EN5f6E3/+PLgOi5BCrioOYegxdDFjxnfWWIUC7EkEfV3++KXWnFlzV4LW89CIHvU3Vexdav9S4EcWU7cqVtu3y1Gf8h8qU8uoO9lvQWEL/raPG8i7KhrcpRCMstLQm7uVGgaoLVpwNLZwEegOUkNGhjXrnbG7Yo05PP6ITAxkFo63x+1fqispUHWinvUz3Ohsve11AUkiqrGFAhjXdCFsIrGNGE+xdwJQTBLuX+04KW4I+5m2POfsmIDCIGrE1dtlraCeVoyy6Pa37K8nh7IKUNH2j4HiFI4RiaispNjZ/ZR24Zv8as7qmdx/8GpdBXGiHRQg9zTvffONBP8popnQNiY5ItGErbPt/eeAFa3mrJOdvLvvCsw6aQ7QWVKnUiomi2JhVAVE83t7wsnR1myE/X1fb2MDkWZpGsP7OZuPDgx367TOhIFTKq7Oc+M0r/umKsupHK0cmmV0+Gyw90JhP9cYFH2H2rb1ZCs7u7lcmdX2clQSkqhL5/JGwu1PmhmpDbikoJ6VqRzxjSl2ChmA1xNEfB4QE7pVkwerBKMcAPgBw1k5b0N3csMETm1KYps3/nnOoO3X8xKOfihEFDlP5qdq/czEHsy+h20pyJM/1wGn29xMZ1cmE6osiAeDRVDuCUSTU/zoZGXV62zdYnZpViwL6cAmKZd6D9wAMbPg/pvmtJoSWPWN1FvmE6mo7VwiW3vIVtIRTC+g0is2RyiAnN/hmlPNqmViQ4c1aW7ejm2Y7ToxG5fIhiypF0kX8K1nTT8+sMpdCBrRH5RxaiOatk06xb6CAjEFnFpD3kDMBRYleH0x/vmraOonTCq+S5gnOmGC6JZo6jWXnmpSmaHMo0ervvibnBfXnXDZiSb2GpsLWrj5/dzKMS3/Gl9yA58YQP9DcNbOeAeCzLJQQJrjDBzj62vrKB7uJYKyzyQSubCaVRqnVAiCI/89qMTHiTHigKR4qHW8TnPTsCfdbRhmIWiOxFuTe/FN7kXnk8vzK//HNuEluBRdhZ2my9xrwBSXRJQZIOKgtdSJOWBrluIlGgwN8m23XmN76jTDIxH8mPmxJ4E6pygcLCEAkE2/f63jQ9g0W6ppqoa7G0HtMFQ4Cqh4UoMkwMc3RTYuQ/Me51AIZ6lPvZULk5y3+90bj/KspG+Rh3OlE80s0gFgtvGQKNZFu6NLzuT8zAMN4R+9yX0yzxR35oCzdrznYABjYl+JJwZ2W26mk+LEz3sMGPoGBhQv07LNWEZ4onJNutgZqGrrKafWa8vVwU8IqU3fXNPsOuxyuB/MoIQgEjEzXdbRKSrpPy5D32Lghcw/E/+gXzXvNHGH4rWkyslwSA9QGv8IG5i+8Xr6GlLCICfvA0jQG+L1f7kUUo3/15t+59uLQtsIvTm7XMlObgjejmqOKgYjXPt2XZIWJgWMXV7qYWgdBp9RlUos4q5YKUJVIA0TFlERE33+8iGQfcAeos0FrMaWdeUkxcdIrvyRL/Ue/LTFlz0yUH0wtDuBJOStzEWJFqSA3zFCjrZj+J/ugh+2FskWu04ZJJmVK0h4AOKyfdCMpOoj7NKJK0lMWbJDrIEGrICOddYGGq/lzIDd3hLhq7gLyXlzHTK7Pla8PVx3PZ1vQAsDjp2sya2GlVtlIKaSFItJLN9lV5j5FC9cMe9nQtINThDtlKQ6I6Q3Z9URZ/nBiwhSERBR3B32kQR3csBBk/NWnzG9iAombsoVnbxRAMLY6v0ewRzNW0mttqFDnSKGRbs8NKDK+8FZgmgwlZlKRQ7a8Ukc2JPmHyFtaan6GN+uGXzhbTvsKRTifE2LE9uJFXVOQnFzE3HwuOfsQcpcLY9TK87XgfElYwCGqSG5c4ftjGTnmB0z6bEm412nm2BoLQw6Io2OYi3DG4kxrHXbh5o+fUYN9Ci9UKAaBDuI5TRxugicFYWFvtYTm0qNvTCshtBB9amwS0MQA31vy/AnCwE4FjQaDU1TwNuAkuiG2mbvHupecEDuNuEm0zArLNdZso5eTdHkJGaFl92/Qaj65QnscvHbl6Zxo90+Zt4GBH0YxgdSW+aECq2dWBo4sm2Q7co6o5yY3CCX4xQ9THvRqmAYf0EOSSYhGvrLocrgzQk8DUBsNjNIRBi9l0wog4/8EKdlCGHeNeyrEs0U/gvJge0U3FE0dIyDbKja9Z99OjdPT7xEYOR+j8iUu5YlLgFavNgMcpafV/b/J1+/9Rmg6o33cmV7gjFwvDvpofVWWXi/3w8ZFZUkzrLt1JRTs4U3QWi+2vRsFfw7YOE7UEU7faXooDwQFEDN+ANHIiEarunltMzBe3WWlQkVLMNUHJxh/dSI+RV98exZlTjfWvBU2ftXfSerKekHCyNYkpditHq+JxlWmK1qyyEt0ZWl94qMpN4rQ+lcDjdlHJzc3ZvM8Ii1aJa8S1P10G7srz+EnyXit9Hx3sd/GN+U7SyGPGO3tjlNPt1yEY0JBFBTQMei7Tr1eEBNqlbJZgB5i1wucwYScgKmCKRP+xrD0+aQdot6eQ/1HlnaXaq8hk24JVHOgmZxttsvuqoYjixQxzPmTXaHWEml7M+Ks7LWQ180vJNLgp8Dz3KXapdDWz8Vny/OLTROzY0aCUdYXuAQD1dg4PPBAsaYPAtiSXDmaT78TgM5nRlgBunPMejqPBIrOEexVC2+nraKTs2FUJcPf91QzhCvPp96J14ADPD8EDVHmuH009DiBQfydg/1mUclDt1akc7ZrAUmB+jk2LzM9Rdjq44eUFJ4f66kPxXoTzpXDiDENKocWjWDHzwSQQ/7j+0tK2ZNwfO2mpqRA9RbniCdZqGYF8X9Jrh0Hgqrx2v6LH/gUtDsYp1ZOluc8O/5dyytBVw6Icwj5gaouQvJxBJydZAq2xuczjXPGufyhhsco/2jV0PFQKGlpScC+FIhh25jICx5VrzYNCv/HhpF0Wl5QfLiWHglNpcXnbmjCAmeAyQQ+WfntnvJ3b7Cs/7Z45Mgk6fEIlWnnOKb9dWg1Q0OJ2g4bF4f9Cu3rRsHNNiLpRKhu3GxEz45SLzJjViKjGsbr+9WlrGKR/W5omLl71i1vkFQmlAKvlr2KKAO0RfYd309NcYq3rFR3tZLaIg6JoindOdOP/rgkyMLOWQsna4RrlYLMZ5QGRh5zYuGdyjczcqSzE8cs9y6PKLrK11G6b5ZK92pnmMH4cblE6t7ywekFBtMV71H0b96ajHVqoELQhLqFX+2Q+Qey7d9wh2dw7Pwn9CFAGqcBWWq6+uwggLeGrzzYwdmh8AzevG1xIgCoGpNefEUBauyYFcuaGBB8urPv0oXfUiQfTUTqTJLrQYQzIF1wCu1f5LSAhKy2MCn3HxIOAabZxsdmoGwiXynEoMjYtsiJq4Xvm26I6+WYpQYa5wi3Q71h7F/5fbLo83xWg2UDLxmOTrgQWIvyz1bL9UlLIRTmAQvC2dh0/vRbAAATq0UY1xqvGdmR/RpKC1Uzy/4MB0ZQjy0gHwteA2va0wxkSamjkbKdnu68ci2BbYPUiloqJ0fM8vgavt//22MiKfMmkAn1VkK2ZggnDgeIcLxW6qHHcY8KVdH46NS3rYMmOgXli/yQihH1y1uIHpHqriBPR12+9D21Iv20zf75ojaaGiGvbriKyf4BbNWHbzJ7v7QtsyUd/4xy7dO4cmt0CB3vlVOxWL48oMozpoCT6WR9EywhZP2sG4rOWgTMi9w/T9N0PlwpfpUY96OQfacqXyQ0QLQLrdUx9ZllEV0V1j39JZt9ZFTA7Z2xAUMP8iwOLOoh+fsT4WgeIzB/+nzrl3d1sRqM4+s/WMXz4U1hR6b4pPjUnjt5iu3ykcfufv53S3KgGPDKwdBcReCV/KAeSHqgPgn6/PIr6kv8dN8tNGnlEImimifp5HKuETwVD0mFJ1F1P73gM4AU= </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘视源股份面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Glide 图片加载框架源码解析</title>
    <link href="https://www.wshunli.com/posts/c47606cc.html"/>
    <id>https://www.wshunli.com/posts/c47606cc.html</id>
    <published>2018-09-17T05:18:23.000Z</published>
    <updated>2018-09-22T15:53:58.466Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Glide 图片加载框架，包含简单的使用和源码解析。<strong>本文内容基于 Glide 4.7.1 版本</strong>。</p><p>Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。Glide 提供了易用的 API，高性能、可扩展的图片解码管道，以及自动的资源池技术。<a href="https://muyangmin.github.io/glide-docs-cn/" rel="external nofollow noopener noreferrer" target="_blank">https://muyangmin.github.io/glide-docs-cn/</a></p><p>Glide 支持拉取，解码和展示视频快照，图片，和 GIF 动画。Glide 的 API 是如此的灵活，开发者甚至可以插入和替换成自己喜爱的任何网络栈。默认情况下，Glide 使用的是一个定制化的基于 HttpUrlConnection 的栈，但同时也提供了与 Google Volley 和 Square OkHttp 快速集成的工具库。</p><h1 id="Glide-的简单使用"><a href="#Glide-的简单使用" class="headerlink" title="Glide 的简单使用"></a>Glide 的简单使用</h1><p>前面有比较详细的介绍，这里不再赘述。</p><p>Android 图片加载框架 Glide 简单使用 | CirGIS</p><p><a href="https://www.wshunli.com/posts/d82d8606.html">https://www.wshunli.com/posts/d82d8606.html</a></p><h1 id="Glide-的源码解析"><a href="#Glide-的源码解析" class="headerlink" title="Glide 的源码解析"></a>Glide 的源码解析</h1><p>1、我们先看 Glide 的 with() 方法</p><pre><code class="lang-Java">  @NonNull  public static RequestManager with(@NonNull Context context) {    return getRetriever(context).get(context);  }  @NonNull  public static RequestManager with(@NonNull Activity activity) {    return getRetriever(activity).get(activity);  }  @NonNull  public static RequestManager with(@NonNull FragmentActivity activity) {    return getRetriever(activity).get(activity);  }  @NonNull  public static RequestManager with(@NonNull Fragment fragment) {    return getRetriever(fragment.getActivity()).get(fragment);  }  @NonNull  public static RequestManager with(@NonNull View view) {    return getRetriever(view.getContext()).get(view);  }</code></pre><p>未完待续。。</p><blockquote><p>参考资料<br>1、Glide源码分析 | lightSky’Blog<br><a href="http://www.lightskystreet.com/2015/10/12/glide_source_analysis/" rel="external nofollow noopener noreferrer" target="_blank">http://www.lightskystreet.com/2015/10/12/glide_source_analysis/</a><br>2、Android Glide源码解析 - 简书<br><a href="https://www.jianshu.com/p/0c383eaa5675" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0c383eaa5675</a><br>3、Android Glide源码解析 | Frodo’s Blog<br><a href="http://frodoking.github.io/2015/10/10/android-glide/" rel="external nofollow noopener noreferrer" target="_blank">http://frodoking.github.io/2015/10/10/android-glide/</a><br>4、Android源码分析：手把手带你分析 Glide的缓存功能 - CSDN博客<br><a href="https://blog.csdn.net/carson_ho/article/details/79256892" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/carson_ho/article/details/79256892</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Glide 图片加载框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 Glide 4.7.1 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Glide 是一个快速高效的 Android 图片加载库，注重于平滑的滚动。Glide 提供了易用的 API，高性能、可
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="Glide" scheme="https://www.wshunli.com/tags/Glide/"/>
    
      <category term="图片加载" scheme="https://www.wshunli.com/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit 网络框架源码解析</title>
    <link href="https://www.wshunli.com/posts/2bda06ba.html"/>
    <id>https://www.wshunli.com/posts/2bda06ba.html</id>
    <published>2018-09-16T01:38:40.000Z</published>
    <updated>2018-09-22T15:53:58.466Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Retrofit 网络框架，包含简单的使用和源码解析。<strong>本文内容基于 Retrofit 2.4.0 版本</strong>。</p><p>Type-safe HTTP client for Android and Java by Square, Inc. <a href="http://square.github.io/retrofit/" rel="external nofollow noopener noreferrer" target="_blank">http://square.github.io/retrofit/</a></p><p>前面介绍过 OkHttp ，Retrofit 是对 OkHttp 网络请求框架的封装，前者专注于接口的封装，后者专注于真正的网络请求。</p><p><img src="https://img.wshunli.com/Android/Retrofit/Retrofit_OkHttp.png" alt="封装流程图"></p><p>应用程序通过 Retrofit 请求网络，实际上是由 Retrofit 接口层封装请求参数、Header、Url 等信息，由 OkHttp 完成实际的请求操作；在服务端返回数据后，OkHttp 将原始的结果交给 Retrofit，Retrofit 根据用户的需求对结果进行解析。</p><h1 id="Retrofit-的简单使用"><a href="#Retrofit-的简单使用" class="headerlink" title="Retrofit 的简单使用"></a>Retrofit 的简单使用</h1><p>参考官网的介绍：</p><p>1、创建 HTTP API 接口</p><pre><code class="lang-Java">public interface GitHubService {  @GET(&quot;users/{user}/repos&quot;)  Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path(&quot;user&quot;) String user);}</code></pre><p>2、创建 Retrofit 实例，并实现接口实例</p><pre><code class="lang-Java">Retrofit retrofit = new Retrofit.Builder()    .baseUrl(&quot;https://api.github.com/&quot;)    .build();GitHubService service = retrofit.create(GitHubService.class);</code></pre><p>3、创建请求实例</p><pre><code class="lang-Java">Call&lt;List&lt;Repo&gt;&gt; call = service.listRepos(&quot;wshunli&quot;);</code></pre><p>4、发送网络请求</p><pre><code class="lang-Java">// 同步请求call.execute();// 异步请求call.enqueue(new Callback&lt;List&lt;Repo&gt;&gt;() {    @Override    public void onResponse(Call&lt;List&lt;Repo&gt;&gt; call, Response&lt;List&lt;Repo&gt;&gt; response) {    }    @Override    public void onFailure(Call&lt;List&lt;Repo&gt;&gt; call, Throwable t) {        Log.d(TAG, &quot;onFailure: &quot;);    }});</code></pre><p>和 OkHttp 流程差不多，特别是发送请求方法名字都没有变。</p><h1 id="Retrofit-的源码分析"><a href="#Retrofit-的源码分析" class="headerlink" title="Retrofit 的源码分析"></a>Retrofit 的源码分析</h1><p>Retrofit 网络请求完整的流程图如下：</p><p><img src="https://img.wshunli.com/Android/Retrofit/retrofit_full_process.min.png" alt="Retrofit 流程图"></p><p>下面详细介绍。</p><h2 id="创建-Retrofit-实例"><a href="#创建-Retrofit-实例" class="headerlink" title="创建 Retrofit 实例"></a>创建 Retrofit 实例</h2><p>Retrofit 实例化，也是使用的建造者模式。</p><p><img src="https://img.wshunli.com/Android/Retrofit/retrofit_builder.png" alt="retrofit_builder"></p><p>我们先看 Builder 成员变量的含义：</p><pre><code class="lang-Java">// Retrofit#Builderpublic static final class Builder {// 当前系统环境private final Platform platform;// 网络请求器的工厂private @Nullable okhttp3.Call.Factory callFactory;// 网络请求地址private HttpUrl baseUrl;// 数据转换器工厂集合private final List&lt;Converter.Factory&gt; converterFactories = new ArrayList&lt;&gt;();// 网络请求适配器工厂集合private final List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;();// 回调方法执行器private @Nullable Executor callbackExecutor;// 标志位private boolean validateEagerly;</code></pre><p>1、首先构造函数中通过 <code>Platform.get()</code> 初始化了平台参数</p><pre><code class="lang-Java">Builder(Platform platform) {    this.platform = platform;}public Builder() {    this(Platform.get());}Builder(Retrofit retrofit) {    platform = Platform.get();    callFactory = retrofit.callFactory;    baseUrl = retrofit.baseUrl;    converterFactories.addAll(retrofit.converterFactories);    // Remove the default BuiltInConverters instance added by build().    converterFactories.remove(0);    callAdapterFactories.addAll(retrofit.callAdapterFactories);    // Remove the default, platform-aware call adapter added by build().    callAdapterFactories.remove(callAdapterFactories.size() - 1);    callbackExecutor = retrofit.callbackExecutor;    validateEagerly = retrofit.validateEagerly;}</code></pre><p>我们可以看下判断方法：</p><pre><code class="lang-Java">// Platformclass Platform {  private static final Platform PLATFORM = findPlatform();  static Platform get() {    return PLATFORM;  }  private static Platform findPlatform() {    try {      Class.forName(&quot;android.os.Build&quot;);      if (Build.VERSION.SDK_INT != 0) {        return new Android();      }    } catch (ClassNotFoundException ignored) {    }    try {      Class.forName(&quot;java.util.Optional&quot;);      return new Java8();    } catch (ClassNotFoundException ignored) {    }    return new Platform();  }  /* 省略部分无关代码 */}</code></pre><p>后面如果有需要，我们也可以直接拷贝。</p><p>2、然后设置 Retrofit 所需的参数即可</p><pre><code class="lang-Java">public Builder baseUrl(String baseUrl) {    checkNotNull(baseUrl, &quot;baseUrl == null&quot;);    HttpUrl httpUrl = HttpUrl.parse(baseUrl);    if (httpUrl == null) {    throw new IllegalArgumentException(&quot;Illegal URL: &quot; + baseUrl);    }    return baseUrl(httpUrl);}public Builder baseUrl(HttpUrl baseUrl) {    checkNotNull(baseUrl, &quot;baseUrl == null&quot;);    List&lt;String&gt; pathSegments = baseUrl.pathSegments();    if (!&quot;&quot;.equals(pathSegments.get(pathSegments.size() - 1))) {    throw new IllegalArgumentException(&quot;baseUrl must end in /: &quot; + baseUrl);    }    this.baseUrl = baseUrl;    return this;}/** Add converter factory for serialization and deserialization of objects. */public Builder addConverterFactory(Converter.Factory factory) {    converterFactories.add(checkNotNull(factory, &quot;factory == null&quot;));    return this;}public Builder addCallAdapterFactory(CallAdapter.Factory factory) {    callAdapterFactories.add(checkNotNull(factory, &quot;factory == null&quot;));    return this;}</code></pre><p>3、最后是 build() 方法</p><pre><code class="lang-Java">public Retrofit build() {    if (baseUrl == null) {    throw new IllegalStateException(&quot;Base URL required.&quot;);    }    okhttp3.Call.Factory callFactory = this.callFactory;    if (callFactory == null) {    callFactory = new OkHttpClient();    }    Executor callbackExecutor = this.callbackExecutor;    if (callbackExecutor == null) {    callbackExecutor = platform.defaultCallbackExecutor();    }    // Make a defensive copy of the adapters and add the default Call adapter.    List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;(this.callAdapterFactories);    callAdapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));    // Make a defensive copy of the converters.    List&lt;Converter.Factory&gt; converterFactories =        new ArrayList&lt;&gt;(1 + this.converterFactories.size());    // Add the built-in converter factory first. This prevents overriding its behavior but also    // ensures correct behavior when using converters that consume all types.    converterFactories.add(new BuiltInConverters());    converterFactories.addAll(this.converterFactories);    return new Retrofit(callFactory, baseUrl, unmodifiableList(converterFactories),        unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);}</code></pre><h2 id="创建-API-实例"><a href="#创建-API-实例" class="headerlink" title="创建 API 实例"></a>创建 API 实例</h2><p>获取 API 实例使用 Retrofit 的 <code>create()</code> 方法</p><pre><code class="lang-Java">// Retrofit#create()public &lt;T&gt; T create(final Class&lt;T&gt; service) {    Utils.validateServiceInterface(service);    if (validateEagerly) {        eagerlyValidateMethods(service);    }    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] { service },        new InvocationHandler() {            private final Platform platform = Platform.get();            @Override public Object invoke(Object proxy, Method method, @Nullable Object[] args)                throws Throwable {            // If the method is a method from Object then defer to normal invocation.            if (method.getDeclaringClass() == Object.class) {                return method.invoke(this, args);            }            if (platform.isDefaultMethod(method)) {                return platform.invokeDefaultMethod(method, service, proxy, args);            }            ServiceMethod&lt;Object, Object&gt; serviceMethod =                (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);            OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);            return serviceMethod.adapt(okHttpCall);            }        });}</code></pre><p>创建 API 实例使用的是 <strong>动态代理</strong> 设计模式。</p><h2 id="创建请求实例"><a href="#创建请求实例" class="headerlink" title="创建请求实例"></a>创建请求实例</h2><p>创建请求实例，跟钱买你的动态代理有关。</p><pre><code class="lang-Java">// Retrofit#create()ServiceMethod&lt;Object, Object&gt; serviceMethod =    (ServiceMethod&lt;Object, Object&gt;) loadServiceMethod(method);OkHttpCall&lt;Object&gt; okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);return serviceMethod.adapt(okHttpCall);</code></pre><p>1、<code>loadServiceMethod()</code> 方法</p><p>一个 <code>ServiceMethod</code> 对应于一个 API 接口的一个方法，<code>loadServiceMethod()</code> 方法负责加载 <code>ServiceMethod</code></p><pre><code class="lang-Java">// Retrofit#loadServiceMethod()ServiceMethod&lt;?, ?&gt; loadServiceMethod(Method method) {    ServiceMethod&lt;?, ?&gt; result = serviceMethodCache.get(method);    if (result != null) return result;    synchronized (serviceMethodCache) {        result = serviceMethodCache.get(method);        if (result == null) {        result = new ServiceMethod.Builder&lt;&gt;(this, method).build();        serviceMethodCache.put(method, result);        }    }    return result;}</code></pre><p>2、<code>OkHttpCall</code> 类</p><p><code>OkHttpCall</code> 实现了 <code>retrofit2.Call</code> ，我们通常会使用它的 <code>execute()</code> 和 <code>enqueue()</code> 接口。</p><pre><code class="lang-Java">OkHttpCall(ServiceMethod&lt;T, ?&gt; serviceMethod, @Nullable Object[] args) {    this.serviceMethod = serviceMethod;    this.args = args;}</code></pre><p>构造方法也没有什么好看的。</p><h2 id="发送网络请求"><a href="#发送网络请求" class="headerlink" title="发送网络请求"></a>发送网络请求</h2><p>发送网络请求其实也就是 <code>OkHttpCall</code> 类中的方法。</p><p>1、<strong>同步请求</strong> 使用 <code>execute()</code> 方法</p><pre><code class="lang-Java">// OkHttpCall#execute()@Override public Response&lt;T&gt; execute() throws IOException {    okhttp3.Call call;    synchronized (this) {        if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);        executed = true;        if (creationFailure != null) {            if (creationFailure instanceof IOException) {                throw (IOException) creationFailure;            } else if (creationFailure instanceof RuntimeException) {                throw (RuntimeException) creationFailure;            } else {                throw (Error) creationFailure;            }        }        call = rawCall;        if (call == null) {            try {                call = rawCall = createRawCall();            } catch (IOException | RuntimeException | Error e) {                throwIfFatal(e); //  Do not assign a fatal error to creationFailure.                creationFailure = e;                throw e;            }        }    }    if (canceled) {        call.cancel();    }    return parseResponse(call.execute());}</code></pre><p>这里就是 Retrofit 和 OkHttp 交互的核心了，分为三步：</p><p>（1）创建 <code>okhttp3.Call</code> ，包括构造参数</p><pre><code class="lang-Java">private okhttp3.Call createRawCall() throws IOException {    okhttp3.Call call = serviceMethod.toCall(args);    if (call == null) {        throw new NullPointerException(&quot;Call.Factory returned null.&quot;);    }    return call;}</code></pre><p>（2）执行网络请求，也就是 OkHttp 的同步网络请求</p><pre><code class="lang-Java">call.execute()</code></pre><p>（3）解析返回的结果</p><pre><code class="lang-Java">Response&lt;T&gt; parseResponse(okhttp3.Response rawResponse) throws IOException {    ResponseBody rawBody = rawResponse.body();    // Remove the body&#39;s source (the only stateful object) so we can pass the response along.    rawResponse = rawResponse.newBuilder()        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))        .build();    int code = rawResponse.code();    if (code &lt; 200 || code &gt;= 300) {        try {        // Buffer the entire body to avoid future I/O.        ResponseBody bufferedBody = Utils.buffer(rawBody);        return Response.error(bufferedBody, rawResponse);        } finally {        rawBody.close();        }    }    if (code == 204 || code == 205) {        rawBody.close();        return Response.success(null, rawResponse);    }    ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);    try {        T body = serviceMethod.toResponse(catchingBody);        return Response.success(body, rawResponse);    } catch (RuntimeException e) {        // If the underlying source threw an exception, propagate that rather than indicating it was        // a runtime exception.        catchingBody.throwIfCaught();        throw e;    }}</code></pre><p>2、<strong>异步请求</strong> 使用 <code>enqueue()</code> 方法</p><pre><code class="lang-Java">@Override public void enqueue(final Callback&lt;T&gt; callback) {    checkNotNull(callback, &quot;callback == null&quot;);    okhttp3.Call call;    Throwable failure;    synchronized (this) {        if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);        executed = true;        call = rawCall;        failure = creationFailure;        if (call == null &amp;&amp; failure == null) {        try {            call = rawCall = createRawCall();        } catch (Throwable t) {            throwIfFatal(t);            failure = creationFailure = t;        }        }    }    if (failure != null) {        callback.onFailure(this, failure);        return;    }    if (canceled) {        call.cancel();    }    call.enqueue(new okhttp3.Callback() {        @Override public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse) {        Response&lt;T&gt; response;        try {            response = parseResponse(rawResponse);        } catch (Throwable e) {            callFailure(e);            return;        }        try {            callback.onResponse(OkHttpCall.this, response);        } catch (Throwable t) {            t.printStackTrace();        }        }        @Override public void onFailure(okhttp3.Call call, IOException e) {        callFailure(e);        }        private void callFailure(Throwable e) {        try {            callback.onFailure(OkHttpCall.this, e);        } catch (Throwable t) {            t.printStackTrace();        }        }    });}</code></pre><p>我们可以看到和同步请求是一致的，实际请求交给了 <code>okhttp3.Call#enqueue(Callback responseCallback)</code> 来实现，并在它的 <code>callback</code> 中调用 <code>parseResponse()</code> 解析响应数据，并转发给传入的 <code>callback</code> 。</p><p>Retrofit 源码就先介绍到这里了，后面有机会再详细介绍。</p><blockquote><p>参考资料<br>1、Retrofit分析-漂亮的解耦套路 - 简书<br><a href="https://www.jianshu.com/p/45cb536be2f4" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/45cb536be2f4</a><br>2、Android：手把手带你 深入读懂 Retrofit 2.0 源码 - 简书<br><a href="https://www.jianshu.com/p/0c055ad46b6c" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/0c055ad46b6c</a><br>3、Retrofit源码分析（超详细） - 简书<br><a href="https://www.jianshu.com/p/097947afddaf" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/097947afddaf</a><br>4、拆轮子系列：拆 Retrofit - Piasy的博客 | Piasy Blog<br><a href="https://blog.piasy.com/2016/06/25/Understand-Retrofit/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.piasy.com/2016/06/25/Understand-Retrofit/</a><br>5、Retrofit源码解析 | mundane的幻想空间<br><a href="https://mundane799699.github.io/2018/03/13/retrofit-analysis/" rel="external nofollow noopener noreferrer" target="_blank">https://mundane799699.github.io/2018/03/13/retrofit-analysis/</a><br>6、Retrofit源码解析 - 掘金<br><a href="https://juejin.im/post/5acee62c6fb9a028df22ffee" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/post/5acee62c6fb9a028df22ffee</a><br>7、Retrofit源码解析 | 俞其荣的博客 | Qirong Yu’s Blog<br><a href="https://yuqirong.me/2017/08/03/Retrofit源码解析/" rel="external nofollow noopener noreferrer" target="_blank">https://yuqirong.me/2017/08/03/Retrofit源码解析/</a><br>8、android-cn/android-open-project-analysis<br><a href="https://github.com/android-cn/android-open-project-analysis/tree/master/tool-lib/network/retrofit" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/android-cn/android-open-project-analysis/tree/master/tool-lib/network/retrofit</a><br>9、【Android】Retrofit源码分析 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/79933220" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/79933220</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 Retrofit 网络框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 Retrofit 2.4.0 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Type-safe HTTP client for Android and Java by Square, In
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
      <category term="Retrofit" scheme="https://www.wshunli.com/tags/Retrofit/"/>
    
      <category term="网络框架" scheme="https://www.wshunli.com/tags/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp 网络框架源码解析</title>
    <link href="https://www.wshunli.com/posts/5bd2f229.html"/>
    <id>https://www.wshunli.com/posts/5bd2f229.html</id>
    <published>2018-09-13T08:28:11.000Z</published>
    <updated>2018-09-22T15:53:58.466Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 OkHttp 网络框架，包含简单的使用和源码解析。<strong>本文内容基于 OkHttp 3.11.0 版本</strong>。</p><p>网上关于 OkHttp 源码解析的文章有很多，我在这里参考他们的资料，形成自己的知识体系。</p><p>只是停留在应用层面，会使用一些框架是不行的，还需要深入源码、剖析结构。</p><p>An HTTP+HTTP/2 client for Android and Java applications. <a href="http://square.github.io/okhttp/" rel="external nofollow noopener noreferrer" target="_blank">http://square.github.io/okhttp/</a></p><blockquote><p>支持 HTTP/2 协议，允许连接到同一个主机地址的所有请求共享 Socket 。<br>在 HTTP/2 协议不可用的情况下，通过连接池减少请求的延迟。<br>支持 GZip 透明压缩，减少传输的数据包大小。<br>支持响应缓存，避免同一个重复的网络请求。</p></blockquote><h1 id="OkHttp-的简单使用"><a href="#OkHttp-的简单使用" class="headerlink" title="OkHttp 的简单使用"></a>OkHttp 的简单使用</h1><p>一般情况下，对于网络框架有两种常见的使用场景，同步请求和异步请求。</p><p><strong>同步请求</strong>：</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);Response response = call.execute();Log.d(TAG, &quot;onCreate: &quot; + response.body().string());</code></pre><p><strong>异步请求</strong>：</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);call.enqueue(new Callback() {    @Override    public void onFailure(Call call, IOException e) {    }    @Override    public void onResponse(Call call, Response response) throws IOException {        Log.d(TAG, &quot;onCreate: &quot; + response.body().string());    }});</code></pre><p>同步请求和异步请求类似，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，只不过最后执行 enqueue() 方法，整体和网络请求的思路相似。</p><h1 id="OkHttp-的源码分析"><a href="#OkHttp-的源码分析" class="headerlink" title="OkHttp 的源码分析"></a>OkHttp 的源码分析</h1><p>OkHttp 网络请求完整的流程图如下：</p><div align="center"><img src="https://img.wshunli.com/Android/OkHttp/okhttp_full_process.min.png" title="OkHttp 流程图" alt="OkHttp 流程图"></div><p>下面详细介绍。</p><h2 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h2><p>同步请求，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，最后执行 execute() 方法，整体和网络请求的思路相似。</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);Response response = call.execute();</code></pre><h3 id="创建-OkHttpClient-对象"><a href="#创建-OkHttpClient-对象" class="headerlink" title="创建 OkHttpClient 对象"></a>创建 OkHttpClient 对象</h3><p>我们先看 OkHttp 的构造函数：</p><pre><code class="lang-Java">public OkHttpClient() {  this(new Builder());}</code></pre><p>这里是直接实例化，实质上是使用 <strong>建造者模式</strong> 构建 OkHttpClient 实例。</p><p>下面是 OkHttpClient 内部类 Builder 的构造方法：</p><pre><code class="lang-Java">public Builder() {  dispatcher = new Dispatcher();  protocols = DEFAULT_PROTOCOLS;  connectionSpecs = DEFAULT_CONNECTION_SPECS;  eventListenerFactory = EventListener.factory(EventListener.NONE);  proxySelector = ProxySelector.getDefault();  cookieJar = CookieJar.NO_COOKIES;  socketFactory = SocketFactory.getDefault();  hostnameVerifier = OkHostnameVerifier.INSTANCE;  certificatePinner = CertificatePinner.DEFAULT;  proxyAuthenticator = Authenticator.NONE;  authenticator = Authenticator.NONE;  connectionPool = new ConnectionPool();  dns = Dns.SYSTEM;  followSslRedirects = true;  followRedirects = true;  retryOnConnectionFailure = true;  connectTimeout = 10_000;  readTimeout = 10_000;  writeTimeout = 10_000;  pingInterval = 0;}public OkHttpClient build() {  return new OkHttpClient(this);}</code></pre><p>这里 <code>OkHttpClient.Builder</code> 有很多参数，后面再介绍。</p><h3 id="创建-Request-对象"><a href="#创建-Request-对象" class="headerlink" title="创建 Request 对象"></a>创建 Request 对象</h3><p>和 OkHttpClient 类似，Request 也是是使用 <strong>建造者模式</strong> 创建实例。</p><pre><code class="lang-Java">public Builder() {  this.method = &quot;GET&quot;;  this.headers = new Headers.Builder();}public Request build() {  if (url == null) throw new IllegalStateException(&quot;url == null&quot;);  return new Request(this);}</code></pre><p>其中配置默认请求方法为 <code>GET</code> ，还有一些头部的默认参数。</p><h3 id="创建-Call-对象"><a href="#创建-Call-对象" class="headerlink" title="创建 Call 对象"></a>创建 Call 对象</h3><p>OkHttpClient 实现了 <code>Call.Factory</code> ，负责根据请求创建新的 Call 对象。</p><pre><code class="lang-Java">@Override public Call newCall(Request request) {  return RealCall.newRealCall(this, request, false /* for web socket */);}</code></pre><p>Call 只是个接口，实际是实例化的 RealCall 对象。</p><pre><code class="lang-Java">private RealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {  this.client = client;  this.originalRequest = originalRequest;  this.forWebSocket = forWebSocket;  this.retryAndFollowUpInterceptor = new RetryAndFollowUpInterceptor(client, forWebSocket);}static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) {  // Safely publish the Call instance to the EventListener.  RealCall call = new RealCall(client, originalRequest, forWebSocket);  call.eventListener = client.eventListenerFactory().create(call);  return call;}</code></pre><h3 id="发送同步网络请求"><a href="#发送同步网络请求" class="headerlink" title="发送同步网络请求"></a>发送同步网络请求</h3><p>发送请求也是在 <code>RealCall</code> 的 <code>execute()</code> 方法中执行的。</p><pre><code class="lang-Java">// RealCall#execute()@Override public Response execute() throws IOException {  synchronized (this) {    if (executed) throw new IllegalStateException(&quot;Already Executed&quot;);    executed = true;  }  captureCallStackTrace();  eventListener.callStart(this);  try {    client.dispatcher().executed(this);    Response result = getResponseWithInterceptorChain();    if (result == null) throw new IOException(&quot;Canceled&quot;);    return result;  } catch (IOException e) {    eventListener.callFailed(this, e);    throw e;  } finally {    client.dispatcher().finished(this);  }}</code></pre><p>在这里主要做了四件事：</p><p>1、检查 Call 是否执行过，没有执行将 <code>executed</code> 赋值为 true ，保证每个请求只执行一次；<br>2、使用 <code>client.dispatcher().executed(this)</code> 来进行实际的请求；<br>3、调用 <code>getResponseWithInterceptorChain()</code> 方法，获取请求响应的结果；<br>4、最后 <code>dispatcher</code> 结束自己。</p><pre><code class="lang-Java">// Dispatcher#executed()/** Used by {@code Call#execute} to signal it is in-flight. */synchronized void executed(RealCall call) {  runningSyncCalls.add(call);}</code></pre><p>在同步请求中 <code>dispatcher</code> 只是负责判断请求执行的状态，在异步请求中参与内容过多。</p><p>下面我们来看 <code>getResponseWithInterceptorChain()</code> 方法：</p><pre><code class="lang-Java">Response getResponseWithInterceptorChain() throws IOException {  // Build a full stack of interceptors.  List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();  interceptors.addAll(client.interceptors()); // 加入用户自定义的拦截器  interceptors.add(retryAndFollowUpInterceptor); // 重试和重定向拦截器  interceptors.add(new BridgeInterceptor(client.cookieJar())); // 加入转化请求响应的拦截器  interceptors.add(new CacheInterceptor(client.internalCache())); // 加入缓存拦截器  interceptors.add(new ConnectInterceptor(client)); // 加入连接拦截器  if (!forWebSocket) {      interceptors.addAll(client.networkInterceptors()); // 加入用户自定义的网络拦截器  }  interceptors.add(new CallServerInterceptor(forWebSocket)); // 加入请求响应的拦截器  Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,          originalRequest, this, eventListener, client.readTimeoutMillis());  // 利用 chain 来链式调用拦截器，最后的返回结果就是 Response 对象  return chain.proceed(originalRequest);}</code></pre><p>我们都知道，拦截器是 OkHttp 的精髓。</p><p>1、<code>client.interceptors()</code> ，首先加入 <code>interceptors</code> 的是用户自定义的拦截器，比如修改请求头的拦截器等；<br>2、<code>RetryAndFollowUpInterceptor</code> 是用来重试和重定向的拦截器，在下面我们会讲到；<br>3、<code>BridgeInterceptor</code> 是用来将用户友好的请求转化为向服务器的请求，之后又把服务器的响应转化为对用户友好的响应；<br>4、<code>CacheInterceptor</code> 是缓存拦截器，若存在缓存并且可用就直接返回该缓存，否则会向服务器请求；<br>5、<code>ConnectInterceptor</code> 用来建立连接的拦截器；<br>6、<code>client.networkInterceptors()</code> 加入用户自定义的 <code>networkInterceptors</code> ；<br>7、<code>CallServerInterceptor</code>是真正向服务器发出请求且得到响应的拦截器；</p><p>最后在聚合了这些拦截器后，利用 <code>RealInterceptorChain</code> 来链式调用这些拦截器，利用的就是 <strong>责任链模式</strong> 。</p><font font="" size="3" color="#FF0000">下面介绍 OkHttp 中的 拦截器</font><p>拦截器 <code>Interceptor</code> 是 OkHttp 的核心，<strong>实际上它把实际的网络请求、缓存、透明压缩等功能都统一了起来</strong>，每一个功能都只是一个 <code>Interceptor</code>，它们再连接成一个 <code>Interceptor.Chain</code>，环环相扣，最终圆满完成一次网络请求。</p><div align="center"><img src="https://img.wshunli.com/Android/OkHttp/okhttp_interceptors.jpg" title="OkHttp 拦截器" alt="OkHttp 拦截器"></div><p>1、<code>RealInterceptorChain</code> 拦截器链</p><p>拦截器链 <code>RealInterceptorChain</code> 是真正把这些拦截器串起来的一个角色，调用 <code>proceed()</code> 方法</p><pre><code class="lang-Java">public Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,    RealConnection connection) throws IOException {  if (index &gt;= interceptors.size()) throw new AssertionError();  calls++;  // If we already have a stream, confirm that the incoming request will use it.  if (this.httpCodec != null &amp;&amp; !this.connection.supportsUrl(request.url())) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptors.get(index - 1)        + &quot; must retain the same host and port&quot;);  }  // If we already have a stream, confirm that this is the only call to chain.proceed().  if (this.httpCodec != null &amp;&amp; calls &gt; 1) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptors.get(index - 1)        + &quot; must call proceed() exactly once&quot;);  }  // Call the next interceptor in the chain.  // 得到下一次对应的 RealInterceptorChain  RealInterceptorChain next = new RealInterceptorChain(interceptors, streamAllocation, httpCodec,      connection, index + 1, request, call, eventListener, connectTimeout, readTimeout,      writeTimeout);  // 当前次数的 interceptor  Interceptor interceptor = interceptors.get(index);  // 进行拦截处理，并且在 interceptor 链式调用 next 的 proceed 方法  Response response = interceptor.intercept(next);  // Confirm that the next interceptor made its required call to chain.proceed().  // 确认下一次的 interceptor 调用过 chain.proceed()  if (httpCodec != null &amp;&amp; index + 1 &lt; interceptors.size() &amp;&amp; next.calls != 1) {    throw new IllegalStateException(&quot;network interceptor &quot; + interceptor        + &quot; must call proceed() exactly once&quot;);  }  // Confirm that the intercepted response isn&#39;t null.  if (response == null) {    throw new NullPointerException(&quot;interceptor &quot; + interceptor + &quot; returned null&quot;);  }  if (response.body() == null) {    throw new IllegalStateException(        &quot;interceptor &quot; + interceptor + &quot; returned a response with no body&quot;);  }  return response;}</code></pre><p>在代码中是一次次链式调用拦截器。</p><p>2、<code>RetryAndFollowUpInterceptor</code> 重试和重定向的拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  Request request = chain.request();  RealInterceptorChain realChain = (RealInterceptorChain) chain;  Call call = realChain.call();  EventListener eventListener = realChain.eventListener();  StreamAllocation streamAllocation = new StreamAllocation(client.connectionPool(),      createAddress(request.url()), call, eventListener, callStackTrace);  this.streamAllocation = streamAllocation;  int followUpCount = 0;  Response priorResponse = null;  while (true) {    // 如果取消，就释放资源    if (canceled) {      streamAllocation.release();      throw new IOException(&quot;Canceled&quot;);    }    Response response;    boolean releaseConnection = true;    try {      // 调用下一个拦截器      response = realChain.proceed(request, streamAllocation, null, null);      releaseConnection = false;    } catch (RouteException e) {      // The attempt to connect via a route failed. The request will not have been sent.      // 路由连接失败，请求将不会被发送      if (!recover(e.getLastConnectException(), streamAllocation, false, request)) {        throw e.getFirstConnectException();      }      releaseConnection = false;      continue;    } catch (IOException e) {      // An attempt to communicate with a server failed. The request may have been sent.      // 服务器连接失败，请求可能已被发送      boolean requestSendStarted = !(e instanceof ConnectionShutdownException);      if (!recover(e, streamAllocation, requestSendStarted, request)) throw e;      releaseConnection = false;      continue;    } finally {      // We&#39;re throwing an unchecked exception. Release any resources.      // 抛出未检查的异常，释放资源      if (releaseConnection) {        streamAllocation.streamFailed(null);        streamAllocation.release();      }    }    // Attach the prior response if it exists. Such responses never have a body.    if (priorResponse != null) {      response = response.newBuilder()          .priorResponse(priorResponse.newBuilder()                  .body(null)                  .build())          .build();    }    // 如果不需要重定向，那么 followUp 为空，会根据响应码判断    Request followUp;    try {      followUp = followUpRequest(response, streamAllocation.route());    } catch (IOException e) {      streamAllocation.release();      throw e;    }    // 释放资源，返回 response    if (followUp == null) {      if (!forWebSocket) {        streamAllocation.release();      }      return response;    }    // 关闭 response 的 body    closeQuietly(response.body());    if (++followUpCount &gt; MAX_FOLLOW_UPS) {      streamAllocation.release();      throw new ProtocolException(&quot;Too many follow-up requests: &quot; + followUpCount);    }    if (followUp.body() instanceof UnrepeatableRequestBody) {      streamAllocation.release();      throw new HttpRetryException(&quot;Cannot retry streamed HTTP body&quot;, response.code());    }    // response 和 followUp 比较是否为同一个连接    // 若为重定向就销毁旧连接，创建新连接    if (!sameConnection(response, followUp.url())) {      streamAllocation.release();      streamAllocation = new StreamAllocation(client.connectionPool(),          createAddress(followUp.url()), call, eventListener, callStackTrace);      this.streamAllocation = streamAllocation;    } else if (streamAllocation.codec() != null) {      throw new IllegalStateException(&quot;Closing the body of &quot; + response          + &quot; didn&#39;t close its backing stream. Bad interceptor?&quot;);    }    // 将重定向操作得到的新请求设置给 request    request = followUp;    priorResponse = response;  }}</code></pre><p>总体来说，<code>RetryAndFollowUpInterceptor</code> 是用来失败重试以及重定向的拦截器。</p><p>3、<code>BridgeInterceptor</code> 桥街和适配拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  Request userRequest = chain.request();  Request.Builder requestBuilder = userRequest.newBuilder();  // 将用户友好的 request 构造为发送给服务器的 request  RequestBody body = userRequest.body();  // 若有请求体，则构造  if (body != null) {    MediaType contentType = body.contentType();    if (contentType != null) {      requestBuilder.header(&quot;Content-Type&quot;, contentType.toString());    }    long contentLength = body.contentLength();    if (contentLength != -1) {      requestBuilder.header(&quot;Content-Length&quot;, Long.toString(contentLength));      requestBuilder.removeHeader(&quot;Transfer-Encoding&quot;);    } else {      requestBuilder.header(&quot;Transfer-Encoding&quot;, &quot;chunked&quot;);      requestBuilder.removeHeader(&quot;Content-Length&quot;);    }  }  if (userRequest.header(&quot;Host&quot;) == null) {    requestBuilder.header(&quot;Host&quot;, hostHeader(userRequest.url(), false));  }  if (userRequest.header(&quot;Connection&quot;) == null) {    requestBuilder.header(&quot;Connection&quot;, &quot;Keep-Alive&quot;);  }  // If we add an &quot;Accept-Encoding: gzip&quot; header field we&#39;re responsible for also decompressing  // the transfer stream.  // 使用 gzip 压缩  boolean transparentGzip = false;  if (userRequest.header(&quot;Accept-Encoding&quot;) == null &amp;&amp; userRequest.header(&quot;Range&quot;) == null) {    transparentGzip = true;    requestBuilder.header(&quot;Accept-Encoding&quot;, &quot;gzip&quot;);  }  // 设置 cookie  List&lt;Cookie&gt; cookies = cookieJar.loadForRequest(userRequest.url());  if (!cookies.isEmpty()) {    requestBuilder.header(&quot;Cookie&quot;, cookieHeader(cookies));  }  // 设置 UA  if (userRequest.header(&quot;User-Agent&quot;) == null) {    requestBuilder.header(&quot;User-Agent&quot;, Version.userAgent());  }  // 构造完后，将 request 交给下一个拦截器去处理。最后又得到服务端响应 networkResponse  Response networkResponse = chain.proceed(requestBuilder.build());  // 保存 networkResponse 的 cookie  HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers());  // 将 networkResponse 构造为对用户友好的 response  Response.Builder responseBuilder = networkResponse.newBuilder()      .request(userRequest);  // 如果 networkResponse 使用 gzip 并且有响应体的话，给用户友好的 response 设置响应体  if (transparentGzip      &amp;&amp; &quot;gzip&quot;.equalsIgnoreCase(networkResponse.header(&quot;Content-Encoding&quot;))      &amp;&amp; HttpHeaders.hasBody(networkResponse)) {    GzipSource responseBody = new GzipSource(networkResponse.body().source());    Headers strippedHeaders = networkResponse.headers().newBuilder()        .removeAll(&quot;Content-Encoding&quot;)        .removeAll(&quot;Content-Length&quot;)        .build();    responseBuilder.headers(strippedHeaders);    String contentType = networkResponse.header(&quot;Content-Type&quot;);    responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody)));  }  return responseBuilder.build();}</code></pre><p>在 <code>BridgeInterceptor</code> 这一步，先把用户友好的请求进行重新构造，变成了向服务器发送的请求。</p><p>之后调用 <code>chain.proceed(requestBuilder.build())</code> 进行下一个拦截器的处理。</p><p>等到后面的拦截器都处理完毕，得到响应。再把 <code>networkResponse</code> 转化成对用户友好的 <code>response</code> 。</p><p>4、<code>CacheInterceptor</code> 缓存拦截器</p><p>分析 <code>CacheInterceptor</code> 拦截器 <code>intercept()</code> 方法的源代码</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {    // 得到 request 对应缓存中的 response    Response cacheCandidate = cache != null            ? cache.get(chain.request())            : null;    // 获取当前时间，会和之前缓存的时间进行比较    long now = System.currentTimeMillis();    // 得到缓存策略    CacheStrategy strategy = new CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();    Request networkRequest = strategy.networkRequest;    Response cacheResponse = strategy.cacheResponse;    // 追踪缓存，其实就是计数    if (cache != null) {        cache.trackResponse(strategy);    }    // 缓存不适用，关闭    if (cacheCandidate != null &amp;&amp; cacheResponse == null) {        closeQuietly(cacheCandidate.body()); // The cache candidate wasn&#39;t applicable. Close it.    }    // If we&#39;re forbidden from using the network and the cache is insufficient, fail.    // 禁止网络并且没有缓存的话，返回失败    if (networkRequest == null &amp;&amp; cacheResponse == null) {        return new Response.Builder()                .request(chain.request())                .protocol(Protocol.HTTP_1_1)                .code(504)                .message(&quot;Unsatisfiable Request (only-if-cached)&quot;)                .body(Util.EMPTY_RESPONSE)                .sentRequestAtMillis(-1L)                .receivedResponseAtMillis(System.currentTimeMillis())                .build();    }    // If we don&#39;t need the network, we&#39;re done.    // 不用网络请求，返回缓存    if (networkRequest == null) {        return cacheResponse.newBuilder()                .cacheResponse(stripBody(cacheResponse))                .build();    }    Response networkResponse = null;    try {        // 交给下一个拦截器，返回 networkResponse        networkResponse = chain.proceed(networkRequest);    } finally {        // If we&#39;re crashing on I/O or otherwise, don&#39;t leak the cache body.        if (networkResponse == null &amp;&amp; cacheCandidate != null) {            closeQuietly(cacheCandidate.body());        }    }    // 如果我们同时有缓存和 networkResponse ，根据情况使用    if (cacheResponse != null) {        if (networkResponse.code() == HTTP_NOT_MODIFIED) {            Response response = cacheResponse.newBuilder()                    .headers(combine(cacheResponse.headers(), networkResponse.headers()))                    .sentRequestAtMillis(networkResponse.sentRequestAtMillis())                    .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())                    .cacheResponse(stripBody(cacheResponse))                    .networkResponse(stripBody(networkResponse))                    .build();            networkResponse.body().close();            // 更新原来的缓存至最新            // Update the cache after combining headers but before stripping the            // Content-Encoding header (as performed by initContentStream()).            cache.trackConditionalCacheHit();            cache.update(cacheResponse, response);            return response;        } else {            closeQuietly(cacheResponse.body());        }    }    Response response = networkResponse.newBuilder()            .cacheResponse(stripBody(cacheResponse))            .networkResponse(stripBody(networkResponse))            .build();    // 保存之前未缓存的缓存    if (cache != null) {        if (HttpHeaders.hasBody(response) &amp;&amp; CacheStrategy.isCacheable(response, networkRequest)) {            // Offer this request to the cache.            CacheRequest cacheRequest = cache.put(response);            return cacheWritingResponse(cacheRequest, response);        }        if (HttpMethod.invalidatesCache(networkRequest.method())) {            try {                cache.remove(networkRequest);            } catch (IOException ignored) {                // The cache cannot be written.            }        }    }    return response;}</code></pre><p><code>CacheInterceptor</code> 做的事情就是根据请求拿到缓存，若没有缓存或者缓存失效，就进入网络请求阶段，否则会返回缓存。</p><p>5、<code>ConnectInterceptor</code> 拦截器</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  RealInterceptorChain realChain = (RealInterceptorChain) chain;  Request request = realChain.request();  StreamAllocation streamAllocation = realChain.streamAllocation();  // We need the network to satisfy this request. Possibly for validating a conditional GET.  boolean doExtensiveHealthChecks = !request.method().equals(&quot;GET&quot;);  HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);  RealConnection connection = streamAllocation.connection();  return realChain.proceed(request, streamAllocation, httpCodec, connection);}</code></pre><p>实际上建立连接就是创建了一个 <code>HttpCodec</code> 对象，它是对 <code>HTTP</code> 协议操作的抽象，有两个实现：<code>Http1Codec</code> 和 <code>Http2Codec</code>，顾名思义，它们分别对应 HTTP/1.1 和 HTTP/2 版本的实现。</p><p>6、<code>CallServerInterceptor</code> 拦截器，发送和接收数据</p><pre><code class="lang-Java">@Override public Response intercept(Chain chain) throws IOException {  RealInterceptorChain realChain = (RealInterceptorChain) chain;  HttpCodec httpCodec = realChain.httpStream();  StreamAllocation streamAllocation = realChain.streamAllocation();  RealConnection connection = (RealConnection) realChain.connection();  Request request = realChain.request();      long sentRequestMillis = System.currentTimeMillis();  // 整理请求头并写入  httpCodec.writeRequestHeaders(request);  Response.Builder responseBuilder = null;  // 检查是否为有 body 的请求方法  if (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != null) {      // If there&#39;s a &quot;Expect: 100-continue&quot; header on the request, wait for a &quot;HTTP/1.1 100      // Continue&quot; response before transmitting the request body. If we don&#39;t get that, return what      // we did get (such as a 4xx response) without ever transmitting the request body.      // 如果有 Expect: 100-continue 在请求头中，那么要等服务器的响应      if (&quot;100-continue&quot;.equalsIgnoreCase(request.header(&quot;Expect&quot;))) {          httpCodec.flushRequest();          responseBuilder = httpCodec.readResponseHeaders(true);      }      if (responseBuilder == null) {          // Write the request body if the &quot;Expect: 100-continue&quot; expectation was met.          // 写入请求体          Sink requestBodyOut = httpCodec.createRequestBody(request, request.body().contentLength());          BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut);          request.body().writeTo(bufferedRequestBody);          bufferedRequestBody.close();      } else if (!connection.isMultiplexed()) {          // If the &quot;Expect: 100-continue&quot; expectation wasn&#39;t met, prevent the HTTP/1 connection from          // being reused. Otherwise we&#39;re still obligated to transmit the request body to leave the          // connection in a consistent state.          streamAllocation.noNewStreams();      }  }  httpCodec.finishRequest();  // 得到响应头  if (responseBuilder == null) {      responseBuilder = httpCodec.readResponseHeaders(false);  }  // 构造 response  Response response = responseBuilder          .request(request)          .handshake(streamAllocation.connection().handshake())          .sentRequestAtMillis(sentRequestMillis)          .receivedResponseAtMillis(System.currentTimeMillis())          .build();  int code = response.code();  // 如果为 web socket 且状态码是 101 ，那么 body 为空  if (forWebSocket &amp;&amp; code == 101) {      // Connection is upgrading, but we need to ensure interceptors see a non-null response body.      response = response.newBuilder()              .body(Util.EMPTY_RESPONSE)              .build();  } else {      // 读取 body      response = response.newBuilder()              .body(httpCodec.openResponseBody(response))              .build();  }  // 如果请求头中有 close 那么断开连接  if (&quot;close&quot;.equalsIgnoreCase(response.request().header(&quot;Connection&quot;))          || &quot;close&quot;.equalsIgnoreCase(response.header(&quot;Connection&quot;))) {      streamAllocation.noNewStreams();  }  // 抛出协议异常  if ((code == 204 || code == 205) &amp;&amp; response.body().contentLength() &gt; 0) {      throw new ProtocolException(              &quot;HTTP &quot; + code + &quot; had non-zero Content-Length: &quot; + response.body().contentLength());  }  return response;}</code></pre><p>在 <code>CallServerInterceptor</code> 中可见，关于请求和响应部分都是通过 <code>HttpCodec</code> 来实现的。而在 <code>HttpCodec</code> 内部又是通过 <code>sink</code> 和 <code>source</code> 来实现的。所以说到底还是 IO 流在起作用。</p><h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><p>和同步请求类似，先实例化 OkHttpClient 和 Request 对象，然后使用 OkHttpClient 对象的 newCall() 方法创建 Call 对象，只不过最后执行 enqueue() 方法，整体和网络请求的思路相似。</p><pre><code class="lang-Java">OkHttpClient okHttpClient = new OkHttpClient.Builder().build();Request request = new Request.Builder().url(&quot;https://wshunli.com&quot;).build();Call call = okHttpClient.newCall(request);call.enqueue(new Callback() {    @Override    public void onFailure(Call call, IOException e) {    }    @Override    public void onResponse(Call call, Response response) throws IOException {    }});</code></pre><p>异步请求在 <code>Callback</code> 回调中获取响应，有 <code>onResponse()</code> 、 <code>onFailure()</code> 两个方法。</p><h3 id="发送异步网络请求"><a href="#发送异步网络请求" class="headerlink" title="发送异步网络请求"></a>发送异步网络请求</h3><p>前面三个步骤完全一致，我们从发送异步网络请求开始，异步请求是调用 <code>RealCall</code> 实例的 <code>enqueue()</code> 方法。。</p><pre><code class="lang-Java">// RealCall#enqueue()@Override public void enqueue(Callback responseCallback) {  synchronized (this) {    if (executed) throw new IllegalStateException(&quot;Already Executed&quot;);    executed = true;  }  captureCallStackTrace();  eventListener.callStart(this);  client.dispatcher().enqueue(new AsyncCall(responseCallback));}</code></pre><p>这里使用 <code>Dispatcher</code> 分发器我来处理请求。</p><pre><code class="lang-Java">// Dispatcher#enqueue()synchronized void enqueue(AsyncCall call) {  if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) {    runningAsyncCalls.add(call);    executorService().execute(call);  } else {    readyAsyncCalls.add(call);  }}</code></pre><p>实质上异步网络请求是在 <code>Dispatcher</code> 中做到任务调度。</p><font font="" size="3" color="#FF0000">下面介绍 OkHttp 中的 任务调度</font><p>我们来看 <code>Dispatcher</code> 类的源代码。</p><pre><code class="lang-Java">public final class Dispatcher {  private int maxRequests = 64;  private int maxRequestsPerHost = 5;  private @Nullable Runnable idleCallback;  /** Executes calls. Created lazily. */  // 线程池的实现  private @Nullable ExecutorService executorService;  /** Ready async calls in the order they&#39;ll be run. */  // 就绪等待网络请求的异步队列  private final Deque&lt;AsyncCall&gt; readyAsyncCalls = new ArrayDeque&lt;&gt;();  /** Running asynchronous calls. Includes canceled calls that haven&#39;t finished yet. */  // 正在执行网络请求的异步队列  private final Deque&lt;AsyncCall&gt; runningAsyncCalls = new ArrayDeque&lt;&gt;();  /** Running synchronous calls. Includes canceled calls that haven&#39;t finished yet. */  // 正在执行网络请求的同步队列  private final Deque&lt;RealCall&gt; runningSyncCalls = new ArrayDeque&lt;&gt;();  public Dispatcher(ExecutorService executorService) {    this.executorService = executorService;  }  public Dispatcher() {  }  // 创建线程池  public synchronized ExecutorService executorService() {    if (executorService == null) {      executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS,          new SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(&quot;OkHttp Dispatcher&quot;, false));    }    return executorService;  }  /* 省略部分无关代码*/  synchronized void enqueue(AsyncCall call) {    if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) {      runningAsyncCalls.add(call);      executorService().execute(call);    } else {      readyAsyncCalls.add(call);    }  }  /* 省略部分无关代码*/}</code></pre><p>异步请求是放在线程池中执行的，如果最大异步请求数小于 64 并且 单个 HOST 的异步请求数小于 5 ，将请求添加到 <code>runningAsyncCalls</code> 中，否则添加到 <code>readyAsyncCalls</code> 中。</p><p>我们来看添加进线程池的 <code>AsyncCall</code> 类，实际上 <code>AsyncCall</code> 是继承自 <code>NamedRunnable</code> 的 <code>RealCall</code> 内部类。<code>NamedRunnable</code> 是实现了 <code>Runnable</code> 接口的抽象类。</p><pre><code class="lang-Java">final class AsyncCall extends NamedRunnable {  private final Callback responseCallback;  AsyncCall(Callback responseCallback) {    super(&quot;OkHttp %s&quot;, redactedUrl());    this.responseCallback = responseCallback;  }  String host() {    return originalRequest.url().host();  }  Request request() {    return originalRequest;  }  RealCall get() {    return RealCall.this;  }  @Override protected void execute() {    boolean signalledCallback = false;    try {      // 和同步请求相同，调用拦截器，得到响应      Response response = getResponseWithInterceptorChain();      if (retryAndFollowUpInterceptor.isCanceled()) {        signalledCallback = true;        responseCallback.onFailure(RealCall.this, new IOException(&quot;Canceled&quot;));      } else {        signalledCallback = true;        responseCallback.onResponse(RealCall.this, response);      }    } catch (IOException e) {      if (signalledCallback) {        // Do not signal the callback twice!        Platform.get().log(INFO, &quot;Callback failure for &quot; + toLoggableString(), e);      } else {        eventListener.callFailed(RealCall.this, e);        responseCallback.onFailure(RealCall.this, e);      }    } finally {      // 在 runningAsyncCalls 中移除      client.dispatcher().finished(this);    }  }}</code></pre><p>在 <code>AsyncCall</code> 的 <code>execute()</code> 方法中，也是调用了 <code>getResponseWithInterceptorChain()</code> 方法来得到 <code>Response</code> 对象。从这里开始，就和同步请求的流程是一样的，就没必要讲了。</p><p>不同的是在得到 <code>Response</code> 后，进行结果的回调。</p><p>在 <code>AsyncCall</code> 的最后调用了 <code>Dispatcher</code> 的 <code>finished()</code> 方法。</p><pre><code class="lang-Java">// Dispatcher#finished()/** Used by {@code AsyncCall#run} to signal completion. */void finished(AsyncCall call) {  finished(runningAsyncCalls, call, true);}/** Used by {@code Call#execute} to signal completion. */void finished(RealCall call) {  finished(runningSyncCalls, call, false);}private &lt;T&gt; void finished(Deque&lt;T&gt; calls, T call, boolean promoteCalls) {  int runningCallsCount;  Runnable idleCallback;  synchronized (this) {    if (!calls.remove(call)) throw new AssertionError(&quot;Call wasn&#39;t in-flight!&quot;);    // 将 readyAsyncCalls 中的 call 移动到 runningAsyncCalls 中，并加入到线程池中    if (promoteCalls) promoteCalls();    runningCallsCount = runningCallsCount();    idleCallback = this.idleCallback;  }  if (runningCallsCount == 0 &amp;&amp; idleCallback != null) {    idleCallback.run();  }}</code></pre><p>这里所做的工作就是把执行过的 Call 移除，然后将 <code>readyAsyncCalls</code> 中的 Call 移动到 <code>runningAsyncCalls</code> 中并加入线程池中。</p><blockquote><p>基本上 OkHttp 的请求响应的流程就介绍完了，主要是关于 OkHttp 的 <strong>拦截器链</strong> 和 <strong>任务调度</strong> 原理。</p></blockquote><p>还有很多细节没有涉及，需要花费很大的精力，才能理解分析透彻，后面有机会再介绍。</p><blockquote><p>参考资料：<br>1、拆轮子系列：拆 OkHttp - Piasy的博客 | Piasy Blog<br><a href="https://blog.piasy.com/2016/07/11/Understand-OkHttp/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.piasy.com/2016/07/11/Understand-OkHttp/</a><br>2、OkHttp源码解析 | 俞其荣的博客 | Qirong Yu’s Blog<br><a href="http://yuqirong.me/2017/07/25/OkHttp源码解析/" rel="external nofollow noopener noreferrer" target="_blank">http://yuqirong.me/2017/07/25/OkHttp源码解析/</a><br>3、OkHttp源码分析 - 掘金<br><a href="https://juejin.im/post/5af4482951882567286064e6" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/post/5af4482951882567286064e6</a><br>4、okhttp源码分析（一）——基本流程（超详细） - 简书<br><a href="https://www.jianshu.com/p/37e26f4ea57b" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/37e26f4ea57b</a><br>5、OKHttp源码解析 | Frodo’s Blog<br><a href="http://frodoking.github.io/2015/03/12/android-okhttp/" rel="external nofollow noopener noreferrer" target="_blank">http://frodoking.github.io/2015/03/12/android-okhttp/</a><br>6、OkHttp 源码解析（一）：基本流程 - Coding - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000012656606" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000012656606</a><br>7、【Android】OkHttp源码分析 - CSDN博客<br><a href="https://blog.csdn.net/u010983881/article/details/79175824" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u010983881/article/details/79175824</a><br>8、深入浅出 OkHttp 源码 - DiyCode<br><a href="https://www.diycode.cc/topics/640" rel="external nofollow noopener noreferrer" target="_blank">https://www.diycode.cc/topics/640</a><br>9、Okhttp框架源码分析 - 简书<br><a href="https://www.jianshu.com/p/18a4861600d1" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/18a4861600d1</a><br>10、OkHttp 3.7源码分析（一）——整体架构 - CSDN博客<br><a href="https://blog.csdn.net/asiaLIYAZHOU/article/details/72598320" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/asiaLIYAZHOU/article/details/72598320</a><br>11、okhttp网络框架源码解析 - CSDN博客<br><a href="https://blog.csdn.net/fanguangjun123/article/details/78621585" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/fanguangjun123/article/details/78621585</a><br>12、OKHttp网络框架源码解析（一）okHttp框架同步异步请求流程和源码分析 - CSDN博客<br><a href="https://blog.csdn.net/qq_24675479/article/details/79483193" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_24675479/article/details/79483193</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍 OkHttp 网络框架，包含简单的使用和源码解析。&lt;strong&gt;本文内容基于 OkHttp 3.11.0 版本&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;网上关于 OkHttp 源码解析的文章有很多，我在这里参考他们的资料，形成自己的知识体系。&lt;/p&gt;&lt;p&gt;只是停留在应用
      
    
    </summary>
    
      <category term="源码解析" scheme="https://www.wshunli.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="源码解析" scheme="https://www.wshunli.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
      <category term="网络框架" scheme="https://www.wshunli.com/tags/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/"/>
    
      <category term="OkHttp" scheme="https://www.wshunli.com/tags/OkHttp/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年秋季校园招聘超图软件面试</title>
    <link href="https://www.wshunli.com/posts/9a69cc4.html"/>
    <id>https://www.wshunli.com/posts/9a69cc4.html</id>
    <published>2018-09-12T06:10:06.000Z</published>
    <updated>2018-09-22T15:53:58.474Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】记录2018年秋季校园招聘超图软件面试（Android开发工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目 Java 实现（01-10）</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-09-11T13:07:05.000Z</published>
    <updated>2018-09-22T15:53:58.470Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目 Java 实现，老是看书学习理论知识不太行，还得动手写代码啊。</p><p>笔试中的重要性不必多说，面试官还总是喜欢让手写代码。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><p>在设计模式中有详细的介绍，这里不再赘述，请移步：</p><p><a href="https://www.wshunli.com/posts/d1c4534.html">https://www.wshunli.com/posts/d1c4534.html</a></p><p>3、二维数组中查找目标值</p><blockquote><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><p>（1）直接暴力查找</p><pre><code class="lang-Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="lang-Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><blockquote><p>请实现一个函数，将一个字符串中的每个空格替换成 “%20” 。</p></blockquote><pre><code class="lang-Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="lang-Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><blockquote><p>输入一个链表，按链表值从尾到头的顺序返回一个 ArrayList 。</p></blockquote><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="lang-Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="lang-Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="lang-Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><blockquote><p>参考资料<br>1、剑指Offer<em>编程题</em>牛客网<br><a href="https://www.nowcoder.com/ta/coding-interviews" rel="external nofollow noopener noreferrer" target="_blank">https://www.nowcoder.com/ta/coding-interviews</a><br>2、【剑指offer】Java版代码（完整版） - CSDN博客<br><a href="https://blog.csdn.net/baiye_xing/article/details/78428561" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/baiye_xing/article/details/78428561</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《剑指Offer》编程题目 Java 实现，老是看书学习理论知识不太行，还得动手写代码啊。&lt;/p&gt;&lt;p&gt;笔试中的重要性不必多说，面试官还总是喜欢让手写代码。&lt;/p&gt;&lt;p&gt;1、赋值运算函数&lt;/p&gt;&lt;p&gt;2、单例设计模式&lt;/p&gt;&lt;p&gt;在设计模式中有详细的介绍，这里不再赘述，请移
      
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十四）观察者模式</title>
    <link href="https://www.wshunli.com/posts/58b1d741.html"/>
    <id>https://www.wshunli.com/posts/58b1d741.html</id>
    <published>2018-09-10T12:19:14.000Z</published>
    <updated>2018-09-22T15:53:58.466Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式（Observer Pattern）是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。</p><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/14.Observer.png" title="观察者模式" alt="观察者模式"></div><p>观察者模式所涉及的角色有：</p><p>(1) 抽象主题(Subject)角色：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。</p><p>(2) 具体主题(ConcreteSubject)角色：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。</p><p>(3) 抽象观察者(Observer)角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。</p><p>(4) 具体观察者(ConcreteObserver)角色：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。</p><p>1、抽象主题角色类</p><pre><code class="lang-Java">public abstract class Subject {    private List&lt;Observer&gt; list = new ArrayList&lt;&gt;();    /**     * 注册观察者对象     *     * @param observer 观察者对象     */    public void attach(Observer observer) {        list.add(observer);        System.out.println(&quot;Attached an observer&quot;);    }    /**     * 删除观察者对象     *     * @param observer 观察者对象     */    public void detach(Observer observer) {        list.remove(observer);        System.out.println(&quot;Detached an observer&quot;);    }    /**     * 通知所有注册的观察者对象     */    public void nodifyObservers(String newState) {        for (Observer observer : list) {            observer.update(newState);        }    }}</code></pre><p>2、具体主题角色类</p><pre><code class="lang-Java">public class ConcreteSubject extends Subject {    private String state;    public String getState() {        return state;    }    public void change(String newState) {        state = newState;        System.out.println(&quot;ConcreteSubject：&quot; + state);        this.nodifyObservers(state);//状态发生改变，通知各个观察者    }}</code></pre><p>3、抽象观察者角色类</p><pre><code class="lang-Java">public interface Observer {    public void update(String state);}</code></pre><p>4、具体观察者角色类</p><pre><code class="lang-Java">public class ConcreteObserver implements Observer {    private String observerState;//观察者的状态    @Override    public void update(String state) {        /**         * 更新观察者的状态，使其与目标的状态保持一致         */        observerState = state;        System.out.println(&quot;ConcreteObserver：&quot; + observerState);    }}</code></pre><p>5、观察者模式的使用</p><pre><code class="lang-Java">public class ObserverPatternMain {    public static void main(String[] args) {        ConcreteSubject subject = new ConcreteSubject();        ConcreteObserver observer = new ConcreteObserver();        subject.attach(observer);        subject.change(&quot;New State&quot;);        subject.detach(observer);        subject.change(&quot;New State&quot;);    }}</code></pre><p>当主题对象的状态改变时，将通知所有观察者，观察者接收到主题对象的通知后，将可以进行其他操作，进行响应。</p><p><strong>推模型和拉模型</strong>：</p><p>在观察者模式中，又分为推模型和拉模型两种方式。</p><p>（1）推模型：主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。</p><p>（2）拉模型：主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把 <strong>主题对象自身</strong> 通过 update() 方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。</p><p>前面就是典型的推模型，下面介绍拉模型。</p><p>1、抽象主题角色类</p><pre><code class="lang-Java">public abstract class Subject {    private List&lt;Observer&gt; list = new ArrayList&lt;&gt;();    /**     * 注册观察者对象     *     * @param observer 观察者对象     */    public void attach(Observer observer) {        list.add(observer);        System.out.println(&quot;Attached an observer&quot;);    }    /**     * 删除观察者对象     *     * @param observer 观察者对象     */    public void detach(Observer observer) {        list.remove(observer);        System.out.println(&quot;Detached an observer&quot;);    }    /**     * 通知所有注册的观察者对象     */    public void nodifyObservers() {        for (Observer observer : list) {            observer.update(this);        }    }}</code></pre><p>3、抽象观察者角色类</p><pre><code class="lang-Java">public interface Observer {    public void update(Subject subject);}</code></pre><p>4、具体观察者角色类</p><pre><code class="lang-Java">public class ConcreteObserver implements Observer {    @Override    public void update(Subject subject) {        String state = ((ConcreteSubject) subject).getState();        System.out.println(&quot;ConcreteObserver：&quot; + state);    }}</code></pre><p>5、观察者模式的使用</p><pre><code class="lang-Java">public class ObserverPatternMain {    public static void main(String[] args) {        ConcreteSubject subject = new ConcreteSubject();        ConcreteObserver observer = new ConcreteObserver();        subject.attach(observer);        subject.change(&quot;New State&quot;);        subject.detach(observer);        subject.change(&quot;New State&quot;);    }}</code></pre><p><strong>两种模式的比较</strong>：</p><p>（1）推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者具体需要什么数据，没有办法的情况下，干脆把自身传递给观察者，让观察者自己去按需要取值。</p><p>（2）推模型可能会使得观察者对象难以复用，因为观察者的 update() 方法是按需要定义的参数，可能无法兼顾没有考虑到的使用情况。这就意味着出现新情况的时候，就可能提供新的 update() 方法，或者是干脆重新实现观察者；而拉模型就不会造成这样的情况，因为拉模型下，update() 方法的参数是主题对象本身，这基本上是主题对象能传递的最大数据集合了，基本上可以适应各种情况的需要。</p><p><strong>观察者模式的优缺点</strong>：</p><p>优点：观察者和被观察者是抽象耦合的；建立一套触发机制。<br>缺点：1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch14" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch14</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之观察者模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;观察者模式（Observer Pattern）是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。&lt;/p&gt;&lt;h1 id=&quot;观
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十三）享元模式</title>
    <link href="https://www.wshunli.com/posts/180f2df5.html"/>
    <id>https://www.wshunli.com/posts/180f2df5.html</id>
    <published>2018-09-10T10:43:03.000Z</published>
    <updated>2018-09-22T15:53:58.466Z</updated>
    
    <content type="html"><![CDATA[<p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/13.Flyweight.png" title="享元模式" alt="享元模式"></div><p>享元模式所涉及到的角色如下：</p><p>(1) 抽象享元(Flyweight)角色 ：给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。</p><p>(2) 具体享元(ConcreteFlyweight)角色：实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。</p><p>(3) 享元工厂(FlyweightFactory)角色 ：本角色负责创建和管理享元角色。本角色必须保证享元对象可以被系统适当地共享。当一个客户端对象调用一个享元对象的时候，享元工厂角色会检查系统中是否已经有一个符合要求的享元对象。如果已经有了，享元工厂角色就应当提供这个已有的享元对象；如果系统中没有一个适当的享元对象的话，享元工厂角色就应当创建一个合适的享元对象。</p><p>1、创建一个接口</p><pre><code class="lang-Java">public interface Shape {    void draw();}</code></pre><p>2、创建实现接口的实体类</p><pre><code class="lang-Java">public class Circle implements Shape {    private String color;    private int x;    private int y;    private int radius;    public Circle(String color) {        this.color = color;    }    public void setX(int x) {        this.x = x;    }    public void setY(int y) {        this.y = y;    }    public void setRadius(int radius) {        this.radius = radius;    }    @Override    public void draw() {        System.out.println(&quot;Circle: Draw() [Color : &quot; + color                + &quot;, x : &quot; + x + &quot;, y :&quot; + y + &quot;, radius :&quot; + radius);    }}</code></pre><p>3、创建一个工厂，生成基于给定信息的实体类的对象</p><pre><code class="lang-Java">public class ShapeFactory {    private static final HashMap&lt;String, Shape&gt; circleMap = new HashMap&lt;&gt;();    public static Shape getCircle(String color) {        Circle circle = (Circle) circleMap.get(color);        if (circle == null) {            circle = new Circle(color);            circleMap.put(color, circle);            System.out.println(&quot;Creating circle of color : &quot; + color);        }        return circle;    }}</code></pre><p>4、享元模式的使用</p><pre><code class="lang-Java">public class FlyweightPatternMain {    private static final String colors[] =            {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;White&quot;, &quot;Black&quot;};    public static void main(String[] args) {        for (int i = 0; i &lt; 20; ++i) {            Circle circle =                    (Circle) ShapeFactory.getCircle(getRandomColor());            circle.setX(getRandomX());            circle.setY(getRandomY());            circle.setRadius(100);            circle.draw();        }    }    private static String getRandomColor() {        return colors[(int) (Math.random() * colors.length)];    }    private static int getRandomX() {        return (int) (Math.random() * 100);    }    private static int getRandomY() {        return (int) (Math.random() * 100);    }}</code></pre><p><strong>享元模式的优缺点</strong>：</p><p>优点：系统有大量相似对象；需要缓冲池的场景。<br>缺点：注意划分外部状态和内部状态，否则可能会引起线程安全问题，这些类必须有一个工厂对象加以控制。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch13" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch13</a></p><blockquote><p>参考资料<br>1、《JAVA与模式》之享元模式 - java_my_life - 博客园<br><a href="https://www.cnblogs.com/java-my-life/archive/2012/04/26/2468499.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/java-my-life/archive/2012/04/26/2468499.html</a><br>2、设计模式读书笔记——享元模式 - chenssy - 博客园<br><a href="https://www.cnblogs.com/chenssy/p/3330555.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/chenssy/p/3330555.html</a><br>3、享元模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/flyweight-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/flyweight-pattern.html</a><br>4、JAVA设计模式-享元模式（Flyweight） - 简书<br><a href="https://www.jianshu.com/p/f88b903a166a" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f88b903a166a</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。&lt;/p&gt;&lt;h1 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;he
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十二）桥接模式</title>
    <link href="https://www.wshunli.com/posts/f75ecf9a.html"/>
    <id>https://www.wshunli.com/posts/f75ecf9a.html</id>
    <published>2018-09-10T09:09:30.000Z</published>
    <updated>2018-09-22T15:53:58.466Z</updated>
    
    <content type="html"><![CDATA[<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p><h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p>桥接模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/12.Bridge.png" title="桥接模式" alt="桥接模式"></div><p>桥接模式包含如下角色：</p><p>(1) Abstraction：抽象类，抽象部分的接口。通常在这个对象里面，要维护一个实现部分的对象引用，在抽象对象里面的方法，需要调用实现部分的对象来完成。这个对象里面的方法，通常都是跟具体的业务相关的方法。Shape<br>(2) RefinedAbstraction：扩充抽象类，扩展抽象部分的接口，通常在这些对象里面，定义跟实际业务相关的方法，这些方法的实现通常会使用Abstraction中定义的方法，也可能需要调用实现部分的对象来完成。Circle<br>(3) Implementor：实现类接口，定义实现部分的接口，这个接口不用和 Abstraction 里面的方法一致，通常是由 Implementor 接口提供基本的操作，而 Abstraction 里面定义的是基于这些基本操作的业务方法，也就是说 Abstraction 定义了基于这些基本操作的较高层次的操作。DrawAPI<br>(4) ConcreteImplementor：具体实现类，真正实现 Implementor 接口的对象。GreenCircle、RedCircle</p><p>1、创建桥接实现接口</p><pre><code class="lang-Java">public interface DrawAPI {    void drawCircle(int radius, int x, int y);}</code></pre><p>2、创建实现了 DrawAPI 接口的实体桥接实现类</p><pre><code class="lang-Java">public class GreenCircle implements DrawAPI {    @Override    public void drawCircle(int radius, int x, int y) {        System.out.println(&quot;Drawing Circle[ color: green, radius: &quot;                + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);    }}public class RedCircle implements DrawAPI {    @Override    public void drawCircle(int radius, int x, int y) {        System.out.println(&quot;Drawing Circle[ color: red, radius: &quot;                + radius + &quot;, x: &quot; + x + &quot;, &quot; + y + &quot;]&quot;);    }}</code></pre><p>3、使用 DrawAPI 接口创建抽象类 Shape</p><pre><code class="lang-Java">public abstract class Shape {    protected DrawAPI drawAPI;    protected Shape(DrawAPI drawAPI) {        this.drawAPI = drawAPI;    }    public abstract void draw();}</code></pre><p>4、创建实现了 Shape 接口的实体类</p><pre><code class="lang-Java">public class Circle extends Shape {    private int x, y, radius;    public Circle(DrawAPI drawAPI, int x, int y, int radius) {        super(drawAPI);        this.x = x;        this.y = y;        this.radius = radius;    }    @Override    public void draw() {        drawAPI.drawCircle(radius, x, y);    }}</code></pre><p>5、使用 Shape 和 DrawAPI 类画出不同颜色的圆</p><pre><code class="lang-Java">public class BridgePatternMain {    public static void main(String[] args) {        Shape redCircle = new Circle(new RedCircle(), 100, 100, 10);        Shape greenCircle = new Circle(new GreenCircle(), 100, 100, 10);        redCircle.draw();        greenCircle.draw();    }}</code></pre><p><strong>桥接模式的优缺点</strong>：</p><p>优点：抽象和实现的分离；优秀的扩展能力；实现细节对客户透明。<br>缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch12" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch12</a></p><blockquote><p>参考资料<br>1、Java设计模式之十五（桥接模式） - CSDN博客<br><a href="https://blog.csdn.net/shaopeng5211/article/details/8827507" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/shaopeng5211/article/details/8827507</a><br>2、JAVA设计模式之 桥接模式【Bridge Pattern】 - CSDN博客<br><a href="https://blog.csdn.net/janice0529/article/details/44102637" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/janice0529/article/details/44102637</a><br>3、java中的桥接模式 - 简书<br><a href="https://www.jianshu.com/p/c71562c98258" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c71562c98258</a><br>4、讲故事，学（Java）设计模式—桥接模式 - ImportNew<br><a href="http://www.importnew.com/6857.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/6857.html</a><br>5、桥接模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/bridge-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/bridge-pattern.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。&lt;/p&gt;&lt;h1 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十一）组合模式</title>
    <link href="https://www.wshunli.com/posts/fb6e1df3.html"/>
    <id>https://www.wshunli.com/posts/fb6e1df3.html</id>
    <published>2018-09-10T08:40:17.000Z</published>
    <updated>2018-09-22T15:53:58.466Z</updated>
    
    <content type="html"><![CDATA[<p>组合模式(Composite Pattern)有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/11.Composite.png" title="组合模式" alt="组合模式"></div><p>组合模式的包含角色：</p><p>(1) Component 抽象构件角色，定义参加组合对象的共有方法和属性，可以定义一些默认的行为或属性。<br>(2) Leaf 叶子构件，叶子对象，其下再也没有其他的分支，也就是遍历的最小单位。<br>(3) Composite 树枝构件，树枝对象，它的作用是组合树枝节点和叶子节点形成一个树形结构。</p><p>1、抽象构件角色</p><pre><code class="lang-Java">public abstract class Component {    public void operation() {        System.out.println(&quot;Component.operation()&quot;);    }}</code></pre><p>2、树枝构件</p><pre><code class="lang-Java">public class Composite extends Component {    private ArrayList&lt;Component&gt; componentArrayList = new ArrayList&lt;&gt;();    public void add(Component component) {        componentArrayList.add(component);    }    public void remove(Component component) {        componentArrayList.remove(component);    }    public ArrayList&lt;Component&gt; getChildren() {        return this.componentArrayList;    }}</code></pre><p>3、树叶构件</p><pre><code class="lang-Java">public class Leaf extends Component {    @Override    public void operation() {        System.out.println(&quot;Leaf.operation()&quot;);    }}</code></pre><p>4、组合模式的使用</p><pre><code class="lang-Java">public class CompositeMain {    public static void main(String[] args) {        Composite root = new Composite();        root.operation();        Composite branch = new Composite();        root.add(branch);        Leaf leaf1 = new Leaf();        Leaf leaf2 = new Leaf();        branch.add(leaf1);        branch.add(leaf2);        display(root);    }    public static void display(Composite root) {        for (Component component : root.getChildren()) {            if (component instanceof Leaf) {                component.operation();            } else {                display((Composite) component);            }        }    }}</code></pre><p><strong>组合模式的优缺点</strong>：</p><p>优点：高层模块调用简单；节点自由增加。<br>缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch11" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch11</a></p><blockquote><p>参考资料<br>1、JAVA设计模式十七—Composite(组合模式) - CSDN博客<br><a href="https://blog.csdn.net/hfmbook/article/details/7693069" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/hfmbook/article/details/7693069</a><br>2、Java设计模式—组合模式 - CSDN博客<br><a href="https://blog.csdn.net/qq_25827845/article/details/52496522" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/qq_25827845/article/details/52496522</a><br>3、组合模式 | 菜鸟教程<br><a href="http://www.runoob.com/design-pattern/composite-pattern.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.runoob.com/design-pattern/composite-pattern.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;组合模式(Composite Pattern)有时候又叫做部分-整体模式，它使我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。&lt;/p&gt;&lt;h1 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十）代理模式</title>
    <link href="https://www.wshunli.com/posts/b4b3761.html"/>
    <id>https://www.wshunli.com/posts/b4b3761.html</id>
    <published>2018-09-10T08:12:52.000Z</published>
    <updated>2018-09-22T15:53:58.466Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式(Proxy Pattern)给某一个对象提供一个代理，并由代理对象控制对原对象的引用。</p><p>代理模式的英文叫做 Proxy 或 Surrogate ，它是一种对象结构型模式。</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/10.Proxy.png" title="代理模式" alt="代理模式"></div><p>代理模式一般涉及到的角色有：</p><p>(1) 抽象角色：声明真实对象和代理对象的共同接口；<br>(2) 代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装；<br>(3) 真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。</p><p>1、抽象对象角色</p><pre><code class="lang-Java">public abstract class AbstractObject {    public abstract void operation();}</code></pre><p>2、目标对象角色</p><pre><code class="lang-Java">public class RealObject extends AbstractObject {    @Override    public void operation() {        System.out.println(&quot;RealObject.operation()&quot;);    }}</code></pre><p>3、代理对象角色</p><pre><code class="lang-Java">public class ProxyObject extends AbstractObject {    RealObject realObject = new RealObject();    @Override    public void operation() {        //调用目标对象之前可以做相关操作        System.out.println(&quot;before&quot;);        realObject.operation();        //调用目标对象之后可以做相关操作        System.out.println(&quot;after&quot;);    }}</code></pre><p>4、代理模式的使用</p><pre><code class="lang-Java">public class ProxyMain {    public static void main(String[] args) {        AbstractObject object = new ProxyObject();        object.operation();    }}</code></pre><p><strong>代理模式的优缺点</strong>：</p><p>优点：给对象增加了本地化的扩展性，增加了存取操作控制。<br>缺点：会产生多余的代理类。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch10" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch10</a></p><blockquote><p>参考资料<br>1、Java设计模式之代理模式(Proxy) - CSDN博客<br><a href="https://blog.csdn.net/liangbinny/article/details/18656791" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/liangbinny/article/details/18656791</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代理模式(Proxy Pattern)给某一个对象提供一个代理，并由代理对象控制对原对象的引用。&lt;/p&gt;&lt;p&gt;代理模式的英文叫做 Proxy 或 Surrogate ，它是一种对象结构型模式。&lt;/p&gt;&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（九）装饰者模式</title>
    <link href="https://www.wshunli.com/posts/d95b685e.html"/>
    <id>https://www.wshunli.com/posts/d95b685e.html</id>
    <published>2018-09-10T06:37:20.000Z</published>
    <updated>2018-09-22T15:53:58.466Z</updated>
    
    <content type="html"><![CDATA[<p>装饰者模式 (Decorator Pattern) 在不改变原类文件以及不使用继承的情况下，动态地将责任附加到对象上，从而实现动态拓展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p><h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><p>动态的给对象添加一些额外的属性或行为。相比于使用继承，装饰者模式更加灵活。</p><div align="center"><img src="https://img.wshunli.com/DesignPatterns/设计模式之禅/9.Decorator.png" title="装饰者模式" alt="装饰者模式"></div><p>一般来说装饰者模式有下面几个参与者：</p><p>(1) Component：装饰者和被装饰者共同的父类，是一个接口或者抽象类，用来定义基本行为。<br>(2) ConcreteComponent：定义具体对象，即被装饰者。<br>(3) Decorator：抽象装饰者，继承自 Component ，从外类来扩展 ConcreteComponent 。对于 ConcreteComponent 来说，不需要知道 Decorator 的存在，Decorator 是一个接口或抽象类<br>(4) ConcreteDecorator：具体装饰者，用于扩展 ConcreteComponent 。</p><p>1、抽象构件角色 Component</p><pre><code class="lang-Java">public interface Component {    public void sampleOperation();}</code></pre><p>2、具体构件角色 ConcreteComponent</p><pre><code class="lang-Java">public class ConcreteComponent implements Component {    @Override    public void sampleOperation() {        System.out.println(&quot;ConcreteComponent.sampleOperation()&quot;);    }}</code></pre><p>3、装饰角色 Decorator</p><pre><code class="lang-Java">public class Decorator implements Component {    Component component;    public Decorator(Component component) {        this.component = component;    }    @Override    public void sampleOperation() {        // 委派给构件        component.sampleOperation();    }}</code></pre><p>4、具体装饰角色 ConcreteDecorator</p><pre><code class="lang-Java">public class ConcreteDecoratorA extends Decorator {    public ConcreteDecoratorA(Component component) {        super(component);    }    @Override    public void sampleOperation() {        System.out.println(&quot;ConcreteDecoratorA.sampleOperation() start&quot;);        super.sampleOperation();        System.out.println(&quot;ConcreteDecoratorA.sampleOperation() end&quot;);    }}public class ConcreteDecoratorB extends Decorator {    public ConcreteDecoratorB(Component component) {        super(component);    }    @Override    public void sampleOperation() {        System.out.println(&quot;ConcreteDecoratorB.sampleOperation() start&quot;);        super.sampleOperation();        System.out.println(&quot;ConcreteDecoratorB.sampleOperation() end&quot;);    }}</code></pre><p>5、装饰者模式的使用</p><pre><code class="lang-Java">public class DecoratorMain {    public static void main(String[] args) {        ConcreteComponent concreteComponent = new ConcreteComponent();        ConcreteDecoratorA concreteDecoratorA = new ConcreteDecoratorA(concreteComponent);        concreteDecoratorA.sampleOperation();        ConcreteDecoratorB concreteDecoratorB = new ConcreteDecoratorB(concreteComponent);        concreteDecoratorB.sampleOperation();    }}</code></pre><p><strong>装饰者模式的优缺点</strong>：</p><p>优点：装饰模式可以提供比继承更多的灵活性；通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。<br>缺点：使用装饰模式会产生比使用继承关系更多的对象。更多的对象会使得查错变得困难。</p><p><strong>本文实现源码</strong>：<a href="https://github.com/wshunli/design-patterns/tree/master/src/ch09" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/design-patterns/tree/master/src/ch09</a></p><blockquote><p>参考资料<br>1、学习、探究Java设计模式——装饰者模式 - CSDN博客<br><a href="https://blog.csdn.net/a553181867/article/details/52108423" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/a553181867/article/details/52108423</a><br>2、Java设计模式之装饰者模式(Decorator pattern) - 简书<br><a href="https://www.jianshu.com/p/c26b9b4a9d9e" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/c26b9b4a9d9e</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;装饰者模式 (Decorator Pattern) 在不改变原类文件以及不使用继承的情况下，动态地将责任附加到对象上，从而实现动态拓展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。&lt;/p&gt;&lt;h1 id=&quot;装饰者模式&quot;&gt;&lt;a href=&quot;#装饰者模式&quot;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://www.wshunli.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="https://www.wshunli.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="《设计模式之禅》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%A6%85%E3%80%8B/"/>
    
  </entry>
  
</feed>
