<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CirGIS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wshunli.com/"/>
  <updated>2018-05-08T15:05:12.028Z</updated>
  <id>https://www.wshunli.com/</id>
  
  <author>
    <name>wshunli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我本将心向明月，奈何明月照沟渠</title>
    <link href="https://www.wshunli.com/posts/2739df62.html"/>
    <id>https://www.wshunli.com/posts/2739df62.html</id>
    <published>2018-05-08T06:06:23.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<p>我本将心向明月，奈何明月照沟渠，<br>落花有意随流水，流水无心恋落花。</p><a id="more"></a><p>简历初筛未通过，笔试机会都没有。</p><p>滴，好人卡。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我本将心向明月，奈何明月照沟渠，&lt;br&gt;落花有意随流水，流水无心恋落花。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《Java多线程编程核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/4e70966b.html"/>
    <id>https://www.wshunli.com/posts/4e70966b.html</id>
    <published>2018-05-05T14:47:09.000Z</published>
    <updated>2018-05-08T15:05:12.024Z</updated>
    
    <content type="html"><![CDATA[<p>前面面试什么的多线程部分问的比较多，需要加强下<a id="more"></a> ，这里记录总结 《Java多线程编程核心技术》 读书情况。</p><h1 id="第一章-Java-多线程技能"><a href="#第一章-Java-多线程技能" class="headerlink" title="第一章 Java 多线程技能"></a>第一章 Java 多线程技能</h1><p>本章主要介绍了线程的核心方法。</p><p>1、首先介绍了进程和线程的区别，</p><p><strong>进程</strong>是受操作系统管理的基本运行单元，是系统进行资源分配和调度的独立单位。<br><strong>线程</strong>是在进程中独立运行的子任务，CPU 在这些任务之间不停地切换，各子任务共享程序的内存空间。</p><p>线程和进程的区别是什么？ - 知乎：<br><a href="https://www.zhihu.com/question/25532384" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/25532384</a></p><p>2、使用多线程的方法</p><p>（1）继承 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Thread.html" rel="external nofollow noopener noreferrer" target="_blank">Thread</a> 类</p><p>（2）实现 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Runnable.html" rel="external nofollow noopener noreferrer" target="_blank">Runnable</a> 接口</p><p>其中 Thread 类实现了 Runable 接口，都需要重写里面 run 方法。</p><p>两种方式的区别：</p><p>实现 Runnable 的类更具有健壮性，避免了单继承的局限。<br>Runnable 更容易实现资源共享，能多个线程同时处理一个资源。</p><p>Java中 Thread和Runnable实现多线程的区别和联系 - CSDN博客:<br><a href="https://blog.csdn.net/oxuanboy1/article/details/51733279" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/oxuanboy1/article/details/51733279</a></p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面面试什么的多线程部分问的比较多，需要加强下
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java多线程编程核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cesium Hello World ！</title>
    <link href="https://www.wshunli.com/posts/a4e3e5ad.html"/>
    <id>https://www.wshunli.com/posts/a4e3e5ad.html</id>
    <published>2018-05-03T09:22:54.000Z</published>
    <updated>2018-05-08T15:05:12.020Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Cesium 的环境搭建及 Hello World Demo 。</p><a id="more"></a><p>Cesium 是一个基于 JavaScript 的开源框架，可用于在浏览器中绘制 3D 的地球，并在其上绘制地图（支持多种格式的瓦片服务），该框架不需要任何插件支持，但是浏览器必须支持 WebGL。</p><p>Cesium 支持多种数据可视化方式，可以绘制各种几何图形、导入图片，甚至 3D 模型。同时，Cesium还支持基于时间轴的动态数据展示，例如，我们可以用它绘制卫星运行轨迹。</p><p>从官方仓库或者官网下载 CesiumJS</p><p>官方仓库：<a href="https://github.com/AnalyticalGraphicsInc/cesium" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AnalyticalGraphicsInc/cesium</a><br>官网下载：<a href="https://cesiumjs.org/downloads/" rel="external nofollow noopener noreferrer" target="_blank">https://cesiumjs.org/downloads/</a></p><p>首先官方推荐使用 Nodejs 作为 Web 服务器，安装很简单就不多介绍了。</p><p>下载好之后解压即可，在项目根目录，命令行中依次输入以下命令</p><pre><code class="NPM">npm installnode server.js</code></pre><p>然后在浏览器中打开 <a href="http://localhost:8080/Apps/HelloWorld.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/HelloWorld.html</a> 即可。</p><p>我们来看 <code>HelloWorld.html</code> 源码也比较简单。</p><pre><code class="HTML">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;!-- Use correct character set. --&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;!-- Tell IE to use the latest, best version. --&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;&gt;  &lt;title&gt;Hello World!&lt;/title&gt;  &lt;script src=&quot;../Build/Cesium/Cesium.js&quot;&gt;&lt;/script&gt;  &lt;style&gt;      @import url(../Build/Cesium/Widgets/widgets.css);      html, body, #cesiumContainer {          width: 100%; height: 100%; margin: 0; padding: 0; overflow: hidden;      }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;  &lt;script&gt;    var viewer = new Cesium.Viewer(&#39;cesiumContainer&#39;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <a href="http://localhost:8080/Apps/Sandcastle/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/Apps/Sandcastle/index.html</a> 中有一些示例代码，很不错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Cesium 的环境搭建及 Hello World Demo 。&lt;/p&gt;
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>大数据量 3dsMax 精细模型处理及可视化方法</title>
    <link href="https://www.wshunli.com/posts/4cbab315.html"/>
    <id>https://www.wshunli.com/posts/4cbab315.html</id>
    <published>2018-05-03T07:46:46.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，本文为较新研究成果，暂不公开. " /> <label for="pass"> 欢迎您访问我的博客，本文为较新研究成果，暂不公开. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【暂不公开】记录大数据量 3dsMax 精细模型处理及可视化方法。
    
    </summary>
    
      <category term="三维技术" scheme="https://www.wshunli.com/categories/%E4%B8%89%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Cesium" scheme="https://www.wshunli.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（八）</title>
    <link href="https://www.wshunli.com/posts/b96eb139.html"/>
    <id>https://www.wshunli.com/posts/b96eb139.html</id>
    <published>2018-04-28T06:47:46.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】面试官们不错，脸上总是笑嘻嘻
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季阿里巴巴实习生面试</title>
    <link href="https://www.wshunli.com/posts/b3a8426.html"/>
    <id>https://www.wshunli.com/posts/b3a8426.html</id>
    <published>2018-04-28T03:03:38.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（aliyun）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（aliyun）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●阿里云暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季百度实习生面试</title>
    <link href="https://www.wshunli.com/posts/689a494.html"/>
    <id>https://www.wshunli.com/posts/689a494.html</id>
    <published>2018-04-22T07:25:15.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（baidu）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（baidu）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春百度暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季京东实习生面试</title>
    <link href="https://www.wshunli.com/posts/91f1dfa4.html"/>
    <id>https://www.wshunli.com/posts/91f1dfa4.html</id>
    <published>2018-04-22T02:13:09.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（jingdong）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（jingdong）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春京东暑期实习生面试（Android工程师）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季华为实习生面试</title>
    <link href="https://www.wshunli.com/posts/3cb63fb.html"/>
    <id>https://www.wshunli.com/posts/3cb63fb.html</id>
    <published>2018-04-22T02:07:51.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（huawei）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（huawei）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春华为暑期实习生面试（技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>《剑指Offer》编程题目Java实现</title>
    <link href="https://www.wshunli.com/posts/25842bb5.html"/>
    <id>https://www.wshunli.com/posts/25842bb5.html</id>
    <published>2018-04-12T13:08:43.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<p>《剑指Offer》编程题目Java实现</p><a id="more"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class="Java">public class SingletonClass {    private static volatile SingletonClass instance;    private SingletonClass() {    }    public static SingletonClass getInstace() {        if (instance == null) {            synchronized (SingletonClass.class) {                if (instance == null) {                    instance = new SingletonClass();                }            }        }        return instance;    }}</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    for (int[] anArray : array) {        for (int anAnArray : anArray) {            if (anAnArray == target) return true;        }    }    return false;}</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class="Java">public boolean Find(int target, int[][] array) {    int row = array.length;    int col = array[0].length;    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {        int value = array[i][j];        if (value == target) return true;        if (value &lt; target) i++;        if (value &gt; target) j--;    }    return false;}</code></pre><p>4、替换字符串中的空格</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);}</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class="Java">public String replaceSpace(StringBuffer str) {    StringBuilder builder = new StringBuilder();    String string = str.toString();    for (int i = 0; i &lt; string.length(); i++) {        char charAt = string.charAt(i);        if (charAt == &#39; &#39;) {            builder.append(&quot;%20&quot;);        } else {            builder.append(charAt);        }    }    return builder.toString();}</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class="Java">/***    public class ListNode {*        int val;*        ListNode next = null;*        ListNode(int val) {*            this.val = val;*        }*    }*/public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();    while (listNode != null) {        integers.push(listNode.val);        listNode = listNode.next;    }    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (!integers.isEmpty()) {        arrayList.add(integers.pop());    }    return arrayList;}</code></pre><p>（2）借助递归实现</p><pre><code class="Java">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    if (listNode != null) {        this.printListFromTailToHead(listNode.next);        arrayList.add(listNode.val);    }    return arrayList;}</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class="Java">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();    while (listNode != null) {        arrayList.add(listNode.val);        listNode = listNode.next;    }    Collections.reverse(arrayList);    return arrayList;}</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《剑指Offer》编程题目Java实现&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="《剑指Offer》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java核心技术》读书笔记</title>
    <link href="https://www.wshunli.com/posts/9c87288c.html"/>
    <id>https://www.wshunli.com/posts/9c87288c.html</id>
    <published>2018-04-07T01:18:19.000Z</published>
    <updated>2018-05-08T15:05:12.024Z</updated>
    
    <content type="html"><![CDATA[<p>《Java核心技术》读书笔记</p><a id="more"></a><p>前面阅读了《Java 编程思想》，可能是水平不够吧，感觉读起来很吃力，这次拿 《Java核心技术》 复习下。</p><p>《JAVA编程思想》 和 《JAVA核心技术Ⅰ》 看哪本？ - 知乎<br><a href="https://www.zhihu.com/question/29745861" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/29745861</a></p><p>这次就不再那么详细地记录了。</p><h1 id="第一章-Java-程序设计概述"><a href="#第一章-Java-程序设计概述" class="headerlink" title="第一章 Java 程序设计概述"></a>第一章 Java 程序设计概述</h1><p>主要介绍了 Java 程序的平台：Java SE、Java EE、Java ME 及 Java 发展简史。</p><h1 id="第二章-Java-程序设计环境"><a href="#第二章-Java-程序设计环境" class="headerlink" title="第二章 Java 程序设计环境"></a>第二章 Java 程序设计环境</h1><p>主要介绍了 Java 环境的搭建以及常用命令行工具。</p><pre><code class="Java">javac Main.javajava Main</code></pre><p>javac 是 Java 编译器，将 Main.java 源代码编译为 Main.class ；<br>java 启动 Java 虚拟机，虚拟机执行 class 文件中的字节码。</p><p>然后介绍了 图形化应用程序 和用于浏览器的 applet 技术。</p><h1 id="第三章-Java-的基本程序设计结构"><a href="#第三章-Java-的基本程序设计结构" class="headerlink" title="第三章 Java 的基本程序设计结构"></a>第三章 Java 的基本程序设计结构</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><pre><code class="Java">package com.wshunli;public class Main {    public static void main(String[] args) {        // write your code here        System.out.println(&quot;Hello World !&quot;);    }}</code></pre><p>还是得记住这段的，得能手写出来。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java 语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>1、整形</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128（-2^7）~ 127（2^7-1）</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-32768（-2^15）~ 32767（2^15 - 1）</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2,147,483,648（-2^31）~ 2,147,483,647（2^31 - 1）</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-9,223,372,036,854,775,808（-2^63）~ 9,223,372,036,854,775,807（2^63 -1）</td><td style="text-align:center">Long</td></tr></tbody></table><p>long 长整型数值有一个后缀 L 或 l ( 如 0L )</p><p>2、浮点型</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">封装器类</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">大约 ± 3.402 823 47E+38F (有效位数为6 ~ 7 位）</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为15 位）</td><td style="text-align:center">Double</td></tr></tbody></table><p>float 浮点型数值有一个后缀 F 或 f ( 如 0.0f )<br>double 双精度型数值有一个后缀 D 或 d ( 如 0.0d )</p><p>3、字符类型</p><p>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单元。</p><p>4、布尔型</p><p>boolean ( 布尔）类型有两个值： false 和true，用来判定逻辑条件。</p><p>整型值和布尔值之间不能进行相互转换。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的声明及初始化，不区分变量的声明与定义。</p><pre><code class="Java">int vacationDays;vacationDays = 12;</code></pre><p>1、常量</p><p>在 Java 中， 利用关键字 final 指示常量。</p><pre><code class="Java">final double CM_PER_INCH = 2.54;</code></pre><p>关键字 final 表示这个变量只能被赋值一次。习惯上，常量名使用全大写。</p><p>浅谈Java中的final关键字 - 平凡希 - 博客园<br><a href="https://www.cnblogs.com/xiaoxi/p/6392154.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/xiaoxi/p/6392154.html</a></p><p>2、类常量、静态常量</p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。</p><pre><code class="Java">public static final double CM_PER_INCH = 2.54;</code></pre><p>可以在一个类或者其他类中的多个方法中使用。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java 中的数据是通过使用操作符来操作的。</p><ul><li>赋值操作符</li><li>算术操作符</li><li>关系操作符</li><li>逻辑操作符</li><li>按位操作符</li><li>其他操作符</li></ul><p>1、常用的数学计算函数</p><p>JAVA Math 类的数学计算函数 - CSDN博客<br><a href="https://blog.csdn.net/antares_santalen/article/details/52451807" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/antares_santalen/article/details/52451807</a></p><p>2、数值类型之间的转换</p><p>Java 中数值类型之间的转换方式有两种：一是自动类型转换，另一种是强制类型转换。</p><p><strong>自动类型转换</strong>：</p><p><img src="https://img.wshunli.com/Java/Java核心技术/数值类型之间的转换.png" alt="数值类型之间的转换"></p><p>实线表示无信息丢失的转换，虚线表示可能有精度丢失的转换。</p><p>如果两个操作数中有一个是 double 、float 、long 类型，别一个操作数就会转换为相同类型。<br>否则，两个操作数都将被转换为 int 类型。</p><p><strong>强制类型转换</strong> 的格式是在需要转型的数据前加上“( )”，然后在括号内加入需要转化的数据类型。<br>有的数据经过转型运算后，精度会丢失，而有的会更加精确。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串也是相当重要的概念，Java 字符串就是 Unicode 字符序列。</p><p>1、Java String 的静态方法</p><pre><code class="Java">static String valueOf​(Object obj)static String format​(Locale l, String format, Object... args)static String copyValueOf​(char[] data)static String format​(String format, Object... args)static String join​(CharSequence delimiter, CharSequence... elements)</code></pre><p>2、Java String 的主要实例方法</p><pre><code class="Java">// 获取子串String substring​(int beginIndex)String substring​(int beginIndex, int endIndex)// 字符串是否相等boolean equals​(Object anObject)boolea equalsIgnoreCase​(String anotherString)// 替换字符String replace​(char oldChar, char newChar)String replaceAll​(String regex, String replacement)String replaceFirst​(String regex, String replacement)// 连接String concat​(String str)// 切分String[] split​(String regex)// 所有字符转换大小写String toLowerCase()String toUpperCase()// 去除开头结尾的空格String trim()</code></pre><p>涉及到内容也比较多，官方 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/String.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/String.html</a></p><p>3、构建字符串</p><p>直接使用字符串拼接效率比较低，因为每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。</p><p>可以使用 StringBuilder 避免这个问题：</p><pre><code class="Java">StringBuilder builder = new StringBuilder();builder.append(&quot;Hello&quot;);builder.append(&quot;world&quot;);String string = builder.toString();</code></pre><p>参考 API 文档：<br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuffer.html</a><br><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/10/docs/api/java/lang/StringBuilder.html</a></p><p><strong>String、StringBuffer 和 StringBuilder 的区别</strong>：</p><p>首先说运行速度，或者说是执行速度，在这方面运行速度快慢为：StringBuilder &gt; StringBuffer &gt; String；<br>其次在线程安全上，StringBuilder 是线程不安全的，而 StringBuffer 是线程安全的。</p><ul><li>String：适用于少量的字符串操作的情况</li><li>StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况</li><li>StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况</li></ul><p>Java中的String，StringBuilder，StringBuffer三者的区别 - 酥风 - 博客园<br><a href="https://www.cnblogs.com/su-feng/p/6659064.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/su-feng/p/6659064.html</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>1、读取控制台输入，也经常用到，使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Scanner.html" rel="external nofollow noopener noreferrer" target="_blank">Scanner</a> 类。</p><pre><code class="Java">Scanner scanner = new Scanner(System.in);if (scanner.hasNext()) {    String str = scanner.next();}</code></pre><p>2、格式化输出</p><p>使用 System.out.printf() 格式化输出：</p><pre><code class="Java">System.out.printf(&quot;%,.2f&quot;, 10000.0 / 3);</code></pre><p><img src="https://img.wshunli.com/Java/Java核心技术/转换符.png" alt="转换符"></p><p>用于 printf 的转换符。</p><p>3、文件的输入输出</p><pre><code class="Java">try {    Scanner in = new Scanner(Paths.get(&quot;niyflle.txt&quot;), &quot;UTF-8&quot;);    PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);} catch (IOException e) {    e.printStackTrace();}</code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>主要介绍条件语句和循环结构控制流程。</p><h2 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h2><p>如果基本的整数和浮点数精度不能够满足需求， 那么可以使用 java.math 包中的两个很有用的类： <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigInteger.html" rel="external nofollow noopener noreferrer" target="_blank">BigInteger</a> 和 <a href="https://docs.oracle.com/javase/10/docs/api/java/math/BigDecimal.html" rel="external nofollow noopener noreferrer" target="_blank">BigDecimal</a> 。这两个类可以处理包含任意长度数字序列的数值。<br>BigInteger 类实现了任意精度的整数运算， BigDecimal 实现了任意精度的浮点数运算。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是一种数据结构， 用来存储同一类型值的集合。</p><p>1、匿名数组：</p><pre><code class="Java">int[] smallPrimes = {2, 3, 5, 7, 11, 13};smallPrimes = new int[]{17, 19, 23, 29, 31, 37};</code></pre><p>2、数组拷贝</p><p>数组变量拷贝直接赋值即可，这样两个变量将引用同一数组。</p><p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html" rel="external nofollow noopener noreferrer" target="_blank">Arrays</a> 类的 copyOf 方法。</p><pre><code class="Java">int[] copyOfSmallPrimes = Arrays.copyOf(smallPrimes, smallPrimes.length);</code></pre><p>3、数组排序</p><p>要想对数值型数组进行排序， 可以使用 Arrays 类中的 sort 方法：</p><pre><code class="Java">Arrays.sort(smallPrimes);</code></pre><p>4、命令行参数</p><p>每一个Java 应用程序都有一个带 String arg[] 参数的 main 方法。<br>这个参数表明 main 方法将接收一个字符串数组， 也就是命令行参数。</p><p>例如：</p><pre><code class="Java">public class Message {    public static void main(String[] args) {        if (args.length == 0 || args[0].equals(&quot;-h&quot;))            System.out.print(&quot;Hello, &quot;);        else if (args[0].equals(&quot;-g&quot;))            System.out.print(&quot;Goodbye,&quot;);        // print the other command-line arguments        for (int i = 1; i &lt; args.length; i++)            System.out.print(&quot; &quot; + args[i]);        System.out.println(&quot;!&quot;);    }}</code></pre><p>运行时输入如下命令：</p><pre><code class="Java">java Message -g cruel world</code></pre><p>结果：</p><pre><code class="Java">Goodbye,cruel world!</code></pre><p>5、多维数组</p><p>6、不规则数组</p><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><p>1、类、对象及类之间的关系。</p><p>类之间常见的关系：依赖（“ uses-a ”）、聚合（“ has-a ”）、继承（“ is-a ”）</p><p>2、预定义类和用户自定义类。</p><p>3、静态域和静态方法</p><p>4、方法参数</p><p>Java 程序设计语言总是采用按值调用。（引用调用表示方法接收的是调用者提供的变量地址。）</p><p>也就是说， 方法得到的是所有参数值的一个拷贝，方法结束就丢弃该拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><p>然而，方法参数共有两种类型：基本数据类型、对象引用。</p><p>对于<strong>基本数据类型</strong>，方法只是获得参数值的拷贝，无法修改实参的值；<br>对于<strong>对象的引用</strong>，方法同样得到对象引用的拷贝，该拷贝和对象引用同时引用同一对象，则可以修改对象的状态。</p><pre><code class="Java">private static void swap(Employee x, Employee y) {    Employee temp = x;    x = y;    y = temp;}Employee a = new Employee(&quot;wshunli1&quot;, 10);Employee b = new Employee(&quot;wshunli2&quot;, 15);swap(a, b);</code></pre><p>结果 对象 a 和 b 并未交换，只是交换了各自引用的拷贝，方法结束就丢弃了。</p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><p>5、对象构造</p><p>主要介绍了类的构造方法、初始化顺序以及初始化块、对象析构的概念。</p><p>6、包和类的路径</p><p>7、文档注释</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>主要介绍了子类和父类之间的关系，方法的覆盖，多态，抽象类相关内容等。</p><p>1、对象包装器与自动装箱</p><p>基本数据类型都有一个与之对应的类。</p><p>Integer、Long、Float、Double、Short、Byte、Character 、Void 和 Boolean 。</p><p>2、枚举类</p><pre><code class="Java">public enum Size { SMALL, MEDIUM, LARGE, EXTRAJARGE };</code></pre><p>3、泛型数组列表</p><p>其实就是 java 集合的相关内容，主要是 ArrayList 。</p><h2 id="Object-所有类的超类"><a href="#Object-所有类的超类" class="headerlink" title="Object 所有类的超类"></a>Object 所有类的超类</h2><p><a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Object.html" rel="external nofollow noopener noreferrer" target="_blank">Object</a> 类是 Java 中所有类的始祖， 在 Java 中每个类都是由它扩展而来的。</p><p>1、equals 方法</p><p>Object 类中的 equals 方法用于检测一个对象是否等于另外一个对象。<br>在 Object 类中，这个方法将判断两个对象是否具有相同的引用。</p><p>2、hashCode 方法</p><p>散列码（ hash code ) 是由对象导出的一个整型值。散列码是没有规律的。<br>如果x 和y 是两个不同的对象， x.hashCode( ) 与y.hashCode( ) 基本上不会相同。</p><p>Java hashCode() 和 equals()的若干问题解答 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/skywang12345/p/3324958.html</a></p><p>3、toString 方法</p><p>在 Object 中还有一个重要的方法， 就是 toString 方法， 它用于返回表示对象值的字符串。</p><h2 id="参数数量可变的方法"><a href="#参数数量可变的方法" class="headerlink" title="参数数量可变的方法"></a>参数数量可变的方法</h2><p>在参数列表中 Object… 参数类型与 Object[] 完全一样。</p><pre><code class="Java">public static double max(double... values) {    double largest = Double.NEGATIVE_INFINITY;    for (double v : values) if (v &gt; largest) largest = v;    return largest;}</code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射库 ( reflection library ) 提供了一个非常丰富且精心设计的工具集， 以便编写能够动态操纵 Java 代码的程序。</p><p>1、Class 类</p><p>在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。<br>这个信息跟踪着每个对象所属的类。保存这些信息的类被称为 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/Class.html" rel="external nofollow noopener noreferrer" target="_blank">Class</a> 。</p><p>获取 Class 对象有三种方法：</p><pre><code class="Java">Employee employee = new Employee();Class class1 = employee.getClass();System.out.println(class1.getName());try {    Class class2 = Class.forName(&quot;com.wshunli.Employee&quot;);    Class class3 = Employee.class;    System.out.println(class2.getName());    System.out.println(class3.getName());} catch (ClassNotFoundException e) {    e.printStackTrace();}</code></pre><p>可以使用 Class 的方法获取相关信息，如使用 newlnstance( ) 可以用来动态地创建一个类的实例:</p><pre><code class="Java">try {    Object o = class1.newInstance();} catch (InstantiationException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>2、利用反射分析类的能力</p><p>在 java.lang.reflect 包中有三个类 Field、Method 和 Constructor 分别用于描述类的域、方法和构造器。<br>三个类中都有 getName 、getType 、getModifiers 方法，分别返回 名字、返回类型、及标识符。</p><pre><code class="Java">Field[] fields = Integer.class.getFields();for (Field filed : fields) {    String f = Modifier.toString(filed.getModifiers()) + filed.getType() + filed.getName();    System.out.println(f);}</code></pre><p>Class 类中的 getFields、getMethods 和 getConstructors 方法将分别返回类提供的 public 域、方法和构造器数组， 其中包括超类的公有成员。<br>Class 类的 getDeclareFields、getDeclareMethods 和 getDeclaredConstructors 方法将分别返回类中声明的全部域、方法和构造器， 其中包括私有和受保护成员，但不包括超类的成员。</p><p>3、在运行时使用反射分析对象</p><p>在运行时使用反射分析对象方法主要是使用 Field 等的 get、set 方法。</p><pre><code class="Java">Employee employee = new Employee(&quot;wshunli&quot;, 15);Class class1 = employee.getClass();try {    Field name = class1.getDeclaredField(&quot;name&quot;);    name.setAccessible(true);    System.out.println(name.get(employee).toString());    name.set(employee, &quot;wshunli.com&quot;);    System.out.println(name.get(employee).toString());} catch (NoSuchFieldException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><p>4、调用任意方法</p><p>反射机制允许调用任意方法。在 Method 类中有一个 invoke 方法， 它允许调用包装在当前 Method 对象中的方法。</p><p>invoke 方法的签名是：</p><pre><code class="Java">Object invoke(Object obj, Object... args)</code></pre><p>第一个参数为实例对象，静态方法可以设置为 null；<br>第二个参数为方法得参数；<br>返回值需完成类型转换。</p><pre><code class="Java">try {    Method method = Math.class.getMethod(&quot;sqrt&quot;, double.class);    double result = (double) method.invoke(null, 3);    System.out.println(result);} catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {    e.printStackTrace();}</code></pre><h1 id="第六章-接口、lambda-表达式与内部类"><a href="#第六章-接口、lambda-表达式与内部类" class="headerlink" title="第六章 接口、lambda 表达式与内部类"></a>第六章 接口、lambda 表达式与内部类</h1><h2 id="接口及其示例"><a href="#接口及其示例" class="headerlink" title="接口及其示例"></a>接口及其示例</h2><p>1、接口的概念及特点</p><p>在 Java 程序设计语言中， 接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p><pre><code class="Java">public interface Comparable {    int compareTo(Object other);}// 使用泛型public interface Comparable&lt;T&gt; {    int compareTo(T other);}</code></pre><p>接口的特点：<br>Java 单继承，只能继承一个（抽象）类，单个类可以实现多个接口；<br>Java 强类型语言，接口可以保证接口的实现类都实现了接口的方法。</p><p>接口中的成员函数默认为 public ，成员变量默认设置成 public static final ；</p><p><del>接口不能包含静态方法和实例对象（在 Java SE 8 以前）</del>，但能包含静态成员变量（默认为常量）。</p><p>2、静态方法</p><p>在 Java SE 8 中，允许在接口中增加静态方法。</p><pre><code class="Java">public interface Path {    public static Path get(String first, String... more) {        return FileSystems.getDefault().getPath(first, more);    }}</code></pre><p>3、默认方法及其冲突</p><p>可以为接口方法提供一个默认实现。必须用 default 修饰符标记这样一个方法。</p><pre><code class="Java">public interface Comparable&lt;T&gt; {    default int compareTo(T other) {        return 0;    }}</code></pre><p>使用默认方法，接口的实现类就不必实现该方法了。</p><p>如果先在一个接口中将一个方法定义为默认方法， 然后又在超类或另一个接口中定义了同样的方法。<br>解决默认方法冲突：<br><strong>超类优先</strong>。如果超类提供了一个具体方法， 同名而且有相同参数类型的默认方法会被忽略。<br><strong>接口冲突</strong>。如果一个超接口提供了一个默认方法， 另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法， 必须覆盖这个方法来解决冲突。</p><p>以上为两个接口的命名冲突，<br>对于继承一个超类又同时实现一个接口的类，并且超类和接口存在相同的方法，<strong>只会考虑超类方法</strong>。</p><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><p>以前也知道这个概念，书上说得有点绕。</p><p>Lambda 表达式有何用处？如何使用？ - Sevenvidia的回答 - 知乎<br><a href="https://www.zhihu.com/question/20125256/answer/324121308" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/20125256/answer/324121308</a></p><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。<br>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>Java8 lambda表达式10个示例 - ImportNew<br><a href="http://www.importnew.com/16436.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/16436.html</a></p><p>Lambda 表达式本身就是一个接口的实现。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类（ inner class ) 是定义在另一个类中的类。</p><ul><li>内部类方法可以访问该类定义所在的作用域中的数据， 包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码时，使用匿名（anonymous) 内部类比较便捷。</li></ul><p>1、使用内部类访问对象状态</p><p>2、内部类的特殊语法</p><pre><code class="Java">outerObject.this.para;outerObject.new InnerClass(construction parameters);OuterClass.InnerClass;</code></pre><p>3、局部内部类、匿名内部类、静态内部类</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>说说 JAVA 代理模式 - ImportNew<br><a href="http://www.importnew.com/26116.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/26116.html</a></p><p>这里主要讲的是动态代理</p><pre><code class="Java">// 抽象角色public interface ICoder {    public void implDemands(String demandName);}// 真实角色public class JavaCoder implements ICoder {    private String name;    public JavaCoder(String name) {        this.name = name;    }    @Override    public void implDemands(String demandName) {        System.out.println(name + &quot; implemented demand:&quot; + demandName + &quot; in JAVA!&quot;);    }}// 调用处理器public class TraceHandler implements InvocationHandler {    private Object object;    public TraceHandler(Object object) {        this.object = object;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(System.currentTimeMillis());        Object result = method.invoke(object, args);        System.out.println(System.currentTimeMillis());        return result;    }}// 动态代理public class DynamicClient {    public static void main(String[] args) {        ICoder coder = new JavaCoder(&quot;wshunli&quot;);        ClassLoader classLoader = coder.getClass().getClassLoader();        Class[] interfaces = coder.getClass().getInterfaces();        TraceHandler traceHandler = new TraceHandler(coder);        ICoder proxy = (ICoder) Proxy.newProxyInstance(classLoader, interfaces, traceHandler);        proxy.implDemands(&quot;test&quot;);    }}</code></pre><p>要想创建一个代理对象， 需要使用 Proxy 类的 newProxylnstance 方法。这个方法有三个参数：</p><ul><li>一个类加栽器（ class loader)。</li><li>一个 Class 对象数组， 每个元素都是需要实现的接口。</li><li>一个调用处理器。</li></ul><h1 id="第七章-异常、断言和日志"><a href="#第七章-异常、断言和日志" class="headerlink" title="第七章 异常、断言和日志"></a>第七章 异常、断言和日志</h1><p>对于异常情况，Java 使用一种称为异常处理( exception handing) 的错误捕获机制处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>1、处理错误</p><p>在 Java 程序设计语言中， 异常对象都是派生于 Throwable 类的一个实例。</p><p><img src="https://img.wshunli.com/Java/Java核心技术/Java中的异常分类.png" alt="Java中的异常分类"></p><p>异常可分为 Error 、Exception 两类。</p><p><strong>Error</strong> 描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。<br><strong>Exception</strong> 又分解为两个分支：一个分支派生于 RuntimeException ，由程序错误导致的异常; 另一个分支包含其他异常，程序本身没有问题，但由于像 I/O 错误这类问题导致的异常。</p><p>Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非受查( unchecked ) 异常， 所有其他的异常称为受查 ( checked ) 异常。这</p><p>2、抛出异常</p><p>一个方法必须声明所有可能抛出的<strong>受查异常</strong>， 而非受查异常要么不可控制 ( Error)，要么就应该避免发生 ( RuntimeException )。</p><p>《Java编程思想》读书笔记（五） | CirGIS<br><a href="https://www.wshunli.com/posts/b6f25079.html">https://www.wshunli.com/posts/b6f25079.html</a></p><p>4、捕获异常</p><p>如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息， 其中包括异常的类型和堆栈的内容。</p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><p>编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设。</p><p>断言可以有两种形式：<br>1.assert Expression1<br>2.assert Expression1:Expression2</p><p>当执行代码时，使用 -ea 选项使断言有效，也可以使用 -da 选项使断言无效（默认为无效）。</p><h2 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h2><p>要生成简单的日志记录，可以使用全局日志记录器（global logger) 并调用其 info 方法：</p><pre><code class="Java">Logger.getGlobal().info(&quot;start record log&quot;);Logger.getGlobal().setLevel(Level.OFF);</code></pre><p>日志的级别：SEVERE (highest value)、WARNING、INFO、CONFIG、FINE、FINER、FINEST (lowest value)</p><pre><code class="Java">public class LoggerDemo {    private static final Logger logger = Logger.getLogger(&quot;com.wshunli&quot;);    public static void main(String[] args) {        logger.setLevel(Level.FINE);        logger.fine(&quot;Logger test1&quot;);        logger.log(Level.FINE, &quot;Logger test2&quot;);    }}</code></pre><p>然后介绍了日志的配置、本地化、处理器、过滤器、格式化器等。</p><h1 id="第八章-泛型程序设计"><a href="#第八章-泛型程序设计" class="headerlink" title="第八章 泛型程序设计"></a>第八章 泛型程序设计</h1><p>泛型程序设计 ( Generic programming ) 意味着编写的代码可以被很多不同类型的对象所重用。</p><p>1、为什么要使用泛型程序设计</p><p>类型参数，其中 String 为类型参数：</p><pre><code class="Java">ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></pre><p><strong>类型参数</strong>的魅力在于：使得程序具有更好的可读性和安全性。</p><p>2、泛型类 ( generic class ) 就是具有一个或多个类型变量的类。</p><pre><code class="java">public class Holder1&lt;T, U&gt; {    private T a;    private U b;    public Holder1(T a, U b) {        this.a = a;        this.b = b;    }}</code></pre><p>在 Java 库中， 使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。<br>T ( 需要时还可以用临近的字母 U 和 S ) 表示 “任意类型”。</p><p>类型变量的限定：</p><pre><code class="java">class Holder2&lt;T extends Comparable&gt; {    private T a;    public Holder2(T a) {        this.a = a;    }}class Holder3&lt;T extends Comparable &amp; Serializable&gt; {    private T a;    public Holder3(T a) {        this.a = a;    }}</code></pre><p>表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类， 也可以是接口，均使用 extends 关键字。</p><p>3、泛型方法</p><pre><code class="java">public &lt;T&gt; void f(T x) {    System.out.println(x.getClass().getName());}</code></pre><p>4、泛型代码和虚拟机</p><p>虚拟机没有泛型类型对象 — 所有对象都属于普通类。</p><p>类型擦除：在虚拟机中，擦除类型变量， 并替换为限定类型 ( 无限定的变量用 Object )。</p><p>后面讲了泛型的约束和局限性。</p><p>5、通配符类型</p><p>通配符类型中，允许类型参数变化。</p><pre><code class="Java">Pair&lt;? extends Employee&gt;</code></pre><p>通配符的超类型限定:</p><p>通配符限定与类型变量限定十分类似，但是，还有一个附加的能力， 即可以指定一个超类型限定, 如下所亦：</p><pre><code class="Java">Pair&lt;? super Employee&gt;</code></pre><p>无限定通配符：</p><pre><code class="Java">Pair&lt;?&gt;</code></pre><h1 id="第九章-集合"><a href="#第九章-集合" class="headerlink" title="第九章 集合"></a>第九章 集合</h1><h2 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h2><p>在 Java 类库中，集合类的基本接口是 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Collection.html" rel="external nofollow noopener noreferrer" target="_blank">Collection</a> 接口。</p><p>很重要的接口 迭代器 <a href="https://docs.oracle.com/javase/10/docs/api/java/util/Iterator.html" rel="external nofollow noopener noreferrer" target="_blank">Iterator</a></p><pre><code class="Java">public interface Iterator&lt;E&gt; {    boolean hasNext();    E next();    default void remove() {        throw new UnsupportedOperationException(&quot;remove&quot;);    }    default void forEachRemaining(Consumer&lt;? super E&gt; action) {        Objects.requireNonNull(action);        while (hasNext())            action.accept(next());    }}</code></pre><p>应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时， 迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。</p><p>《Java编程思想》读书笔记（四） | CirGIS<br><a href="https://www.wshunli.com/posts/d96c953e.html">https://www.wshunli.com/posts/d96c953e.html</a></p><h2 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h2><p><img src="https://img.wshunli.com/Java/Java核心技术/Java集合.png" alt="Java 集合"></p><p>java集合类 - java开发者 - SegmentFault 思否<br><a href="https://segmentfault.com/a/1190000008522388" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000008522388</a><br>由浅入深理解java集合(一)——集合框架 Collection、Map - 简书<br><a href="https://www.jianshu.com/p/589d58033841" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/589d58033841</a></p><p>40个Java集合面试问题和答案 - ImportNew<br><a href="http://www.importnew.com/15980.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.importnew.com/15980.html</a></p><h1 id="第十章到十三章"><a href="#第十章到十三章" class="headerlink" title="第十章到十三章"></a>第十章到十三章</h1><p>只要介绍使用图形用户界面的 Java 程序，这里就不看了。</p><p>第十四章 并发</p><p>这部分大概地看了下，后面再看本书仔细学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java核心技术》读书笔记&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java核心技术》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>记录2018年春季高德地图实习生面试</title>
    <link href="https://www.wshunli.com/posts/bec9ebf5.html"/>
    <id>https://www.wshunli.com/posts/bec9ebf5.html</id>
    <published>2018-04-01T01:45:56.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码（amap）查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码（amap）查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【密码公开】记录2018年春阿里巴巴●高德地图暑期实习生面试（非技术岗）。
    
    </summary>
    
      <category term="卖身记" scheme="https://www.wshunli.com/categories/%E5%8D%96%E8%BA%AB%E8%AE%B0/"/>
    
    
      <category term="面试" scheme="https://www.wshunli.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（七）</title>
    <link href="https://www.wshunli.com/posts/4e05997a.html"/>
    <id>https://www.wshunli.com/posts/4e05997a.html</id>
    <published>2018-04-01T01:23:29.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+0LG19qNe9uBdnwoDZCljz+/s77iePaxSGHQLvMgAvn2ykC9Xa9SGl2C2p4h1G2VtS5YBP8kcHgMjF8wazv69KarOS75rF9uXjrQnxo6WdXT8hA2oV10VuECiGG4rwO5Iy8STKRGWD9l/wVDQzUbCwcUXfo5GWA7hh+TUPH9YfuBFXSSAP8uDm0vYqe4ksbj0pztGXEfOdxEs0vqFGdkY6C/pf4YWl/CLsw/TirqFeormHO2pd3QOCcFBtB5h+glURZflIdi22mYnPTMZ74FMguym1vaSEJQsqIjYpgpd3Vc4E7zwbX8aJ7gaZRnTHJqCbGGtOmEPSWzVpDNOYYWsYHO4JeAXRtsYZr51ZaY0Fj0sAIWD+nh896PcCkoG5LKW2tgTYe40e3SotNnMoYVx/oFFA3shJqeCsKejyMFlEoMMDrj7KKc4mhwQB7tTZDpMeS/chr6ce8KwmU0MoX/OdheghnKjzcyXq6pxuzgu85RW6MjsUEy9WD1trPtMbAdsEMWgF7pt3QGb7urq9zmhbw3L6pVfT3RNj+aT1RNJMFvCSFI28NvS8v/rQTKuLdeTkMHcVLTnqwFht2AYWpqK7dFa2ethTLIa3eiGfhxh59+xfqzKdJ5EBRHUzksvG41OJLr0t34GvhfydxZ3bO6/L5s/0DpFoVocFD1mkV6UVn2d7YqNJ5Z69Eic/jcalBJ+QW0EMjAk02uM8unoMKa/FhW5iuACoeu+stNEMLYHVKmG2U9F3B3Gr7Qy2AuVv051g3CH4vnSKOuD3gfk6p7boxUs0gjWCfdUPXs4i9TU+7J4ScSB2NSq0P2+H93+V/nW29r8dn7feQj4prVBds+PTWxh2TFhX1W3xMlCCwXP2dJ578FaJQN68gkC9IpSm/Fggtu0tCKxyziT4oBG2F+8MHRR6o+VMkqh5ANHN+Re61pPi9kt/cO66NyoQsDepe0lBvBnhXqg0BGfDtVJFVbPfOTXZLKUe8ukOhUrI1jlBZib32zVNtA7bN0IsD90x6ooaaTGRkU53tNxLA5A8+TNM/n2mqjTbYsBeVoo/gcyOQxdQmIl+dj+xNTDFKHwolpHw7Qk0IH0e98NZGl1AXMdPULLIYlBXvMqkDpOyJGreU3qG90WJmzMIQLqExL2xW7g6614E+EgH9229rPl6kGiFfJ3cL+TKQeRhIvO7iP3jWIP9RfvU1rYma6VoKMTomOVNsRgP4Uy8+IV4nBQrW4Xl3Z8pKCNLq8CaAnbGzmZj0BNNTZaW6vn72BgyvDYwhT/uAVr4I5W+kXtEhWEtNnmrXNR+VPHPieV0iQqKvbti9aPN+JgwTOL2qNQ+Zi9uNSY1o5pMy8VLauUYnwfB5dGqkOImhuwK8UzxpIIrnwv+O9HMeR21HiEgwinjENwRI33gR8GPTzdddG8OL5USWDq1OfrNvQ3y5C0eTKbefmJvKMeVM3M8Rk4G2jsKmWpSRjcw4AJ7psUnQ7GV24hUkeZTxVnpz8moHvfPBqJwAw/xoI5iQoiET9/y9PuQRmUnJYfgUF/xjxbVqJohD+g7NwAOhZJMN6U7w8Z3yOMYqprlmoZR0IhN61elyxwZ8dPmFFV1P7nRiUwZ8i7dsfAJ6j2UOc803EzvWd+zd73HHoYAnEVq0m2/izLgNWxCxXBWDf7J+aI/BytSXtnx6UTA9biHIRa1Zt7T8wy5I4bNzXOTPEaR5wetNrmjW2AwoSbQGWS7q2N7PLRv5FWNyri1UVHX5d6+Ijry4p5R430WMUy7kKfSHeOL4GQCCWDX7XKY9kIuapWWCR1EZKzkQV8sljUfEHx40QUfSrhv9P15oDuWQMipN+7zqFS4s5iwJqpCK9ga374gMHJbg8eyVNSqu/VZLKwN++g9/RahuARXW4ovKk0esu0KEDQfI3On8YjKL1WG70wjfZk+QOO/dyCrTcM/9+mVsf0f/3I4kQASkoVKuPnifjIxjtGfcXvqsAp9nR6XBqMdAMjVCY22aN1IXuk9hEOR8kvp7Ig0v5NwwJnMwSED4QU2msB2tys9/+/s2FuoUOEux3BMuWqC9j5GUga1DvgRr71O+u9EqKnoXEiwEJbvr3aj7ClYK9FyxaBffd2Unh+w9TqcZeeAb+YcL6E2aTUlEOlWmGLKrZQc1AbqNGFCmm56sr0cP9bM+ZsuH9u0rHAPSRE+dmwBDsRBPXxUxojHosfETbaPtVH3FsTKWdNTY+sTFoR2l11AoBaHpCzuJUYAcG1Wi1tY/YzSQ3M0sTvMU+QM2S63p9sMWZKaxg6aK26knfWNEW4krnVKzDQ9VsLeonFqpQUBxni2oMimfST7vR5ERQLq6DuPD9V+eASmt47MUVZPVlKDb9St8hBAa24edJz6Zb9nLhK0STjtBuOs9AGmJEf45Q6PMxHqOou+EG0fgTmXP8VzxDP1s8HSfho0hAQk8X6XkZUkmNuToryrCvZQIwaZFV74wBqiXfPmCuOhEYsyFJy4AHMjIr7QoPiZ9c7julRbTmDyNyyDwY9y98yjTfoIELSb8pBQgWzV1l8Nlap+e5UjEpnrnCLbT+quM+PodaitrhkLVQreCfqP6ocUItPPD6m4R+krmXw9paCKa8PqM9ycVz+r8Fmc0bLmc9YYYOTtDUgfd2Gz9UtRUkiQzWsuXzAtrN3CmRpCYjec4rLQdOuf4W6gCkQGBUJYHxrLNdHpRe0PtvPQedjDtLfZuX+ENUO1RdWmV3MT+7ugGx85RAvHgwEmLp12nU81MWBTTmthkyHLXgLcp+hamD9nrr6yMegf8d7lwPGaUtEloIXRznvhR/CtwQEE5dbui7R0tZcbueKQEQvYaoAmUufESzRPIdXP8/SseHp63zhuWEAKmyWa4vUPEmPTWbN/9SKbeVU3xD6T62oOIteze9Tra/AiQjJR5BYgIrvKQhGq1/Q1XTErFCRvUGVdFyk+U1kVfLw0/KIiByaRYiGH9/9s8/3zV0IrUPYechEpJmNcYaJjH6c1I/DdRh0lfbrJb62CQZIXTfxNlda5qH4iNplx+vYqqEuhxIxbOIJXX3p6lkGMkne5DPiJFWdE0yi+qB8l2gk43GMwoAbq6Q9aO7FWWP67NaE9I+SLcb5MuaBMWiPeAiLyXquHK5gOoeupwVPGw1Dw+gYhO1tN5lp1UnWZ/IZ62VtJCpGHpGUoJZTqs2QtRQziK9Q5/mAE0BtWCB2/zMaVC5brIpCsmw/w9kwaPgXyOV53PM3JzW+0r6cYCYWWe5lF1qTLE20DuJUZKVVQX7iWZCPkrcFbO/AfJ1OUp6um73Un38R8bOq+QZZeRW/SF/jgQRAmirI+NGZLc6zvjw== </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】好时间没做总结了
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《第一行代码》读书笔记（四）</title>
    <link href="https://www.wshunli.com/posts/4c8f7dec.html"/>
    <id>https://www.wshunli.com/posts/4c8f7dec.html</id>
    <published>2018-03-12T10:13:45.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<p>《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver</p><a id="more"></a><h1 id="第5章-全局大喇叭"><a href="#第5章-全局大喇叭" class="headerlink" title="第5章 全局大喇叭"></a>第5章 全局大喇叭</h1><p>BroadcastReceiver，广播接收者，它是一个系统全局的监听器，用于监听系统全局的 Broadcast 消息，所以它可以很方便的进行系统组件之间的通信。</p><p>BroadcastReceiver 属于系统级的监听器，它拥有自己的进程，只要存在与之匹配的 Broadcast 被以 Intent 的形式发送出来，BroadcastReceiver 就会被激活。</p><p>广播的使用场景：<br>（1）同一 APP 具有多进程的不同组件之间的信息通信。<br>（2）不同 APP 之间的组件之间信息通信。</p><p>Android中的广播分为两种类型，标准广播和有序广播</p><p>（1）标准广播<br>标准广播是一种完全异步执行的广播，在广播发出后所有的广播接收器会在同一时间接收到这条广播，之间没有先后顺序，效率比较高，且无法被截断。<br>（2）有序广播<br>有序广播是一种同步执行的广播，在广播发出后同一时刻只有一个广播接收器能够接收到， 优先级高的广播接收器会优先接收，当优先级高的广播接收器的 onReceiver() 方法运行结束后，广播才会继续传递，且前面的广播接收器可以选择截断广播，这样后面的广播接收器就无法接收到这条广播了。</p><h2 id="接收系统广播"><a href="#接收系统广播" class="headerlink" title="接收系统广播"></a>接收系统广播</h2><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册 BroadcastReceiver 是在代码中定义并设置好一个 IntentFilter 对象，然后在需要注册的地方调用 Context.registerReceiver() 方法，调用 Context.unregisterReceiver() 方法取消注册，此时就不需要在清单文件中注册。</p><pre><code class="Java">public class MainActivity extends AppCompatActivity {    private static final String TAG = &quot;MainActivity&quot;;    private IntentFilter intentFilter;    private NetWorkBroadcastReceiver netWorkBroadcastReceiver;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        intentFilter = new IntentFilter();        intentFilter.addAction(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);        netWorkBroadcastReceiver = new NetWorkBroadcastReceiver();        registerReceiver(netWorkBroadcastReceiver, intentFilter);    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(netWorkBroadcastReceiver);    }    class NetWorkBroadcastReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            Log.d(TAG, &quot;onReceive: &quot;+&quot;network changes&quot;);        }    }}</code></pre><p>动态注册广播接收器可以自由地控制注册与注销，但是必须程序启动之后才能收到广播，因为注册的逻辑是写在 onCreate() 方法中。</p><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册即在清单文件中为 BroadcastReceiver 进行注册，使用 &lt; receiver &gt; 标签声明，并在标签内用 &lt; intent-filter &gt; 标签设置过滤器。</p><p>这种形式的 BroadcastReceiver 的生命周期伴随着整个应用，如果这种方式处理的是系统广播，那么不管应用是否在运行，该广播接收器都能接收到该广播。</p><pre><code class="Java">public class BootCompleteReceiver extends BroadcastReceiver {    private static final String TAG = &quot;BootCompleteReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;Boot Complete&quot;);    }}</code></pre><p>manifest 文件中声明：</p><pre><code class="XML">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&lt;receiver    android:name=&quot;.BootCompleteReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>前面是同通过广播接收器接收系统广播，接下来是发送自定义广播。</p><p>首先注册广播接收器，这里选择静态注册方法：</p><pre><code class="Java">public class CustomReceiver extends BroadcastReceiver {    private static final String TAG = &quot;CustomReceiver&quot;;    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot;+&quot;接收到自定义广播&quot;);    }}</code></pre><p>然后在 manifest 中声明 广播接收器：</p><pre><code class="XML">&lt;receiver    android:name=&quot;.CustomReceiver&quot;    android:enabled=&quot;true&quot;    android:exported=&quot;true&quot;&gt;    &lt;intent-filter&gt;        &lt;action android:name=&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot; /&gt;    &lt;/intent-filter&gt;&lt;/receiver&gt;</code></pre><h3 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h3><p>发送标准广播调用的是 sendBroadcast(Intent) 方法</p><pre><code class="Java">sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;));</code></pre><h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>发送有序广播调用的是 sendOrderedBroadcast(Intent , String) 方法，String 参数值在自定义权限时使用。</p><pre><code class="Java">sendOrderedBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.CUSTOM_BROADCAST&quot;),null);</code></pre><p>Receiver 接收广播时不仅因为 “priority” 属性存在先后顺序，且 Receiver 之间也能够传递数据。</p><p>此外，BroadcastReceiver 也能调用 abortBroadcast() 方法截断广播，这样低优先级的广播接收器就无法接收到广播了。</p><h2 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h2><p>之前发送和接收到的广播全都是属于系统全局广播，即发出的广播可以被其他应用接收到，而且也可以接收到其他应用发送出的广播，这样可能会有不安全因素。</p><p>因此，在某些情况下可以采用本地广播机制，使用这个机制发出的广播只能在应用内部进行传递，而且广播接收器也只能接收本应用内自身发出的广播。</p><p>本地广播是使用 LocalBroadcastManager 来对广播进行管理。</p><p>首先，创建一个 BroadcastReceiver 用于接收本地广播：</p><pre><code class="Java">class LocalReceiver extends BroadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {        Log.d(TAG, &quot;onReceive: &quot; + &quot;LocalReceiver&quot;);    }}</code></pre><p>然后使用 LocalBroadcastManager 注册或者注销 广播接收器：</p><pre><code class="Java">private IntentFilter intentFilter;private LocalReceiver localReceiver;private LocalBroadcastManager localBroadcastManager;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    intentFilter = new IntentFilter();    intentFilter.addAction(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;);    localReceiver = new LocalReceiver();    localBroadcastManager = LocalBroadcastManager.getInstance(this);    localBroadcastManager.registerReceiver(localReceiver, intentFilter);}@Overrideprotected void onDestroy() {    super.onDestroy();    localBroadcastManager.unregisterReceiver(localReceiver);}</code></pre><p>最后通过 LocalBroadcastManager 发送本地广播：</p><pre><code class="Java">localBroadcastManager.sendBroadcast(new Intent(&quot;com.wshunli.broadcastreceiverdemo.LOCAL_BROADCAST&quot;));</code></pre><p>需要注意的是，本地广播是无法通过静态注册的方式来接收的，因为静态注册广播主要是为了在程序未启动的情况下也能接收广播，而本地广播是应用自己发送的，此时应用肯定是启动的了。</p><p>本地广播的优势：<br>（1）发送的广播不会离开我们的应用程序，所以不必担心机密数据泄露；<br>（2）其他程序的广播也无法发送到我们程序内部，不用担心会有安全漏洞；<br>（3）本地广播比发送系统全局广播将更加有效。</p><blockquote><p>参考资料<br>1、Broadcasts | Android Developers<br><a href="https://developer.android.com/guide/components/broadcasts.html" rel="external nofollow noopener noreferrer" target="_blank">https://developer.android.com/guide/components/broadcasts.html</a><br>2、Android之BroadcastReceiver | 吴小龙同學<br><a href="http://wuxiaolong.me/2015/11/03/BroadcastReceiver/" rel="external nofollow noopener noreferrer" target="_blank">http://wuxiaolong.me/2015/11/03/BroadcastReceiver/</a><br>3、Android BroadcastReceiver使用详解 - 简书<br><a href="https://www.jianshu.com/p/f348f6d7fe59" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f348f6d7fe59</a><br>4、Android深入四大组件（四）广播的注册、发送和接收过程 | 刘望舒的博客<br><a href="http://liuwangshu.cn/framework/component/4-broadcastreceiver.html" rel="external nofollow noopener noreferrer" target="_blank">http://liuwangshu.cn/framework/component/4-broadcastreceiver.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《第一行代码》读书笔记 – 应用组件之 BroadcastReceiver&lt;/p&gt;
    
    </summary>
    
      <category term="移动端技术" scheme="https://www.wshunli.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://www.wshunli.com/tags/Android/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《第一行代码》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>《Java编程思想》读书笔记（十）</title>
    <link href="https://www.wshunli.com/posts/96840e7.html"/>
    <id>https://www.wshunli.com/posts/96840e7.html</id>
    <published>2018-03-09T07:02:07.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<p>《Java编程思想》读书笔记 —— 并发。</p><a id="more"></a><h1 id="第21章-并发"><a href="#第21章-并发" class="headerlink" title="第21章 并发"></a>第21章 <strong>并发</strong></h1><p>Java 是一种多线程语言，并且提出了并发问题。</p><p>并发解决的问题大致可分为两类：速度，设计的可管理性。</p><h2 id="基本的线程机制"><a href="#基本的线程机制" class="headerlink" title="基本的线程机制"></a>基本的线程机制</h2><p>并发编程使我们可以将程序划分为多个分离的、独立运行的任务。<strong>一个线程就是在进程中的一个单一的顺序控制流</strong>，因此，单个进程可以拥有多个并发执行的任务，但是你的程序使得每个任务都好像有其自己的 CPU 一样。其底层机制是切分 CPU 的时间。</p><p>1、定义任务</p><p>线程可以驱动任务，因此你需要一种描述任务的方式，这可以由 Runnable 接口来提供。</p><pre><code class="Java">public class LiftOff implements Runnable {  protected int countDown = 10; // Default  private static int taskCount = 0;  private final int id = taskCount++;  public LiftOff() {}  public LiftOff(int countDown) {    this.countDown = countDown;  }  public String status() {    return &quot;#&quot; + id + &quot;(&quot; +      (countDown &gt; 0 ? countDown : &quot;Liftoff!&quot;) + &quot;), &quot;;  }  public void run() {    while(countDown-- &gt; 0) {      System.out.print(status());      Thread.yield();    }  }} ///:~</code></pre><p><code>Thread.yield()</code> 的调用是对线程调度器的一种建议，建议线程调度器切换任务。</p><p>当从 Runnable 导出一个类时，它必须具有run()方法，但是这个方法并无特殊之处–它不会产生任何内在的线程能力。要实现线程行为，你必须显式将一个线程附着在线程上。</p><pre><code class="Java">public class MainThread {  public static void main(String[] args) {    LiftOff launch = new LiftOff();    launch.run();  }} /* Output:#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>2、Thread 类</p><p>将 Runnable 对象转变为工作任务的传统方式是把它提交给一个 Thread 构造器。下面的示例展示了如何用 Thread 来驱动 LiftOff 对象。</p><pre><code class="Java">public class BasicThreads {  public static void main(String[] args) {    Thread t = new Thread(new LiftOff());    t.start();    System.out.println(&quot;Waiting for LiftOff&quot;);  }} /* Output: (90% match)Waiting for LiftOff#0(9), #0(8), #0(7), #0(6), #0(5), #0(4), #0(3), #0(2), #0(1), #0(Liftoff!),*///:~</code></pre><p>3、使用 Executor</p><pre><code class="Java">import java.util.concurrent.*;public class CachedThreadPool {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    for(int i = 0; i &lt; 5; i++)      exec.execute(new LiftOff());    exec.shutdown();  }} /* Output: (Sample)#0(9), #0(8), #1(9), #2(9), #3(9), #4(9), #0(7), #1(8), #2(8), #3(8), #4(8), #0(6), #1(7), #2(7), #3(7), #4(7), #0(5), #1(6), #2(6), #3(6), #4(6), #0(4), #1(5), #2(5), #3(5), #4(5), #0(3), #1(4), #2(4), #3(4), #4(4), #0(2), #1(3), #2(3), #3(3), #4(3), #0(1), #1(2), #2(2), #3(2), #4(2), #0(Liftoff!), #1(1), #2(1), #3(1), #4(1), #1(Liftoff!), #2(Liftoff!), #3(Liftoff!), #4(Liftoff!),*///:~</code></pre><p><code>CachedThreadPool</code> 将为每个任务都创建一个线程，是合理得 Executor 的首选。</p><p><code>FixedThreadPool</code> 可以一次性预先执行代价高昂的线程分配，限制了线程数量。不用为每个任务都固定的付出创建线程的开销，所以省时间。限制线程数量的好处在于防止线程的滥用。</p><p><code>SingleThreadExecutor</code> 用于希望在另一个线程中连续运行的任何事物（长期存活的任务）。例如监听进入的套接字连接的任务（他只有一个线程）。</p><p>4、从任务中产生返回值</p><p>在 Java SE5 中引入的 Callable 是一种具有类型参数的泛型，它的类型参数表示的是从方法 call() 中返回的值的类型，并且必须使用ExecutorService.submit() 方法调用它。</p><pre><code class="Java">import java.util.concurrent.*;import java.util.*;class TaskWithResult implements Callable&lt;String&gt; {  private int id;  public TaskWithResult(int id) {    this.id = id;  }  public String call() {    return &quot;result of TaskWithResult &quot; + id;  }}public class CallableDemo {  public static void main(String[] args) {    ExecutorService exec = Executors.newCachedThreadPool();    ArrayList&lt;Future&lt;String&gt;&gt; results =      new ArrayList&lt;Future&lt;String&gt;&gt;();    for(int i = 0; i &lt; 10; i++)      results.add(exec.submit(new TaskWithResult(i)));    for(Future&lt;String&gt; fs : results)      try {        // get() blocks until completion:        System.out.println(fs.get());      } catch(InterruptedException e) {        System.out.println(e);        return;      } catch(ExecutionException e) {        System.out.println(e);      } finally {        exec.shutdown();      }  }} /* Output:result of TaskWithResult 0result of TaskWithResult 1result of TaskWithResult 2result of TaskWithResult 3result of TaskWithResult 4result of TaskWithResult 5result of TaskWithResult 6result of TaskWithResult 7result of TaskWithResult 8result of TaskWithResult 9*///:~</code></pre><p>5、休眠<br>影响任务行为的一种简单方法是调用 sleep()，这将使任务中止执行给定的时间。<br>sleep会使得线程睡眠（即阻塞），这使得线程调度器可以切换到另一个线程，进而驱动另一个任务。</p><p>6、优先级<br>调度器将倾向于优先权更高的线程先执行（执行的频率高），但 CPU 处理线程集的顺序还是不确定的。<br>可以通过 Thread.currentThread().setPriority(int) 设置优先级，getPriority()获取优先级。</p><p>7、让步<br>让步通过调用yield()方法来做出（<strong>不过这只是一个暗示，没有任何机制保证它将会被采纳</strong>）。<br>对于任何重要的控制或在调整应用时，都不能依赖于yield()。</p><p>8、后台线程<br>当所有非后台线程结束时，程序也就终止了，同时会杀死进程中的所有后台线程。反过来说，只要有任何非后台线程还在运行，程序就不会终止。</p><p>必须在线程启动之前调用 setDaemon() 方法，才能把它设置为后台线程。即：</p><pre><code class="Java">Thread daemon = new Thread(new SimpleDaemons());daemon.setDaemon(true);daemon.start();</code></pre><h2 id="共享受限资源"><a href="#共享受限资源" class="headerlink" title="共享受限资源"></a>共享受限资源</h2><p>关键字 <code>synchronized</code> 为防止资源冲突提供内置支持。</p><blockquote><p>参考资料<br>1、java编程思想（读书笔记）：21.并发 - CSDN博客<br><a href="http://blog.csdn.net/he_world/article/details/52902701" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/he_world/article/details/52902701</a><br>2、《Java编程思想》——并发读书笔记 - CSDN博客<br><a href="http://blog.csdn.net/qq_35362055/article/details/78135854" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/qq_35362055/article/details/78135854</a><br>3、Java编程思想读书笔记一：并发 - CSDN博客<br><a href="http://blog.csdn.net/jiankunking/article/details/54799830" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/jiankunking/article/details/54799830</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《Java编程思想》读书笔记 —— 并发。&lt;/p&gt;
    
    </summary>
    
      <category term="语言基础" scheme="https://www.wshunli.com/categories/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="《Java编程思想》" scheme="https://www.wshunli.com/tags/%E3%80%8AJava%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：Spring MVC 常用注解详解</title>
    <link href="https://www.wshunli.com/posts/4e57ccd.html"/>
    <id>https://www.wshunli.com/posts/4e57ccd.html</id>
    <published>2018-01-28T05:02:35.000Z</published>
    <updated>2018-05-08T15:05:12.024Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Spring MVC 常用注解<a id="more"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p><p>1、@Controller</p><p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p><p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p><pre><code class="Java">@Controllerpublic class PersonController {}</code></pre><p>2、@RequestMapping</p><p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p><p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p><pre><code class="Java">@Controller@RequestMapping(value = &quot;api/person&quot;)public class PersonController {    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index() {    }}</code></pre><p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p><pre><code class="Java">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)    @ResponseBody    public String index(            @PathVariable(&quot;name&quot;) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 GET 请求示例 ：<a href="http://127.0.0.1:8080/api/person/wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person/wshunli</a></p><p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p><pre><code class="Java">    @RequestMapping(method = RequestMethod.POST)    @ResponseBody    public String create(            @RequestParam(value = &quot;name&quot;, required = false) String name) {        System.out.printf(&quot;Person name :&quot; + name);        return name;    }</code></pre><p>发送 POST 请求示例 ：<a href="http://127.0.0.1:8080/api/person?name=wshunli" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/api/person?name=wshunli</a></p><p>3、@RequestBody</p><p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p><p>未完待续。。</p><p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href="https://www.cnblogs.com/leskang/p/5445698.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href="http://blog.csdn.net/u010783583/article/details/52176382" rel="external nofollow noopener noreferrer" target="_blank">http://blog.csdn.net/u010783583/article/details/52176382</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Spring MVC 常用注解
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 从入门到放弃：简单参数配置及环境分离</title>
    <link href="https://www.wshunli.com/posts/91672bd7.html"/>
    <id>https://www.wshunli.com/posts/91672bd7.html</id>
    <published>2018-01-26T12:54:53.000Z</published>
    <updated>2018-05-08T15:05:12.024Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。</p><a id="more"></a><p>推荐使用 yml 配置 Spring Boot ，可以省略重复内容，也有较好的提示。</p><p>直接修改 <code>application.properties</code> 为 <code>application.yml</code> 即可。</p><h1 id="简单参数配置"><a href="#简单参数配置" class="headerlink" title="简单参数配置"></a>简单参数配置</h1><p>我们在使用 Spring Boot 时难免会使用一些简单的配置配置，<br>也就是在配置文件 <code>application.yml</code> 配置相应变量的值，然后使用 <code>@Value</code> 注解取得。</p><pre><code class="Java">// application.ymlusename: wshunli// HelloController@Value(value = &quot;${usename}&quot;)String wshunli;</code></pre><p>这样还是有点麻烦，我们可以新建一个类：</p><pre><code class="Java">package com.wshunli.spring.boot.demo;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties(prefix = &quot;hello&quot;)public class Hello {    String name;    String content;    // 省略 get set 方法}</code></pre><p>这里可能提示添加依赖，我们根绝建议添加即可：</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>在配置文件中这样写：</p><pre><code class="yml">hello:  name: hello prod  content: Spring Boot !</code></pre><p>在使用的地方：</p><pre><code class="Java">@AutowiredHello hello;</code></pre><p>使用 get 方法即可得到所需的值。</p><h1 id="环境分离"><a href="#环境分离" class="headerlink" title="环境分离"></a>环境分离</h1><p>添加两个文件 <code>application-dev.yml</code> 和 <code>application-prod.yml</code> 分别代表开发环境和生产环境。</p><p>例如：</p><p><code>application-dev.yml</code></p><pre><code class="yml">server:  port: 8081hello:  name: hello dev  content: Spring Boot !</code></pre><p><code>application-prod.yml</code></p><pre><code class="yml">server:  port: 808hello:  name: hello prod  content: Spring Boot !</code></pre><p>在原来的配置文件中添加：</p><pre><code class="yml">spring:  profiles:    active: dev</code></pre><p>我们只需修改 <code>active</code> 的值即可在在环境之间切换，<br><code>dev</code> 代表开发环境配置，<code>prod</code> 代表生产环境配置。</p><p>本文源码：<a href="https://github.com/wshunli/spring-boot-demo" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wshunli/spring-boot-demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录下 Spring Boot 参数配置以及生产环境与开发环境分离配置。&lt;/p&gt;
    
    </summary>
    
      <category term="后端技术" scheme="https://www.wshunli.com/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://www.wshunli.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://www.wshunli.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="https://www.wshunli.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（二）</title>
    <link href="https://www.wshunli.com/posts/84f52548.html"/>
    <id>https://www.wshunli.com/posts/84f52548.html</id>
    <published>2018-01-25T08:54:36.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<p>计算机操作系统 <strong>进程管理</strong> 部分的内容。<a id="more"></a></p><p>感觉这部分面试问得也比较多，比如进程和线程得区别啥的。</p><h1 id="第二章-进程管理"><a href="#第二章-进程管理" class="headerlink" title="第二章 进程管理"></a>第二章 进程管理</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/2.png-hexo.png" alt="操作系统引论"></p><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h2><p>程序顺序执行时的特征:<br>(1) 顺序性：处理机的操作严格按照程序所规定的顺序执行，即每一操作必须在上一个操作结束之后开始。<br>(2) 封闭性：程序是在封闭的环境下执行的，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。<br>(3) 可再现性：只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。<br>程序顺序执行时的特性，为程序员检测和校正程序的错误带来了很大的方便。</p><p>前趋图(Precedence Graph)是一个有向无循环图，记为DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。</p><p>又来活了，未完待续。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机操作系统 &lt;strong&gt;进程管理&lt;/strong&gt; 部分的内容。
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础-计算机操作系统（一）</title>
    <link href="https://www.wshunli.com/posts/b4e3c990.html"/>
    <id>https://www.wshunli.com/posts/b4e3c990.html</id>
    <published>2018-01-22T05:13:26.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<p>还要几天才能回家，就先看看计算机操作系统概论的内容<a id="more"></a> ，继续朝着目标前进。</p><p><strong>具备扎实的数据结构和计算机系统基础，编码功底扎实</strong>。</p><p>这次选择的课本是《计算机操作系统》（第三版），主编是汤小丹老师。</p><h1 id="第一章-操作系统引论"><a href="#第一章-操作系统引论" class="headerlink" title="第一章 操作系统引论"></a>第一章 操作系统引论</h1><p><img src="https://img.wshunli.com/计算机基础-计算机操作系统/0/1.png-hexo.png" alt="操作系统引论"></p><p>计算机系统由硬件和软件两部分组成。<br>操作系统(OS，Operating System)是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。</p><p>从一般用户的观点，可把 OS 看做是用户与计算机硬件系统之间的接口；<br>从资源管理的观点看，则可把 OS 视为计算机系统资源的管理者。<br>另外，OS 实现了对计算机资源的抽象，隐藏了对硬件操作的细节，使用户能更方便地使用机器。</p><h2 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h2><p>OS的形成迄今已有50多年的时间。<br>在上世纪50年代中期出现了单道批处理操作系统；60 年代中期产生了多道程序批处理系统；<br>不久又出现了基于多道程序的分时系统，与此同时也诞生了用于工业控制和武器控制的实时操作系统。</p><h2 id="操作系统的基本特性"><a href="#操作系统的基本特性" class="headerlink" title="操作系统的基本特性"></a>操作系统的基本特性</h2><p>微机操作系统可分为单用户单任务操作系统、单用户多任务操作系统、多用户多任务操作系统，具有并发、共享、虚拟和异步这四个基本特征。</p><p>1、并发性</p><p>并行性和并发性(Concurrence)是既相似又有区别的两个概念，<br>并行性是指两个或多个事件在同一时刻发生；而并发性是指两个或多个事件在同一时间间隔内发生。</p><p><strong>进程(Process)</strong>是指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p><p>多个进程之间可以并发执行和交换信息。一个进程在运行时需要一定的资源，如CPU、存储空间及I/O 设备等。</p><p>通常在一个进程中可以包含若干个<strong>线程(Threads)</strong>，它们可以利用进程所拥有的资源。</p><p>在引入线程的OS中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。</p><p>由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效地提高系统内多个程序间并发执行的程度。</p><p>2、共享性</p><p>在操作系统环境下，所谓共享(Sharing)，是指系统中的资源可供内存中多个并发执行的进程(线程)共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。</p><p>目前主要实现资源共享的方式有两种，即互斥共享方式和访问方式。</p><p>3、虚拟技术</p><p>操作系统中的所谓“虚拟”(Virtual)，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。</p><p>在操作系统中利用了两种方式实现虚拟技术，即时分复用技术和空分复用技术。</p><p>4、异步性</p><p>在多道程序环境下允许多个进程并发执行，但只有进程在获得所需的资源后方能执行。</p><p>进程是以人们不可预知的速度向前推进，此即进程的异步性(Asynchronism)。</p><h2 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h2><p>操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。为实现上述任务，操作系统应具有这样几方面的功能：处理机管理，存储器管理，设备管理和文件管理。</p><p>为了方便用户使用操作系统，还须向用户提供方便的用户接口。此外为了方便计算机联网，又在OS中增加了面向网络的服务功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还要几天才能回家，就先看看计算机操作系统概论的内容
    
    </summary>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="读书笔记" scheme="https://www.wshunli.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机基础" scheme="https://www.wshunli.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="《计算机操作系统》" scheme="https://www.wshunli.com/tags/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>沉迷学术，不可自拔（六）</title>
    <link href="https://www.wshunli.com/posts/9c05eee5.html"/>
    <id>https://www.wshunli.com/posts/9c05eee5.html</id>
    <published>2018-01-22T02:44:25.000Z</published>
    <updated>2018-05-08T15:05:12.028Z</updated>
    
    <content type="html"><![CDATA[<div id="security"> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 欢迎您访问我的博客，请输入密码查看本文. " /> <label for="pass"> 欢迎您访问我的博客，请输入密码查看本文. </label> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      【加密文章】生活是一条路，走走停停，停停走走
    
    </summary>
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/categories/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
    
      <category term="沉迷学术" scheme="https://www.wshunli.com/tags/%E6%B2%89%E8%BF%B7%E5%AD%A6%E6%9C%AF/"/>
    
      <category term="胡思乱想" scheme="https://www.wshunli.com/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    
  </entry>
  
</feed>
