{"title":"在 Hexo 中插入全景图片","slug":"hexo-tag-panoview","date":"2017-11-30T09:14:59.000Z","updated":"2018-05-04T04:59:18.675Z","comments":true,"path":"api/articles/hexo-tag-panoview.json","excerpt":"一款基于 Three.js 全景显示的 Hexo 插件。","covers":null,"content":"<p>一款基于 Three.js 全景显示的 Hexo 插件。</p>\n<a id=\"more\"></a>\n<h1 id=\"Threejs-介绍\"><a href=\"#Threejs-介绍\" class=\"headerlink\" title=\"Threejs 介绍\"></a>Threejs 介绍</h1><p><a href=\"https://threejs.org/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">three.js</a> The aim of the project is to create an easy to use, lightweight, 3D library. The library provides <code>&lt;canvas&gt;</code>, <code>&lt;svg&gt;</code>, CSS3D and WebGL renderers.</p>\n<div id=\"panoview8058\" style=\"margin: 0 auto\"></div>\r\n<script src=\"https://unpkg.com/three@0.88.0/build/three.min.js\"></script>\r\n\r\n<script>\r\n    var camera, scene, renderer;\r\n    var isUserInteracting = false,\r\n        onMouseDownMouseX = 0, onMouseDownMouseY = 0,\r\n        lon = 0, onMouseDownLon = 0,\r\n        lat = 0, onMouseDownLat = 0,\r\n        phi = 0, theta = 0;\r\n    init();\r\n    animate();\r\n    function init() {\r\n        var container, mesh;\r\n        container = document.getElementById('panoview8058');\r\n        var width = container.style.width;\r\n        camera = new THREE.PerspectiveCamera(75, 2, 1, 1000);\r\n        camera.target = new THREE.Vector3(0, 0, 0);\r\n        scene = new THREE.Scene();\r\n        var geometry = new THREE.SphereBufferGeometry(500, 60, 40);\r\n        // invert the geometry on the x-axis so that all of the faces point inward\r\n        geometry.scale(- 1, 1, 1);\r\n        var material = new THREE.MeshBasicMaterial({\r\n            map: new THREE.TextureLoader().load('https://img.wshunli.com/pano/pano2.jpg')\r\n        });\r\n        mesh = new THREE.Mesh(geometry, material);\r\n        scene.add(mesh);\r\n        renderer = new THREE.WebGLRenderer();\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.domElement.style.width = \"800px\";\r\n        renderer.domElement.style.height = \"400px\";\r\n        container.appendChild(renderer.domElement);\r\n        container.addEventListener('mousedown', onDocumentMouseDown, false);\r\n        container.addEventListener('mousemove', onDocumentMouseMove, false);\r\n        container.addEventListener('mouseup', onDocumentMouseUp, false);\r\n        // container.addEventListener('wheel', onDocumentMouseWheel, false);\r\n\r\n        container.addEventListener('dragover', function (event) {\r\n            event.preventDefault();\r\n            event.dataTransfer.dropEffect = 'copy';\r\n        }, false);\r\n        container.addEventListener('dragenter', function (event) {\r\n            document.body.style.opacity = 0.5;\r\n        }, false);\r\n        container.addEventListener('dragleave', function (event) {\r\n            document.body.style.opacity = 1;\r\n        }, false);\r\n\r\n    }\r\n\r\n    function onDocumentMouseDown(event) {\r\n        event.preventDefault();\r\n        isUserInteracting = true;\r\n        onMouseDownMouseX = event.clientX;\r\n        onMouseDownMouseY = event.clientY;\r\n        onMouseDownLon = lon;\r\n        onMouseDownLat = lat;\r\n    }\r\n    function onDocumentMouseMove(event) {\r\n        if (isUserInteracting === true) {\r\n            lon = (onMouseDownMouseX - event.clientX) * 0.1 + onMouseDownLon;\r\n            lat = (event.clientY - onMouseDownMouseY) * 0.1 + onMouseDownLat;\r\n        }\r\n    }\r\n    function onDocumentMouseUp(event) {\r\n        isUserInteracting = false;\r\n    }\r\n    function onDocumentMouseWheel(event) {\r\n        var fov = camera.fov + event.deltaY * 0.05;\r\n        camera.fov = THREE.Math.clamp(fov, 10, 75);\r\n        camera.updateProjectionMatrix();\r\n        return false;\r\n    }\r\n    function animate() {\r\n        requestAnimationFrame(animate);\r\n        update();\r\n    }\r\n    function update() {\r\n        if (isUserInteracting === false) {\r\n            lon += 0.1;\r\n        }\r\n        lat = Math.max(- 85, Math.min(85, lat));\r\n        phi = THREE.Math.degToRad(90 - lat);\r\n        theta = THREE.Math.degToRad(lon);\r\n        camera.target.x = 500 * Math.sin(phi) * Math.cos(theta);\r\n        camera.target.y = 500 * Math.cos(phi);\r\n        camera.target.z = 500 * Math.sin(phi) * Math.sin(theta);\r\n        camera.lookAt(camera.target);\r\n        /*\r\n        // distortion\r\n        camera.position.copy( camera.target ).negate();\r\n        */\r\n        renderer.render(scene, camera);\r\n    }\r\n\r\n</script>\n<h1 id=\"Hexo-中插入全景图片\"><a href=\"#Hexo-中插入全景图片\" class=\"headerlink\" title=\"Hexo 中插入全景图片\"></a>Hexo 中插入全景图片</h1><p><a href=\"https://github.com/wshunli/hexo-tag-panoview\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">hexo-tag-panoview</a> 是一款在 Hexo 中使用 <strong>全景图片</strong> 的插件。</p>\n<p>插件的安装和使用非常的简单，只需要进入博客目录，然后安装：</p>\n<pre><code class=\"bash\">$ npm install hexo-tag-panoview --save\n</code></pre>\n<p>之后在文章内使用 <code>panoview</code> 的 tag 就可以了：</p>\n<pre><code class=\"JavaScript\">{% panoview \"https://img.wshunli.com/pano/pano2.jpg\" 400 800 %}\n\n{% endpanoview %}\n</code></pre>\n<p>其中：<br><code>panoview</code> 和 <code>endpanoview</code> 是 Hexo 的标签，不需要修改；<br><code>https://img.wshunli.com/pano/pano2.jpg</code> 部分是全景照片，建议 1024*512 ；<br><code>400</code> 是指全景的高度；<br><code>800</code> 是指全景的宽度。</p>\n<p>灵感来自 <a href=\"https://threejs.org/examples/?q=pano#webgl_panorama_equirectangular\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">webgl_panorama_equirectangular</a><br>也是我发布的第二个 npm 组件。</p>\n","categories":[{"name":"前端技术","path":"api/categories/前端技术.json"}],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"},{"name":"panoview","path":"api/tags/panoview.json"},{"name":"hexo-tag-panoview","path":"api/tags/hexo-tag-panoview.json"}]}