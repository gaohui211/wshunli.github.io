{"title":"《剑指Offer》编程题目Java实现","slug":"《剑指Offer》编程题目Java实现","date":"2018-04-12T13:08:43.000Z","updated":"2018-04-28T14:59:20.476Z","comments":true,"path":"api/articles/《剑指Offer》编程题目Java实现.json","excerpt":"《剑指Offer》编程题目Java实现","covers":null,"content":"<p>《剑指Offer》编程题目Java实现</p><a id=\"more\"></a><p>老是看书学习理论知识不太行，还得动手写代码啊。</p><p>1、赋值运算函数</p><p>2、单例设计模式</p><pre><code class=\"Java\">public class SingletonClass {\n    private static volatile SingletonClass instance;\n    private SingletonClass() {\n    }\n    public static SingletonClass getInstace() {\n        if (instance == null) {\n            synchronized (SingletonClass.class) {\n                if (instance == null) {\n                    instance = new SingletonClass();\n                }\n            }\n        }\n        return instance;\n    }\n}\n</code></pre><p>3、二维数组中查找目标值</p><p>（1）直接暴力查找</p><pre><code class=\"Java\">public boolean Find(int target, int[][] array) {\n    for (int[] anArray : array) {\n        for (int anAnArray : anArray) {\n            if (anAnArray == target) return true;\n        }\n    }\n    return false;\n}\n</code></pre><p>（2）从右上角/左下角的元素出发</p><pre><code class=\"Java\">public boolean Find(int target, int[][] array) {\n    int row = array.length;\n    int col = array[0].length;\n    for (int i = 0, j = col - 1; i &lt; row &amp;&amp; j &gt;= 0; ) {\n        int value = array[i][j];\n        if (value == target) return true;\n        if (value &lt; target) i++;\n        if (value &gt; target) j--;\n    }\n    return false;\n}\n</code></pre><p>4、替换字符串中的空格</p><pre><code class=\"Java\">public String replaceSpace(StringBuffer str) {\n    return str.toString().replaceAll(&quot; &quot;, &quot;%20&quot;);\n}\n</code></pre><p>这个太偷懒了，不那么偷懒：</p><pre><code class=\"Java\">public String replaceSpace(StringBuffer str) {\n    StringBuilder builder = new StringBuilder();\n    String string = str.toString();\n    for (int i = 0; i &lt; string.length(); i++) {\n        char charAt = string.charAt(i);\n        if (charAt == &#39; &#39;) {\n            builder.append(&quot;%20&quot;);\n        } else {\n            builder.append(charAt);\n        }\n    }\n    return builder.toString();\n}\n</code></pre><p>5、从尾到头打印链表</p><p>（1）借助堆栈的“后进先出”实现</p><pre><code class=\"Java\">/**\n*    public class ListNode {\n*        int val;\n*        ListNode next = null;\n*        ListNode(int val) {\n*            this.val = val;\n*        }\n*    }\n*/\npublic ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {\n    Stack&lt;Integer&gt; integers = new Stack&lt;&gt;();\n    while (listNode != null) {\n        integers.push(listNode.val);\n        listNode = listNode.next;\n    }\n    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();\n    while (!integers.isEmpty()) {\n        arrayList.add(integers.pop());\n    }\n    return arrayList;\n}\n</code></pre><p>（2）借助递归实现</p><pre><code class=\"Java\">ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();\npublic ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {\n    if (listNode != null) {\n        this.printListFromTailToHead(listNode.next);\n        arrayList.add(listNode.val);\n    }\n    return arrayList;\n}\n</code></pre><p>（3）使用 Collections 的 reverse 方法</p><pre><code class=\"Java\">public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {\n    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();\n    while (listNode != null) {\n        arrayList.add(listNode.val);\n        listNode = listNode.next;\n    }\n    Collections.reverse(arrayList);\n    return arrayList;\n}\n</code></pre><p>6、由前序和中序遍历重建二叉树</p><p>7、用两个栈实现队列<br>8、求旋转数组的最小数字<br>9、斐波那契数列的第n项（青蛙跳台阶）<br>10、二进制中1的个数<br>11、数值的整数次方<br>12、打印1到最大的n位数<br>13、O(1)时间删除链表节点<br>14、使数组中的奇数位于偶数前面<br>15、找链表中倒数第K个节点<br>16、输出反转后的链表<br>17、合并两个有序链表<br>18、判断二叉树A中是否包含子树B<br>19、二叉树的镜像<br>20、顺时针打印矩阵<br>21、包含min函数的栈<br>22、判断一个栈是否是另一个栈的弹出序列<br>23、层序遍历二叉树<br>24、后序遍历二叉搜索树<br>25、二叉树中和为某值的路径<br>26、复杂链表的复制<br>27、二叉搜索树转换为双向链表<br>28、打印字符串中所有字符的排列<br>29、数组中出现次数超过一半的数字<br>30、找出最小的K个数<br>31、连续子数组的最大和<br>32、从1到整数n中1出现的次数<br>33、把数组中的数排成一个最小的数<br>34、求第N个丑数<br>35、第一个出现一次的字符<br>36、数组中逆序对的个数<br>37、两个链表的第一个公共节点<br>38、数字在排序数组中出现的次数<br>39、二叉树的深度<br>40、数组中只出现一次的两个数，而其他数都出现两次。<br>41、和为s的连续整数序列<br>42、翻转字符串<br>43、n个骰子的点数及出现的概率44. 扑克牌的顺子<br>44、圆圈中最后剩下的数<br>45、1+2+3+…+n的和<br>46、不用加减乘除做加法<br>47、不能被继承的类<br>48、字符串转换为整数<br>49、树中两个节点的最低公共祖先<br>50、找出重复的数<br>51、构建乘积数组<br>52、正则表达式匹配<br>53、表示数值的字符串<br>54、字符流中第一个不重复的字符<br>55、链表中环的入口节点<br>56、删除链表中重复的节点<br>57、二叉树的下一个节点<br>58、对称的二叉树<br>59、按之字形顺序打印二叉树<br>60、把二叉树打印成多行<br>61、序列化二叉树<br>62、二叉搜索树的第K个节点<br>63、数据流中的中位数<br>64、滑动窗口的最大值<br>65、矩阵中的路径<br>66、机器人的运动范围</p><p>未完待续。。</p>","categories":[{"name":"移动端技术","path":"api/categories/移动端技术.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"《剑指Offer》","path":"api/tags/《剑指Offer》.json"}]}