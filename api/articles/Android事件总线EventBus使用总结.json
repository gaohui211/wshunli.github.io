{"title":"Android事件总线EventBus使用总结","slug":"Android事件总线EventBus使用总结","date":"2018-01-17T04:36:06.000Z","updated":"2018-04-20T14:54:49.622Z","comments":true,"path":"api/articles/Android事件总线EventBus使用总结.json","excerpt":"EventBus是一款针对Android优化的发布/订阅事件总线","covers":["https://img.wshunli.com/Android/EventBus/EventBus-Publish-Subscribe.min.png","https://img.wshunli.com/Android/EventBus/Screenshot_1516247350.png-hexo.png"],"content":"<p>EventBus是一款针对Android优化的<strong>发布/订阅</strong>事件总线<a id=\"more\"></a>，简化了应用程序内各组件间、组件与后台线程间的通信。</p><p><img src=\"https://img.wshunli.com/Android/EventBus/EventBus-Publish-Subscribe.min.png\" alt=\"EventBus 发布订阅模式\"></p><p>主要是替代 handler BroadCast 在 Fragment 、Activity 、Service 线程之间传递消息。</p><h1 id=\"EventBus-概述\"><a href=\"#EventBus-概述\" class=\"headerlink\" title=\"EventBus 概述\"></a>EventBus 概述</h1><p>1、EventBus 有三个主要的元素：</p><ul><li>Event：事件，可以是任意类型的对象。</li><li>Subscriber：事件订阅者，<del>在EventBus3.0之前消息处理的方法只能限定于onEvent、onEventMainThread、onEventBackgroundThread和onEventAsync，他们分别代表四种线程模型</del>。而在EventBus3.0之后，事件处理的方法可以随便取名，但是需要添加一个注解@Subscribe，并且要指定线程模型（默认为POSTING），四种线程模型下面会讲到。</li><li>Publisher：事件发布者，可以在任意线程任意位置发送事件，直接调用EventBus的post(Object)方法。可以自己实例化EventBus对象，但一般使用EventBus.getDefault()就好了，根据post函数参数的类型，会自动调用订阅相应类型事件的函数。</li></ul><p>2、EventBus3.0有以下四种ThreadMode（线程模型）：</p><ul><li>POSTING（默认）：<strong>发布事件和接收事件在同一个线程</strong>，也就是说该事件在哪个线程发布出来的，事件处理函数就会在这个线程中运行。</li><li>MAIN: 事件的处理<strong>总是在UI线程</strong>中执行。</li><li>ASYNC：无论事件在哪个线程发布，该事件处理函数<strong>总是在新建的子线程</strong>中执行，同样，此事件处理函数中禁止进行UI更新操作。</li><li>BACKGROUND：如果事件是在UI线程中发布出来的，那么该事件处理函数就会在新的线程中运行，如果事件本来就是子线程中发布出来的，那么该事件处理函数直接在发布事件的线程中执行。</li></ul><h1 id=\"EventBus-快速入门\"><a href=\"#EventBus-快速入门\" class=\"headerlink\" title=\"EventBus 快速入门\"></a>EventBus 快速入门</h1><p>0、首先为项目添加 EventBus 依赖：</p><pre><code class=\"gradle\">compile &#39;org.greenrobot:eventbus:3.1.1&#39;\n</code></pre><p>1、定义事件类:</p><pre><code class=\"java\">public static class MessageEvent { /* Additional fields if needed */ }\n</code></pre><p>2、准备订阅者:</p><pre><code class=\"java\">@Subscribe(threadMode = ThreadMode.MAIN)\npublic void onMessageEvent(MessageEvent event) {/* Do something */};\n</code></pre><p>3、发送事件:</p><pre><code class=\"java\">EventBus.getDefault().post(new MessageEvent());\n</code></pre><h1 id=\"EventBus-实际应用\"><a href=\"#EventBus-实际应用\" class=\"headerlink\" title=\"EventBus 实际应用\"></a>EventBus 实际应用</h1><p>这里举例子具体介绍 EventBus 的用法，实现Activity之间传值。</p><p>1、定义消息事件类</p><pre><code class=\"java\">package com.wshunli.eventbusdemo;\n\npublic class MessageEvent {\n\n    private String message;\n\n    public MessageEvent(String message) {\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    @Override\n    public String toString() {\n        return &quot;MessageEvent{&quot; +\n                &quot;message=&#39;&quot; + message + &#39;\\&#39;&#39; +\n                &#39;}&#39;;\n    }\n}\n</code></pre><p>2、注册和取消订阅事件</p><p>根据组件的声明周期，在 MainActivity.java 中注册/取消订阅事件。</p><pre><code class=\"java\">package com.wshunli.eventbusdemo;\n\nimport android.content.Intent;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport org.greenrobot.eventbus.EventBus;\nimport org.greenrobot.eventbus.Subscribe;\nimport org.greenrobot.eventbus.ThreadMode;\n\npublic class MainActivity extends AppCompatActivity {\n    private TextView textView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 注册订阅事件\n        EventBus.getDefault().register(this);\n\n        // 跳转到 SecondActivity\n        findViewById(R.id.bt).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                startActivity(new Intent(MainActivity.this, SecondActivity.class));\n            }\n        });\n\n        textView = findViewById(R.id.text);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        // 取消订阅事件\n        EventBus.getDefault().unregister(this);\n    }\n}\n</code></pre><p>3、添加消息处理函数</p><p>在 MainActivity.java 中添加事件的处理函数：</p><pre><code class=\"java\">    @Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(MessageEvent event) {\n        textView.setText(String.format(&quot;接收到发送的事件：%s&quot;, event.getMessage()));\n    }\n</code></pre><p>我们选择 <code>threadMode = ThreadMode.MAIN</code> 表示总是在 <strong>主线程</strong> 中执行。</p><p>4、发布事件</p><p>在 SecondActivity 中发布事件：</p><pre><code class=\"java\">package com.wshunli.eventbusdemo;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\n\nimport org.greenrobot.eventbus.EventBus;\n\npublic class SecondActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_second);\n        findViewById(R.id.bt).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                EventBus.getDefault().post(new MessageEvent(&quot;来自SecondActivity的消息&quot;));\n                finish();\n            }\n        });\n    }\n}\n</code></pre><p>5、接收到消息</p><p>在 MainActivity 接受到来自 SecondActivity 中发送的消息：</p><p><img src=\"https://img.wshunli.com/Android/EventBus/Screenshot_1516247350.png-hexo.png\" alt=\"EventBus消息\"></p><h1 id=\"ProGuard-混淆规则\"><a href=\"#ProGuard-混淆规则\" class=\"headerlink\" title=\"ProGuard 混淆规则\"></a>ProGuard 混淆规则</h1><pre><code class=\"gradle\">-keepattributes *Annotation*\n-keepclassmembers class ** {\n    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;\n}\n-keep enum org.greenrobot.eventbus.ThreadMode { *; }\n\n# Only required if you use AsyncExecutor\n-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {\n    &lt;init&gt;(java.lang.Throwable);\n}\n</code></pre><blockquote><p>参考资料<br>1、greenrobot/EventBus: Event bus for Android and Java that simplifies communication between Activities, Fragments, Threads, Services, etc. Less code, better quality.<br><a href=\"https://github.com/greenrobot/EventBus\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://github.com/greenrobot/EventBus</a><br>2、Android事件总线（一）EventBus3.0用法全解析 - 刘望舒的专栏 - CSDN博客<br><a href=\"http://blog.csdn.net/itachi85/article/details/52205464\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.csdn.net/itachi85/article/details/52205464</a><br>3、EventBus 3.0的用法详解（一） - neu - SegmentFault<br><a href=\"https://segmentfault.com/a/1190000004279679\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://segmentfault.com/a/1190000004279679</a><br>4、Android事件分发库的使用-慕课网<br><a href=\"https://www.imooc.com/learn/871\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://www.imooc.com/learn/871</a></p></blockquote>","categories":[{"name":"移动端技术","path":"api/categories/移动端技术.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"},{"name":"EventBus","path":"api/tags/EventBus.json"}]}