{"title":"Spring Boot 从入门到放弃：Spring MVC 常用注解详解","slug":"Spring-Boot-从入门到放弃：Spring-MVC-常用注解详解","date":"2018-01-28T05:02:35.000Z","updated":"2018-05-04T04:59:18.671Z","comments":true,"path":"api/articles/Spring-Boot-从入门到放弃：Spring-MVC-常用注解详解.json","excerpt":"本文介绍 Spring MVC 常用注解","covers":null,"content":"<p>本文介绍 Spring MVC 常用注解<a id=\"more\"></a>，包括 @Controller、@RequestMapping、@PathVariable、@RequestParam、@RequestBody、@ResponseBody、@RestController 等等。</p>\n<p>1、@Controller</p>\n<p>Controller 控制器是通过服务接口定义的提供访问应用程序的一种行为，它解释用户的输入，将其转换成一个模型然后将试图呈献给用户。</p>\n<p>其实 @Repository、@Controller、@Service 都组合了 @Component 元注解。</p>\n<pre><code class=\"Java\">@Controller\npublic class PersonController {\n}\n</code></pre>\n<p>2、@RequestMapping</p>\n<p>@RequestMapping 注解用于映射 Web 请求（访问路径和参数）、处理类和方法的。</p>\n<p>@RequestMapping 可以注解在类和方法上，注解在方法上的路径会继承注解在类上的路径；支持 Servlet 的 request 和 response 作为参数。</p>\n<pre><code class=\"Java\">@Controller\n@RequestMapping(value = &quot;api/person&quot;)\npublic class PersonController {\n\n    @RequestMapping(value = &quot;{name}&quot;, method = RequestMethod.GET)\n    @ResponseBody\n    public String index() {\n    }\n}\n</code></pre>\n<p>@PathVariable 用来接收路径参数，比如 <code>/api/person/{name}</code> 可接受 <code>name</code> 作为参数。</p>\n<pre><code class=\"Java\">    @RequestMapping(value = &quot;/{name}&quot;, method = RequestMethod.GET)\n    @ResponseBody\n    public String index(\n            @PathVariable(&quot;name&quot;) String name) {\n        System.out.printf(&quot;Person name :&quot; + name);\n        return name;\n\n    }\n</code></pre>\n<p>发送 GET 请求示例 ：<a href=\"http://127.0.0.1:8080/api/person/wshunli\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://127.0.0.1:8080/api/person/wshunli</a></p>\n<p>@RequestParam 用来接收参数，比如 <code>/api/person/?name=wshunli</code> 可接受 <code>name</code> 的值 <code>wshunli</code> 作为参数的值。</p>\n<pre><code class=\"Java\">    @RequestMapping(method = RequestMethod.POST)\n    @ResponseBody\n    public String create(\n            @RequestParam(value = &quot;name&quot;, required = false) String name) {\n        System.out.printf(&quot;Person name :&quot; + name);\n        return name;\n\n    }\n</code></pre>\n<p>发送 POST 请求示例 ：<a href=\"http://127.0.0.1:8080/api/person?name=wshunli\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://127.0.0.1:8080/api/person?name=wshunli</a></p>\n<p>3、@RequestBody</p>\n<p>@RequestBody 允许 request 的参数在 request 体内，而不是直接在地址后面。</p>\n<p>未完待续。。</p>\n<p>参考资料：<br>1、springmvc常用注解标签详解 - 木叔 - 博客园<br><a href=\"https://www.cnblogs.com/leskang/p/5445698.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://www.cnblogs.com/leskang/p/5445698.html</a><br>2、详解Spring MVC 常用的那些注解 - CSDN博客<br><a href=\"http://blog.csdn.net/u010783583/article/details/52176382\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.csdn.net/u010783583/article/details/52176382</a></p>\n","categories":[{"name":"后端技术","path":"api/categories/后端技术.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"Spring","path":"api/tags/Spring.json"},{"name":"Spring Boot","path":"api/tags/Spring Boot.json"}]}