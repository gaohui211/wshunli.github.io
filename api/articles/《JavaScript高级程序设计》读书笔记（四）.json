{"title":"《JavaScript高级程序设计》读书笔记（四）","slug":"《JavaScript高级程序设计》读书笔记（四）","date":"2017-11-08T09:06:23.000Z","updated":"2018-03-28T14:41:07.690Z","comments":true,"path":"api/articles/《JavaScript高级程序设计》读书笔记（四）.json","excerpt":"《JavaScript高级程序设计》读书笔记","covers":null,"content":"<p>《JavaScript高级程序设计》读书笔记</p><a id=\"more\"></a><p><strong>(四) 学习在浏览器中进行实际开发时的错误调试技巧。</strong>(17章)</p><h1 id=\"第十七章-错误处理与调试\"><a href=\"#第十七章-错误处理与调试\" class=\"headerlink\" title=\"第十七章 错误处理与调试\"></a>第十七章 错误处理与调试</h1><h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p><strong>try-catch 语句</strong>：</p><p>try-catch 语句 和 Java 很类似。</p><pre><code class=\"JavaScript\">function testFinally(){\n    try {\n        return 2;\n    } catch (error){\n        return 1;\n    } finally {\n        return 0;\n    }\n}\nfunction testWithoutFinally(){\n    try {\n        return 2;\n    } catch (error){\n        return 1;\n    }\n}\nalert(testFinally());\nalert(testWithoutFinally());\n</code></pre><p>我们把可能会抛出错误的语句放到 try 语句中，处理错误的代码放到 catch 块中，finally 语句块无论如何都会执行。</p><p><strong>抛出错误</strong>：与 try-catch 语句相配的还有一个 throw 操作符，用于随时抛出自定义错误 。</p><p>在遇到 throw 操作符时，代码会立即停止执行。仅当有 try-catch 语句捕获到被抛出的值时，代码才回继续执行。</p><pre><code class=\"JavaScript\">if (!(values instanceof Array)){\n    throw new Error(&quot;process(): Argument must be an array.&quot;);\n}\n</code></pre><p>捕获错误的目的在于避免浏览器以默认方式处理它们；而抛出错误的目的在于提供错误发生具体原因的消息。</p><p><strong>常见的错误类型</strong>：类型转换错误、数据类型错误、通信错误。</p><h2 id=\"调试技术\"><a href=\"#调试技术\" class=\"headerlink\" title=\"调试技术\"></a>调试技术</h2><p><strong>将消息记录到控制台</strong>：通过 console 对象向 JavaScript 控制台中写入消息。</p><p>error(message): 将错误消息记录到控制台<br>info(message): 将信息性消息记录到控制台<br>log(message): 将一般消息记录到控制台<br>warn(message): 将警告消息记录到控制台</p><p><strong>将消息记录到当前页面</strong>：在页面中开辟一小块区域，用以显示消息。</p><p><strong>抛出错误</strong>：自定义 assert() 函数。<br>两个参数，一个是求值结果应该为true的条件，另一个是条件为false时要抛出的错误。</p><pre><code class=\"JavaScript\">function assert(condition, message){\n    if (!condition){\n        throw new Error(message);\n    }\n}\nfunction divide(num1, num2){\n    assert(typeof num1 == &quot;number&quot; &amp;&amp; typeof num2 == &quot;number&quot;,\n            &quot;divide(): Both arguments must be numbers.&quot;);\n    return num1 / num2;\n}\nvar result = divide(10, 23);\nresult = divide(&quot;hi&quot;, 3);\n</code></pre>","categories":[{"name":"前端技术","path":"api/categories/前端技术.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"读书笔记","path":"api/tags/读书笔记.json"},{"name":"《JavaScript高级程序设计》","path":"api/tags/《JavaScript高级程序设计》.json"}]}