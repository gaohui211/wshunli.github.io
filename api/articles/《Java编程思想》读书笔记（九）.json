{"title":"《Java编程思想》读书笔记（九）","slug":"《Java编程思想》读书笔记（九）","date":"2017-12-05T09:51:24.000Z","updated":"2018-03-28T14:41:07.690Z","comments":true,"path":"api/articles/《Java编程思想》读书笔记（九）.json","excerpt":"《Java编程思想》读书笔记 —— 注解。","covers":null,"content":"<p>《Java编程思想》读书笔记 —— 注解。</p><a id=\"more\"></a><h1 id=\"第20章-注解\"><a href=\"#第20章-注解\" class=\"headerlink\" title=\"第20章 注解\"></a>第20章 <strong>注解</strong></h1><p>注解（也叫元数据）为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便地使用这些数据。</p><p>注解的优点：</p><p>1.可以提供用来完整地描述程序所需的信息（这些信息无法用Java表达）-&gt; 以将由编译器来测试和验证的格式存储有关程序的额外信息。<br>2.可以用来生成描述符文件或是新的类的定义-&gt;减轻编写”样板”代码的负担。<br>3.更加干净易读的代码以及编译器类型检查。</p><p>注解的语法：除@符号的使用外，其他和Java固有语法一样</p><p>Java SE5内置了三种，定义在java.lang中的注解：</p><p>@Override 当前的方法定义将覆盖父类（超类）中的方法。<br>@Deprecated 被注解的元素被取代，不推荐使用。<br>@SuppressWarnings 关闭不当的编译器警告信息。</p><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>1.@Target 表示该注解可以用于什么地方。</p><p>ElementType参数包括：</p><pre><code class=\"Java\">public enum ElementType {\n    //类、接口（包括注解类型）或是enum声明\n    TYPE,\n    //域声明(包括enum实例)\n    FIELD,\n    //方法声明\n    METHOD,\n    //参数声明\n    PARAMETER,\n   //构造器声明\n    CONSTRUCTOR,\n    //\b局部变量声明\n    LOCAL_VARIABLE,\n     //注解类型声明\n    ANNOTATION_TYPE,\n    //包声明\n    PACKAGE,\n    //类型参数声明（Java1.8开始使用）\n    TYPE_PARAMETER,\n    //类型使用（Java1.8开始使用）\n    TYPE_USE\n}\n</code></pre><p>2.@Retention 表示需要在什么级别保存该注解信息。</p><p>RetentionPolicy 参数包括:</p><pre><code class=\"Java\">public enum RetentionPolicy {\n    /**\n     * Annotations are to be discarded by the compiler.\n     *注解将被编译器丢弃\n     */\n    SOURCE,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler\n     * but need not be retained by the VM at run time.  This is the default\n     * behavior.\n     *注解被编译器保存在类文件中。但在运行的时候没有被VM保存\n     */\n    CLASS,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler and\n     * retained by the VM at run time, so they may be read reflectively.\n     *\n     * @see java.lang.reflect.AnnotatedElement\n     *  注解将被编译器保存在类文件中，在运行的时候也会被VM保存。因此可通过反射机制读取注解的信息\n     */\n    RUNTIME\n}\n</code></pre><p>3.@Documented 将此注解包含在 Javadoc 中。</p><p>4.@Inherited 允许子类继承父类中的注解。</p><p>定义注解的语法:</p><pre><code class=\"Java\">package com;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Test {\n}\n</code></pre><p>使用注解的语法：</p><pre><code class=\"Java\">package com;\n\npublic class Testable {\n    public void execute(){\n        System.out.println(&quot;Executing...&quot;);\n    }\n    @Test void testExcute(){\n        execute();\n    }\n}\n</code></pre><blockquote><p>参考资料<br>1、Java编程思想学习笔记——注解 - JohnTsai - 博客园<br><a href=\"https://www.cnblogs.com/JohnTsai/p/4926203.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://www.cnblogs.com/JohnTsai/p/4926203.html</a><br>2、《Java编程思想》学习笔记17——注解Annotation - CSDN博客<br><a href=\"http://blog.csdn.net/z742182637/article/details/50454204\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.csdn.net/z742182637/article/details/50454204</a></p></blockquote>","categories":[{"name":"移动端技术","path":"api/categories/移动端技术.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"读书笔记","path":"api/tags/读书笔记.json"},{"name":"《Java编程思想》","path":"api/tags/《Java编程思想》.json"}]}