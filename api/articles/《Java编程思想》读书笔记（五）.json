{"title":"《Java编程思想》读书笔记（五）","slug":"《Java编程思想》读书笔记（五）","date":"2017-12-04T09:04:23.000Z","updated":"2018-04-22T14:56:15.955Z","comments":true,"path":"api/articles/《Java编程思想》读书笔记（五）.json","excerpt":"《Java编程思想》读书笔记 —— 异常处理。","covers":["https://img.wshunli.com/Java/Java编程思想/Java异常.png"],"content":"<p>《Java编程思想》读书笔记 —— 异常处理。</p><a id=\"more\"></a><p>第12章 <strong>通过异常处理错误</strong></p><p>Java的基本理念是“结构不佳的代码不能运行”。</p><p><img src=\"https://img.wshunli.com/Java/Java编程思想/Java异常.png\" alt=\"Java异常\"></p><p>Java 中的异常处理都是围绕着 try-catch-finally, throw, throws 这几个展开的，也就是：</p><p>try-catch-finally：捕获异常并处理。<br>throw：遇到错误的时候抛出一个异常。<br>throws：声明一个方法可能抛出的异常（所有可能抛出的异常都需要声明）。</p><pre><code class=\"Java\">class ThreeException extends Exception {}\npublic class FinallyWorks {\n  static int count = 0;\n  public static void main(String[] args) {\n    while(true) {\n      try {\n        // Post-increment is zero first time:\n        if(count++ == 0) throw new ThreeException();\n        System.out.println(&quot;No exception&quot;);\n      } catch(ThreeException e) {\n        System.out.println(&quot;ThreeException&quot;);\n      } finally {\n        System.out.println(&quot;In finally clause&quot;);\n        if(count == 2) break; // out of &quot;while&quot;\n      }\n    }\n  }\n}\n/* Output:\nThreeException\nIn finally clause\nNo exception\nIn finally clause\n*/\n</code></pre><p>throw 与 throws 的差别</p><p>throw 是语句抛出一个 Throwable 类型的异常，总是出现在函数体中；程序会在 throw 语句之后立即终止。</p><p>如果一个方法可能会出现异常，但没有能力处理这种异常，可以在方法声明处用 throws 子句来声明抛出异常；<br>throws 语句用在方法定义时声明该方法要抛出的异常类型，多个异常可使用逗号分割。</p><pre><code class=\"Java\">f() throws Exception1, Exception2, Exception3, ... {\n    ...\n}\n</code></pre><p>例如：</p><pre><code class=\"Java\">import java.lang.Exception;\n\npublic class TestException {\n    public int div(int x, int y) throws MyException {\n        if (y == 0) {\n            throw new MyException(&quot;除数不能为0&quot;);\n        }\n        return (int)(x/y);\n    }\n\n    public static void main(String[] args) {\n        int x = 1;\n        int y = 0;\n        try {\n            int result = div(x, y);\n        } catch (MyException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n\n//自定义异常类\nclass MyException extends Exception {\n    String message;\n    public MyException(String ErrorMessage) {\n        message = ErrorMessage;\n    }\n    public String getMessage() {\n        return message;\n    }\n}\n</code></pre><blockquote><p>参考资料<br>1、《Java编程思想》读书笔记 第十二章 通过异常处理<br><a href=\"https://zhuanlan.zhihu.com/p/25935822\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://zhuanlan.zhihu.com/p/25935822</a><br>2、Java编程思想第四版读书笔记——第十二章 通过异常处理错误 - CSDN博客<br><a href=\"http://blog.csdn.net/severusyue/article/details/51780879\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.csdn.net/severusyue/article/details/51780879</a><br>3、Java 异常处理<br><a href=\"https://zhuanlan.zhihu.com/p/24043941\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://zhuanlan.zhihu.com/p/24043941</a></p></blockquote>","categories":[{"name":"移动端技术","path":"api/categories/移动端技术.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"读书笔记","path":"api/tags/读书笔记.json"},{"name":"《Java编程思想》","path":"api/tags/《Java编程思想》.json"}]}