{"title":"《Java编程思想》读书笔记（八）","slug":"《Java编程思想》读书笔记（八）","date":"2017-12-05T09:46:52.000Z","updated":"2018-03-31T14:43:15.440Z","comments":true,"path":"api/articles/《Java编程思想》读书笔记（八）.json","excerpt":"《Java编程思想》读书笔记 —— Java I/O 系统。","covers":null,"content":"<p>《Java编程思想》读书笔记 —— Java I/O 系统。</p><a id=\"more\"></a><h1 id=\"第18章-Java-I-O-系统\"><a href=\"#第18章-Java-I-O-系统\" class=\"headerlink\" title=\"第18章 Java I/O 系统\"></a>第18章 <strong>Java I/O 系统</strong></h1><h2 id=\"File-类\"><a href=\"#File-类\" class=\"headerlink\" title=\"File 类\"></a>File 类</h2><p>File 类不仅仅可以代表一个特定文件的名称，还可以代表一个目录下的一组文件的名称。</p><h2 id=\"输入与输出\"><a href=\"#输入与输出\" class=\"headerlink\" title=\"输入与输出\"></a>输入与输出</h2><p>Java 中使用流来处理程序的输入和输出操作，流是一个抽象的概念，封装了程序数据于输入输出设备交换的底层细节。<br>Java I/O 中又将流分为字节流和字符流，字节流主要用于处理诸如图像，音频视频等二进制格式数据，而字符流主要用于处理文本字符等类型的输入输出。</p><p>1.<strong>字节输入流 InputStream</strong>：</p><p>输入流 InputStream 负责从各种数据/文件源产生输入，输入源包括：字节数组，字符串，文件，管道，一系列其他类型的流，以及网络连接产生的流等等。</p><p>常用字节输入流的主要类型：</p><p>(1).ByteArrayInputStream 字节数组输入流：</p><p>主要功能：允许内存缓存作为输入流。</p><p>ByteArrayInputStream 包含一个内部缓冲区，该缓冲区包含从流中读取的字节。内部计数器跟踪 read() 方法要提供的下一个字节。</p><p>注意：关闭 ByteArrayInputStream 无效，该类中的方法在关闭此流之后仍可被调用，而不会产生任何的 IOException。</p><p>(2).FileInputStream 文件输入流：</p><p>主要功能：从文件系统中的某个文件获得输入字节，用于读取诸如图像数据子类的原始字节流。若要读取字符流，请使用 FileReader。</p><p>(3).PipedInputStream 管道输入流：</p><p>主要功能：和管道输出流一起构成一个输入输出的管道，是管道的数据输入端。</p><p>管道输入流应该连接到管道输出流，管道输入流提供要写入管道输出流的所有数据字节。通常，这些数据有某个线程从PipedInputStream对象中读取，并有其他线程将其写入到相应的 PipedOutputStream 对象中。</p><p>注意：不建议 PipedInputStream 和 PipedOutputStream 对象使用单线程，因为这样可能死锁线程。管道输入流包含一个缓冲区，可以在缓冲区限定范围内将读操作和写操作分离开，如果先连接管道输出流提供数据字节的线程不再存在，则认为该管道已损坏。</p><p>(4).SequenceInputStream 顺序输入流：</p><p>重要功能：将两个或多个输入流对象转换为一个单个输入流对象。</p><p>SequenceInputStream 表示其他输入流的逻辑串联关系，它从输入流的有序集合开始，并从第一个输入流开始读取，直到到达文件末尾，接着从第二个输入流读取，以此类推，直到到达包含的最后一个输入流的文件末尾为止。</p><p>(5).FilterInputStream 过滤输入流：</p><p>主要功能：包含其他一些输入流，将这些被包含的输入流用作其基本数据源，它可以直接传输数据或者提供一些额外的功能。</p><p>常用的 FilterInputStream 是DataInputStream 数据输入流，主要用于允许程序以与机器无关的方式从底层输入流中读取 java 基本数据类型。<br>其常用的方法有 readInt()，readBoolean()，readChar()等等。</p><p>2.<strong>字节输出流 OutputStream</strong>：</p><p>和字节输入流相对应，字节输出流负责字节类型数据想目标文件或设备的输出。常见的字节输出流如下：</p><p>(1).ByteArrayOutputStream 字节数组输出流：</p><p>主要功能：在内存中创建一个缓冲区，将接收到的数据放入该内存缓冲区中。</p><p>ByteArrayOutputStream 实现了一个输出流，其中的数据被写入一个 byte 数组中。缓冲区会随着数据的不断写入而自动增长，可使用 toByteArray() 和 toString() 方法获取数据。</p><p>注意：和 ByteArrayInputStream 类似，关闭 ByteArrayOutputStream 也是无效的，此类中的方法在关闭此流后仍可被调用，而不会产生任何 IOException。</p><p>(2).FileOutputStream 文件输出流：</p><p>主要功能：将数据写入到指定文件中。</p><p>文件输出流是用于将数据写入 File 或 FIleDescriptor 的输出流，用于写入诸如图像数据之类的原始字节流，若要写入字符流，请使用 FileWriter。</p><p>(3).PipedOutputStream 管道输出流：</p><p>主要功能：连接管道输入流用来创建通信管道，管道输出流是管道数据输出端。</p><p>(4).FilterOutputStream 过滤输出流：</p><p>主要功能：用于将已存在的输出流作为其基本数据接收器，可以直接传输数据或提供一些额外的处理。</p><p>常用的 FIlterOutputStream 是 DataOutputStream 数据输出流，它允许程序以适当的方式将 java 基本数据类型写入输出流中。<br>其常用方法有writeInt(intV)，writeChar(int v)，writeByte(String s)等等。</p><p>3.<strong>字符流</strong>：</p><p>Java 中得字节流只能针对字节类型数据，即支持处理8位的数据类型，由于 java 中的是 Unicode 码，即两个字节代表一个字符，于是在 JDK1.1 之后提供了字符流 Reader 和 Writer。</p><p>字符流相关常用类如下：</p><p>(1).Reader：</p><p>用于读取字符串流的抽象类，子类必须实现的方法只有reader(char[],int, int)和close()。</p><p>(2).InputStreamReader：</p><p>是将字节输入流转换为字符输入流的转换器，它使用指定的字符集读取字节并将其解码为字符。即：字节——&gt;字符。</p><p>它使用的字符集可以有名称指定或显式给定，也可以使用平台默认的字符集。</p><p>(3).Writer：</p><p>用于写入字符流的抽象类，子类必须实现的方法只有write(char[],int, int)和close()。</p><p>(4).OutputStreamWriter：</p><p>是将字符输出流转换为字节输出流的转换器，它使用指定的字符集将要写入流的字符编码成字节。即：字符——&gt;字节。</p><h2 id=\"I-O-流的典型使用方式\"><a href=\"#I-O-流的典型使用方式\" class=\"headerlink\" title=\"I/O 流的典型使用方式\"></a>I/O 流的典型使用方式</h2><p>1、缓冲输入文件</p><pre><code class=\"Java\">import java.io.*;\n\npublic class BufferedInputFile {\n  // Throw exceptions to console:\n  public static String\n  read(String filename) throws IOException {\n    // Reading input by lines:\n    BufferedReader in = new BufferedReader(\n      new FileReader(filename));\n    String s;\n    StringBuilder sb = new StringBuilder();\n    while((s = in.readLine())!= null)\n      sb.append(s + &quot;\\n&quot;);\n    in.close();\n    return sb.toString();\n  }\n  public static void main(String[] args)\n  throws IOException {\n    System.out.print(read(&quot;BufferedInputFile.java&quot;));\n  }\n} /* (Execute to see output) *///:~\n</code></pre><p>2、基本的文件输出</p><pre><code class=\"Java\">import java.io.*;\n\npublic class BasicFileOutput {\n  static String file = &quot;BasicFileOutput.out&quot;;\n  public static void main(String[] args)\n  throws IOException {\n    BufferedReader in = new BufferedReader(\n      new StringReader(\n        BufferedInputFile.read(&quot;BasicFileOutput.java&quot;)));\n    PrintWriter out = new PrintWriter(\n      new BufferedWriter(new FileWriter(file)));\n    int lineCount = 1;\n    String s;\n    while((s = in.readLine()) != null )\n      out.println(lineCount++ + &quot;: &quot; + s);\n    out.close();\n    // Show the stored file:\n    System.out.println(BufferedInputFile.read(file));\n  }\n} /* (Execute to see output) *///:~\n</code></pre><blockquote><p>参考资料<br>1、Java 编程思想（六）Java I/O - Invoker’s Tower - CSDN博客<br><a href=\"http://blog.csdn.net/kingcat666/article/details/78027078\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.csdn.net/kingcat666/article/details/78027078</a><br>2、java基础学习总结——流 - 孤傲苍狼 - 博客园<br><a href=\"http://www.cnblogs.com/xdp-gacl/p/3634409.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://www.cnblogs.com/xdp-gacl/p/3634409.html</a><br>3、《Java编程思想》学习笔记11——Java I/O - CSDN博客<br><a href=\"http://blog.csdn.net/chjttony/article/details/6966246\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.csdn.net/chjttony/article/details/6966246</a><br>4、Java编程思想 第十八章 Java I/O系统 - CSDN博客<br><a href=\"http://blog.csdn.net/liuyesuifen/article/details/52760482\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.csdn.net/liuyesuifen/article/details/52760482</a><br>5、java-InputStream与OutputStream类型 - CSDN博客<br><a href=\"http://blog.csdn.net/benjaminlee1/article/details/65437411\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.csdn.net/benjaminlee1/article/details/65437411</a></p></blockquote>","categories":[{"name":"移动端技术","path":"api/categories/移动端技术.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"读书笔记","path":"api/tags/读书笔记.json"},{"name":"《Java编程思想》","path":"api/tags/《Java编程思想》.json"}]}