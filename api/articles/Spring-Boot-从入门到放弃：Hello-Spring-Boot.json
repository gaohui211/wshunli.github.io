{"title":"Spring Boot 从入门到放弃：Hello Spring Boot !","slug":"Spring-Boot-从入门到放弃：Hello-Spring-Boot","date":"2018-01-05T03:19:35.000Z","updated":"2018-04-04T14:46:27.902Z","comments":true,"path":"api/articles/Spring-Boot-从入门到放弃：Hello-Spring-Boot.json","excerpt":"Spring Boot 入门 Hello Spring Boot !","covers":["https://img.wshunli.com/SpringBoot/1HelloSpringBoot/1.png","https://img.wshunli.com/SpringBoot/1HelloSpringBoot/7.png"],"content":"<p>Spring Boot 入门 Hello Spring Boot !</p><a id=\"more\"></a><p>前面在师兄的带领下，基于 nodejs 写了机房管理系统后端，也根据需要实现了简单三维重建的后端服务。<br>但是总感觉怪怪的，前者基于 Eggjs 后端框架，后者基于 Express 后端框架，好像跟 Java 没啥关系啊。</p><p>这几天刻意学习下 Spring Boot 后端框架，并把三维重建服务后端重写了。下面记录下学习过程。</p><h1 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h1><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p><p>Spring Boot 可以使用 Maven 或 Gradle 这样的构建系统，本文是基于 Maven（现在用得比较多，其实我更熟悉Gradle）。</p><h2 id=\"Spring-Boot-特性\"><a href=\"#Spring-Boot-特性\" class=\"headerlink\" title=\"Spring Boot 特性\"></a>Spring Boot 特性</h2><p>Spring将很多魔法带入了 Spring 应用程序的开发之中，其中最重要的是以下四个核心。</p><ul><li>自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置。</li><li>起步依赖：告诉Spring Boot需要什么功能，它就能引入需要的库。</li><li>命令行界面：这是Spring Boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建。</li><li>Actuator：让你能够深入运行中的Spring Boot应用程序，一探究竟。</li></ul><h2 id=\"Spring-Boot-环境\"><a href=\"#Spring-Boot-环境\" class=\"headerlink\" title=\"Spring Boot 环境\"></a>Spring Boot 环境</h2><p>首先 Spring Boot 需要 java 环境，需要使用 Gradle 2.3+ 或者 Maven 3.0+ 构建。</p><p>本文环境是 Java 1.8，Spring Boot (v1.5.9.RELEASE) 以及 Maven3.3.9 构建。开发工具使用 IntelliJ IDEA。</p><h1 id=\"初始化Spring-Boot项目\"><a href=\"#初始化Spring-Boot项目\" class=\"headerlink\" title=\"初始化Spring Boot项目\"></a>初始化Spring Boot项目</h1><p>本文使用 Spring Initializr 初始化 Spring Boot项目。</p><h2 id=\"通过-Spring-官网\"><a href=\"#通过-Spring-官网\" class=\"headerlink\" title=\"通过 Spring 官网\"></a>通过 Spring 官网</h2><p>1、打开 <a href=\"http://start.spring.io/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://start.spring.io/</a></p><p>2、选择构建工具 Maven Project、Spring Boot版本1.5.9 以及一些依赖，输入 Web 即可，如下图所示：</p><p><img src=\"https://img.wshunli.com/SpringBoot/1HelloSpringBoot/1.png\" alt=\"初始化Spring Boot项目\"></p><p>3、点击 <code>Generate Project</code> 即可下载项目压缩包</p><h2 id=\"通过IntelliJ-IDEA\"><a href=\"#通过IntelliJ-IDEA\" class=\"headerlink\" title=\"通过IntelliJ IDEA\"></a>通过IntelliJ IDEA</h2><p>1、在 IntelliJ IDEA 中新建项目，选择 Spring Initializr ，如下图所示：</p><p><img src=\"https://img.wshunli.com/SpringBoot/1HelloSpringBoot/2.png\" alt=\"初始化Spring Boot项目2\"></p><p>2、配置项目的基本信息</p><p><img src=\"https://img.wshunli.com/SpringBoot/1HelloSpringBoot/3.png\" alt=\"初始化Spring Boot项目3\"></p><p>3、配置项目的依赖，这里选择添加 Web 模块</p><p><img src=\"https://img.wshunli.com/SpringBoot/1HelloSpringBoot/4.png\" alt=\"初始化Spring Boot项目4\"></p><p>4、设置项目存储位置</p><p><img src=\"https://img.wshunli.com/SpringBoot/1HelloSpringBoot/5_1.png\" alt=\"初始化Spring Boot项目5\"></p><p>初始化Spring Boot项目完成</p><h2 id=\"Spring-Boot-项目结构\"><a href=\"#Spring-Boot-项目结构\" class=\"headerlink\" title=\"Spring Boot 项目结构\"></a>Spring Boot 项目结构</h2><p>Spring Boot 项目 初始化完成后，项目如下图所示：</p><p><img src=\"https://img.wshunli.com/SpringBoot/1HelloSpringBoot/6.png\" alt=\"Spring Boot 项目结构\"></p><p>SpringBootDemoApplication 是 Spring Boot 的程序的入口。</p><p>我们添加 <code>@RestController</code> 注解，及 <code>home()</code> 方法</p><pre><code class=\"Java\">package com.wshunli.spring.boot.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@SpringBootApplication\npublic class SpringBootDemoApplication {\n\n    @RequestMapping(&quot;/&quot;)\n    String home() {\n        return &quot;Hello Spring Boot !&quot;;\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootDemoApplication.class, args);\n    }\n}\n</code></pre><h2 id=\"项目启动\"><a href=\"#项目启动\" class=\"headerlink\" title=\"项目启动\"></a>项目启动</h2><p>1、可以在 IntelliJ IDEA 中点击 run 按钮启动应用。</p><p><img src=\"https://img.wshunli.com/SpringBoot/1HelloSpringBoot/7.png\" alt=\"Spring Boot 项目启动\"></p><p>2、也可以在项目根目录使用 <code>mvnw spring-boot:run</code> 命令。</p><p><img src=\"https://img.wshunli.com/SpringBoot/1HelloSpringBoot/8.png\" alt=\"Spring Boot 项目启动\"></p><p>如果提示无法识别 <code>mvnw</code> 命令，可改为 <code>.\\mvnw spring-boot:run</code></p><p>3、使用 <code>mvnw clean package</code> 命令打包后启动</p><p><img src=\"https://img.wshunli.com/SpringBoot/1HelloSpringBoot/9.png\" alt=\"Spring Boot 项目启动\"></p><p>再执行一下命令启动：</p><pre><code class=\"bash\">java -jar  target/demo-0.0.1-SNAPSHOT.jar\n</code></pre><p>其中 <code>demo-0.0.1-SNAPSHOT.jar</code> 替换为自己的 jar 包名字。</p><p>最后 打开 <a href=\"http://127.0.0.1:8080/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://127.0.0.1:8080/</a> 即可看到 <code>Hello Spring Boot !</code></p><p>本文源码：<a href=\"https://github.com/wshunli/spring-boot-demo\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://github.com/wshunli/spring-boot-demo</a></p><blockquote><p>参考资料<br>1、Getting Started · Building an Application with Spring Boot<br><a href=\"https://spring.io/guides/gs/spring-boot/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://spring.io/guides/gs/spring-boot/</a><br>2、Spring Boot干货系列：（一）优雅的入门篇 | 嘟嘟独立博客<br><a href=\"http://tengj.top/2017/02/26/springboot1/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://tengj.top/2017/02/26/springboot1/</a></p></blockquote>","categories":[{"name":"后端技术","path":"api/categories/后端技术.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"Spring","path":"api/tags/Spring.json"},{"name":"Spring Boot","path":"api/tags/Spring Boot.json"}]}