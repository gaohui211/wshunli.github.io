{"title":"《Java编程思想》读书笔记（六）","slug":"《Java编程思想》读书笔记（六）","date":"2017-12-04T12:22:17.000Z","updated":"2018-04-22T14:56:15.955Z","comments":true,"path":"api/articles/《Java编程思想》读书笔记（六）.json","excerpt":"《Java编程思想》读书笔记 —— 字符串、数组及枚举类型。","covers":null,"content":"<p>《Java编程思想》读书笔记 —— 字符串、数组及枚举类型。</p><a id=\"more\"></a><h1 id=\"第13章-字符串\"><a href=\"#第13章-字符串\" class=\"headerlink\" title=\"第13章 字符串\"></a>第13章 字符串</h1><p>1.不可变的 String<br>String 对象是不可变的，每当修改 String 对象的时候，实际上都是创建了一个新的 String 对象，最初的 String 对象丝毫未动。</p><p>2.重载“+”与 StringBuilder<br>String 对象的不可变性带来一定的效率问题，例如为 String 对象重载的“+”操作符。（用于String的“+”、“+=”是 Java 中仅有的两个重载过的操作符，而 Java 并不允许程序员重载任何操作符）。</p><pre><code class=\"Java\">public class WhitherStringBuilder {\n  public String implicit(String[] fields) {\n    String result = &quot;&quot;;\n    for(int i = 0; i &lt; fields.length; i++)\n      result += fields[i];\n    return result;\n  }\n  public String explicit(String[] fields) {\n    StringBuilder result = new StringBuilder();\n    for(int i = 0; i &lt; fields.length; i++)\n      result.append(fields[i]);\n    return result.toString();\n  }\n}\n</code></pre><p>StringBuilder 提供了丰富而全面的方法，包括 append(),toString(),delete(),insert(),replace(),substring() 甚至 reverse()。</p><p>3.String 上的操作</p><p><a href=\"http://www.cnblogs.com/freeabyss/archive/2013/05/15/3187057.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Java 字符串常用操作（String类）</a></p><p>String 是固定不变的，而 StringBuffer 和 StringBuilder 可以改变它们的值。<br>二者唯一的区别是 StringBuilder 是非同步的而 StringBuffer 是同步的。</p><p>4.格式化输出</p><p>Java SE5 推出了类似 C语言中 printf() 风格的格式化输出这一功能。</p><pre><code class=\"Java\">public class SimpleFormat {\n  public static void main(String[] args) {\n    int x = 5;\n    double y = 5.332542;\n    // The old way:\n    System.out.println(&quot;Row 1: [&quot; + x + &quot; &quot; + y + &quot;]&quot;);\n    // The new way:\n    System.out.format(&quot;Row 1: [%d %f]\\n&quot;, x, y);\n    // or\n    System.out.printf(&quot;Row 1: [%d %f]\\n&quot;, x, y);\n  }\n}\n/* Output:\nRow 1: [5 5.332542]\nRow 1: [5 5.332542]\nRow 1: [5 5.332542]\n*/\n</code></pre><p>format() 和 printf() 是等价的。</p><p><strong>Formatter</strong> 看一看成一个翻译器，劲格式化字符串与数据翻译成需要的结果。</p><pre><code class=\"Java\">private Formatter f = new Formatter(System.out);\nf.format(&quot;%s The Turtle is at (%d,%d)\\n&quot;, name, x, y);\n</code></pre><p>5.正则表达式</p><p>6.扫描输入</p><p>Java SE5 新增了 Scanner 类接受任意类型的输入对象。</p><h1 id=\"第16章-数组\"><a href=\"#第16章-数组\" class=\"headerlink\" title=\"第16章 数组\"></a>第16章 数组</h1><h1 id=\"第19章-枚举类型\"><a href=\"#第19章-枚举类型\" class=\"headerlink\" title=\"第19章 枚举类型\"></a>第19章 枚举类型</h1><p>未完待续。。</p><blockquote><p>参考资料<br>1、读书笔记 JAVA编程思想 第13章 字符串 - CSDN博客<br><a href=\"http://blog.csdn.net/imaginedranges/article/details/73335553\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://blog.csdn.net/imaginedranges/article/details/73335553</a><br>2、Java 字符串常用操作（String类） - 薛遗山 - 博客园<br><a href=\"http://www.cnblogs.com/freeabyss/archive/2013/05/15/3187057.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">http://www.cnblogs.com/freeabyss/archive/2013/05/15/3187057.html</a></p></blockquote>","categories":[{"name":"移动端技术","path":"api/categories/移动端技术.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"读书笔记","path":"api/tags/读书笔记.json"},{"name":"《Java编程思想》","path":"api/tags/《Java编程思想》.json"}]}