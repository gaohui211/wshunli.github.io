{"title":"Android NDK 开发入门","slug":"Android-NDK-开发入门","date":"2018-01-19T13:00:14.000Z","updated":"2018-04-18T14:54:13.913Z","comments":true,"path":"api/articles/Android-NDK-开发入门.json","excerpt":"Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。","covers":["https://img.wshunli.com/Android/NDK/1.新建NDK项目.png","https://img.wshunli.com/Android/NDK/1.将Gradle关联到您的原生库.png"],"content":"<p>Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。<a id=\"more\"></a>在开发某些类型应用时，这有助于您重复使用以这些语言编写的代码库。</p><p>那我们为什么要使用 NDK 呢?</p><ul><li>代码的保护。由于 apk 的 Java 层代码很容易被反编译，而 C/C++ 库反汇难度较大。</li><li>可以方便地使用现存的开源库。大部分现存的开源库都是 用C/C++ 代码编写的。</li><li>提高程序的执行效率。将要求高性能的应用逻辑使用 C 开发，从而提高应用程序的执行效率。</li><li>便于移植。用 C/C++ 写得库可以方便在其他的嵌入式平台上再次使用。</li></ul><p>上述文字致谢 <a href=\"http://www.cnblogs.com/devinzhang/archive/2012/02/29/2373729.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Devin Zhang</a> 提供理论支持</p><p>本文默认已配置好 Android 开发环境，<br>关于 Android 开发环境配置可参考：<a href=\"http://www.wshunli.com/posts/f6977dbb.html\">http://www.wshunli.com/posts/f6977dbb.html</a></p><h1 id=\"NDK-环境配置\"><a href=\"#NDK-环境配置\" class=\"headerlink\" title=\"NDK 环境配置\"></a>NDK 环境配置</h1><p>1、首先应该下载 NDK</p><p>官方指定的下载地址：<a href=\"https://developer.android.google.cn/ndk/downloads/index.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://developer.android.google.cn/ndk/downloads/index.html</a></p><p>可能因为网络原因打不开，而且我们也不要那么新的。</p><p>本文以 Android NDK r10e 版本为例：</p><p>下载地址：<a href=\"https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://dl.google.com/android/repository/android-ndk-r10e-windows-x86_64.zip</a></p><p>下载好之后，解压即可，我们解压到：<code>D:\\Android\\android-ndk-r10e</code></p><p>2、和配置 Android 环境类似，配置 NDK 环境</p><p>新建变量：<code>ANDROID_NDK</code></p><pre><code class=\"TXT\">D:\\Android\\android-ndk-r10e\n</code></pre><p>在 <code>Path</code> 中添加</p><pre><code class=\"TXT\">%ANDROID_NDK%\n</code></pre><p>3、验证 NDK 环境</p><p>在 命令控制符 中输入 <code>ndk-build -version</code> 存在输出即可。</p><h1 id=\"第一个-Android-NDK-项目\"><a href=\"#第一个-Android-NDK-项目\" class=\"headerlink\" title=\"第一个 Android NDK 项目\"></a>第一个 Android NDK 项目</h1><p>在 Android Studio 中新建 Android NDK 项目特别简单，</p><p>只需在新建项目时，勾选 <code>include C++ support</code> 即可：</p><p><img src=\"https://img.wshunli.com/Android/NDK/1.新建NDK项目.png\" alt=\"1.新建NDK项目.png\"></p><p>点击运行即可看到效果：</p><p><img src=\"https://img.wshunli.com/Android/NDK/1.Screenshot_1516414188.png-hexo.png\" alt=\"1.Screenshot_1516414188.png\"></p><h1 id=\"向现有项目添加-C-C-代码\"><a href=\"#向现有项目添加-C-C-代码\" class=\"headerlink\" title=\"向现有项目添加 C/C++ 代码\"></a>向现有项目添加 C/C++ 代码</h1><p>如果您希望向现有项目添加原生代码，请执行以下步骤：</p><p>1、<a href=\"#创建新的原生源文件\">创建新的原生源文件</a>并将其添加到您的 Android Studio 项目中。</p><p>如果您已经拥有原生代码或想要导入预构建的原生库，则可以跳过此步骤。</p><p>2、<a href=\"#创建CMake构建脚本\">创建 CMake 构建脚本</a>，将您的原生源代码构建到库中。如果导入和关联预构建库或平台库，您也需要此构建脚本。</p><p>如果您的现有原生库已经拥有 <code>CMakeLists.txt</code> 构建脚本或者使用 ndk-build 并包含 Android.mk 构建脚本，则可以跳过此步骤。</p><p>3、提供一个指向您的 CMake 或 ndk-build 脚本文件的路径，<a href=\"#将Gradle关联到您的原生库\">将 Gradle 关联到您的原生库</a>。Gradle 使用构建脚本将源代码导入您的 Android Studio 项目并将原生库（SO 文件）打包到 APK 中。</p><h2 id=\"创建新的原生源文件\"><a href=\"#创建新的原生源文件\" class=\"headerlink\" title=\"创建新的原生源文件\"></a>创建新的原生源文件</h2><p>1、选择 Project 视图，在 main 目录下，新建 cpp 文件夹；</p><p>2、在 cpp 文件夹下新建 C/C++ Source File ，本文以 <code>native-lib</code> 为例。</p><p><img src=\"https://img.wshunli.com/Android/NDK/1.创建新的原生源文件.png\" alt=\"1.创建新的原生源文件.png\"></p><h2 id=\"创建CMake构建脚本\"><a href=\"#创建CMake构建脚本\" class=\"headerlink\" title=\"创建CMake构建脚本\"></a>创建CMake构建脚本</h2><p>CMake 构建脚本是一个纯文本文件，您必须将其命名为 CMakeLists.txt。</p><p>在 Android 视图下，在 app 模块下右键，新建 File，文件名为 <code>CMakeLists.txt</code>。</p><p>文件内容如下：</p><pre><code class=\"TXT\"># For more information about using CMake with Android Studio, read the\n# documentation: https://d.android.com/studio/projects/add-native-code.html\n\n# Sets the minimum version of CMake required to build the native library.\n\ncmake_minimum_required(VERSION 3.4.1)\n\n# 指示 CMake 从原生源代码创建一个原生库\nadd_library( # Sets the name of the library.\n             native-lib\n\n             # Sets the library as a shared library.\n             SHARED\n\n             # Provides a relative path to your source file(s).\n             src/main/cpp/native-lib.cpp )\n# 添加引用 NDK 库\nfind_library( # Sets the name of the path variable.\n              log-lib\n\n              # Specifies the name of the NDK library that\n              # you want CMake to locate.\n              log )\n# 关联 NDK 库\ntarget_link_libraries( # Specifies the target library.\n                       native-lib\n\n                       # Links the target library to the log library\n                       # included in the NDK.\n                       ${log-lib} )\n</code></pre><h2 id=\"将Gradle关联到您的原生库\"><a href=\"#将Gradle关联到您的原生库\" class=\"headerlink\" title=\"将Gradle关联到您的原生库\"></a>将Gradle关联到您的原生库</h2><p>在 Android 视图下，右键点击您想要关联到原生库的模块（例如 app 模块），并从菜单中选择 <code>Link C++ Project with Gradle</code>。</p><p><img src=\"https://img.wshunli.com/Android/NDK/1.将Gradle关联到您的原生库.png\" alt=\"1.将Gradle关联到您的原生库.png\"></p><p>或者手动配置：</p><pre><code class=\"Gradle\">android {\n  ...\n  defaultConfig {...}\n  buildTypes {...}\n\n  // Encapsulates your external native build configurations.\n  externalNativeBuild {\n    // Encapsulates your CMake build configurations.\n    cmake {\n      // Provides a relative path to your CMake build script.\n      path &quot;CMakeLists.txt&quot;\n    }\n  }\n}\n</code></pre><p>可选配置，可以包裹一些特定的示例代码：</p><pre><code class=\"Gradle\">android {\n    compileSdkVersion 26\n    defaultConfig {\n        ···\n        externalNativeBuild {\n            cmake {\n                cppFlags &quot;-frtti -fexceptions&quot;\n            }\n        }\n        ndk {\n            // Specifies the ABI configurations of your native\n            // libraries Gradle should build and package with your APK.\n            abiFilters &#39;x86&#39;, &#39;x86_64&#39;, &#39;armeabi&#39;, &#39;armeabi-v7a&#39;, &#39;arm64-v8a&#39;\n        }\n    }\n</code></pre><p>最后运行即可，效果是一样的。</p><h1 id=\"添加-native-方法流程\"><a href=\"#添加-native-方法流程\" class=\"headerlink\" title=\"添加 native 方法流程\"></a>添加 native 方法流程</h1><p>在 <code>MainActivity</code> 中添加 native 方法：</p><pre><code class=\"Java\">    public native void printLog();\n</code></pre><p>在 <code>native-lib.cpp</code> 中添加头文件及宏定义</p><pre><code class=\"C\">#include &lt;android/log.h&gt;\n\n#define TAG &quot;native-lib&quot;\n#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, TAG, __VA_ARGS__)\n</code></pre><p>实现 native 方法，我们这里打印个日志：</p><pre><code class=\"C\">extern &quot;C&quot;\nJNIEXPORT void JNICALL\nJava_com_wshunli_android_ndk_demo_MainActivity_printLog(JNIEnv *env, jobject instance) {\n    LOGV(&quot;log from native&quot;);\n}\n</code></pre><p>这个方法可以自动生成，在 native 方法下 <code>Alt + Enter</code> 即可。</p><p>本文源码：<a href=\"https://github.com/wshunli/android-ndk-demo\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://github.com/wshunli/android-ndk-demo</a></p><blockquote><p>参考资料<br>1、Android NDK | Android Developers<br><a href=\"https://developer.android.com/ndk/index.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://developer.android.com/ndk/index.html</a><br>2、Android-NDK入门-慕课网<br><a href=\"https://www.imooc.com/learn/411\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://www.imooc.com/learn/411</a><br>3、Android-NDK进阶-慕课网<br><a href=\"https://www.imooc.com/learn/918\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://www.imooc.com/learn/918</a><br>4、Android NDK开发(一) 入门 - 简书<br><a href=\"https://www.jianshu.com/p/0261e6cceb3e\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://www.jianshu.com/p/0261e6cceb3e</a><br>5、向您的项目添加 C 和 C++ 代码 | Android Studio<br><a href=\"https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://developer.android.com/studio/projects/add-native-code.html?hl=zh-cn</a></p></blockquote>","categories":[{"name":"移动端技术","path":"api/categories/移动端技术.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"},{"name":"NDK","path":"api/tags/NDK.json"}]}